assertEquals ( "property not set correctly" , 0.25 , bean . getDoubleProperty ( ) , 0.0001 )
Assert . assertEquals ( IntSetTestUtility . getSetBits ( ) . size ( ) , wrappedBitSetBitmapBitSet . size ( ) )
assertEquals ( httpURLConnection , delegatingConfigurationProvider . getDelegateConnection ( contentType , Collections . emptyMap ( ) ) )
assertFalse ( p1 . equals ( null ) )
assertThat ( result . isValid ( ) , is ( false ) )
assertThat ( minMax . iterativeSearchForBestMove ( board , 1 ) , anyOf ( containsString ( "0 0" ) , containsString ( "0 2" ) , containsString ( "0 3" ) , containsString ( "0 4" ) , containsString ( "0
assertEquals ( 1 , connPerRoute . getMaxPerRoute ( route ) )
Assert . assertEquals ( ( new GeometricMean ( ) ) . evaluate ( scores ) , stats . getGeoMean ( ) , 0 )
assertThat ( sortedPlugins , contains ( plugin4 ) )
XmlAssert . assertEquals ( EXPECTED_XML_RESPONSE , xmlResponse )
assertEquals ( "" , result )
Assert . assertEquals ( vector , new Vector ( 2 , 2 , 2 ) )
assertEquals ( "Triangle area is incorrect" , 0 , a , epsilon )
assertLog ( Log . DEBUG , "test debug argument argument2" )
assertSNAPSHOTPaths ( asList ( component . group ( ) , component . name ( ) , component . version ( ) ) , paths , true )
assertEquals ( "INSERT INTO custom_name_property_entity(name) VALUES(?)" , Utils . singleLine ( sql ) )
assertThat ( isValid , is ( false ) )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( ctrl . getCell ( A1 ) . getText ( ) , "A1 1" )
assertFalse ( "isLoaded should return false if not all required elements are displayed " + "and RequireAll annotation is used." , testView . isLoaded ( ) )
assertEquals ( "POINT (0 0 0)" , Evaluator . evaluate ( ex ) )
Assert . assertTrue ( this . manager . connect ( this . family1 , this . person1 ) )
assertClients ( registryAdapterService , REGISTRY_PROXY_NULL_VALUE , REGISTRY_PROXY_LIST )
assertThat ( actualBrowser , CoreMatchers . not ( isEmptyOrNullString ( ) ) )
assertEquals ( Arrays . asList ( aa , ab , ac , ba , bb ) , kittens )
assertEquals ( db . getAllLinks ( ) . size ( ) , 1 )
assertTrue ( ! result )
assertTrue ( requestImpl . xhr ( ) )
assertEquals ( 5 , result )
assertEquals ( List . of ( new Text ( "line1" ) , new Text ( "line2" ) ) , output )
assertEquals ( "Date parsing is wrong" , expectedDate , mapper . readBitemporalDate ( columns , "vt_to" ) . toDate ( ) )
assertThat ( target , is ( instanceOf ( Flow . class ) ) )
assertEquals ( 0x51 , options . getPort ( ) )
Assert . assertNull ( cGroupsBlkioResourceHandlerImpl . reacquireContainer ( containerIdMock ) )
Assert . assertEquals ( heigth , heigthEstimator . getHeigth ( ) , 0.1 )
assertTrue ( lineages . size ( ) == 5 )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isErrorEnabled ( ) )
assertTrue ( groupsManager . isGroupMember ( sess , group3 , member ) )
Assert . assertEquals ( "true" , result )
assertEquals ( set ( FlagsWithZero . V0 , FlagsWithZero . V1 , FlagsWithZero . V2 , FlagsWithZero . V4 , FlagsWithZero . V8 ) , set ( positionValues ) )
assertTrue ( brutalAds . shouldShowAds ( ) )
assertEquals ( true , m . matches ( ) )
assertThat ( updateSuccessful , equalTo ( false ) )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
assertTrue ( Arrays . equals ( data , decompressed ) )
assertEquals ( result , "String" )
paths . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( 3 , rer . getFiredRules ( ) . size ( ) )
Assert . assertFalse ( this . component . supports ( this . vocabularyInstance ) )
assertEquals ( expected , real )
assertTrue ( "Following base items are missing: " + Arrays . toString ( missing . toArray ( ) ) , missing . isEmpty ( ) )
Assert . assertTrue ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertArrayEquals ( ordered , result . toArray ( new String [ 0 ] ) )
assertEquals ( "The resource you are attempting to access cannot be found" , error . getString ( "reason" ) )
assertEquals ( "probability" , 0.01313 , probability , 0.00001 )
assertEquals ( "getNamespaces() should return the correct set of namespaces" , foo , application . getNamespaces ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><test/>" , stringifiedTestObject )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff31_" ) )
assertEquals ( expected , actual )
assertEquals ( "_cat/shards/testIndex" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertNull ( user )
assertEquals ( 501 , response . getStatus ( ) )
assertTrue ( getTaint ( bc . imei ) != 0 )
assertEquals ( expResult , result )
assertEquals ( System . getenv ( "JAVA_HOME" ) , changeLogParameters . getValue ( "JAVA_HOME" , null ) )
assertEquals ( expected , result )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( element . minimized ( ) ) , is ( PlainDate . of ( 2000 , 12 , 2 ) ) )
assertThat ( job . getDuedate ( ) , is ( addSeconds ( removalTime , START_DELAY ) ) )
assertEquals ( "A cast was found when it should not be" , 1 , java5 . parse ( code ) . findDescendantsOfType ( ASTCastExpression . class ) . size ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( PRIO_NODE , compoundWrite . childCompoundWrite ( new Path ( ".priority" ) ) . getValue ( ) )
assertEquals ( 0 , serverStatus . getTotalTime ( ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"answer\\":{\\"headers\\":{\\"P-Header\\":\\"value goes here\\",\\"Remote-Party-ID\\":\\"\\\\\\"John Doe\\\\\\"<sip:j
assertEquals ( expected , actual )
Assert . assertEquals ( uri1 , uri2 )
assertNotNull ( AdWordsServices . get ( session , AdWordsSession . class ) )
assertEquals ( ">a >b >c <c <b >d <d <a " , rec . buffer . toString ( ) )
assertEquals ( "x/y{@c}(@n = 1.0) and (@c:g = '987')" , SelectorStepBuilder . toString ( steps ) )
assertEquals ( 1 , target . getFilters ( ) . size ( ) )
Assert . assertTrue ( true )
assertEquals ( "�尖�尖�尖�尖��\\n" + "��     ��\\n" + "��
assertEquals ( 1 , ret )
assertEquals ( "Translation failed" , AuthorizationException . class , pelopsException . getClass ( ) )
assertEquals ( "Mismatched result for code=" + code , expected , crs . compareTo ( expected ) )
assertEquals ( expected , result )
Assert . assertEquals ( expectedResponse , proxy . sayHello ( message ) )
assertEquals ( val . getPeriods ( ) , 3654 )
UnitTestUtils . assertEquals ( new double [ ] { - 1 , 1 , 1 } , b . toArray ( ) , 1.0e-12 )
assertEquals ( "the NBSP must survive" , "test\\\\u00a0" , property . getValue ( ) )
assertEquals ( BigInteger . ZERO , wallet . getBalance ( ) )
assertIdentical ( "/simple_parts.owl" , unmerged )
assertResultSet ( res )
assertTrue ( GenotypeDataCompareTool . same ( genotypeData1 , genotypeData2 ) )
assertEquals ( masterRoot , fs . getFileSystem ( ) . getUri ( ) )
assertEquals ( "User data cannot be cloned" , "user" , userDataMap . get ( "user" ) )
assertEquals ( HttpStatusCode . PRECONDITION_FAILED , request . execute ( ) . getStatusCode ( ) )
response . then ( ) . log ( ) . ifValidationFails ( ) . assertThat ( )
assertEquals ( expected , actualQuery )
Assert . assertNotNull ( zoo )
assertEquals ( 5 , interfaces . size ( ) )
context . assertIsSatisfied ( )
assertTrue ( matcher . doCredentialsMatch ( token , account ) )
Assert . assertEquals ( ScheduleState . STARTED , state . getName ( ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertTrue ( verifyResult ( result ) )
assertNotNull ( fixture )
assertThat ( getProcessingError ( ) , allOf ( containsMissingStringParameterError ( "externalRestHttpsPort" ) , containsMissingStringParameterError ( "externalRestIdentitySecret" ) , containsMissingStringParameterError ( "externalOperatorCert" ) , containsMissingStringParameterError ( "externalOperator
assertEquals ( future , underTest . collect ( futures , collector ) )
assertEquals ( expected , settings . getProperties ( ) )
PSLTest . assertModel ( dataStore , input , expected )
UnitTestUtils . assertChiSquareAccept ( new String [ ] { "0" , "1" , "2" } , expected , observed , 0.01 )
assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.simplefileio.runtime.SimpleFileIODatasetRuntime" ) )
assertTrue ( sut . isEmpty ( ) )
assertEquals ( expected , actual )
assertEquals ( MAX_MESSAGES_TO_SEND_PER_THREAD + 1 , waitingPacketsQueue . size ( ) )
assertEquals ( "bound changed, event must be fired" , 1 , report . getEventCount ( EventType . UPPER_BOUND_CHANGED ) )
assertNotNull ( AuthorizedConnectApp . reader ( ) . read ( ) )
Assert . assertEquals ( truststorePath2 , System . getProperty ( "javax.net.ssl.trustStorePath" ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFLoteEnvioRetornoRecebimentoInfo ( ) . toString ( ) )
assertEquals ( unionWithStruct . size ( ) , 0 )
assertEquals ( "The records number is correct " + clusterName . getName ( ) , 2 , resultIterator . size ( ) )
assertEquals ( "" , output )
assertEquals ( 2 , ranges . size ( ) )
assertEquals ( i1 , i2 )
assertSelect ( vars , binding ( vars , csv , "\\"1\\t2\\"" ) )
assertEquals ( 0x7B , LittleEndianInputStream . wrap ( b ) . readUnsignedShort ( ) )
assertTrue ( true )
assertEquals ( "192.168.0.0/8" , configuration . getNetworkMask ( ) )
assertTrue ( uvp . getFirstData ( ) == 25.2 )
assertEquals ( "Failed to generate enum switch block" , SWITCH_BLOCK_ENUM , s )
assertEquals ( "{}" , r . toString ( ) )
assertEquals ( BPResultType . PASS , result . getResultType ( ) )
assertEquals ( - 0.123 , empty . getLatitudeError ( ) , 0.001 )
assertEquals ( 1 , listener . injectedFilters . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertTrue ( equals )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Valid cid without dash test failed." , CID_VALID , AdWordsSessionUtil . getClientCustomerId ( session ) )
assertEquals ( "pm1.g1.e1 || pm1.g1.e2" , query . getOrderByExpressions ( ) . get ( 0 ) . toString ( ) )
result . assertIsSatisfied ( 1000 )
Assert . assertEquals ( 1 , ret )
assertTrue ( preValidationFailedEx . getMessage ( ) != null )
assertEquals ( m1 , m2 )
assertNotNull ( afeTipoDescuento . getId ( ) )
context . assertTrue ( ar . succeeded ( ) )
Assert . assertEquals ( 2 , userService . getUsers ( null , roles , true , null , null ) . size ( ) )
Assert . assertTrue ( "Shutdown must be successful" , emitter . shutdown ( ) )
assertTrue ( futureDigest . digest ( ) . keyDigest ( ) . isEmpty ( ) )
assertTrue ( evaluator . shouldProxyHost ( "jenkins.io" ) )
assertThat ( path . isNormalized ( ) , is ( false ) )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( childProject1 . getCustomWorkspace ( ) , parentWorkspace )
assertEquals ( 0. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertNotNull ( result )
assertMultilinesEquals ( "Percent:  0.1  0.8\\n" + "Percent:  0.6  0.3  0.1\\n" + "Percent:  0.7   0.1\\n" , text )
assertEquals ( "tpc/bi-hourly/year=2014/month=februari/day=01/hour=2" , path )
assertThat ( actualExceptionCode , is ( "defaultExceptionCode001" ) )
assertInternalWktEqualsRegex ( "(?m)\\\\Q" + "Concat_MT[\\n" + "  Param_MT[��Affine parametric transformation��,\\n" + "    Parameter[��
assertThat ( Template . parse ( result ) . render ( ) , is ( result ) )
assertAnnotatedIgnored ( tables . at ( 0 , 2 , 0 ) )
assertEquals ( 3 , n )
assertTrue ( success )
assertEquals ( mvjs . size ( ) , 1 )
assertEquals ( 1 , properties . endpoints . size ( ) )
assertFalse ( it . hasNext ( ) )
assertEquals ( 0 , workflowTypes . size ( ) )
assertNotNull ( loop . iterator ( ) )
assertNotNull ( sealInputStream )
assertEquals ( in . toString ( ) , out . toString ( ) )
assertFalse ( b )
assertNotNull ( result )
assertNull ( prozessor . getHostname ( ) )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertEquals ( "success" , result )
assertThat ( rook , is ( board . getChessBoard ( ) [ startRow + 2 ] [ startCol + 1 ] . getFigure ( ) ) )
assertEquals ( "Name_With-Various***Characters?" , victim . readName ( ) )
assertNotNull ( result )
assertThat ( eventListener . wasCalled , IsEqual . equalTo ( false ) )
assertEquals ( Status . EXCEPTION , exchange . getOut ( ) . getHeader ( Headers . JOB_ID ) )
assertEquals ( expectedCustomer , customer )
Assert . assertEquals ( 0 , encryCredentialManager . encrypt ( null ) . length ( ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( 0 , analyser . getNumberOfPickupsAtBeginning ( route ) , 0.01 )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "testUsingCollectionHamcestMatchers.json" , result )
assertEquals ( "foo" , instance )
assertThat ( stringWriter . toString ( ) , containsString ( "theHtml" ) )
assertEquals ( "finally" , getValue ( ) )
assertFalse ( file . exists ( ) )
assertTrue ( m . find ( ) )
Assert . assertFalse ( result )
assertEquals ( "CSS link tag should be absolutified" , VisitStatus . BYPASS , getVisitStatus ( cssLink ) )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bookstore/bar" ) , newUri )
Assert . assertEquals ( Mockito . mock ( TaskManager . class ) , tested . getTaskManager ( ) )
assertEquals ( "bar" , p . deref ( ) )
assertEquals ( "{\\"a\\":0}" , n )
assertTrue ( opt . isPresent ( ) )
Assert . assertEquals ( "password" , result . trim ( ) )
assertEquals ( "T>Debug messages do not interpret emphasis" , testLog . getMessage ( ) )
Assert . assertEquals ( "No lead 'Mr. Itai Agmon' was found" , "Lead 'Mr. Itai Agmon' was found" )
assertTrue ( validator . isValid ( new Object ( ) , null ) )
assertArrayEquals ( refar , d . getResult ( ) )
assertThat ( insert . getRoutingDocument ( ) , is ( doc ) )
assertEquals ( "(int x) -> {" + CRLF + "    x * 2;" + CRLF + "}" + CRLF , CodeModelTestsHelper . toString ( aLambda ) )
assertEquals ( "indexvaluesasc:myIndex" , t . toString ( ) )
assertEquals ( "SELECT field.subField.index() FROM Class" , q . toString ( ) )
assertSame ( fieldVar , result )
assertArrayEquals ( new long [ ] { 2 , 2 , 1 , 11 , 111 , 2 , 22 , 222 , - 1 , - 1 , - 1 , 3 , 33 , 333 , ReplicaState . RBW . getValue ( ) , 4 , 44 , 444 , ReplicaState
assertTrue ( wrapper . isRunInTx ( ) )
assertEquals ( expected , ievent . getEventObj ( ) . getPayload ( ) )
assertTrue ( constraint . fulfilled ( iContext ) )
assertEquals ( HttpStatusCode . NO_CONTENT_204 , response . getStatus ( ) )
assertColumnHeaderOrder ( 0 , 1 , 2 , 3 , 4 , 5 )
sensei . assertWriteXml ( prop )
assertEquals ( "Unexpected queries executed -" , finalQueryList , dataManager . getQueries ( ) )
assertEquals ( null , result )
assertEquals ( 42 , impl . getPercentile ( 50 , now + 1 ) )
assertEquals ( 1 , list . size ( ) )
assertTrue ( "Jdbc realm should be created" , ops . exists ( TEST_JDBC_REALM_ADDRESS ) )
assertEquals ( expected , stats )
assertEquals ( 0 , call . numCloses )
assertEquals ( "Non-exposed class path resource" , classPathResource . toString ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( "IRight.m()" , new A ( ) . m ( ) )
assertTrue ( httpResponseExceptionThrown )
assertEquals ( Arrays . asList ( new ImmutablePair < String , String > ( "bar" , null ) , new ImmutablePair < String , String > ( "foo" , null ) , new ImmutablePair < String , String > ( "foo" , null ) , new ImmutablePair < String , String
assertEquals ( "" , message )
assertEqualsAndHash ( one , two )
assertThat ( isMismatch , accepts ( mismatch , theMismatch ) )
assertEquals ( "[0, 2, 4, 6, 8]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertTrue ( "Should throw NoSuchColumnFamilyException" , caughtNSCFE )
assertObjectEquals ( "{'in':'header',name:'Accept-Charset',type:'string'}" , pi )
assertEquals ( deserialized , obj )
Assert . assertTrue ( patient . equals ( patientproxyobject ) )
assertExpectedInitResult ( harness . intialize ( workspaceRoot ) )
assertArrayEquals ( new String [ ] { "-vws" , "unix/viewTag.vws" } , instance . getCommandArguments ( true , "viewTag" ) )
assertions . isNotInstanceOfAny ( null , null )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 2 , Iterators . size ( iter ) )
Assert . assertEquals ( page . getVal ( i * 8 ) , values [ i ] )
assertNotNull ( result )
assertThat ( new DOMSource ( expected ) , isEquivalentTo ( new DOMSource ( xrdsDocument ) ) )
assertEquals ( 1.0 , result , 0.1 )
assertEquals ( Arrays . asList ( "115200000" , "0" , "115200000" , "line" ) , getOutputStrings ( ) )
assertEquals ( "user1" , response )
assertEquals ( new SchemaAndValue ( schema , struct ) , avroData . toConnectData ( avroSchema , avroRecord ) )
assertEquals ( customer , responseImpl . getContent ( ) )
assertNotNull ( tg )
assertFalse ( "Should have failed to create a MapReduce command without a output ono-inline." , built )
assertNotEquals ( Movie . UNKNOWN , result )
assertTrue ( sink . getTableNames ( ) . length > 0 )
assertSame ( chatLogger , testUser . getPrivchat ( ) . getPrivchatLogger ( ) )
assertEquals ( "34 abc\\n" , found )
given ( ) . get ( url ) . then ( ) . assertThat ( )
Assert . assertEquals ( 1 , emitter . getTotalCount ( ) )
Assert . assertEquals ( "sub" , s )
assertEquals ( 1464964288L , date . getValue ( ) . longValue ( ) )
Assert . assertEquals ( 0 , drugs . size ( ) )
assertTestEvent ( event )
assertFalse ( filter . shouldInclude ( source , "some.property" ) )
assertThat ( query , is ( notNullValue ( ) ) )
assertThat ( ByteUtil . toByte ( i ) . byteValue ( ) , is ( ( byte ) 1 ) )
Assert . assertFalse ( data . isToTest ( "foo.Bar" , 3 ) )
assertNotNull ( "converter must not be null" , s )
assertEquals ( "<a><b><xxx newElementAttribute=\\"1234\\"></xxx></b></a>" , result . getResult ( ) )
assertThat ( statement . getId ( ) , nullValue ( ) )
assertThat ( "No NullPointerException not thrown or unexpected Exception thrown when PushBuilder.method()." , npeThrown . get ( ) , is ( true ) )
assertEquals ( expResult , result )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
assertThat ( future . get ( ) , allIs wellAndNothingTo see here" )
assertThat ( service . getInstanceId ( ) , is ( connectorId . toString ( ) ) )
Assert . assertNotNull ( funcionario )
assertEquals ( "TTGGGGCCTCTT" + System . lineSeparator ( ) + "TTGGGGC-TCTT" + System . lineSeparator ( ) + "TTGGGGC-TCTT" + System . lineSeparator ( ) + "TTGGGGC-TCTT
assertEquals ( 0 , objs . size ( ) )
assertEquals ( 1000 , cnt . getCount ( ) )
assertNotNull ( injectionNode )
assertMatchersEqual ( expectedBuilder . build ( ) , actualMatcher )
assertTrue ( "permission was not granted." , readAnalysisSubmissionPermission . isAllowed ( auth , 1L ) )
assertFalse ( routeSpecification . isSatisfiedBy ( itinerary ) )
assertEquals ( "Game Day!" , first . get ( ) )
Assert . assertNotNull ( cu )
assertEquals ( true , result . get ( 0 ) . getHasHumanLabels ( ) )
assertThat ( args , contains ( "repo" , "foo:1.0" ) )
assertTypeParameterIs ( ReflectionUtilTest . class )
assertEquals ( p1 , p2 )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertNotNull ( certificate . getBgpExtensions ( ) )
assertThat ( name + " has no description" , description , is ( notNullValue ( ) ) )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( 0 , latch . getCount ( ) )
assertThat ( getCompiledResult ( ) , is ( true ) )
assertThat ( u . toString ( ) , containsString ( name ) )
assertEquals ( false , result )
assertEquals ( ch , buf . getChar ( ) )
assertEqualsIgnoreLineEnding ( xmlString , "<?xml version='1.1' encoding='UTF-8'?><int64>0</int64>" )
assertTrue ( status )
YamlJsonAssert . assertEquals ( expected , actual , DocumentType . JSON )
assertThat ( ConnectionStrategy . backwardsCompatible ( usePrivateDnsName , connectUsingPublicIp , associatePublicIp ) , equalTo ( ConnectionStrategy . PUBLIC_IP ) )
assertFalse ( ( Boolean ) result )
assertTrue ( serverHandler . pollMessageCount ( 1000 , TimeUnit . MILLISECONDS ) == 1 )
assertTrue ( sink . getInvalidConfiguration ( ) )
Assert . assertTrue ( accept )
assertEquals ( node . getId ( ) , "id" )
Assert . assertTrue ( response . getCommandOutput ( ) . contains ( "Win32_BIOS not found" ) )
assertEquals ( expected , actual )
Assert . assertNotNull ( lfs )
assertEquals ( "\\"schemaName\\".\\"tableName\\"" , database . escapeTableName ( "catalogName" , "schemaName" , "tableName" ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( SimpleBigDecimalScore . of ( new BigDecimal ( "-2.4" ) ) , scoreDirector . calculateScore ( ) )
assertEquals ( 10 , classUnderTest . getContentsNbrRowsToShow ( ) )
assertArrayEquals ( expectedTlv , decodedTlv )
assertTrue ( sink . invalidConfiguration )
assertTrue ( "Expected the test to generate a grid" , checkGrid ( "Social_Profiles_Controls_Profile_Search" ) )
assertEquals ( XAdESForm . BES , f )
assertEquals ( expectedResult , entityParser . parseDatastream ( json ) )
assertThat ( res , is ( not ( 0 ) ) )
assertEquals ( expResult , result )
assertTrue ( "User's password updated successfully" , success )
context . assertIsSatisfied ( )
assertContainsRegex ( WHERE + OPEN_CURLY + ":S" + SPACE + ":P" + SPACE + var ( "o" ) + OPT_SPACE + CLOSE_CURLY , query )
Assert . assertEquals ( "SELECT UUID();" , text )
assertNotNull ( result )
assertThat ( constructorDescriptor . newInstance ( ) , instanceOf ( Resource . class ) )
assertWhoAmI ( USERNAME_CLIENT )
assertEquals ( null , result )
checker . assertEquals ( "[" + i + "]" , exp , act )
assertEquals ( socketAddress , endpoint . toInetSocketAddress ( ) )
assertTrue ( BitsLong . test ( v , true , 31 ) )
assertEquals ( "utf-8" , XmlReader . getXmlProlog ( input , guessedEncoding ) )
assertExec ( "Gives the same value" , Numbers . class , "stringToLong__ILjava_lang_String_2" , res , "123" )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolationAtActivity ( route . getActivities ( ) . get ( 2 ) , route ) , 0.01 )
assertThat ( IntervalParser . of ( DateIntervalFactory . INSTANCE , formatter , "20140227/20140514" ) . parse ( "20140227/20140514" ) , is ( interval ) )
assertThat ( logger1 . getName ( ) , is ( not ( logger2 . getName ( ) ) ) )
assertEquals ( exp , accum )
assertThat ( "Checking 6 frame translation" , protein . toString ( ) , is ( expected ) )
assertThat ( value , equalTo ( "set_VALUE_get" ) )
assertEquals ( version . hashCode ( ) , version . hashCode ( ) )
Assert . assertTrue ( result . getBean ( ) instanceof SimpleManagedBean )
assertEquals ( o , tm . getName ( ) )
assertTodo ( expected , actual )
Assert . assertTrue ( Arrays . equals ( challenge , extracted ) )
assertTrue ( amqpsProperties . equals ( mockHashMap ) )
assertTrue ( entity . equals ( loadedEntity ) )
Assert . assertEquals ( getFullClassName ( fqdnName ) , udf . getClassName ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "<http://example.org>" ) )
assertHandCount ( playerA , 0 )
assertEquals ( expected , document )
assertThat ( result , is ( false ) )
assertTrue ( true )
assertEquals ( logisticForward , sameDiffOuter . getFunction ( logisticForward ) . getName ( ) )
assertTrue ( identifier . equals ( group . getIdentifier ( ) ) )
assertThat ( mentions , hasItem ( mentionedEntity ( 0 , mention . length ( ) , EntityType . CLASS , iri ) ) )
assertThat ( sourceUri , is ( "https://bitbucket.org/grubix/git/src" ) )
assertEquals ( m ( "_" , "T" , "method" , 10L , "tstart" , 1L , "tstop" , 11L , "calls" , 3L , "begin" , m ( "_" , "B" , "clock" , 11 ) , "children
assertThat ( resources , contains ( orgId , parentOrgId , parentParentOrgId ) )
Assert . assertEquals ( TRANSLATED_MENU_CATEGORY_DESC , translation )
assertMockEndpointsSatisfied ( )
assertEquals ( "Vertical�Tab" , escaped )
assertNull ( presenter . getValue ( ) )
assertEquals ( 21 , target . getHeight ( ) )
assertEquals ( "hello" , request )
assertNotNull ( reader )
Assert . assertEquals ( "MissingSubscriptionRegistration" , matcher . group ( 1 ) )
Assert . assertEquals ( ExchangePhase . IN , exchange . getPhase ( ) )
assertNotNull ( pcrManifest )
assertTrue ( page . asText ( ) . contains ( "myDescription" ) )
assertThat ( extractMonitorables ( timerAdapter ) . get ( STDDEV ) . get ( ) , Matchers . < Object > is ( newStdDev ) )
Assert . assertThat ( jsonString , IsEqual . equalTo ( "foo\\r\\n" ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( expected , actualQuery )
assertEquals ( "Expected 1 results!" , 1 , n )
assertEquals ( "[a,1,2,b]" , buff . toString ( ) )
Assert . fail ( "Didn't get expected HPackException!" )
assertTrue ( factory instanceof ClasspathConfigFactory )
Assert . assertTrue ( Files . size ( tmfile . toPath ( ) ) > 0 )
Assert . assertEquals ( expectValue , actualValue )
assertNotNull ( PropertyUtils . getProperty ( result , "auditInfo" ) )
Assert . assertEquals ( dataHoraEvento , infoEventoCancelamento . getDataHoraEvento ( ) )
assertSame ( expected , actual )
Assert . fail ( "Caught unexpected ResourceHandlerException!" )
assertEquals ( "ubuntu" , platform . getName ( ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoPISQuantidade ( ) . toString ( ) )
assertEquals ( expected , x )
Assert . assertEquals ( jaegerConfig . getParam ( ) , 1 )
arraysWithCustomComparisonStrategy . assertIsSorted ( someInfo ( ) , actual )
assertThat ( transferSuccessful , is ( false ) )
Assert . assertTrue ( "Incorrect file types returned" , CollectionUtils . isEqualCollection ( types1 , widget . getFileTypes ( ) ) )
Assert . assertEquals ( "(nt_change_insertion (nt_range (nt_point_location (nt_base_location (nt_number 123))) _ (nt_point_location (nt_base_location (nt_number 124)))) ins)" , nt_change_
assertThat ( anyTS . isValid ( MICRO_OF_SECOND , 86399999999L ) , is ( true ) )
assertEquals ( "Mismatched message at line #" + i , message , line )
assertTrue ( Pattern . matches ( "(?s).*/component01.jsp PASSED.*" , page . asXml ( ) ) )
Assert . assertEquals ( fallbackOutput , got )
assertEquals ( expResult , result )
assertThat ( result , is ( 0 ) )
Assert . assertEquals ( objectType , generated )
assertTrue ( ! result )
assertEquals ( "Base value is not properly parsed" , "19999.9998" , parsed )
assertThat ( buffer . isReadOnly ( ) , is ( true ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( postprocessed [ i ] , row . getQuote ( ) )
Assert . assertEquals ( "PONG" , result )
editor . assertHoverContains ( "debug" , "" )
Assert . assertEquals ( false , errors . hasErrors ( ) )
Assert . assertEquals ( 2 , p . get ( "hash" ) . size ( ) )
assertEquals ( 2 , filteredTodos . size ( ) )
Assert . assertTrue ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . EDIT , this . doc ) )
assertTrue ( Arrays . equals ( etalon , array ) )
assertEquals ( numberOfCriterionsOfTypeResource - numberOfCriterionsOfTypeResourceAndWorker , criterions . size ( ) )
Assert . assertEquals ( "MAX: 10" , s )
assertThat ( statement . getReferences ( ) , is ( nullValue ( ) ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "admin" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertThat ( windows . minus ( empty ) , is ( IntervalCollection . onDateAxis ( ) ) )
assertArrayEquals ( p1 . element0 ( ) . payload ( ) . array ( ) , m2 . payload ( ) . array ( ) )
assertEquals ( "0.000000s from now (ticker=FAKE_TICKER)" , d . toString ( ) )
assertThat ( rm . matches ( mock ) , is ( true ) )
assertThat ( date , is ( PlainDate . of ( 2012 , 5 , 21 ) ) )
assertTrue ( IsEqualInternally . areEqualInternally ( expectedResult , sut . extract ( content , 0 ) ) )
assertEquals ( 0 , versionEntities . size ( ) )
assertTrue ( value . size ( ) > 0 )
assertNotNull ( solver )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
assertEquals ( pos . getIndex ( ) , 0 )
assertEqualLines ( "invalid renaming in p2" , getFileContents ( getOutputTestFileName ( type ) ) , cu . getSource ( ) )
Assert . assertTrue ( "Unexpected base address returned" , base . getAddress ( ) . equals ( new File ( testdataDirectory , "extra/xmlbase.xtm" ) ) )
assertEquals ( 250 , scorer . scorePosition ( board , context ) )
Assert . assertNotNull ( file . toString ( ) )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 1200: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 1200 )
assertEquals ( "Unsatisfied qualifier: 'java.lang.String'" , e . getMessage ( ) )
Assert . assertNull ( "There can't be active transaction here" , tm . getTransaction ( ) )
Assert . assertEquals ( versao . toString ( ) , eventoCancelamento . getVersao ( ) )
assertTrue ( executor instanceof FatGammaTxnExecutor )
context . assertEquals ( 1 , count . intValue ( ) )
assertEquals ( 500L , value . get ( ) )
assertEquals ( TEAM_CITY_URL + "/app/rest/buildTypes/id:bt296" , buildTypeUrl )
Assert . fail ( "Expected exception" )
assertThat ( result , is ( getAllFunctionsResponse ) )
assertEquals ( "BAZ" , this . fooStateFSM . getCurrentState ( fooState ) . getName ( ) )
assertTrue ( charsetPattern . matches ( "B" ) )
assertTrue ( files == null )
assertThat ( outputStream . toByteArray ( ) . length , is ( greaterThan ( 16 * 1024 * 1024 ) ) )
assertEquals ( map , map2 )
assertEquals ( "(((dependencyBuilder.input(\\"A\\").build() || dependencyBuilder.input(\\"B\\").build())" + " && (dependencyBuilder.input(\\"C\\").build() || dependencyBuilder.input(\\"D\\").build()))" , inputLogicParser .
assertEquals ( d , np . getCurrentDate ( ) )
assertEquals ( systemPropertyValue , System . getProperty ( "key1" ) )
assertEquals ( embedCode , detail . get ( "embed" ) )
Assert . assertFalse ( this . manager . remove ( this . family1 ) )
Assert . assertTrue ( getSubject ( ) . isPermitted ( "read" ) )
Assert . assertEquals ( "Hub should be able to fulfill request" , HttpServletResponse . SC_CREATED , response . getStatusCode ( ) )
Assert . assertEquals ( "codepoint [%d] == replaced [c]" , value , c )
assertAlias ( sql , columnParam , "nor" , param )
assertTrue ( errOutput , errOutput . contains ( "Space quota for COLD is 100" ) )
assertEquals ( Integer . valueOf ( 1 ) , Integer . valueOf ( list . size ( ) ) )
assertions . isInstanceOf ( String . class )
assertOrder ( order , DATA_LENGTH , comparator )
assertArrayEquals ( "HelloWorld !" . getBytes ( "UTF-8" ) , result )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( 1.5 , ed . getRealEigenvalue ( 0 ) , 1.0e-15 )
assertEquals ( Location . LOCATION_LHS_FROM_ACCUMULATE_RESULT_INSIDE , getLastIntegerValue ( parser . getEditorInterface ( ) . get ( 0 ) . getContent ( ) ) )
assertEquals ( paramList . get ( 0 ) , mockParam )
assertEquals ( removeLeadingAndTrailingSpacesOnEveryLine ( expectedLocalizedXLIFF ) , removeLeadingAndTrailingSpacesOnEveryLine ( localizedAsset ) )
assertEquals ( Arrays . asList ( parser1 , parser2 , parser3 ) , parsers )
assertTrue ( result )
assertThat ( analyzer , is ( org . apache . lucene . analysis . de . CJKAnalyzer . class ) )
assertThat ( target . getBody ( String . class ) , is ( sameInstance ( ret ) ) )
Assert . assertEquals ( "HELLO" , endpoint . session . echo ( "HELLO" ) )
objects . assertIsEqualToComparingOnlyGivenFields ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( b1 , b2 )
assertNull ( "Expected an empty list" , result )
assertEquals ( "Mismatched name" , expectedName , name )
Assert . fail ( "No movie found with id 199392" )
assertTrue ( m . nextChar ( ) != 0x00 )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( layerCnt + 1 , world . getLayers ( ) . size ( ) )
Assert . assertEquals ( 1002 , sprintService . getTeam ( 101 ) . getId ( ) )
assertEquals ( 900 , res )
assertEquals ( 0 , sorter . convertRowIndexToModel ( rows - 1 ) )
Assert . assertEquals ( 0 , vertexTraversal ( this . sqlgGraph , v1 ) . out ( "friend" ) . count ( ) . next ( ) , 0 )
assertThat ( result , is ( newPartition ( ) ) )
assertTrue ( client . getRoles ( ) . size ( ) > 0 )
assertTrue ( TClass . areEqual ( row , bindings . getRow ( 1 ) ) )
Assert . assertEquals ( "DemoBean{a=1, b=b}" , msg . toString ( ) )
context . assertTrue ( result . isEmpty ( ) )
assertTrue ( medias . size ( ) == 2 )
assertEquals ( exepcted_individual , returned_individual )
Assert . assertFalse ( "Requests with different order of Accept options must not equal!" , coapRequest1 . equals ( coapRequest2 ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "vtTo" ) )
assertThat ( clock . currentTimeInMillis ( ) , is ( SystemClock . INSTANCE . currentTimeInMillis ( ) ) )
assertEquals ( "" , result )
assertThat ( actual , instanceOf ( ExpectException . class ) )
Assert . assertFalse ( "GetMyProfile returned no results" , json . isEmpty ( ) )
Assert . assertEquals ( configNew , configOld )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertNull ( recvMessage )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertEquals ( "a/b" , r )
assertions . isSorted ( )
assertEquals ( entity . getLifecycleListeners ( ) . size ( ) + 1 , 1 )
assertThat ( bean1 . get ( "b" ) , is ( equalTo ( 1 ) ) )
Assert . assertEquals ( getElement ( "OBR.15" , "CM_SPS.3" ) , result )
assertEquals ( "Web" , bean . getApplication ( ) . asIs ( ) )
assertEquals ( tenUnits , result . size ( ) )
assertFalse ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertKernel ( kernel , CIRCLE3 , e )
Assert . assertEquals ( "3 �丕� 丿�诏乇" , t . format ( new Date ( 2629743830L * 3L ) ) )
assertEquals ( "Hello {firstName} {lastName}" , ResponseBodyInterpolator . interpolate ( "Hello {firstName} {lastName}" , req ) )
Assert . assertTrue ( stringToEncrypt . equals ( decrypted ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( jsonEqual ( expResult , EntityFormatter . writeEntity ( entity ) ) )
assertFalse ( callRequestFrame . verifyAccept ( ) )
Assert . assertNotNull ( "null result from rule" , result )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertEquals ( DataStatus . ACTIVE , empty . getStatus ( Side . STARBOARD ) )
assertThat ( databaseMapping . getPrimaryDatabase ( ) , is ( primaryDatabaseMapping ) )
Assert . assertEquals ( 0 , countryList . size ( ) )
assertNull ( channel . basicGet ( q , false ) )
assertTrue ( screenshotFile . exists ( ) )
Assert . assertEquals ( test , expected )
Assert . assertNotNull ( rb )
assertEquals ( fieldsBuilder . build ( ) . toString ( ) , result . build ( ) . toString ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( actDate . getTime ( ) , expDate . getTime ( ) )
Assert . assertEquals ( 0 , customAnnotations . size ( ) )
assertThat ( result , equalTo ( expected ) )
assertTrue ( result instanceof V8ArrayBuffer )
assertEquals ( "http://example.com?foo=foo&hoge=fuga&piyo=1" , got . toString ( ) )
UnitTestUtils . assertEquals ( "Spearman's correlation matrix" , createRealMatrix ( rData , 5 , 5 ) , correlationMatrix , 10E-15 )
Assert . assertEquals ( result . getResultSize ( ) , 10 )
assertNotNull ( result )
Assert . assertNull ( t . thread ( messages ) )
Assert . assertEquals ( 5L , result . get ( "outputVariable1" ) )
assertEquals ( String . valueOf ( delim ) , csvFormat . getDelimiter ( ) )
assertNull ( APMSpan . findPrimaryReference ( Arrays . asList ( ref1 , ref2 , ref3 , ref4 ) ) )
assertEquals ( uri , builder . build ( ) )
Assert . assertNotNull ( controllerResponse )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( date ) , mapper . readBitemporalDate ( columns , "ttFrom" ) )
assertEquals ( valueIn , valueOut )
assertEquals ( bridgeIid , Whitebox . invokeMethod ( port , "getInstanceIdentifier" , terminationPointIId ) )
assertThat ( arguments . getReadTimeoutMillis ( ) , equalTo ( 0L ) )
assertThat ( result , not ( containsString ( "<!DOCTYPE" ) ) )
assertArrayEquals ( new byte [ ] { 1 , 2 , 3 } , post . getImage ( ) )
Assert . assertEquals ( points . length * val , s , 0d )
Assert . assertNotNull ( u )
assertIdentical ( "/relax_equivalence_axioms_reasoned.obo" , reasoned )
assertEquals ( "This does not exist. Reason: TestReason" , translated )
Assert . assertEquals ( expectedText , lastAlert . getText ( ) )
assertEquals ( ifStr , "if (!(org.uberfire.security.client.authz.AuthorizationManagerHelper.authorize(\\"myfeature\\"))) {\\n" + "  return;\\n" + "}" )
assertEquals ( "number of messages" , 3 , receivedMessages . size ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "EntitySetSample" , resultQuery )
assertThat ( q , is ( TermQuery . class ) )
assertThat ( bound . valueFor ( 1 , 'b' ) , is ( value ) )
assertNull ( millis )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 3 , warnings . size ( ) )
assertFalse ( session . from ( $ ( noteVar ) ) . where ( builder . getValue ( ) ) . list ( $ ( noteVar ) ) . isEmpty ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertThat ( actual , is ( funcationMapper ) )
Assert . assertEquals ( Type . Managed , adapter . type ( ) )
assertEquals ( "/" , path . toString ( ) )
assertEquals ( Integer . valueOf ( 3 ) , Integer . valueOf ( list . size ( ) ) )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemote ( ) )
assertFalse ( metaChild . isAssignableFrom ( metaGrandparent ) )
assertNull ( nsObject )
Assert . assertEquals ( value , _context . getPropertyValue ( key ) . getValue ( ) )
assertEquals ( action . getOldValue ( ) , CompressionMethod . NULL )
assertNotNull ( patientRole )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( expectedList , sut . fetchPage ( 3 ) )
assertFalse ( map . isEmpty ( ) )
Assert . assertTrue ( cc >= 2 )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( report )
Assert . assertTrue ( fc1 != fc )
Assert . assertTrue ( isEqual ( distance , 0.6 ) )
assertEquals ( CellComparatorHelper . getSanitizedStaticValue ( cell ) , "needle" )
assertEquals ( environment . bootstrapHttpDirectPort ( ) , loader . port ( ) )
assertEquals ( "Value {\\\\" , result )
assertSame ( input , output )
Assert . assertEquals ( tag . type ( ) , TagType . FLOAT )
assertEquals ( expResult , result )
assertTrue ( victim . isEnabled ( ) )
Assert . assertEquals ( desiredOutput , output )
assertTrue ( teamExternalGroups . isEmpty ( ) )
assertNotNull ( "addon must load lf-specific icon" , UIManager . getIcon ( ColumnControlButton . COLUMN_CONTROL_BUTTON_ICON_KEY ) )
assertEquals ( EX_43_EXPECTED , hexadecimalHash )
assertArrayEquals ( excepted , actual )
assertEquals ( collectorManager1 , collectorManager2 )
Assert . assertEquals ( "yahoo" , remoteWebDriver . getTitle ( ) )
Assert . assertEquals ( 2 , a . getCbo ( ) )
Assert . assertThat ( bolt . getColumnVisibility ( ) , Is . is ( vis ) )
assertEquals ( testAlgorithm , tlsCertificateAuthorityServiceCommandLine . getKeyAlgorithm ( ) )
assertContextOk ( ctx , "O1:doc:doc" , "Hello from @{Context[\\"messageHolder\\"].name}!" , "Source" )
assertTrue ( new File ( "target/export7" ) . exists ( ) )
assertResultSet ( res )
assertTrue ( Math . abs ( dis2 ) < DELTA )
Assert . assertEquals ( Tokens . WILDCARD , RequestObjectHelper . getReturnKeys ( jsonWithNonArrayReturnKeyValue ) )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response statusText is: OK" ) ) )
Assert . assertEquals ( "test2" , testScopePath . getParent ( ) . getName ( ) )
assertEquals ( "" , c1 . combine ( c2 , messageTo ( "/foo" ) ) )
assertEquals ( new Long ( 1234 ) , longVal )
assertThat ( info . getClusterService ( CLUSTER ) , sameInstance ( currentService ) )
Assert . assertNotNull ( new Bean2BindMap ( ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 2 , JclContext . get ( "jcl2" ) . getProblems ( ) . size ( ) )
Assert . assertNotNull ( entity )
assertTrue ( aclDao . hasEntry ( principal , secureObject ) )
Assert . assertEquals ( expected , actual )
assertNull ( x )
assertThat ( TestI18n . testMessage2 . text ( "Test" , "Message" ) , is ( "Message Test" ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 4 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntry" +
assertThat ( unhandledException . getCause ( ) , sameInstance ( cause ) )
assertTrue ( mMetaManager . getTierViewsBelow ( tierAlias ) . contains ( mMetadataView . getTierView ( 0 ) ) )
Assert . assertEquals ( "org.apache.Foo" , ir . getBundle ( ) )
assertFalse ( survey . isAnswerSelected ( 1 , 1 ) )
assertTrue ( ! cs . isAfterLast ( ) )
Assert . assertEquals ( Double . class , field . getRuntimeClass ( ) )
assertEquals ( parseCalendar ( "20131104-00:00:00" , TimeZone . getTimeZone ( "US/Eastern" ) ) , dh . getCalendarAfter ( testingClock . getCurrentCalendar ( ) ) )
assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( "1234/1234567" ) )
assertArrayEquals ( new byte [ ] { - 52 , - 35 , - 121 , - 101 , 51 , 33 , - 54 , - 116 , - 31 , 126 , 40 , 7 , - 65 , - 94 , 125 , 37 , 51 , - 2 , 78 , 126 , - 8
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertThat ( indentCharacters . toString ( ) , is ( equalTo ( "      " ) ) )
assertTrue ( engine . exists ( testIndex ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 36 , 4 ) )
assertEquals ( 25 , articles . size ( ) )
assertArrayEquals ( expResult , result )
assertFalse ( ex . isPrime ( 225 ) )
runner . assertNotValid ( )
assertTrue ( vrpBuilder . getLocationMap ( ) . containsKey ( "start" ) )
assertEquals ( 0 , walEdit . size ( ) )
assertEquals ( "db_0__init.cql" , cqlMigrationResolver . extractScriptName ( new ClassPathResource ( "db/0__init.cql" , Thread . currentThread ( ) . getContextClassLoader ( ) ) ) )
Assert . assertTrue ( convertor . isPresent ( ) )
assertFalse ( CheckDetector . isPlayerJustMovedInCheck ( bitBoard ) )
assertEquals ( "ergo sum" , operation . get ( ) . getResult ( ) )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n\\tvar self = this;\\n\\tif (a)\\n\\t\\tRoyaleTest_A.base(this, 'foo');\\n}" )
assertThat ( m . matches ( ) , hasItems ( Tuple . of ( 1 , 2 ) , Tuple . of ( 3 , 4 ) ) )
Assert . assertEquals ( validSubfieldCodes , code . getValidSubfieldcodes ( ) )
assertEquals ( result , "2007-12-03_full" )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertThat ( foundClazz , nullValue ( ) )
assertNull ( tr . findCertInfo ( createCert ( false , null ) ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertThat ( f2 , sameInstance ( f1 ) )
assertEquals ( "true" , getLastRequestQuery ( ) )
assertEquals ( 3 , request . getOauthParameters ( ) . size ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( boundary , BatchParserCommon . getBoundary ( contentType , 0 ) )
assertThat ( process . getAssignedTo ( ) , is ( "name" ) )
assertFalse ( cv . supports ( Date . class ) )
assertNameAndQualifiedName ( tree , "fn" , "mod.fn" )
Assert . assertEquals ( 20 , countries . size ( ) )
assertEquals ( 123L , book . getId ( ) )
Assert . assertEquals ( DefaultHomepageImpl . class , homepage . getClass ( ) )
assertEquals ( "ab%bghi 10,ab%bcde 22,abcdf 47,ab%igkl 10," , target . toString ( ) )
assertEquals ( "YYY" , html )
assertThat ( historicJobLogExceptionStacktrace , notNullValue ( ) )
assertEquals ( i , db . getLastValue ( "TestMetric" ) )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertThat ( publicJobLink , containsString ( "eu-central-1" ) )
Assert . assertArrayEquals ( expected , left . toByteArray ( ) )
assertEquals ( expResult , result )
Assert . assertThat ( allCategories , Matchers . contains ( "categoryA" , "categoryB" , "categoryC" ) )
assertEquals ( underTest . getParameters ( ) . size ( ) , 3 )
Assert . assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertThat ( handshakeMsg . toString ( ) , is ( "HandshakeMessage [type=EC_DIFFIE_HELLMAN, keyExchangeAlgorithm=EC_DIFFIE_HELLMAN, certificateType=RAW_PUBLIC_KEY, exchangeAlgorithm=EC_DIFFIE
assertEquals ( exampleValue , resourceEditProperty . getExampleValue ( ) )
Assert . assertEquals ( 0 , children . size ( ) )
assertTrue ( reference instanceof SoftReference )
assertThat ( visibleText , is ( "foo" ) )
assertTrue ( "" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) )
assertEquals ( "Hello < There <&>" , doc . select ( "div" ) . first ( ) . text ( ) )
assertEquals ( "Trimmed result should exclude ending mutate if isFirst and !isLast" , testPair . get ( 1 ) , postProcessed )
assertThat ( response . getPersonInformationStructure ( ) . getRegularCPRPerson ( ) . getSimpleCPRPerson ( ) . getPersonNameStructure ( ) . getPersonGivenName ( ) , is ( person . getFornavn ( ) ) )
assertTrue ( schemaRegistry . getHostnameVerifier ( ) . verify ( "localhost" , "localhost" ) )
assertFalse ( isServiceReady )
this . tester . assertContains ( "<p class=\\"empty\\">blah</p>" )
assertEquals ( 2 , getPlayers ( ) . size ( ) )
assertEquals ( LogSeverity . FINE . toString ( ) , severity . toString ( ) )
assertEquals ( expectedCreator , newConceptSource . getCreator ( ) )
assertOut ( "var /** @type {number} */ a = 0xabc" )
Assert . hasText ( null , "has text" )
assertions . contains ( values )
assertEquals ( dmy , vendor . getFormatFor ( customFormatID , Locale . ENGLISH , DateFormat . LONG ) )
assertNotNull ( client )
assertEquals ( "a,b,c,d,e" , Joiner . on ( ',' ) . join ( foundOrder ) )
Assert . assertTrue ( select . execute ( ) . size ( ) == Constant . SIX )
Assert . assertFalse ( newPointAvailable )
assertEquals ( "d" , result . toString ( ) )
assertEquals ( 4 , container . indexOfId ( id ) )
assertTrue ( prot . getName ( ) . contains ( s ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertThat ( address . getHostAddress ( ) , is ( LocalPlatform . get ( ) . getAddress ( ) ) )
Assert . assertEquals ( xmlEsperado , lacre . toString ( ) )
assertEquals ( 100.0 , s . getDeliveryServiceTime ( ) , 0.01 )
assertEquals ( 2 , categories . length )
Assert . assertNotNull ( "Web Resource Folder is null" , facet . getWebResourceFolder ( ) )
assertEquals ( expectedIndex , artistIndex )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( expectedSqlForMathOperations3 ( ) , result )
assertEquals ( PERSON_COUNT , actual )
assertEquals ( "\\"a.j.\\"^^xsd:string" , name )
assertThat ( matrix . isIdentity ( ) , IsEqual . equalTo ( true ) )
assertEquals ( 0 , indexEntries . size ( ) )
assertEquals ( 0.0 , accessEgressCalc . getCosts ( iContex ) , 0.01 )
assertThat ( capturedEvents , hasItem ( mdcFormat ( "testMDCInvokeOrdered" , "foobar" ) ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertFalse ( authorizationManager . authorize ( perspective1 , user1 ) )
assertThat ( html , is ( "<select id=\\"w1\\" name=\\"w1\\"><option value=\\"value1\\" selected=\\"false\\">label1</option></select>" ) )
assertEquals ( fromObj , fromStr )
assertThat ( deserialize ( output . toByteArray ( ) ) , is ( data ) )
assertEquals ( methodVariableBindings . size ( ) , 1 )
assertEquals ( NAME_NODE , action . getNameNode ( ) )
assertNull ( wrapper . getArtist ( ) )
Assert . assertTrue ( newSql . equals ( "SELECT t.name, sum(t.price) FROM cpcplan" + suffix + " t GROUP BY t.name,t.id" ) )
assertArrayEquals ( expectedBytes , actualBytes )
Assert . assertEquals ( "MNOPRSTUVWXYZ" , text )
assertTrue ( converter . canConvert ( Index . class ) )
assertNull ( deltaClient . get ( dsRef ) )
assertThat ( axioms , hasItem ( axiom ) )
assertThat ( "No tags should have been returned." , actualTag , is ( equalTo ( expectedParseResult ) ) )
assertEquals ( "localhost:8080" , config . getKubernetesApiServerName ( ) )
Assert . assertEquals ( "Invalid csv line" , "3,NURSE0,OID0,OBSERVATION0,1" , line )
assertThat ( hasspecialchar , is ( true ) )
assertEquals ( "urn:oid:0.1.2.3" , parsed . getEntry ( ) . get ( 0 ) . getResource ( ) . getIdElement ( ) . getValue ( ) )
assertThat ( itr . hasNext ( ) , is ( false ) )
assertEquals ( 2 , list . size ( ) )
assertEquals ( 5 , css . getSeverity ( ) )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertThat ( xml , not ( containsString ( "<recipients>" ) ) )
assertEquals ( Money . of ( BigDecimal . valueOf ( 0.024d ) , "CHF" ) , BasisPoint . of ( BigDecimal . TEN ) . apply ( m ) )
assertNull ( "No conversion handler" , config . getConversionHandler ( ) )
assertThatEmbedderIs ( notAnnotated . buildEmbedder ( ) , MyEmbedder . class )
assertThat ( matcher . matches ( literal ) , is ( false ) )
assertThat ( url . toUri ( ) , is ( equalTo ( "http://localhost:3000/products?q=doni" ) ) )
Assert . assertEquals ( buff . toString ( ) , result . getContext ( ) )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertEquals ( 4 , count )
Assert . assertEquals ( "String" , name )
assertEquals ( expected . trim ( ) , output . trim ( ) )
assertEquals ( expected , found )
assertSame ( toTest , toTest . setParamsSerializer ( Serializer . class ) )
assertEquals ( expectedAgents , devExtendedMachine . getAgents ( ) )
assertTrue ( latch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( expected , actual )
assertTrue ( "Expected null result" , result == null )
assertFalse ( checker . isDetected ( ) )
assertTrue ( "Row should be wider than tree" , treeGrid . getTableWrapper ( ) . getSize ( ) . getWidth ( ) < treeGrid . getRow ( 0 ) . getSize ( ) . getWidth ( ) )
assertTrue ( j >= 0 && j <= Integer . MAX_VALUE )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( "Expected 250 results!" , 250 , rows . size ( ) )
assertThat ( result , is ( "NodeId" ) )
Assert . assertNotNull ( "no topic found with a topic name after reload" , topic )
assertNotEquals ( rootFunction . getId ( ) , overwriteFunction . getId ( ) )
assertTrue ( entry . containsBean ( "ou=system" ) )
assertTrue ( wasCalled . get ( ) )
assertEquals ( expectedResult , cut . getAliadaEventTypeFrom ( anEventTypeThatIsInCache ) )
assertEquals ( InternationalFixedDate . of ( 2012 , 7 , 5 ) , test )
assertThat ( findFeature ( featureList , "GetLocalListVersion" ) , CoreMatchers . is ( instanceOf ( GetLocalListVersionFeature . class ) ) )
assertTrue ( news . checkVisibilityFor ( moderator ) )
assertEquals ( assertion , getTest )
Assert . assertNull ( r . getRequest ( ) . getSession ( ) . getAttribute ( SEC_CONTEXT_ATTR ) )
Assert . assertArrayEquals ( new String [ ] { "bow=it" , "bow=is" , "bow=12.345" , "bow=feet" , "bow=long" } , generator . extractFeatures ( new String [ ] { "it
Assert . assertTrue ( hmd . getSoapAction ( ) . equals ( "header[SOAPAction]" ) )
assertThat ( sut . addIfNeeded ( "logger" ) , nullValue ( ) )
assertTrue ( errorsContainer . equals ( errors ) )
assertTrue ( stack2 . isEmpty ( ) )
assertEquals ( "" , result )
assertSame ( id , result )
assertEquals ( "my_silly_filename.pem" , result )
assertTrue ( em instanceof WebApplicationExceptionMapper )
assertThat ( environmentVariables . getProperty ( "webdriver.driver" ) , is ( "safari" ) )
assertThat ( reason , assumingFields ( "myPrivateMap" ) . areNotModifiedAndDoNotEscape ( ) )
assertThat ( XMLAdapter . XML_DURATION . from ( d ) , is ( Duration . ofNegative ( ) . years ( 1 ) . months ( 1 ) . days ( 10 ) . hours ( 3 ) . seconds ( 5 ) . nanos ( 123456789 ) . build ( ) ) )
assertEquals ( 2d * Math . pow ( 2 , 4 ) , e . evaluate ( ) , 0.0 )
assertEquals ( "caseTask" , activityType )
assertEquals ( "a/b" , grid . getCell ( 1 , 0 ) . getText ( ) )
assertEquals ( expectedCredential , credential )
assertThat ( "static int value" , obj , equalTo ( 4 ) )
assertEquals ( getLabel ( ) , 0.0 , eye . minus ( m3 ) . getEuklideanValue ( ) , TOLERANCE )
Assert . assertEquals ( 2 , s . x )
Assert . assertEquals ( 1 , obs . getObsId ( ) . intValue ( ) )
assertEquals ( expected , built )
Truth . assertThat ( gson . toJson ( treeMessage ) )
assertEquals ( rp , point )
assertFalse ( pair . isPresent ( ) )
assertTrue ( doc . getGrammaticalFeatures ( ) . isEmpty ( ) )
assertTrue ( seen . add ( type ) )
assertNotNull ( result )
assertThat ( interpreter , instanceOf ( InterpreterImpl . class ) )
Assert . assertEquals ( expectedOutput , output )
assertThat ( excludeSkippedAndIgnored ( outcomes ) . size ( ) , is ( 1 ) )
assertSame ( expected , future . getValue ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 3 , warnings . size ( ) )
assertEquals ( request . getCriteriasByTable ( ) . size ( ) , 1 )
assertThat ( request . getEncodedParameter ( "foo" ) , equalTo ( foobar ) )
assertEquals ( testRecords , read )
assertThat ( domainIds , is ( equalTo ( ids ) ) )
assertTrue ( fs . deleteOnExit ( path ) )
arrays . assertEndsWith ( description , new short [ 1 ] , new short [ 0 ] )
Assert . assertEquals ( "curl -X POST -L \\"X-Access-Token: __API_EXPLORER_AUTH_KEY__\\" 'person@gmail.com' 'hunter2'" , curl )
assertEquals ( TEST_CONTENT , out . toString ( ) )
assertTrue ( sqlString . contains ( "desc" ) )
assertFalse ( monitor . contains ( patch2 ) )
assertThat ( result . endsWith ( expectedString ) , is ( true ) )
assertNotNull ( slf4jInfoWriter )
Assert . assertEquals ( new HashSet < > ( Arrays . asList ( new NotNullDefinition ( "table1" ) , new NotNullDefinition ( "table2" ) , new NotNullDefinition ( "table3" ) ) ) , notNullDefinitions )
assertArrayEquals ( a , dbr . query ( "SELECT INTA FROM CA_TEST WHERE INTA = $1" , List . of ( new Object [ ] { a } ) ) . at ( 0 ) . getArray ( "inta" , short [ ] . class ) )
assertTrue ( r1 instanceof PublicCloneable )
assertRequest ( "DELETE" , "Call/%s/Record/" , callId )
assertLoadBalanced ( two . loadBalanced )
assertEquals ( expected , subject . intersection ( other ) )
Assert . assertEquals ( expected , actual )
assertTrue ( ex . isPrime ( 89 ) )
assertTrue ( result . get ( ) )
Assert . assertNotNull ( product )
Assert . assertEquals ( "GET" , s )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertTrue ( Arrays . equals ( pktSerialized , actual ) )
assertThat ( webConfig . isGWTServiceServletDefined ( ) , is ( true ) )
assertEquals ( validBytes [ i ] . length , md . getBytes ( ) . length )
assertEquals ( 1 , entities . size ( ) )
assertTrue ( entityVersion . toString ( ) . contains ( version ) )
assertTrue ( thisMetaPage . hasProperty ( RDF . type , API . ItemEndpoint ) )
assertTrue ( batteryInfos . size ( ) == 0 )
assertOutputSameTextFile ( gen , "DefineConstructor_OC.java.txt" )
assertEquals ( formatedValue , "12345-678" )
assertEquals ( true , typeUsage . isInterface ( new InFileSymbolResolver ( JdkTypeResolver . getInstance ( ) ) ) )
Assert . assertFalse ( "No configs were found" , configs . isEmpty ( ) )
assertNotNull ( claims )
Assert . assertEquals ( HttpServletResponse . SC_FORBIDDEN , response . getStatus ( ) )
Assert . assertEquals ( "sensor/sensor_create" , view )
Assert . assertNotNull ( result )
assertNull ( converter . getAsObject ( facesContext , new UIPanel ( ) , "     " ) )
assertThat ( ts . with ( PlainTime . COMPONENT . roundedToFullHour ( ) ) , is ( PlainTimestamp . of ( 2014 , 12 , 31 , 23 , 0 ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , cmpFilename , destinationFolder , "diff_" ) )
assertTrue ( items . size ( ) > 0 )
assertEquals ( 24 * 3600L * 1000L , this . policy . getMaxReservedTime ( ) )
assertEquals ( 0.5 , distance , DELTA )
assertInstanceOf ( "Expected y = -f(-x)" , ConcatenatedTransformDirect1D . class , transform )
Assert . assertTrue ( future . get ( ) )
assertTrue ( prismNormalizer != null )
assertThat ( javaTypeFinder . isTypeOf ( primitiveSubType , primitiveType ) , is ( false ) )
assertEquals ( expect , DateUtils . addTime ( start , Calendar . MONTH_OF_YEAR , 1 ) )
assertTrue ( response . contains ( "\\"cats\\"" ) )
assertEquals ( size * ( size - 1 ) / 2 , vertices . size ( ) )
assertPurge ( "check all of reservation-2 is removed" , expectedSummary . newChild ( "by-description" ) . newChild ( resv2Desc ) )
assertThat ( this . url , is ( equalTo ( "/context/dispatcher/withPathVariables" ) ) )
assertNotNull ( config )
Truth . assertThat ( counter . count ( batch ) )
assertEquals ( expectedTriggerTime , actualValue )
assertEquals ( new Dimension ( 50 , 50 ) , ac . getValue ( ) . getSize ( ) )
assertKernel ( kernel , ANNULUS , e )
assertEquals ( URL , c . url )
assertParseTree ( rootNode ( "Ben" , node ( "id" , "Ben" , "Ben" , node ( "?" , null , "@" ) , stringNode ( "tel" , "123" ) ) ) , tree )
assertEquals ( expected , actual )
assertEquals ( 0 , cookies . size ( ) )
assertEquals ( asList ( "I" , "love" , "New York" , "." ) , toText ( select ( jcas , Token . class ) ) )
assertEmptyHotspots ( samplingProfiler )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertEquals ( result , "2007-12-03" )
assertOut ( "break" )
assertThat ( result , is ( jsonNull ( ) ) )
assertThat ( name . getSegments ( ) , contains ( "_hello" ) )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertTrue ( rpbh instanceof RewriteParameterizedBatchHandler )
Assert . assertEquals ( AbstractRemoveBean . RETURN_STRING , result )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.
Assert . assertEquals ( 7 , ( ( VersionMessageWrapper ) list . get ( 0 ) ) . getMessageBuffer ( ) . readableBytes ( ) )
assertFalse ( ValidationUtils . hasValidationFailures ( vrs ) )
Assert . assertFalse ( "On ValidationException input should be invalid" , isValid )
assertEquals ( 23 , a )
Assert . assertSame ( "environment should be the same" , environment , comp . getEnvironment ( ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1_WITH_INFIX_AND_SUFFIX , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1_WITH_INFIX_AND_SUFFIX , CORRECT_
assertTrue ( logger . isWarnEnabled ( ) )
Assert . assertTrue ( t . hasOriginalTemplate ( ) )
assertEquals ( exp , res )
assertEquals ( 0 , changeSets . size ( ) )
assertTrue ( "Should not reach here" , false )
assertEquals ( new Json4SpoonGenerator ( ) . getJSONasString ( aType ) . trim ( ) , builder . build ( ) )
assertEquals ( "" , tag . getValue ( ) )
assertThat ( graphManager . getGraph ( ) . traversal ( ) . V ( ) . has ( "tim_id" , createEntity . getId ( ) . toString ( ) ) . has ( "rev_to_one" , createEntity . getRev_to_one ( ) ) . count
assertThat ( selected . entrySet ( ) , is ( empty ( ) ) )
assertTrue ( response . contains ( "I" ) )
assertEquals ( this . q2Y1900 , next )
assertEquals ( header , ContentSummary . getHeader ( false ) )
assertEquals ( 8 , countFiles ( iter ) )
assertNotNull ( proxy1 . getBackend ( identity . getBackendId ( ) ) )
Assert . assertNotNull ( savedTask )
assertThat ( result , Matchers . equalTo ( "&test1=blah1&te%3Dst2=bl%3Dah2&test3%3D=blah3&" ) )
assertEquals ( "Hi Daniel,\\n" + "\\n" + "\\n" + "\\n" + "Thank you very much for your email.\\n" + "\\n" + "\\n" + "Sincerely,\\n" + "\\n" + "
assertEquals ( 8 , s . detect ( l2 ) . val )
assertEquals ( IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( EntityNameCharType . BOUNDARY , type )
assertEquals ( database . getMetadataStore ( ) . getSchema ( ) . getName ( ) , "foo" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
shorts . assertNotLessThan ( description , actual , expected )
assertEquals ( 15 , TestUtils . getPropertyValue ( interceptor , "retryOperations.retryPolicy.traversedCause" ) )
Assert . assertEquals ( "--xxxxxxxxxxxxxxxxxxxxxxxx\\r\\n" + "Content-Disposition: multipart/form-data; name=\\"test\\"; filename=\\"hello world\\r\\n" + "--xxxxxxxxxxxxxxxxxxxxxxxxxxxx\\r\\n" + "Content
Assert . assertEquals ( expResult , result )
assertEquals ( "say:hello" , hello )
assertThat ( reader , is ( instanceOf ( JiraSearchReader . class ) ) )
assertEquals ( mockResponse , testResponse )
Assert . assertEquals ( "someBean.someProperty" , expr . asString ( ) )
assertEquals ( "{\\"@context\\":" + "{\\"@vocab\\":\\"http://schema.org/\\"," + "\\"gr\\":\\"http://purl.org/goodrelations/v1#\\"," + "\\"businessFunction\\":{\\"@type\\":\\"@vocab\\"
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertEquals ( GOLD_RESULT_ARRAY , root . getTree ( ) )
Assert . assertTrue ( methods . contains ( HttpMethod . POST ) )
Assert . assertTrue ( this . component . setCollaborators ( this . entity , collaborators ) )
Assert . assertTrue ( true )
assertSame ( GBP_2_34 , test )
assertEquals ( DecodeQualification . INTENDED , plugIn . getDecodeQualification ( path ) )
Assert . assertNotNull ( addressResultsDto )
assertThat ( model . getChildCount ( model . getRoot ( ) ) , equalTo ( 1 ) )
assertEquals ( GRADOOP_ID_VAL_8 , p . getGradoopId ( ) )
assertThat ( response . getStatus ( ) , equalTo ( 503 ) )
assertEquals ( 15 , dt . intValue ( ) )
assertThat ( target . getGoals ( ) , contains ( "first" , "second" , "third" ) )
assertNotNull ( result )
Assert . assertEquals ( expectedExceptionMessage , thrownExceptionMessage )
assertSerializeDeserialize ( agent )
assertEquals ( 7 , loader . getNumGenes ( ) )
assertTrue ( newYearsEve . isBefore ( newYearsDay ) )
assertNotNull ( "john is null" , driver . findElement ( By . id ( "john" ) ) )
assertThat ( params . isMonochrome ( ) , equalTo ( true ) )
assertEquals ( pdfboxValues , acrobatValues )
assertThat ( CryptoUtils . HEX . encode ( EXPECTED_BYTE_REPRESENTATION ) , equalTo ( CryptoUtils . HEX . encode ( signedTransaction . toByteArray ( ) ) ) )
assertThat ( intOrString1 , equalTo ( intOrString2 ) )
assertNotNull ( actual )
assertEquals ( expectedBalance , customer . getBalance ( ) , 0.001f )
assertEquals ( "bar" , rs . getString ( 1 ) )
assertArrayEquals ( new long [ ] { 0 , 0 , - 1 , - 1 , - 1 , - 1 } , blocks . getBlockListAsLongs ( ) )
assertEquals ( 0 , actual . size ( ) )
assertThat ( result , equalTo ( v ) )
Assert . assertEquals ( "" , status . getDescription ( ) )
assertThat ( result , is ( outbound ) )
assertEquals ( 5 , events . size ( ) )
assertThat ( query . toXml ( ) , is ( expected ) )
assertEquals ( false , result )
assertEquals ( 100 , res )
assertTrue ( BCrypt . checkpw ( plain , expected ) )
assertThat ( users . size ( ) , is ( 3 ) )
assertTrue ( rulesThatHadErrors . remove ( "Incoherent restrictions 8" ) )
assertEquals ( expResult , result )
assertTrue ( target . isClosed ( ) )
assertEquals ( "a<V>\\n" , found )
assertEquals ( object , index . get ( object ) )
assertEquals ( "Validation message text not correct" , "Error found for {0}" , messageText )
assertThat ( uri , is ( "/path2/path3?foo=bar&bar=baz&q1=v1&q2=v2" ) )
assertThat ( mapOutput . size ( ) , is ( 0 ) )
assertTrue ( "an=hello.wav;an=world.wav" . equals ( result ) )
assertNull ( ic . getContainerProperty ( object1 , "xyz" ) )
assertEquals ( "notok" , set1 . get ( ) . data ( ) )
assertNotEquals ( otherHashCode , foreignableFieldHashCode )
assertEquals ( expected , actual )
assertEquals ( "test" , echo . echo ( "test" ) )
testRunner . assertAllFlowFilesTransferred ( EncodeContent . REL_FAILURE , 1 )
assertEquals ( 2 , injected . getComponents ( ) . size ( ) )
assertThat ( markdown , is ( equalTo ( "```\\n" ) ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( value , payload . getStatementsAsJson ( ) . toString ( ) )
assertThat ( javaDocComment , containsString ( "(Required)" ) )
Assert . assertEquals ( "User name doesn't match" , USER_NAME_WITH_DELIMITER , info . getUser ( ) )
assertEquals ( 10 , filter . getFrom ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) <= 'literal'" ) )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
Assert . assertEquals ( 400 , response . getStatus ( ) )
Assert . assertEquals ( SIMPLE_RETURN_CODE . FAIL , check . getErrorType ( ) )
Assert . fail ( "Expected ConfigurationException" )
assertEquals ( "{\\"val\\":\\"unmarshalledJSON\\"}" , resp . getResponseBody ( ) . trim ( ) )
Assert . assertArrayEquals ( a , IntArrays . slice ( a , 0 , 3 ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertHealthCheck ( client . execute ( get ) )
Assert . assertFalse ( res . isEmpty ( ) )
assertResponseContainsModel ( "<img class=\\"componentIcon\\" src=\\"modelregistry/api/componenticon\\"/>cq:Page" , "modelName" )
assertThat ( result . getAccessTime ( ) , is ( equalTo ( 42L ) ) )
assertEquals ( "Message: /abc" , ResponseBodyInterpolator . interpolate ( "Message: [request.path]" , req ) )
Assert . assertTrue ( maxError < 0.0005 )
assertEquals ( "(x.y)" , pp . toString ( ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response6 . getResponseObject ( ) )
Assert . assertTrue ( counts . containsKey ( Jsprit . Strategy . RADIAL_BEST . toString ( ) ) )
assertEquals ( "Shouldn't change the function" , fun , result )
assertMockEndpointsSatisfied ( )
assertFalse ( connectFuture . isConnected ( ) )
Assert . assertEquals ( "arrival is not correct" , l , arrival )
assertEquals ( expResult , result )
Assert . assertNotNull ( list )
assertTrue ( set . isEmpty ( ) )
JSONAssert . assertEquals ( "Message" , new JSONArray ( Arrays . asList ( 1 , 2 , 3 ) ) , actual , false )
Assert . assertEquals ( b , a . insertColumn ( 1 , column ) )
assertEquals ( "[start:a:nsa, start:b:nsa, end:b, end:a]" , handler . history . toString ( ) )
assertTrue ( aclDao . hasEntry ( principal , secureObject ) )
Assert . assertNotNull ( mediaResult . getMediaId ( ) )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
Assert . assertFalse ( policy . isResponseCacheable ( "GET" , response ) )
assertFalse ( simple . isEmpty ( ) )
assertEquals ( "foobar" , cfg . someValue ( ) )
assertEquals ( d1 , d2 )
Assert . assertEquals ( QueryState . Status . BAD_REQUEST , state . arg1 . getStatus ( ) )
assertEqualsIgnoreMetadata ( targetCS , actualCS )
assertThat ( underTest . getDispatched ( ) . toString ( ) , containsString ( String . format ( "[%s, %s, %s]" , REPOSITORY_1 , REPOSITORY_2 , REPOSITORY_3 ) ) )
assertEquals ( 3 , cases . size ( ) )
assertTrue ( "Ldap realm should be created" , ops . exists ( TEST_LDAP_REALM_ADDRESS ) )
assertTrue ( count == msgs )
assertEquals ( "https://advertised.listener:2000/foo/bar" , url )
assertEquals ( "ReverseEngineering: \\n" + "  Catalog: null\\n" + "    Schema: null\\n" + "      IncludeTable: null\\n" + "        IncludeColumn: column1\\n" + "        IncludeColumn: column2\\n"
assertNotNull ( result )
assertEquals ( TajoDataTypes . Type . INT8 , d . type ( ) )
assertFalse ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , STARTING_BYTE_OF_3_BYTE_CHAR ) )
assertTrue ( yarnACLSetter . getACLs ( ) . isEmpty ( ) )
Assert . assertNull ( created )
assertEquals ( SecondTestListener . class , ReflectionUtils . inferParameterClass ( victim . getClass ( ) , "class" ) )
Assert . assertTrue ( jobCounts . get ( 0 ) . jobCount == 1 )
assertEquals ( expectedContinuationToken , actualContinuationToken )
assertEquals ( "foo" , proxy . interfaceMethod ( ) )
assertSample ( sample , x , y )
assertFalse ( mailSenderStub . anyMoreMessages ( ) )
Assert . assertEquals ( 5 , employees . size ( ) )
FixtureAsserts . assertStringMatchesJsonFixture ( "UpdatePurchaseOrder by admin response render to HAL+JSON" , actualResponse , "/fixtures/hal/purchase-orders/expected-admin-update-purchase-order.json" )
assertNotNull ( token )
assertThat ( response . hasNotExpired ( ) , is ( true ) )
assertEquals ( 0 , hits . totalHits )
assertEquals ( expectedQuery , actualQuery )
Assert . assertNotNull ( out . getD1 ( ) )
assertEquals ( "clearCache timeout" , latch . getCount ( ) , 0 )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Start>" + "before" + "<Child>content</Child>" + "after" + "</Start>" , builder . build ( ) . toXml ( ) )
assertEquals ( 1 , parent . children ( ) . size ( ) )
Assert . assertEquals ( cap - i , dbq . remainingCapacity ( ) )
assertEquals ( "3 渭萎谓蔚� ��喂谓 伪��" , t . format ( new Date ( 0 ) ) )
Assert . assertNull ( user )
assertThat ( archive . getEntry ( "META-INF/MANIFEST.MF" ) , nullValue ( ) )
GAssert . assertEquals ( articles , result )
assertTrue ( p . startsWith ( p . toUri ( ) ) )
Assert . assertTrue ( policy . isResponseCacheable ( request , response ) )
assertEquals ( "Bubble Chart Title" , bubbleChart . getTitle ( ) )
assertTrue ( "i=" + i + " d=" + d , ! nnList . isEmpty ( ) )
assertThat ( orderElement . getAdvancePercentage ( ) , sameValueAs ( division . divide ( 20 , 100 ) ) )
assertNotEquals ( Movie . UNKNOWN , result )
mockery . assertIsSatisfied ( )
assertTrue ( content . replaceAll ( "\\\\s+" , " " ) . contains ( "Clicked" ) )
assertEquals ( s , ps )
assertMockEndpointsSatisfied ( )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertEquals ( "Should be a big number" , distance , Geoshape . distance ( p1 , p2 ) )
assertIterators ( allExisting , allMatchingQueryParamsFilter )
assertNull ( query )
mock . assertIsSatisfied ( )
assertTrue ( response . getErrors ( ) . isEmpty ( ) )
Assert . fail ( validator . getErrors ( ) . toString ( ) )
assertSnake ( "       \\n" + "       \\n" + "   ��   \\n" + "   ��   \\n" + "   ��   \\n" + "       \\n
assertEquals ( 1 , constraints . size ( ) )
Assert . assertTrue ( body . contains ( "Bananabot/1.0" ) )
assertNotNull ( taint )
assertEquals ( replacement , response . getHeaders ( ) )
assertParseOneDoc ( editor , "DOC(0): " , "  KEY(0): hello:" , "    KEY(2): world:" , "      RAW(4): message" , "      RAW(-1): " )
Assert . assertEquals ( sendCountBefore + 1 , AlertSender . getSendCount ( ) )
assertThat ( resultCommand , is ( expectedCommand ) )
assertEquals ( grid . getRow ( 0 ) . getSize ( ) , 0 )
assertEquals ( 50. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertEquals ( 2 , IterableUtils . count ( IncludeRelationships . getInstance ( ) . getAll ( database ) ) )
assertWktEquals ( Convention . WKT2_SIMPLIFIED , "EngineeringCRS[��A spherical CRS��,\\n" + "  EngineeringDatum[��Centre
assertTrue ( "Expected validation failure but didn't" , failed )
Assert . assertEquals ( 4 , response . getEntityData ( ) . size ( ) )
assertEquals ( "Test Page" , page . asString ( ) )
assertEquals ( namedBean . getName ( ) , "John" )
Assert . assertNull ( "Candidate is not null" , candidate )
assertThat ( addressResolver . get ( ) , allOf ( notNullValue ( ) , instanceOf ( ListAddressResolver . class ) ) )
Assert . assertEquals ( - 1 , recorder . getLastInput ( ) )
assertThat ( splits , is ( correctSplits ) )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertEquals ( 0 , crossWord . getSolutionListener ( ) . solutionsNo ( ) )
assertEquals ( 3 , testResult . size ( ) )
assertions . isNotEmpty ( )
Assert . assertEquals ( LogLevel . INFO , testedStore . getProperty ( "logX" ) . getValue ( ) )
assertThat ( controller , is ( equalTo ( method ) ) )
assertEquals ( expecting , result )
Assert . assertNotNull ( one )
assertTrue ( peterRank <= 3 )
assertEquals ( 1 , daysToWorkday )
assertThat ( client . getMapping ( INDEX , TYPE ) , is ( equalTo ( getMapping ) ) )
assertTrue ( "Should match feed URI with a context root - regex is: " + targetRegex . pattern ( ) , targetRegex . matcher ( addContextRoot ( FEED ) ) . matches ( ) )
Assert . assertEquals ( false , fr . element0 ( ) . isSuccess ( ) )
Assert . assertFalse ( importer . isSame ( null , null ) )
assertTrue ( zda . toString ( ) . contains ( "ZDA,098,7.6" ) )
Assert . assertEquals ( change , updatedChange )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertNull ( "Wrong data" , builtByFactory . getData ( ) )
assertNotNull ( classUnderTest . getBundle ( ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( "(c (34 a))\\n" , found )
assertEquals ( "Method #toString is wrong" , "BlobMapper{field=field, indexed=false, sorted=true, validated=true, column=field}" , mapper . toString ( ) )
assertEquals ( msg , text . getMessage ( ) )
assertTrue ( "Something wrong. Returned wadl length is not > 0" , applicationWadl . length ( ) > 0 )
assertEquals ( 4 , ptos . bytesWritten )
assertTokensEqual ( of ( integer ( 1 ) ) , lastSeenTokens . get ( ) )
assertTrue ( ! result )
assertTrue ( convertedIteratorToList . size ( ) == 4 )
assertThat ( found , is ( true ) )
assertEquals ( 0 , error . get ( ) )
assertEquals ( Lists . newArrayList ( "2" , "4" ) , getStringsFromElements ( elements ) )
assertThat ( defaultSettings , is ( instanceOf ( UUIDSuffixSettings . class ) ) )
assertFalse ( parser . hasOption ( "a" ) )
assertEquals ( db . get ( "foo" ) , "v2" )
assertEcssEquals ( ".footer{" + "clear:none;}" + "#header{" + "margin-bottom:10px;" + "}" + "}" , convertFragment ( xcss ) )
assertEquals ( "Should get expected result" , result , filter . toString ( ) )
assertEquals ( expResult , result )
assertThat ( spiLoader , hasItem ( isA ( KinesisComponentFamilyDefinition . class ) ) )
assertTrue ( isSorted )
assertFalse ( validator . isValid ( resource , MetadataSection . PARTIES_SECTION ) )
assertEquals ( shortLine , s . getName ( ) . getShortLine ( ) )
assertEquals ( "The records number is correct " + clusterName . getName ( ) , 1 , resultIterator . size ( ) )
assertEquals ( handler . parseString ( testDate ) , test )
assertEquals ( 1L , id . getVersionIdPartAsLong ( ) . longValue ( ) )
assertEquals ( "AB" , s )
assertEquals ( "CFBundleShortVersion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_SHORT_VERSION_STRING ) )
assertEquals ( 2 , hitCount )
Assert . assertTrue ( permutations . size ( ) == inputLists . size ( ) )
assertThat ( lists . serial ( ) . size ( ) , is ( 1 ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNotNull ( processor )
assertTrue ( t . isActive ( ) )
assertThat ( values . size ( ) , is ( 2 ) )
assertTrue ( result )
assertNotNull ( dsc . getPanel ( ) )
assertThat ( underTest . matches ( condition , matcher ) , is ( true ) )
assertThat ( browsersAsXml , containsString ( "<Browser>\\n" + "<name>Chrome</name>\\n" + "<name>FireFox</name>\\n" + "<name>Internet Explorer</name>\\n" ) )
assertEquals ( 3 , tdefsRes . getBody ( ) . length )
assertArrayEquals ( expected , actual )
assertEquals ( AdWordsSession . UNKNOWN_USER_AGENT , session . getUserAgent ( ) )
assertEquals ( "Substitution was not correctly applied" , "This is a lunches lunches." , result . get ( ) )
assertEquals ( expResult , result )
assertDecimalEquals ( obv . getValue ( 9999 ) , 0 )
assertEquals ( expected , result )
assertEquals ( "WHERE id = 12345" , statement . getQuery ( ) )
Assert . assertTrue ( client . isJacksonFeatureRegistered ( ) )
Assert . assertEquals ( count , store . list . size ( ) )
assertEquals ( "select entity_0 from Entity entity_0 where ( ( entity_0.code = :code_1 ) and ( entity_0.code = :code_2 ) )" , select . getQuery ( ) )
assertNull ( v1 )
Assert . assertEquals ( "myProject" , result . getProjectName ( ) )
assertInstancesOf ( java . sql . Timestamp . class , rv )
assertEquals ( presenter . isFilterOn ( ) , true )
assertEquals ( "getVersion() doesn't return the same value as the previous getVersion()" , version , domainEntity . getVersion ( ) )
assertEquals ( "Checking inverse of subsequence" , Lists . newArrayList ( new DNASequence ( "TACG" ) , new DNASequence ( "TACG" ) ) , s . toList ( ) )
assertEquals ( "file.ttl" , fn2 )
assertRequest ( "POST" , "Verification/Address/" )
assertTrue ( ( ( NgMinProcessor ) victim ) . isSupported ( ) )
assertThatPersonIsNotProtected ( mapper ( FOR_NON_AUTORITY_CLIENT ) . map ( person , AlwaysCensorProtectedData , CPRProtectionLevel . DoNotCensorCPR ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "three" , lastElement )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
assertEquals ( 1 , ( int ) field . getFieldId ( ) )
assertEqualsJFigletSmushing ( asciiArt )
assertResultSet ( res )
assertEquals ( expected , actual )
assertEquals ( "Hello Camel in action" , reply )
assertEquals ( 5 , value . asInt ( ) )
assertEquals ( "GBP 5.90" , test . toString ( ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( expected , result )
assertThat ( timeline , is ( notNullValue ( ) ) )
Assert . assertNotNull ( drink )
assertEquals ( "alpha bravo charlie delta echo foxtrot golf hotel india juliet kilo lima" , TextHelper . textWrap ( s , TextHelper . LOCALE_ROOT ) )
assertTrue ( Files . exists ( Paths . get ( filename ) ) )
assertEquals ( "entry-" + i , entry . getEntry ( ) . getBytes ( UTF_8 ) )
assertEquals ( "Hello, world" , stripNewlines ( markup ) )
assertNotNull ( conceptService . getConceptClass ( conceptClass . getConceptClassId ( ) ) )
assertTrue ( _comp . isEquals ( json , expected ) )
Assert . assertEquals ( 1 , retVal . intValue ( ) )
spliterators . assertHasCharacteristics ( INFO , actual , DISTINCT )
Assert . assertEquals ( "Jack" , lambda . getString ( ) )
assertEquals ( DispatcherType . INCLUDE , dispatcherType )
assertEquals ( "NoViableAltException('@[1:1: Tokens : ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__47 | T
assertOut ( "/**\\n * @interface\\n * @extends {foo.bar.IB}\\n * @extends {baz.goo.IC}\\n * @extends {foo.ID}\\n */\\nIA = function() {\\n};\\n\\
assertEquals ( g1 , g2 )
assertEquals ( createdOnAsDate , patchSet . getCreatedOn ( ) )
assertArrayEquals ( new long [ ] { 1 , 2 , 3 } , result )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
Assert . assertEquals ( "Hello, World!" , bean . sayHello ( ) )
assertTrue ( "Class is abstract." , checker . isAbstract ( ) )
assertEquals ( "{\\"modules\\":[{\\"name\\":\\"tinc\\",\\"version\\":\\"1.0\\"},{\\"name\\":\\"tinc\\",\\"version\\":\\"2.0\\"}]}" , parsed )
assertEquals ( 0 , dao . delete ( ( Foo ) null ) )
assertThat ( strAction , is ( "action" ) )
assertThat ( target . validate ( ) , is ( false ) )
Assert . assertNotNull ( out . getD2 ( ) )
assertEquals ( 4 , exceptions )
assertEquals ( 1 , event . getMetricSint64 ( ) )
assertEquals ( "Expected 5 results!" , 5 , count )
assertEquals ( expected , result )
assertNull ( JSONHelper . getJsonObject ( obj ) )
assertEquals ( idGenerator . nextId ( ) , record . getId ( ) )
assertEquals ( "Failed to filter query string" , expectedResult , normalizedUrl )
Assert . fail ( "Should not have been allowed to set registry after pool started" )
assertEquals ( expected , actual )
assertNotNull ( result )
assertFalse ( account . isValid ( ) )
assertEquals ( root , intermediate . getParentTree ( ) )
Assert . assertEquals ( "username" , userName )
assertEquals ( wrapUserList . getUsers ( ) , userRoleService . getUsers ( ) . getUsers ( ) )
assertEquals ( "Table name is not equal to actual value." , "testAddIndexWithDuplicaIndexNames" , iHtd . getNameAsString ( ) )
assertEquals ( 0 , filesList . size ( ) )
assertEquals ( "array_2" , sql )
assertThat ( allEvents . stream ( ) . limit ( events . size ( ) ) . collect ( toList ( ) ) , containsInOrder ( events ) )
assertNotNull ( result )
assertEquals ( "mystream.flibble" , sn . getSourceDestinationNode ( ) . getDestinationName ( ) )
assertEquals ( conceptSets , Collections . emptyList ( ) )
assertEquals ( 4 , plugin . getConcurrentCoreCount ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , not ( hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) ) )
assertThat ( command . accept ( state ) , is ( true ) )
assertTrue ( ax . toString ( ) , ax instanceof OWLObjectPropertyDomainAxiom )
assertTrue ( "Models are not isomorphic" , isomorphic ( model1 , m ) )
assertFalse ( testing . hasNext ( ) )
assertEquals ( 1 , unassigned . size ( ) )
assertEquals ( "/topic" , m_callback . getTopic ( ) )
strings . assertStartsWith ( mock ( Description . class ) , null , "Yoda" )
assertionHelper . assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile , ( File ) destFile )
assertTrue ( serviceFacade . isAnyProcessGroupUnderVersionControl ( groupId ) )
assertEquals ( "1 year ago" , DateUtils . formatFriendlyDate ( DateUtils . nowUtc ( ) , Locale . getDefault ( ) ) )
assertEquals ( 2 , branch_conditions . size ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED_BREAK , status )
assertEquals ( mockHandler , m . getProperty ( "com.sun.xml.bind.characterEscapeHandler" ) )
assertEquals ( expected , buffer . get ( ) )
Assert . assertEquals ( "Failure for click=" + testCase [ 0 ] + ", button=" + testCase [ 1 ] + ", slot=" + testCase [ 2 ] , expected , actual )
assertOut ( "foo.bar.B[\\"b\\"] = 1" )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( "foo=bar&bar=foo" , payload . getValue ( ) )
assertAnnotationCompletions ( "@Value(\\"${data.prop2}<*>)" , "@Value(\\"${else.prop3}<*>)" , "@Value(\\"${spring.prop1}<*>)" )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue')" , transformed )
assertEquals ( "MER_RR__2P$1" , output )
assertColumnHeaderOrder ( 0 , 3 , 4 )
assertEquals ( "mockMessage" , response . getErrors ( ) . get ( "mockFiled" ) )
assertThat ( resolver . replace ( "${message-MISSING}" , true ) , is ( "MISSING" ) )
assertEquals ( "void foo(CharSequence[] args) {}" , actualContent )
assertNotNull ( "Text not translated" , transText )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
Assert . assertNotNull ( xstreamMap )
Assert . assertTrue ( exceptionMatches )
assertEquals ( "xaxbx" , ex . getUnlabeledMessage ( ) )
assertArrayEquals ( objects , result )
assertFalse ( transactionHelper . isTransactionAvailable ( ) )
assertEquals ( sb . toString ( ) , whereSb . toString ( ) )
assertThat ( ms . contains ( "aaa" ) , is ( false ) )
assertEquals ( new ObjectId ( 0x50d615d2 ) , element . getValueAsObject ( ) )
assertTrue ( Ideal . create ( eliminate ( ideal , 0 ) ) . isPrincipal ( ) )
Assert . assertNull ( "school type should be null" , result )
assertEquals ( "/protected/res/documents/index.html?focus=/protected/res/my_contracts/index.html&fragment=/contractDetails/1234567890" , affordance . expand ( args ) . getHref ( ) )
assertEquals ( 5 , timeSliceElementDecls . size ( ) )
assertTrue ( Pattern . matches ( "(?s).*/converter.jsp PASSED.*" , page . asXml ( ) ) )
Assert . assertTrue ( irodsFileForSecondaryUser . canWrite ( ) )
assertTrue ( "User could not subscribe to the list." , response )
assertEquals ( mockResponse . getStatus ( ) , response . getStatus ( ) )
assertEquals ( "Unsupported parameter test for pwd." , result )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><feed xmlns=\\"http://www.w3.org/2005/Atom\\" xmlns:td=\\"urn:ibm.com/td\\">\\r\\n   <entry>\\
Assert . assertTrue ( "Void method not supported" , adapter . supports ( endpoint ) )
assertThat ( generated . length ( ) , is ( equalTo ( length ) ) )
assertThat ( JdbcUtils . getColumnNames ( getConnectionProperties ( ) , "SOMETABLE" ) , contains ( "PID" , "TEXTCOL" ) )
assertThat ( testOutcome . getResult ( ) , is ( TestResult . SUCCESS ) )
Assert . assertEquals ( 1 , ahelper . getFailedRecords ( ) . size ( ) )
assertTrue ( selected )
assertThat ( rootNode . equals ( otherNode ) , is ( false ) )
assertEquals ( target . field , send . send ( ) )
Assert . assertEquals ( 4 , obj . getMapping ( ) . size ( ) )
assertEquals ( expectedQuery , actualQuery )
assertNotNull ( userInfo )
Assert . assertEquals ( plain , dec )
Assert . assertNotNull ( rto )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( 0 , type . getCapacityDimensions ( ) . get ( 0 ) )
assertEquals ( String . format ( "This is a look-like message, %s" , sep ) , result . get ( "message" ) )
assertTrue ( ! branch_conditions . isEmpty ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Hi commons" , sub . replace ( "Hi ${name}!" ) )
assertFalse ( results . getAttribute ( ValidationActionTypeService . VALIDATIONS_ACTION_ATTRIBUTE ) == null )
assertEquals ( jedisCluster . get ( "foo" ) , "bar" )
Assert . assertArrayEquals ( expected , ata , 1e-4f )
Assert . assertEquals ( "select * where email='test+value@usergrid.com'" , query . toString ( ) )
assertIntValues ( array , 1 , 2 , 3 , 4 , 5 , 6 )
Assert . assertNotNull ( authentication )
assertThat ( request . getAttributeNames ( ) , containsInAnyOrder ( instanceOf ( Object . class ) , instanceOf ( String . class ) ) )
assertEquals ( "123涓���浜烘��卞����" , deserialize . readUTF ( ) )
assertEquals ( 10 , entity . getField ( "priority" ) )
assertHighlighting ( 2 , 6 , 8 , STRING )
assertThat ( transformer . transform ( adminDocument ) , is ( admin ) )
assertEquals ( expected , actual )
assertFalse ( result . toString ( ) . contains ( "rdf:nodeID" ) )
assertTrue ( subject . isExportDir ( ) )
assertFalse ( object . isWeak ( ) )
assertEquals ( 2 , ektorp . getSeatedPeople ( ) . size ( ) )
assertEquals ( sb . toString ( ) , qb . prepareStatementString ( ) )
assertEquals ( 1 , repositoryService . createProcessDefinitionQuery ( ) . count ( ) )
assertEquals ( "34 abc\\n" , found )
Assert . assertEquals ( 1L , knowledgeId )
assertEquals ( 1 , count )
assertEquals ( newValue , postComment . getAttributes ( ) . get ( name ) )
assertEquals ( "2:4:6" , app . asStringNumbers ( a1 ) )
assertEquals ( 0 , i . getFlags ( ) . size ( ) )
assertNotEquals ( account . toString ( ) , customer . toString ( ) )
assertThat ( specificResourceAllocation . getParent ( ) , sameInstance ( specificResourceAllocation ) )
assertEquals ( BPResultType . FAIL , testResult . getResultType ( ) )
assertNull ( "Message was found after being deleted" , checkMessage )
assertPostCodegenRules ( mojo )
Assert . assertEquals ( "Jan" , personView . getName ( ) )
assertThat ( tuple . getCollectionOrEmpty ( "field" ) , equalTo ( value ) )
assertEquals ( expected , actual )
assertEquals ( "Not Calendar.equals: " , v1 . getDateTime ( ) , v2 . getDateTime ( ) )
assertEquals ( "+PROXY ROUTE TCP://127.0.0.1:6379 PROXYTCP://127.0.0.1:6380\\r\\n" , channel . readInbound ( ) . toString ( Charset . defaultCharset ( ) ) )
assertEquals ( 6 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertThat ( actual , is ( equalTo ( expected ) ) )
Assert . assertEquals ( 0.0 , score , 0.0 )
assertEquals ( null , DocumentUtils . getDocumentUri ( cas ) )
assertEquals ( "IDX1" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertObjectExists ( OBJ_ID )
assertThat ( formatter . format ( PlainDate . of ( 1752 , 9 , 13 ) ) , is ( "December 1752" ) )
Assert . assertTrue ( "'withtests' should contain tests." , result )
Assert . assertTrue ( FastMath . abs ( error ) < 1.0e-10 )
assertEquals ( "ereref" , Bytes . toString ( res ) )
assertThat ( target . getTime ( ) , is ( time ) )
assertThat ( subject . getRoles ( ) . size ( ) , equalTo ( 1 ) )
assertEquals ( 1 , o . importsDeclarations ( ) . count ( ) )
assertEquals ( allScanTokens . size ( ) , 2 )
assertThat ( result , is ( true ) )
assertEquals ( expected , ColumnRanges . rangeAtNode ( either ) )
assertFalse ( family1 . equals ( family2 ) )
assertAgentString ( optionsByType , "-agentpath:mylib=" , "port=8849" )
Assert . assertEquals ( "ssd" , tableName )
assertTrue ( result . success ( ) )
assertEquals ( "Row count should match" , rsMismatches . size ( ) , result )
assertFalse ( updatedTopic . userSubscribed ( user ) , UNSUBSCRIBED )
assertThat ( System . getProperty ( key ) , is ( nullValue ( ) ) )
assertTrue ( strategy . allPricesInitialized )
assertEquals ( 1 , td . getOrder ( ) )
assertTrue ( this . getMimeMailSubject ( ) . contains ( "title Branch" ) )
Assert . assertEquals ( 0 , count )
assertEquals ( 12345.0 , rtcpReceivedEvent . getRtt ( ) , 0.00001 )
assertEquals ( expected , t )
assertThat ( xmlIn , is ( not ( nullValue ( ) ) ) )
assertEquals ( zone , actualZone )
assertEquals ( "http://ci.visuwall.awired.net/job/struts/5/testReport" , testUrl )
assertThat ( str , equalTo ( "insert into UserInfo(name,age) values (?, ?)" ) )
assertEquals ( p , fromDenseRecursiveForm ( recForm , MonomialOrder . DEFAULT ) )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( output1 . getId ( ) . getIdPart ( ) , output2 . getId ( ) . getIdPart ( ) )
assertTrue ( daemon . start ( "src/test/resources/test_configurations/basic-configuration.xml" ) )
assertTrue ( Integer . valueOf ( lowestTitle . compareTo ( summary . getTitle ( ) . getTitle ( ) . getContent ( ) ) ) < 0 )
assertTreesAreEqual ( tree , roundTripped )
assertThat ( uri , is ( "/path/expectedUrl" ) )
Assert . assertNotNull ( result . getBookList ( ) )
assertEquals ( 1 , tags . size ( ) )
assertEquals ( 3 , packages . size ( ) )
assertThat ( relationEditor . isMatchingRelationName ( relation , name ) , is ( false ) )
Assert . assertTrue ( EqualsBuilder . reflectionEquals ( computeResourceDescription , savedComputeResource , "__isset_bitfield" ) )
assertNotNull ( o )
assertThat ( noAuditLogFilter . decide ( event ) , equalTo ( DENY ) )
assertThat ( thrown , instanceOf ( CursorNotFoundException . class ) )
Assert . assertEquals ( 10 , counter . getCount ( ) )
Assert . assertEquals ( "" , mailbox . getAddress ( ) )
assertTrue ( consumer . getMessages ( ) . size ( ) > 0 )
assertEquals ( expected , e . setVariable ( "x" , x ) . evaluate ( ) , 0.0 )
assertEquals ( edmType , returnedType )
assertScale ( scale ( alpha ) , scale ( alpha ) )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
Assert . assertTrue ( rep . containsKey ( "name" ) )
assertEquals ( socketAddress , readAddress )
Assert . assertEquals ( config . getSet ( ) . iterator ( ) . next ( ) . getId ( ) + "12" , config2 . getSet ( ) . iterator ( ) . next ( ) . getId ( ) )
assertFalse ( result )
assertTrue ( valid )
assertThat ( cursor . proceedTo ( 'c' ) , is ( false ) )
assertArrayEquals ( expected , bos . toByteArray ( ) )
assertEquals ( 6. * 3600. , sec , 0.01 )
assertThat ( repos , is ( empty ( ) ) )
assertTrue ( sql , sql . endsWith ( "WHERE t0.ESTIMATED_PRICE " + " BETWEEN #bind($id0 'INTEGER') AND #bind($id1 'INTEGER')" ) )
assertThat ( "validations must pass" , validation . pass ( Report . WITHOUT_WARNING ) )
assertEquals ( vars , variablesTyped )
assertions . doesNotContain ( actual . toArray ( ) )
assertThat ( initialized , is ( false ) )
Assert . assertEquals ( 2 , analyser . getLoadJustBeforeActivity ( route . getActivities ( ) . get ( 1 ) , route ) . get ( 0 ) )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertNull ( conversationIdHeader )
Assert . assertTrue ( received )
assertNotNull ( meta . getXML ( ) )
assertEquals ( nnf , comp )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getStatus ( ) )
Assert . assertThat ( dump , equalTo ( "ParenthesisTypeExpressionNode: ((user | cat) [])\\n" + "    NamedTypeExpressionNode user -> {null} (Start: 7 , End: 7, On: [artificial node])\\n" + "
assertMappedFieldValueIsCollectionWithResourcesWithPaths ( resourceTargetedByMapping . getPath ( ) )
assertEquals ( 2 , distinctAgePersons . size ( ) )
assertEquals ( true , result [ 0 ] )
assertPlanMatches ( access )
assertEquals ( 2 , deltas . size ( ) )
Assert . assertThat ( "inheritance differs" , ndInh . getPropertyValue ( id ) , not ( equalTo ( nd . getPropertyValue ( "id" ) ) ) )
assertEquals ( Tools . set ( fs . getChildren ( root ) ) . size ( ) , children . size ( ) )
Assert . assertEquals ( "I count up' the box" , this . realiser . realise ( sent ) . getRealisation ( ) )
Assert . assertEquals ( expect , actual , EPSILON )
assertEqualDoubleArrays ( pyscle , scale , epsilon )
assertThat ( event . check ( newGitHubBranchDecisionContext ( ) . withLocalBranch ( localBranch ) . withBranchTrigger ( trigger ) . withLocalRepo ( localRepo ) . withListener ( listener ) . build ( ) ) , notNullValue ( ) )
assertThat ( branches , containsInAnyOrder ( "master" ) )
assertLookup ( breaks , values , srcImg , ImageDataType . INT )
assertEquals ( "[[1,2,20,30,50],[0,2,20,30,35,40,51],sort]" , a1 . toString ( ) )
assertEquals ( NUM_TABLES * NUM_COLUMN_FAMILIES , result . size ( ) )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertThat ( payload , not ( containsString ( "alert" ) ) )
assertEquals ( "aAa" , mat . group ( ) )
assertEquals ( "V1 Track" , wrapper . getTrack ( ) )
assertEquals ( expected , actual , delta )
assertEquals ( biggestWidget ( ) . getY ( ) , gridLienzoScrollBounds . minBoundY ( ) , 0 )
assertEquals ( witnessList , tokenList )
assertEquals ( true , errors . hasFieldErrors ( "stopDatetime" ) )
assertThat ( map . get ( "a" ) , is ( nullValue ( ) ) )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( expected , actual )
assertEquals ( adminIdentity , authorizer . getInitialAdminIdentity ( ) )
assertThat ( elementFacade . isEnabled ( ) , is ( false ) )
assertEquals ( "payload" , db . getFieldValue ( 0 , FIELD_NAME ) )
assertValidationConstraint ( validator , obj , "EndBeforeStartOther" , "endOther" )
assertEquals ( r1 , r2 )
Assert . assertEquals ( String . class , t . getType ( ) )
assertThat ( seqTerminals , containsInAnyOrder ( term1 , term2 ) )
assertEquals ( null , this . consumer . get ( topic , partition , offset , maxSize ) )
assertNotNull ( result )
assertEquals ( 2 , branch_conditions . size ( ) )
Assert . assertEquals ( 2 , history . getNewRevision ( ) )
assertEquals ( "FATAL" , level . toString ( ) )
assertions . isNotLessThan ( expected )
assertEquals ( "[]" , Arrays . deepToString ( testData ) )
assertEquals ( 1 , count )
assertEquals ( DEFAULT . background ( RED ) , style )
assertThat ( ret . isSuccess ( ) , is ( true ) )
Assert . assertSame ( this . term , result )
assertHandCount ( playerA , 0 )
assertThat ( i . getClassLoader ( ) , is ( sameInstance ( props . classloader ) ) )
assertTrue ( now - timeStamp - timeSpan < 2 )
Assert . assertEquals ( "1234" , connectionString )
assertEquals ( "d6f18efa527f1bd22b4a67fc621cfbe7" , hash )
Assert . assertEquals ( buildUpExpected ( ) . toString ( ) , serializer . serialize ( testMessage ) . toString ( ) )
assertEquals ( "Cancel" , cancelledPreApproval . getApprovalCode ( ) )
assertEquals ( propertyValue , value )
context . assertIsSatisfied ( )
assertTrue ( m . getComponent ( "jmsTest" ) instanceof JMSComponent )
Truth . assertThat ( )
assertEquals ( "x" , s . get ( ) )
assertThat ( description . toString ( ) , is ( "got <2> sheet(s) expected <1>" ) )
assertEquals ( "[100, 92, 1, 0]" , a . toString ( ) )
assertEquals ( reference , toTest )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFProtocolo ( ) . toString ( ) )
Assert . assertEquals ( "Hello gradle!" , gradleMan . getMessage ( ) )
assertThat ( config , hasEntry ( CubeDockerConfiguration . DOCKER_URI , DEFAULT_DOCKER_URI ) )
assertFalse ( "No reviews!" , result . isEmpty ( ) )
assertNotNull ( fixture )
assertEquals ( "hello" , dereferenced . join ( ) )
assertProjectOut ( compiledFileNames , testDirPath )
assertEquals ( expect , result )
assertNull ( classUnderTest . getPrintXmlBean ( ) )
runner . assertAllFlowFilesTransferred ( ListenRELP . REL_SUCCESS , 0 )
Assert . assertTrue ( result . next ( ) )
assertEquals ( testName , testProfileData . getName ( ) )
assertEquals ( "something.getAnother(x, y).equals($2, '$2');" , result )
assertEquals ( 0 , attributes . size ( ) )
assertEquals ( lock . getPath ( ) , file )
assertThat ( subs , contains ( subProperty ) )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertEquals ( json , rc . getBodyAsJson ( ) )
assertTrue ( "" + mse , mse <= desiredError )
given ( ) . spec ( specs . get ( 0 ) ) . contentType ( ContentType . JSON ) . body ( "{\\"protocol\\":\\"multi-primary\\",\\"backups\\":2,\\"cache\\":{\\"enabled\\":true}}" ) . when ( ) . get ( "atomic
assertStatusIs ( findingTests ( 1 , 0 , 0 ) )
assertThat ( supplier . authForSwarm ( ) , is ( nullValue ( ) ) )
assertEquals ( "Mismatched absolute path for " + prefix , expected , actual )
assertEquals ( expected , actualQuery )
assertTrue ( "Expected all states to be enabled" , SentryStateBank . hasStatesEnabled ( TestState . COMPONENT , new HashSet < SentryState > ( Arrays . asList ( TestState . FIRST_STATE , TestState . SECOND_STATE ) ) ) )
Assert . assertTrue ( result . equals ( "10 minutes" ) )
assertEquals ( value , stat . doubleValue ( ) , 0 )
assertEquals ( 0 , latch . getCount ( ) )
Assert . assertEquals ( effective . getSpacing ( ) . getAfter ( ) . intValue ( ) , 0 )
assertNotNull ( i )
Assert . assertEquals ( 1 , o )
Assert . assertEquals ( "Invalid HUs retrieved" , Arrays . asList ( hu_bp02loc01_wh01_active ) , huSelectModel . createHUQueryBuilder ( ) . list ( ) )
assertNotNull ( scriptStatement )
assertNotNull ( result )
assertTrue ( originalMap . isEmpty ( ) )
TestHelpers . assertDeepEquals ( expected , result )
assertEquals ( 2 , jumpingOnTheCloud . getEnergyBalance ( 19 , 19 , clouds ) )
assertEquals ( 2 , foundMethods . size ( ) )
assertThat ( updatedItem . getQuantity ( ) , is ( existingItem . getQuantity ( ) ) )
assertEquals ( false , typeDefinition . isPresent ( ) )
assertNull ( harvestedCollection )
assertFalse ( vrp . getJobs ( ) . containsKey ( "4" ) )
assertEquals ( cls . getNNF ( ) , nnf )
assertThat ( cc . plus ( 38 , ChineseCalendar . Unit . WEEKS ) , is ( ChineseCalendar . of ( EastAsianYear . forGregorian ( 2017 ) , EastAsianMonth . valueOf ( 7 ) . withLeap ( ) , 7 ) ) )
assertTrue ( Arrays . containsNearby ( as , - 1 ) )
Assert . assertEquals ( false , retval )
Assert . assertEquals ( Integer . class , clazz )
assertThat ( decisionInstances . size ( ) , is ( 2 ) )
assertEquals ( "[]" , counts . toString ( ) )
assertTrue ( "Forventet minst 20 f酶dselsnumre, men fikk " + options . size ( ) , options . size ( ) > 20 )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
assertMapped ( ( Integer x ) -> x + 2 , asList ( 1 , 2 , 3 ) , asList ( 3 , 4 , 5 ) )
Assert . assertNotNull ( con )
assertEquals ( Integer . valueOf ( 200007 ) , query . select ( employee . datefield . yearWeek ( ) ) . fetchFirst ( ) )
assertEquals ( 2 , numberOfElephants )
assertSame ( expected , actual )
assertEquals ( DecodeException . class , err . getClass ( ) )
assertEquals ( "BGP Error code 2 and subcode 170 not recognized." , e . getMessage ( ) )
assertSame ( mockCause , captor . getValue ( ) )
assertThat ( getCompiledResult ( ) , is ( true ) )
assertEquals ( expectedValue , result )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertEquals ( "Application with specified UUID already exists timeout" , dupLatch . getCount ( ) , 0 )
Assert . assertEquals ( "MessageStore" , invokingMethodName . get ( ) , method . getName ( ) )
Assert . assertEquals ( "SELECT s1\\nFROM t1\\nWHERE s1 NOT IN (SELECT s1\\n\\tFROM t2);" , text )
assertEquals ( 0 , ret2 . size ( ) )
assertThat ( result . processRecordsOutput ( ) . getRecords ( ) , equalTo ( expectedRecords ) )
Assert . assertEquals ( map ( Jsr310NullKeySerializer . NULL_KEY , "test" ) , value )
assertEquals ( 204 , resp . getStatus ( ) )
assertEquals ( emailSubject , testEmail )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertTrue ( "fromBytes did not match fromBytes" , actualResult . equals ( this . actualResult ) )
assertPostFails ( "3" , role , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
context . assertIsSatisfied ( )
Assert . assertEquals ( "mapped property value" , data . myMappedProperty )
Helpers . assertJson ( Deencapsulation . invoke ( twinState , "toJsonElement" ) . toString ( ) , json )
Assert . assertEquals ( 3 , font . getCmap ( ) . getEntryCount ( ) )
assertHasMethod ( model , "com.artemis.E groups(java.lang.String[] groups)" )
assertEquals ( "Unexpected primary style name" , "v-grid" , state . primaryStyleName )
assertNotNull ( myTestFactory )
editor . assertGotoDefinition ( editor . positionOf ( "default" ) , editor . rangeOf ( "- name: some-server" , "default" ) , editor . rangeOf ( "- alias: default" , "windoze" ) , editor . rangeOf ( "- name: bad
Assert . assertEquals ( 2 , spy . getTopologies ( ) . size ( ) )
assertEquals ( "wrong text" , "Symbol1 : 1, Symbol2 : 2, Symbol3 : 3" , symbols . toString ( ) )
assertEquals ( model . getChangedProperty ( ) , "unrelated" , "Unrelated property changed" )
assertTrue ( true )
assertTrue ( "cos() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( "{\\"statusInfo\\":{\\"from\\":\\"Miguel Arlandy\\",\\"status\\":\\"Disconnected\\"}}" , jsonMessage )
assertEquals ( ( byte ) 0x5678 , hash . getByte ( ) )
Assert . assertTrue ( true )
Assert . assertTrue ( newChain instanceof FormInterceptor )
assertThat ( ReflectionTestUtils . getFieldValue ( ConsoleLogger . class , null , "fileWriter" ) , nullValue ( ) )
assertEquals ( "Test message ab c\\\\" , result )
assertTrue ( res . isEmpty ( ) )
assertThat ( context , is ( notNullValue ( ) ) )
Assert . assertEquals ( 0.0 , valueFDM [ 1 ] [ 0 ] , 1E-5 )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( BranchUtils . getHeadCommit ( "source_branch" , repo ) , BranchUtils . getHeadCommit ( "test_branch" , repo ) )
assertOut ( "var /** @type {number} */ b = a.child('child').length()" )
assertEquals ( "Select script should match expected" , expectedSelectHash ( ) , hash )
assertTrue ( graphContains ( gStore . getDefaultGraph ( ) , triple1 ) )
assertEquals ( "10" , victim . readObjectNumber ( ) )
assertEquals ( 3 , store . bytesWritten )
assertTrue ( spied . call ( ) )
assertEquals ( "/../../.." , xmldbURI . resolveContext ( uri ) . toString ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( true , classUnderTest . getShowSessionStartupTimeHint ( ) )
assertTrue ( GenericTypeReflector . equals ( expected , ClassUtils . getCommonSuperType ( Arrays . asList ( t1 , t2 ) ) ) )
assertThat ( api . getResponseReadTimeout ( ) , is ( 0 ) )
assertEquals ( expectedPemCertificate , certificate . getEncoded ( ) )
Assert . assertFalse ( allowedCRUDL )
assertThat ( cls , is ( owlThing ( ) ) )
assertTrue ( ( ( PerunBl ) perun ) . getServicesManagerBl ( ) . isServiceBlockedOnFacility ( facility1 , testService1 ) )
assertTrue ( exceptions . toString ( ) , exceptions . isEmpty ( ) )
assertEquals ( response . asString ( ) , CANCELLED , response . get ( OUTCOME ) . asString ( ) )
assertOut ( "var /** @type {number} */ a = 2147483648" )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertTrue ( version . isBeforeCurrent ( ) )
assertEquals ( expResult , result )
assertEquals ( "12345" , result )
assertTrue ( envVars . size ( ) == 0 )
assertEquals ( "Hello there^^^^" , ResponseBodyInterpolator . interpolate ( "Hello there^^^^" , req ) )
assertUndeployed ( COMPONENT_NAME )
assertEquals ( 400 , response . getStatus ( ) )
assertNotNull ( Workflow . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WQXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "" , result )
assertEquals ( "CLIENT PARALLEL 1-WAY RANGE SCAN OVER EH ['111111111111111','foo            ','2012-11-01 00:00:00.000'] - ['111111111111111','fop            ','2012-11-30 00:00
assertEquals ( "Gaming website" , doc . getContentField ( "out" ) . toString ( ) )
assertSame ( 1 , searchHistory . getLength ( ) )
assertTrue ( compressedLogFile . exists ( ) )
Assert . assertTrue ( "duplicate association role was not removed" , topicmap . getAssociations ( ) . size ( ) == 1 )
checker . assertEquals ( "[" + r + "][" + c + "]" , exp , act )
assertEquals ( body . toString ( ) , "test exception" )
assertEquals ( "48656C6C6F20576F726C64" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertThat ( taskService . createTaskQuery ( ) . taskId ( task . getId ( ) ) . taskId ( task . getId ( ) ) . count ( ) , is ( 1L ) )
assertKey ( new StringKey ( "50" ) , index . searchIndex ( new EqualsCondition ( new StringKey ( "50" ) ) , Index . NO_SEARCH_LIMIT ) )
Assert . assertTrue ( "This is a odt file, ODTReport implementation should have been resolved...." , report instanceof ODTReport )
assertThat ( listSorter . sort ( ) , equalTo ( containers ( "A" , "B" , "C" ) ) )
assertPostCodegenRules ( mojo )
assertEquals ( expected , actual )
assertEquals ( "Wrong Hadoop config" , this . configWithoutSubstitute . get ( JHAdminConfig . MR_HISTORY_DONE_DIR ) , "gs://" + DUMMY_BUCKET + "/logs/such-client/done" )
assertEquals ( "om 3 m氓neder" , t . format ( new Date ( 2629743830L * 3L ) ) )
Assert . assertFalse ( new File ( "/home/martin/tmp/dias-inst" ) . exists ( ) )
assertEquals ( "a" , result . getName ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( null , result )
assertThat ( bOut . toString ( ) , equalTo ( expectedContent ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertEquals ( 4 , results . size ( ) )
assertTrue ( parseResults . isEmpty ( ) )
Assert . assertEquals ( columnSubset . length , 0 )
Assert . assertFalse ( isValid , "PollItems have names length of less than min possible value, so it must be invalid" )
assertNull ( item . getList ( ) )
Assert . fail ( )
assertTrue ( roles . contains ( "RESOURCESELFSERVICE" ) )
assertTrue ( shouldVote )
assertThat ( listSorter . toListView ( ) , equalTo ( containers ( "A" , "C" , "D" ) ) )
assertEquals ( expected . getTime ( ) , actual . getTime ( ) )
assertEquals ( AnalysisState . ERROR , analysisSubmission . getAnalysisState ( ) )
assertNotNull ( result )
assertEquals ( expected , result )
assertCredits ( credits )
assertEquals ( "value" , "1" , config . getString ( "section4.var4" ) )
assertThat ( target . validate ( ) , is ( false ) )
assertFalse ( vw == ret )
assertTrue ( checker . isDetected ( ) )
assertThat ( c . toString ( ) , is ( "myString < aaa" ) )
Assert . assertNotNull ( browser . findElement ( By . id ( "form" ) ) )
assertEquals ( expected , actual )
assertThat ( logger . output ( ) , containsInOrder ( "BUILD STEP DURATIONS" , projectStatsLine ( "project-A1" , 0.1 , 100 ) , projectStatsLine ( "project-B1" , 2.0 , 86 ) , projectStatsLine ( "project
assertFalse ( path . isEmpty ( ) )
assertThat ( encryptedPassword , is ( nullValue ( ) ) )
assertEquals ( 0 , JedisURIHelper . getDBIndex ( uri ) )
assertEquals ( sent , received )
assertThat ( kvStore . getString ( "field" ) , equalTo ( "value" ) )
assertArrayEquals ( new Integer [ ] { 4 , 15 , 12 , 8 , 18 } , array )
assertEquals ( test , HtmlFormEntryUtil . getStringValue ( test ) )
assertEquals ( expectedSchema , schemaFromHDFS )
Assert . assertTrue ( "Model should not contain RDF type" , rdfTypes . isEmpty ( ) )
assertEquals ( null , id . getValue ( ) )
Assert . assertEquals ( 0 , sut . compare ( pmv1 , pmv2 ) )
assertEquals ( "3" , res )
context . assertIsSatisfied ( )
assertNull ( "Base for nulls is wrong" , mapper . base ( "test" , null ) )
assertEquals ( VerticalStrut . class , c . getClass ( ) )
assertTrue ( es . intersection ( s1 , s2 ) > 0 )
assertTrue ( adb == null )
assertEquals ( ImmutableList . of ( "foo" ) , evaluate ( "${iter}" , Iterable . class ) )
assertEquals ( HttpStatus . SC_OK , getStatus ( patchReq ) )
assertArrayEquals ( new String [ ] { "command" , "arg1" , "arg2" , "arg3" , "arg4" , "arg5" } , command )
assertEquals ( 2 , store . getAllIndexes ( ) . size ( ) )
assertTrue ( isValid )
assertTrue ( verify )
assertEquals ( "java/lang/Object" , classMetadata . getInterfaceName ( ) )
assertThat ( file . getAbsolutePath ( ) , is ( "/a/b/c" ) )
assertEquals ( expectedChargeMode , getTestChargingStationFromRepository ( ) . getChargeMode ( ) )
assertEquals ( "Next pause should be " + maxPause , maxPause , nextPause )
assertEquals ( 6 , result . size ( ) )
Assert . assertEquals ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( output , containsString ( "Successfully imported dataset:" ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertTrue ( "elapsed (" + elapsed + " millis) was long enough" , longEnough )
Assert . assertEquals ( "Verify default defined protocol was used" , protocol , ProtocolRegistry . DEFAULT )
assertNotEquals ( song1 , null )
assertTrue ( messageLatch . await ( 3 , TimeUnit . SECONDS ) )
Assert . assertNull ( caixa )
assertEquals ( expectedString , DhlClientLogEvent . cleanupPdfData ( originalString ) )
assertEquals ( visibility , user . getSNetVisibility ( ) )
Assert . assertEquals ( list . size ( ) , 1 )
assertNull ( subject . matchOperation ( ) )
assertNull ( argCaptor . getValue ( ) . getReplyTo ( ) )
Assert . assertEquals ( sum , 20 )
assertEquals ( TestUtil . HTTP_TEST_PROXY , result . get ( 0 ) )
assertTrue ( violated )
assertThat ( toString ( people ) , is ( equalTo ( "[Jon Doe]" ) ) )
Assert . assertEquals ( form , result )
assertFalse ( this . tlvsBuilder . augmentation ( Tlvs3 . class ) . isPresent ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( "points" , op . treeSpec )
assertTrue ( e . getMessage ( ) . contains ( "Request timeout" ) )
assertEquals ( "2012-12-21" , dt )
assertions . isNotEqualTo ( "some value" )
assertThat ( connected , is ( true ) )
assertEquals ( lookupRequest . getResponseParser ( ) . parse ( response ) , responseParser . parse ( response ) )
Assert . assertNotNull ( filter )
assertEquals ( true , typeDefinition . isPresent ( ) )
assertThat ( sub , is ( graph ) )
assertEquals ( 0 , runTool ( "-failover" , "nn1" , "nn2" , "--forcefence" ) )
assertEquals ( standardFormat . format ( number ) , number )
assertEquals ( expected , mapper . valueToTree ( resource ) )
assertEquals ( Lists . newArrayList ( e ( 1 ) ) , tree . entries ( ) . toList ( ) . toBlocking ( ) . single ( ) )
Assert . assertEquals ( expected , actual )
assertTrue ( stmt instanceof CreateSchemaNode )
assertEquals ( 1 , ( int ) diagnosis . getId ( ) )
assertEquals ( "theoneandonly@schland.de" , em . createNativeQuery ( "select email from address where id=1" ) . getResultList ( ) . get ( 0 ) . toString ( ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 0 , ti . size ( ) )
assertTrue ( results . isEmpty ( ) )
assertThat ( sheet . getRow ( 0 ) . getLastCellNum ( ) , is ( ( short ) 300 ) )
assertEquals ( autoCommitMode , serverEntityContext . getAutocommit ( ) )
assertTrue ( "namespace value in annoataion @XmlElement is not correct: " + str , str . indexOf ( "helloString/Name" ) > - 1 )
assertThat ( catalog . getCommandCount ( ) , equalTo ( 2 ) )
assertEquals ( "/profile=default/subsystem=web:read-resource" , ModelNodeOperationToCliString . convert ( op ) )
Assert . assertEquals ( "Foo Bar Resource" , textLiteralResource . resourceText ( ) )
Assert . assertTrue ( success . get ( ) )
assertEquals ( "test" , mock . oneLongArg ( value ) )
assertEquals ( expResult , result )
assertEquals ( "this.andThen(test.Person::getFirstName)::valueOf()" , CodeModelTestsHelper . toString ( aLambda ) )
assertTrue ( "non-objec method must not be invoked" , dummyHandler1 . invokeCalled )
assertEquals ( 1 , cs . getDimension ( ) )
Assert . assertEquals ( expected , expected . monic ( ) )
assertEquals ( 0 , sut . computeSearchGoalBonus ( current ) )
assertEquals ( "My comments and some more" , eval ( "cmd.comment" ) )
assertEquals ( "Debug" , conf . getName ( ) )
assertThat ( ChronoFormatter . ofPattern ( "yyyy-WEEK" , PatternType . ISO_FORMAT , Locale . ROOT , CalendarWeek . chronology ( ) ) . formatISO ( cw ) , is ( "2012-03-03" ) )
assertThat ( f . format ( m ) , is ( "Amete Mihret, 2008-03-09 09:45 pm +03:00" ) )
Assert . assertArrayEquals ( "Wrong data" , data , builtByFactory . getData ( ) )
assertEquals ( paramValue , result )
Assert . assertTrue ( isVisible ( "$_formatNumberDialog" ) )
assertThat ( taskService . createTaskQuery ( ) . taskOwner ( "demo" ) . count ( ) , is ( 1L ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( tuple . getDoubleOrDefault ( "field" , 2.5d ) , equalTo ( 2.5d ) )
assertAllCodesOfIterator ( entitySelector . endingIterator ( ) , "e1" , "e4" )
assertEquals ( 3.0 , other . mean ( ) , 0.0000001 )
assertFalse ( gizmoService . isAffectedByTheOtherTest ( ) )
assertEquals ( config . getSoLinger ( ) , acceptedConfig . getSoLinger ( ) )
assertCorrectlyStored ( permission )
assertEquals ( "test" , msg . getText ( ) )
assertEquals ( props . getProperty ( "Test Comment" ) , newProps . getProperty ( "Test Comment" ) )
assertXpathExists ( "/a:entry/m:properties" , xmlString )
Assert . assertTrue ( service . isInvoked ( ) )
assertEquals ( 2 , alternativeRoutes . size ( ) )
assertNotNull ( fso )
assertDegenerate ( scan )
assertEquals ( expected , actual )
assertCamundaInputOutputParameter ( task )
assertTrue ( ! result )
assertEquals ( "field.toUpperCase()" , p . toString ( ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertTrue ( tippyTop . getItem ( ) < 3 )
assertThat ( connection . getConnectionName ( ) , is ( dataStoreName . getName ( ) ) )
assertFalse ( allUsers . isEmpty ( ) )
Assert . assertEquals ( IOUtil . toString ( new FileInputStream ( new File ( "src/test/resources/versionInfoFileRewritten-beta-3.xml" ) . getAbsoluteFile ( ) ) , "UTF-8" ) , IOUtil . toString ( os . toByteArray ( ) ,
Assert . assertEquals ( "foo_value" , o )
assertCard ( expectedCard , "http://magiccards.info/nph/en/134.html" , expectedCard . getRarity ( ) . toDisplayName ( ) , expectedCard . getName ( ) )
assertEquals ( 5 , node1 . clusterCountKeysInSlot ( slot ) . intValue ( ) )
assertNotNull ( Alert . reader ( ) . read ( ) )
assertEquals ( "{\\"" + escaped + "\\":\\"\\\\\\\\\"}" , obj . toString ( ) )
assertTrue ( Expr . CMP_LESS == x )
assertThat ( encodingHandler . getEncoding ( ) , is ( "ISO-8859-1" ) )
assertTrue ( "Oh no! No mapped object! " , store . size ( ) > 0 )
assertTrue ( String . format ( "Expected syn ack but got %s" , synAck ) , synAck . toString ( ) . equals ( composer . getLastPacket ( ) . toString ( ) ) )
assertThat ( evaluator . evaluate ( corc ) , is ( TruthValue . NO ) )
Assert . assertNotNull ( msgResponse )
assertEquals ( "IllegalStateException: foo" , exception . getMessage ( ) )
assertTrue ( equals )
Assert . assertTrue ( "MSE = " + ( rss / n ) , ( rss / n ) < 42 )
Assert . assertEquals ( "what does Mary not eat" , this . realiser . realise ( p ) . getRealisation ( ) )
assertThat ( result , is ( packet ) )
Assert . assertTrue ( icms . isSelecionado ( ) )
assertNull ( victim . getValue ( KEY ) )
Assert . assertNull ( ModuleUtil . getModuleForPath ( path ) )
assertEquals ( "" , result )
Assert . assertTrue ( HttpTestUtils . semanticallyTransparent ( originResponse , result ) )
assertEquals ( newy , result , 0.01 )
CustomAsserts . assertEquals ( definition , expected , actual )
assertTrue ( deleted )
assertFalse ( CacheUtils . isExecutableFile ( "/test_file.txt" , cache ) )
assertScoreAndParse ( content , null , 1 )
assertEquals ( "connection test" , workspace2 . getName ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "appName should not be updated" , configuredAppName , expandedAppName )
assertEquals ( TestClass . class . getName ( ) , service . injectedLogger . getName ( ) )
assertThat ( innerRoom . getEntity ( ) . getId ( ) , is ( nullValue ( ) ) )
assertTrue ( result . size ( ) == 1 )
assertEquals ( new BigInteger ( 100 ) , fromJson )
Assert . assertEquals ( expected , actual )
assertEquals ( "snowball analyzer serialization is wrong" , expected , actual )
assertEquals ( 10 , result . getInt ( COSName . R ) )
assertNull ( reader . overflowAtoms ( ) )
assertServletWasInvokedWith ( entity )
assertEquals ( "�注�� 3 ���转" , t . format ( new Date ( 315569259747L * 3L ) ) )
assertEquals ( hashCode ( "Bazinga" ) , instance . hashCode ( ) )
assertEquals ( 123 , b . getId ( ) )
assertEquals ( 1.5656 , s . getDistance ( P0 , P1 , P2 , P3 , P4 ) , 0.00000001 )
assertNotNull ( ids )
arrays . assertContains ( description , actual , value , null )
assertThat ( actual , is ( commonPropertyType ) )
assertEquals ( 26. , violation , 0.01 )
assertEquals ( set . size ( ) , unequalInstances . size ( ) )
assertTrue ( before + " ms" , System . currentTimeMillis ( ) - ms >= 434 * 1000 )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( "Base value is not properly parsed" , "09871.9999" , parsed )
assertThat ( completableFuture . get ( ) , is ( dataObject ) )
assertEqualDoubleArrays ( pydiv , div , epsilon )
assertEquals ( "{f1:[{f1:\\"v1\\"},{f1:\\"v2\\"}]}" , expression )
assertThat ( object , is ( equalTo ( this . state ) ) )
assertEquals ( "[1, 3, 4, 5, 8, 9, 3, 989]" , res . toString ( ) )
assertThat ( mockContext . getOptimizationLevel ( ) , is ( - 1 ) )
assertEquals ( datetime , actual )
MatcherAssert . assertThat ( ( String ) FieldAccessUtil . getFieldVal ( listener , "profile" ) , is ( "testProf" ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( 4 , results . getPagedSet ( ) . size ( ) )
assertTrue ( gotException )
assertFlowState ( ACCEPTED_VOTING )
assertEquals ( value . toString ( ) , new SizeTypeNode ( testBinaryReaderBuilder . putQWord ( value ) . build ( ) , chunkHeader , parent , 4 ) . getValue ( ) )
Assert . assertFalse ( match )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( medias . size ( ) == max )
assertTrue ( result . size ( ) > 0 )
Assert . assertFalse ( syncSensorsIsRunning )
assertEquals ( "11.1.10" , result )
assertEquals ( sb . toString ( ) , param . getValue ( ) )
assertEquals ( 1 , col . count ( ) )
assertThat ( codes , containsInAnyOrder ( "43343-3" , "47239-9" ) )
assertTrue ( Arrays . contains ( argumentCaptor . getValue ( ) , entries ) )
assertEquals ( "1, 2, 3" , tree . toString ( ) )
assertThat ( isValid , is ( true ) )
Assert . assertTrue ( _constraint . isAssignmentValid ( _testNode , _testReplica , _clusterContext ) )
assertEquals ( "Integration" , this . metadataStore . get ( "HazelcastMetadataStoreTests-Spring" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
Assert . assertFalse ( schemaRegistryMultiple . equals ( createSchemaRegistry ( ) ) )
Assert . fail ( "Should have Assert.failed on the second parameter to 'starts-with' not being" + "bound." )
assertEquals ( unused , h . getUnused ( ) )
assertEquals ( exp , toString ( wa ) )
Assert . assertTrue ( SecurityUtil . isSecurityEnabled ( ) )
Assert . assertFalse ( properties . isEmpty ( ) )
assertThat ( converter . toWritableObject ( new Timestamp ( 0L ) ) , is ( ( Object ) new TimestampWritable ( new Timestamp ( 0L ) ) ) )
assertAuthenticationFailsPlusRequired ( )
assertThat ( dbName , is ( "company_project" ) )
Assert . assertEquals ( "Incorrect first dropdown label" , WMultiDropdownTestingExample . LABEL_SOME_SELECTED , component . getFirstDropdownLabel ( ) )
assertThat ( comparator . compare ( projectChange1 , projectChange2 ) , is ( 1 ) )
assertThat ( builder . getPatches ( ) , hasItemsInOrder ( "ADD /status" , "ADD /status/replicas 2" ) )
assertEquals ( "Camel rocks" , reply )
assertEquals ( "John, Paul, Ringo" , joiner . toString ( ) )
Assert . assertEquals ( "Delete_rows_event_old" , actual )
Assert . assertNotEquals ( w . hashCode ( ) , ww . hashCode ( ) )
assertThat ( MoreMapUtils . getUri ( map , KEY , null ) , is ( nullValue ( ) ) )
assertEquals ( "validating the bean" , obj , new TestBean ( ) )
Assert . assertEquals ( testInput . expectedOutput , output . toString ( ) )
assertEquals ( "<div><p>Hello</p></div><div><p>There</p></div>" , TextUtil . stripNewlines ( divs . outerHtml ( ) ) )
assertThat ( subclassOf , equalTo ( false ) )
BeanAssert . assertBeanEquals ( new FlexiBean ( ) , parsed )
assertEquals ( 0 , ranking . getNumberOfSubFronts ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( expected , actual )
assertTrue ( true )
Assert . assertEquals ( "viewId=3" , viewInstance . get ( YarnWebParams . APP_ID ) )
Assert . fail ( )
assertEquals ( 0 , scores . getScore ( ) )
assertEquals ( LogLevel . TRACE , sub . getLevel ( ) )
assertEquals ( ApiStatus . SUCCESS , response . getMeta ( ) . getStatus ( ) )
assertNotNull ( result )
Assert . assertNotNull ( conf . get ( "hibernate.templates.class" ) )
assertThat ( result , is ( expected ) )
Assert . assertEquals ( "This is the plain text message" , s )
assertEquals ( V8Value . DOUBLE , doublesArray . getType ( ) )
assertTrue ( "Result should be empty object" , result . length ( ) == 0 )
Assert . assertEquals ( ( Integer ) 1 , sync ( queue1 . poll ( 10 , TimeUnit . SECONDS ) ) )
assertEquals ( encoder . encode ( binaryMessage ) , message )
Assert . areEqual ( true , countA == 0 && countB == 10 , "验证优先级的写" )
assertThat ( spec , is ( 1 ) )
assertTrue ( p . apply ( tree ) )
Assert . assertTrue ( "DateIndexTableConfigHelper.setup threw the expected exception, but the message was not the expected message." , msg . startsWith ( "No Such Table: " ) )
assertNotNull ( result )
assertEquals ( lista . get ( nRows - 1 ) . getEmpresa ( ) . getId ( ) , descripcion )
assertEqualRevisionLists ( revisionsAll , tmrpAll . revisions , "all-bugs" )
assertFalse ( "Files should not be different" , duplicateFinder . isSame ( a , b ) )
assertEquals ( d_drug . toString ( ) , pm1 . getNameModel ( ) . getValue ( ) )
assertThat ( tsp . toString ( ) + " => " + Double . toString ( delta ) , delta < 1.0 , is ( true ) )
Assert . fail ( "Expection expected" )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Response>" + "Hey no tags!" + "</Response>" , elem . toXml ( ) )
assertEquals ( 1 , message . getMessageId ( ) )
assertEquals ( tag , messageArgumentCaptor . getValue ( ) . getTags ( ) )
assertEquals ( 6 , composite . shrink ( random , 7 ) )
assertFalse ( command . valid ( options , optionParser ) )
Assert . assertEquals ( "V6uoqOm7esGRqm20VvMz" , entries . get ( 0 ) . getPassword ( ) )
assertEquals ( 2 , notes . size ( ) )
runner . assertNotValid ( )
Assert . assertNull ( oembedService . executeRequest ( request ) )
assertEquals ( k , f . getClass ( ) )
assertConsoleOutputContains ( "clear screen." )
assertEquals ( "foo=baz" , actualMetricId . getTags ( ) )
this . assertLoadBlob ( departments , false , true )
assertEqualsIgnoreWhitespace ( original , result )
assertEquals ( 1 , v )
assertEquals ( exepcted_individual , returned_individual )
assertNull ( "Analyzer must be null" , mapper . analyzer )
assertFalse ( lfs . util ( ) . exists ( p ) )
assertEquals ( value , user . get ( key , name ) )
assertEquals ( 3 , Iterables . size ( filteredWords ) )
assertThat ( actualBranchNames , containsInAnyOrder ( "groupOne" , "B" ) )
Assert . assertTrue ( Arrays . equals ( expected , actual ) )
assertTrue ( result instanceof JMXMonCollector )
assertNotNull ( error )
assertEquals ( r1 , r2 )
TestHelpers . assertDeepEquals ( expected , snap . getValue ( ) )
assertEquals ( "calling: fooMethod(2 arguments: second=v2)" , message )
assertNotNull ( cifStream )
Assert . assertEquals ( expected , MustacheTemplatePrefixExpander . expand ( input ) )
this . assertIndices ( im ( 0 , 0 ) , im ( 1 , 1 ) , im ( - 1 , 2 ) , im ( 2 , 3 ) , im ( 3 , 4 ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( "numhits is wrong" , 3015 , res . getNumhits ( ) . intValue ( ) )
Assert . assertEquals ( expectedDouble , result , 0.001 )
assertThat ( kvStore . getListOrDefault ( "field" , value ) , equalTo ( value ) )
assertEquals ( GradoopId . get ( ) , emptyId )
Assert . assertEquals ( research . getTemplateId ( ) , template2Id )
assertEquals ( "bar" , ss . getDefaultJob ( ) . get ( "foo" ) )
assertTrue ( ipMatcher . match ( "172.16.255.255" ) )
assertFalse ( sut . failed ( ) )
assertEquals ( dto . getFirstName ( ) , proxy . getAttribute ( "firstName" ) )
assertEquals ( result . getId ( ) , device . getId ( ) )
Assert . assertNotNull ( o )
assertEquals ( false , result )
assertEquals ( 0 , attribsSet . size ( ) )
assertTrue ( Pattern . matches ( "(?s).*<object .* name=\\"value\\".*</object>.*$" , result ) )
Assert . assertTrue ( Math . abs ( now . getTime ( ) - n . getTime ( ) ) < 500 * 1000 )
Assert . assertEquals ( ref , f . taylor ( dx , dy , dz ) , 2.0e-15 )
Assert . assertTrue ( servlet . isDebugMode ( ) )
assertNull ( providerRole )
assertJson ( "{'value2': 'foo'}" , serialize ( bean ) )
assertTrue ( interceptor . method ( context ) instanceof SimpleInterceptor )
assertTrue ( "Treatment should not have been applied" , treated . getBody ( ) . containsKey ( "schoolYearAttendance" ) )
assertEquals ( metadata . getClass ( ) , memoryCopyResultSet . getMetaData ( ) . getClass ( ) )
assertEquals ( "public static final NumericProperty<Integer> TEST = PropertyFactory.createNumeric(\\"test\\", int.class);" , definition )
assertEquals ( diameter , 0.0 )
assertEquals ( 48 , size )
Assert . assertEquals ( 3.0 , svd . getConditionNumber ( ) , 1.5e-15 )
assertThat ( tableCount , is ( 0 ) )
assertEquals ( "abc\\n" , found )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
Assert . assertEquals ( a2 . getCity ( ) , person3 . getWorkAddress ( ) . getCity ( ) )
assertThat ( handler , is ( instanceOf ( FederatedHMSHandler . class ) ) )
assertions . endsWith ( sequence )
assertEquals ( expected , result )
assertArrayEquals ( new String [ ] { "abc" } , a )
assertThatBuildSucceeded ( )
assertEquals ( exitVal , fixture . getExitVal ( ) )
assertEquals ( 4 , numberOfFriends )
assertEquals ( 3 , fromBase64 . size ( 0 ) )
assertEquals ( in , out )
Assert . fail ( "Deberia haber saltado un AOFormatFileException" )
assertEquals ( "searchQuery must not be empty" , e . getMessage ( ) )
assertEquals ( "" , result )
assertTrue ( doTest ( dynamicQuery , query ) )
Assert . assertTrue ( ! counts . containsKey ( Jsprit . Strategy . RADIAL_BEST ) )
assertEquals ( expectedColumn1 , actualUniqueColumnCombination . getColumnIdentifier ( ) )
assertFalse ( "Expected ListSchema boolean validation failure did not succeed" , schema . validate ( booleanEntity ) )
assertions . doesNotContain ( values )
Assert . assertEquals ( icmsSetado , icms . getIcmssn102 ( ) )
assertEquals ( "some input file \\n with another line" , helper . getOutputAsString ( ) )
assertThat ( track . getName ( ) , is ( "The Saint" ) )
assertEquals ( options , new UpdateOptions ( options . toJson ( ) ) )
assertThat ( expression . getExpression ( ) , is ( "This is a string expression." ) )
assertThat ( get , isAllowed ( ) )
assertTrue ( filter . isDetected ( ) )
Assertions . assertFalse ( result )
assertTrue ( calculatorPanel . getTextBox ( ) . textEquals ( "5" ) )
assertEquals ( "" , testUrlDecode . getValue ( context ) )
assertNull ( "The context should be null." , context )
Assert . assertEquals ( Servlet . SUCCESS , res )
assertNotNull ( AssignedAddOn . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "PNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( getContents ( root , "nested_inheritance.txt" ) , sw . toString ( ) )
assertGeometryEquals ( expected , actual , STRICT , STRICT )
assertTrue ( result )
assertThat ( factory . create ( value ) , hasContent ( uuid . toString ( ) ) )
assertSearchYields ( index , "foo:aaa" , "fooaaa" )
assertEquals ( 4 , batchPlanSteps . size ( ) )
assertEquals ( 1 , observation . getCode ( ) . getCoding ( ) . get ( 0 ) . getExtension ( ) . size ( ) )
assertFalse ( condition . accept ( null , null , attribs ) )
assertTrue ( actionItems . size ( ) == 1 )
assertThat ( confirmation . getCurrentTime ( ) , equalTo ( now ) )
assertEquals ( type , JdbcUtils . ColumnType . INTEGER )
assertTrue ( plan . requiresTransaction ( true ) )
assertEquals ( expected , result )
assertEquals ( expected , actual )
Assert . assertNotNull ( metadataDescriptor . createMetadata ( ) )
assertTrue ( AcceptanceTestUtil . isInterested ( component , dscTestStub . getDeploymentID ( ) . getServiceID ( ) , dsAcceptanceUtil . getDiscoveryServiceDeployment ( component ) . getDeploymentID ( ) ) )
assertThat ( "Method with no parameters is processed incorrectly" , title , equalTo ( MessageFormat . format ( TITLE_STRING_WITH_PARAMS , args ) ) )
Assert . assertEquals ( infoEventoRetorno , retorno . getInfoEventoRetorno ( ) )
assertNumEquals ( numOf ( Math . log ( 90d / 104 ) ) , esCriterion . calculate ( series , tradingRecord ) )
assertTrue ( twoFactorAuthenticationManager . isValidVerificationCode ( code , 2FA , secret ) )
assertFalse ( result . passedValidation ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( packageName , ReflectionUtil . getPackageName ( this . getClass ( ) . getPackage ( ) ) )
XMLAssert . assertXMLEqual ( loadXML ( ORDER_ACK_XML ) , result . getOwnerDocument ( ) )
assertFalse ( resultMessage ( result , HttpRequestType . POST ) , result . passedValidation ( ) )
assertEquals ( "two septillion" , actual )
Assert . assertEquals ( "[AND,field:selector][posFilter: filter(true, AND, field, fn(xxx,yyy))]" , luceneParser . parse ( "field:selector AND #include(field, fn(xxx,yyy))" ) . getContents ( ) )
assertEquals ( expected , pointOfFailure . toString ( ) )
Assert . assertArrayEquals ( expectedResults , results )
assertTrue ( speed > ( steps * 1000L ) )
assertEquals ( expResult , result )
TestUtil . assertFuzzyContains ( "concept1, concept2" , html )
Assert . assertNotNull ( shardTbl )
assertEquals ( degree , 1 )
Assert . assertArrayEquals ( expected , actual )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� �
Assert . assertEquals ( "Failure expected the name to be the same" , "ChatroomMemberDTO" , CMDTO . getDTOName ( ) )
assertEquals ( "test" , result )
assertTrue ( result )
assertGenerators ( result , AnInt . class , ZilchGenerator . class )
assertNotNull ( output . list ( ) )
assertThat ( locomotive . getExitCode ( ) , is ( 0 ) )
assertEquals ( "" , result )
assertEquals ( s . length ( ) , len )
assertThat ( Template . parse ( "hash has {{ hash.size }} elements" ) . render ( assigns ) , is ( "hash has 4 elements" ) )
assertThat ( "valid components shall have no validation failures" , validation . pass ( Report . WITHOUT_WARNING ) )
Assert . assertEquals ( rawMeta , metaBack )
assertEquals ( "pippo" , string )
assertEquals ( deleteMapping1 , deleteMapping1Duplicate )
Assert . assertTrue ( "Certificate import should have been called" , certificateImportCalled . get ( ) )
Assert . assertEquals ( "Graph not of the exepected size" , 1 , graph . size ( ) )
assertEquals ( expected , query . export ( ) )
assertTrue ( page . asText ( ) . contains ( "PASSED" ) )
Assert . assertFalse ( "GetMySavedView returned no results" , jsonList . isEmpty ( ) )
Assert . assertNotNull ( evt )
runner . assertValid ( )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertFalse ( accessor . declaresHashCode ( ) )
assertEquals ( 1 , bundle . getResult ( ) . size ( ) )
assertNotNull ( childBoss )
assertTrue ( parent . isPrefixOf ( fixture ) )
assertEquals ( true , getRemoveLayerDefinitionAction ( ) . isEnabled ( ) )
assertEquals ( "The stock symbol hasn't been updated." , acme . getSymbol ( ) , stocks . get ( 0 ) . getSymbol ( ) )
assertEquals ( RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "StatementRankTriple.rdf" ) ) , model )
assertThat ( result , is ( "A012345789012345789|B012345789012345789|C012345789012345789\\n" ) )
assertEquals ( "Gadget" , spec . getModule ( ) . getName ( ) )
assertThat ( callback . toString ( ) , callback . isEstablished ( ) , is ( true ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "long" ) )
Assert . assertEquals ( "<div class=\\"htmlform\\"></div>" , session . getHtmlToDisplay ( ) )
Assert . assertTrue ( message , expected . equals ( actually ) )
assertTrue ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , true )
Assert . assertEquals ( 0 , filteredPaths . length )
Assert . assertTrue ( file . exists ( ) )
assertNotNull ( TaskChannel . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "TCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( sampleEntities . size ( ) , is ( equalTo ( 2 ) ) )
assertEquals ( 5 , proxy . getPriority ( ) )
mock . assertIsSatisfied ( )
assertNotNull ( result . getOpenAPI ( ) . getComponents ( ) . getSchemas ( ) )
assertThat ( a , equalTo ( a1 ) )
assertThat ( resp , stringContainsInOrder ( "<code value=\\"11378-7\\"/>" , "<display value=\\"Systolic blood pressure at First encounter\\"/>" ) )
assertEquals ( ret , "todo" )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( expectedResult , entityParser . parseThing ( json ) )
assertEquals ( 5L , avg . longValue ( ) )
assertEquals ( 5 , devices . size ( ) )
assertEquals ( expecting , found )
Assert . assertEquals ( 2 , EntityUtil . getInstanceSequence ( start , frequency , tz , instance ) )
assertEquals ( expected , map )
Assert . assertEquals ( str , baos . toString ( "UTF-8" ) )
assertEquals ( "Test message ab c\\\\" , result )
Assert . fail ( e . getMessage ( ) )
assertEquals ( "null" , t . getFirstClassOrInterfaceTypeImage ( ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( "abc\\n" , found )
assertEquals ( "myValue" , job . getConfiguration ( ) . get ( "my.context.property" ) )
assertEquals ( expected , deserialized )
Assert . assertEquals ( "sendMessageFromOwnerProcessor,sendMessageFromOwnerChatSocketImpl" , slip )
Assert . assertArrayEquals ( new byte [ ] { ( byte ) 0xc2 , 0x49 , 0x01 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 ,
assertThat ( target . matchExactly ( flow ) , is ( false ) )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
assertArrayEquals ( array ( 'a' , 'b' , '\\0' , '\\0' , '\\0' , '\\0' , 'c' , '\\0' , '\\0' , 'd' , 'e' ) , letters )
assertTrue ( isApplicable )
assertThatTestAppHasBeenSuccessfullyRegistered ( driver )
assertThat ( token . getType ( ) , is ( PCRELexer . WhiteSpace ) )
Assert . assertEquals ( "[3, 2, 6, 4, 7, 1, 5]" , result . toString ( ) )
JSONAssert . assertEquals ( "{a:[[9]]}" , ARRAY_OF_JSONARRAYS , new CustomComparator ( JSONCompareMode . LENIENT , customization ) )
assertEquals ( "{\\"Book2\\":{\\"id\\":333}}" , bos . toString ( ) )
assertEquals ( this . emptyCom , result . getAttributes ( ) )
assertEquals ( 555 , asynchronousJobPool . getQueueSize ( ) )
assertNull ( DateUtil . parseAsctime ( expires ) )
assertEquals ( empty1 , empty2 )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertThat ( existingGridSet , hasProperty ( "name" , equalTo ( GWCConfigIntegrationTestData . GRIDSET_EPSG4326 ) ) )
assertEquals ( 0 , p . size ( ) )
assertNull ( placement )
assertEquals ( Arrays . asList ( "com.a.A" , "com.b.B" ) , ValidationGroupHelper . getGroupsOnField ( input ) )
assertNotNull ( valve . getExecutorService ( ) )
assertTrue ( "Failed at " + i , called )
Assert . assertEquals ( 0 , events . size ( ) )
assertEquals ( "foo" , resp . cookies ( ) . get ( "foo" ) )
assertThat ( Datastore . delegate , instanceOf ( MyDelegate . class ) )
Assert . assertEquals ( "{\\"alice\\":{\\"edgar\\":null,\\"bob\\":[null]}}" , result . toString ( ) )
assertFalse ( Compare . areIdentical ( imageToTest , referenceImage ) )
Assert . assertNotNull ( trainer . train ( eventStream ) )
assertTrue ( mbr instanceof CustomBooleanReader )
assertNull ( domain )
paths . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertThat ( properties . size ( ) , is ( 0 ) )
assertThat ( action , is ( "action" ) )
Assert . assertFalse ( item . matches ( divNode ) )
assertEquals ( expectedCollectionPrefix , sink . collectionPrefix )
Assert . assertNull ( Array . binarySearch ( input , integerComparator , 0 ) )
assertEquals ( 7 , this . crossword . getWidth ( ) )
assertEquals ( RunJhsCommand . class , jhsCmd . getClass ( ) )
assertEquals ( storeMock , store )
assertEquals ( "注�� 专�注" , t . format ( new Date ( 600 ) ) )
Assert . assertEquals ( expected , actual )
assertTrue ( population . size ( ) >= 90 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( currentUser . getId ( ) , user . getId ( ) )
assertThat ( cursor . hasNext ( ) , equalTo ( false ) )
assertSeq ( new String [ ] { "<a/>" , "<b/>" , "<c/>" , "<d/>" } , "insert-before(/top/x/*, 4, /top/y/*)" )
assertEquals ( expecteds , actuals )
assertEquals ( workflowInstId , pgeTask . getWorkflowInstanceId ( ) )
assertTrue ( Tools . versionAfterPacemaker ( host ) )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : from the implicit command link" ) )
Assert . assertEquals ( 10 , rowKeys . size ( ) )
assertFalse ( "valid input but exceeds bounds " + field . getText ( ) , cellEditor . stopCellEditing ( ) )
Assert . assertNotNull ( tested . newRequest ( ) )
assertEquals ( "Hello World!" , result )
assertEquals ( 1 , branch_conditions . size ( ) )
assertTrue ( previewElement . getColorFieldContainsErrors ( ) )
assertEquals ( writeOnlyProp . isWriteOnly ( ) , true )
Assert . assertTrue ( ctx . getResult ( ) )
assertEquals ( mockList , testList )
Assert . assertTrue ( charset . equals ( CharsetUtil . getCharset ( charsetIndex ) ) )
assertThat ( "image id" , sut . getImageId ( ) , is ( equalTo ( imageId ) ) )
Assert . assertEquals ( serverTask . getProperties ( ) . length , 3 )
assertTrue ( errors . isEmpty ( ) )
assertEquals ( NOT_FOUND . getStatusCode ( ) , getStatus ( request ) )
assertEquals ( "(str1 = '3' AND str2 = '1') OR (str2 = '2' AND str2 = '3')" , str )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE ((DEPTH(nodes) - DEPTH(nodes)) + DEPTH(nodes)) = CAST('3' AS LONG)" ) )
assertThat ( cdtos . size ( ) , is ( 3 ) )
Assert . assertEquals ( 1 , ( ( ControllableRedisMasterReplication ) armr ) . getConnectTimes ( ) )
assertEquals ( amount , all . size ( ) )
assertNextRequestIsCreateWorkspace ( "something" , CreateConflictBehavior . CREATE_WITH_ADJUSTED_NAME )
Assert . assertTrue ( format . getTokenizers ( ) . isEmpty ( ) )
assertEquals ( "id53" , policy2Policy . getApiIds ( ) . get ( 0 ) . getId ( ) )
assertEquals ( expectedFunction , sink . result ( ) )
assertExtractedTextHasBeenIndexed ( "select [jcr:path] from [nt:resource] as res where contains(res.*, 'ModeShape supports')" )
Assert . assertTrue ( infEx . isType ( DummyException . class ) )
assertEquals ( "" , result )
assertEquals ( 0 , result . getTotalHits ( ) )
Assert . assertEquals ( 3635 , nodeCount )
assertEquals ( expectedSql , actualQuery )
assertEquals ( "some.slashed.ClassName" , CONVERTER . dotted ( dotClass ) )
assertNotNull ( deviceFlowRegistry )
Assert . assertEquals ( "did not get the default number of threads" , 1 , jargonProperties . getMaxParallelThreads ( ) )
Assert . assertNotNull ( userBean )
assertEquals ( ImmutableVariantScore . of ( ReadType . ALT , 10 ) , SamRecordScoring . getVariantScore ( shortAlt , DELETION ) )
assertEquals ( testData . length - 2 , cfis . available ( ) )
assertEquals ( generateOutput ( "    5 [----->----------------------]" ) , output . getBuffer ( ) . toString ( ) )
assertEquals ( "i(3,9)" , s . getPickupLocation ( ) . getId ( ) )
assertTrue ( folder . getProgressState ( ) == ProgressState . FAILED )
assertEquals ( 0 , filter . filter ( aciContext , OperationScope . ATTRIBUTE_TYPE_AND_VALUE , null ) . size ( ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( "les salons and cuisine" , this . realiser . realise ( this . dansLaPiece ) . getRealisation ( ) )
Assert . assertEquals ( 14 , results . length )
assertContainsRegex ( WHERE + OPEN_CURLY + var ( "s" ) + SPACE + ":P" + SPACE + ":O" + OPT_SPACE + CLOSE_CURLY , query )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertThat ( cachedDataSetProperty , sameInstance ( dataSetProperty ) )
Assert . assertEquals ( cache , builder . offset ( ) . build ( ) )
Assert . assertEquals ( expected , pass . concretizeCell ( term ) )
assertNull ( instance . nullableStringList ( ) )
assertEquals ( new Statistics ( 1 , 1 , 1 , 1 ) , spec . stats ( ) )
assertEquals ( URI . create ( expected ) , uri )
assertSame ( server . getProject ( "foo" ) , server . getProject ( "foo" ) )
assertTrue ( result . equals ( expected ) )
assertEquals ( "[[READING_FILE_ERROR, badFile]]" , rules . toString ( ) )
Assert . assertNull ( actualEventBo )
AsserterWithLazyInitialisationAlgorithm . ASSERTER . assertImmutable ( klasse )
Assert . assertTrue ( "provideRoamingNumber message (opCode 3, TCAP Begin) should be blocked by Cat1" , ! sigfw . unitTestingFlags_sendSccpMessage )
assertEquals ( "" , result )
assertEquals ( "" + i + " " + codec . lineLength , b [ 1 ] . length , codec . getEncodedLength ( b [ 0 ] ) )
assertTrue ( processor instanceof TSetIpAddressProcessor )
Assert . assertEquals ( "abcd" , stringAppender . toString ( ) )
assertEquals ( "There should be 0 chart data results" , 0 , chartDataList . size ( ) )
Assert . assertEquals ( "Incorrect field name" , fieldName , node . getFieldName ( ) )
Assert . assertEquals ( "Kermit,The Frog" , result . trim ( ) )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . BEGIN )
assertEquals ( "2000-1-5" , value . toString ( ) )
Assert . assertEquals ( EMPTY_FINGERPRINT , managedRangerAuthorizer . getFingerprint ( ) )
result . assertIsSatisfied ( )
assertTrue ( totalLines > 20 )
assertEquals ( "the_value" , obj )
Assert . assertTrue ( result . getBigIntValue ( ) . intValue ( ) == 7 )
assertEquals ( expected , buffer . get ( ) )
assertThat ( runtimeOptions . getGlue ( ) , contains ( uri ( "classpath:/app/features/user/registration" ) , uri ( "classpath:/app/features/hooks" ) ) )
assertThat ( roundtrippedRecord , equalTo ( record ) )
assertThat ( mockMetrics . getMessageReceivedBytes ( ) , is ( 43121L ) )
assertEquals ( "select entity_0.name from Entity entity_0 group by entity_0.name having ( entity_0.integerField > :function_1 and ( entity_0.name = :name_2 or entity_0.name = :name_3 )" , query )
assertEquals ( "<html>\\n<head></head>\\n<body>\\n<div>\\n<p>Hello there</p>\\n</div>\\n</body>\\n</html>" , doc . html ( ) )
assertSame ( offered . get ( ) , request )
assertEquals ( "do some work" , outputVal )
assertScoreAndParse ( content , null , 1 )
Assert . assertNotNull ( combinationGenerator )
assertEquals ( expected , error . toString ( ) )
assertThat ( serverHello . getClientCertificateType ( ) , is ( CertificateType . RAW_PUBLIC_KEY ) )
assertEquals ( e . getMessage ( ) , "TOOLSPEC_NOT_INITIALIZED" )
assertNull ( presenter . getValue ( ) )
Assert . assertTrue ( errors . hasFieldErrors ( "voidReason" ) )
assertNotNull ( doc . getDescriptions ( ) )
assertEquals ( Calendar . JANUARY , c . getActualMinimum ( Calendar . MILLISECOND ) )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertEquals ( "Should respond with 200" , 200 , responseContext . getStatus ( ) )
assertSet ( queryReturns ( october15Entity , november1Entity ) , whenFilteringBy ( IN , Arrays . asList ( october15 , november1 ) ) )
Assert . assertEquals ( jsonString , "[{\\"name\\":\\"涓���\\",\\"id\\":1,\\"brithDate\\":null,\\"money\\":1.1},{\\"name\\":\\"涓�
Assert . assertEquals ( 10L , template . execute ( callable , retryState , recoveryCallback ) . longValue ( ) )
assertEquals ( expectedKey , bucketKeyWithFileName )
assertFalse ( graph . getStatements ( ) . isEmpty ( ) )
assertEquals ( " WHERE ((\\"NAME\\" LIKE ? AND (\\"AGE\\" < ? OR \\"AGE\\" > ?)) OR \\"LASTNAME\\" = ?)" , QueryBuilder . getWhereStringForFilters ( filters , sh ) )
assertEquals ( expression , new On ( new IntegerFieldValue ( first ) , new IntegerFieldValue ( second ) ) . asString ( ) )
assertNotNull ( security )
assertEquals ( 1 , found . getEntry ( ) . size ( ) )
assertThat ( query . count ( ) , is ( 0L ) )
assertTrue ( 1.28 == deserialize . readDouble ( ) )
assertThat ( str , endsWith ( "\\0" ) )
Assert . assertTrue ( retValue . intValue ( ) == 2 )
assertEquals ( 2 , v8Int32Array . length ( ) )
assertThat ( configuration . getRunInterval ( ) , equalTo ( 20L ) )
assertions . containsKey ( key )
assertEquals ( "The job builder should have the same configuration" , _jobBuilder . getConfiguration ( ) , jobBuilderCopy . getConfiguration ( ) )
Assert . assertSame ( bitmap , ic . getBitmap ( ) )
assertThat ( anyTS . isValid ( SECOND_OF_DAY , 86399 ) , is ( false ) )
assertFalse ( isEqual )
Assert . assertTrue ( "odd, user 7 didn't get user 8's name" , found )
assertTrue ( parser . gotAnyHeader ( ) )
assertVisible ( root . getChild ( "child1" ) )
assertEquals ( 83 , x . value )
assertArrayEquals ( "Conversion did not match" , value , to )
assertOut ( "public class A implements IA {\\n}" )
assertEquals ( TargetType . PILLAR , target . getType ( ) )
assertEquals ( PRECONDITION_FAILED , response . getStatusInfo ( ) )
assertNoProblems ( )
Assert . assertEquals ( 3.0 , result , DOUBLE_PRECISION )
assertEquals ( set ( "b" , "d" , "c" , "e" ) , redis . sinter ( "key1" , "key2" , "key3" ) )
assertTrue ( match )
assertEquals ( "CLM" , cf . getSegment ( ) )
assertEquals ( 1 , islandPerimeter . islandPerimeter ( grid ) )
assertEquals ( "Cardenality of cartesian product is wrong" , 3 , cartesianResult . size ( ) )
assertTrue ( true )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" + "456" ) . getValue ( ) )
assertEquals ( 0xffffffffL , getUnsignedInt ( v1 , 0 ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( 1 , violations . size ( ) )
assertExpectedProtectedPorts ( dai )
assertHasFooAndConstructor ( dst . toClass ( ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertResultSet ( res )
assertEquals ( "Description" , entity . getDescription ( ) )
assertEquals ( "slow" , value . asIs ( ) )
assertTrue ( "Directory was created" , pdp . createDir ( subject_dir , attr ) )
assertThat ( CalendarPeriod . onWeeks ( ) . parse ( "5. 2017. 52. 2020 2017" , f ) , is ( expected ) )
Assert . assertEquals ( "The <word>fox</word> jumps over" , hl . makeWellFormed ( xmlContent ) )
Assert . assertEquals ( 3 , vertexes . size ( ) )
Assert . assertEquals ( "result" , testBean . getResult ( ) )
Assert . assertEquals ( b1 , b2 )
assertEquals ( myBean , retrievedBean )
assertEquals ( expected , reference . get ( ) )
Assert . assertEquals ( expectedResult , result )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
assertThat ( result . toString ( ) , is ( equalTo ( "HELLO" ) ) )
assertEquals ( "Index Of Test1 is 0" , 0 , _fastTable . indexOf ( "Test1" ) )
assertThat ( cause , instanceOf ( RuntimeException . class ) )
assertNotNull ( sslContext )
assertThat ( dest . aaa , is ( nullValue ( ) ) )
assertTrue ( hasLock )
assertEquals ( 5000 , processInstance . getEndTime ( ) )
assertTrue ( book . getIsbn ( ) . startsWith ( "132" ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( "CFBundleVErsion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_VERSION ) )
Assert . assertFalse ( success )
assertEquals ( commentFromDb . getDeletionDate ( ) , comment . getDeletionDate ( ) )
Assert . assertFalse ( "ticket should not be in use" , inUse )
assertThat ( eventListener . captured ( actor , type ) )
Assert . assertTrue ( "Login to PC server should have succeeded" , pcClient . login ( ) )
assertNull ( "Base value is not properly parsed" , mapper . base ( "test" , null ) )
assertNotNull ( galaxyHistory . fileToHistory ( FILENAME , createdHistory ) )
assertEquals ( expResult , result )
assertBulkInsert ( data , expected )
Assert . assertEquals ( "<input type=\\"checkbox\\" id=\\"w1\\" name=\\"w1\\" value=\\"true\\" toggleHide=\\"hatColors\\"/><label for=\\"w1\\" name=\\"w1\\" value=\\"true\\"/><input type=\\"
Assert . assertEquals ( RoleOperation . GRANT , grantDesc . getOperation ( ) )
assertThat ( type . matching ( Other . class ) , sameInstance ( type ) )
assertEquals ( "addArgument() adds a argument to the command" , "foo" , command . getDefinition ( ) . getArgument ( "foo" ) . getValue ( ) )
assertThat ( actual , is ( notNullValue ( ) ) )
assertThat ( query . asSingleEntity ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( numOfLedgers , counter )
assertFeatureValues ( expected , testQuery , testText , new UnigramFeatureExtractor ( ) )
assertTrue ( evaluator . evaluatePerm ( indices , null , InetAddress . getByName ( "8.8.8.9" ) , null ) == PermLevel . ALL )
assertEquals ( resolvedClassPaths . size ( ) , 3 )
assertEquals ( "Foobar" , NDC . pop ( ) )
assertEquals ( "xpto" , parsedObject . getLazyMapPojo ( ) . get ( id ( BasicObject . class , 1l ) ) . getStringValue ( ) )
Assert . assertNotNull ( victim . create ( ) )
assertTrue ( false )
assertTrue ( result )
assertNull ( actualResponse )
this . context . assertIsSatisfied ( )
assertEquals ( "to@domain.com" , emailer . getProperties ( ) . getProperty ( "to" ) )
assertThat ( result , is ( response ) )
assertTrue ( internalMap . isEmpty ( ) )
assertEquals ( "TestPassword" , envVars . get ( "COVERITY_PASSPHRASE" ) )
assertTrue ( result . isResultOK ( ) )
assertEquals ( transport , svc . getHttpTransport ( ) )
assertThat ( result , is ( false ) )
assertParseFileOk ( fileName )
assertEquals ( it . next ( ) . getName ( ) , "h枚chstBetrag" )
Assert . assertEquals ( contextX , test . context )
assertEquals ( ComparatorStepResult . Status . PASSED , result . getStatus ( ) )
Assert . assertEquals ( "freed bucket" , Sets . newHashSet ( 1L , 2L ) , testMeta . managedState . freedBuckets )
result . assertIsSatisfied ( )
assertEquals ( expected , actual )
assertEquals ( second . getSqlType ( ) , "int" )
assertEquals ( expected , expression . toString ( ) )
Assert . fail ( )
assertTrue ( AutnumUtil . isValidAutnum ( validAutnum ) )
assertEquals ( "should contain bob" , "bob" , users . get ( 0 ) . getText ( ) )
assertEquals ( expectedProfile . getSid ( ) , resultantProfile . getSid ( ) )
assertEquals ( "barfoo" , form . getAttribute ( "foo.baz['foo_bar_'badquotes'_.foobar']" ) )
Assert . fail ( "expected exception for null query string." )
assertEquals ( expected , actual )
assertEquals ( 37 , actual )
Assert . assertEquals ( eventCount , event . getTouchCount ( ) )
assertEquals ( true , check . isRequired ( ) )
assertEquals ( "The numeric value " + encodeValue + " should be encoded to '" + expected + "'" , expected , alphaNumericCodec . encode ( encodeValue ++ ) )
Assert . assertEquals ( t1 , t2 )
assertEquals ( "[{\\"value\\":\\"A test summary\\",\\"lang\\":\\"EN\\"}]" , toJson ( summaries ) )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
Assert . assertTrue ( cursor . atEnd ( ) )
assertNotNull ( op )
Assert . assertTrue ( "file not found" , irodsFile . exists ( ) )
assertEquals ( 10 , map . size ( ) )
assertThat ( inds , containsInAnyOrder ( indA ) )
assertEquals ( expected , actual )
assertThat ( initiativeInfo . isVotingStarted ( TODAY ) , is ( false ) )
assertThat ( ChronoHistory . from ( history . getVariant ( ) ) , is ( history ) )
arrays . assertStartsWith ( description , actual , null )
assertTrue ( action )
assertEquals ( 0 , latch . getCount ( ) )
assertThat ( args , contains ( "network" ) )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( ns + FORM_NAMESPACE_PATH_SEPARATOR + path , obs . getFormFieldPath ( ) )
assertEquals ( expected , calls . toString ( ) )
assertThat ( results , samePaths ( new File ( root , "a.txt" ) ) )
Assert . assertEquals ( 3 , list . size ( ) )
assertEquals ( "An :)awesome :)" , result )
Assert . assertArrayEquals ( new String [ 0 ] , ec . getValue ( ) )
assertNotNull ( processInstanceId )
assertTrue ( Arrays . equals ( expectedResult , encoded . array ( ) ) )
assertThat ( found , equalTo ( 1 ) )
assertEquals ( PREVIOUS_RESPONSE , argumentCaptor . getValue ( ) )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertEquals ( xmlEsperado , referenciada . toString ( ) )
assertEquals ( ids , session . from ( var ) . list ( var . id ) )
assertTrue ( ( ( BooleanType ) eval . get ( 0 ) ) . getValue ( ) )
assertEquals ( vr . getValidity ( ) , Validity . INVALID )
Assert . isTrue ( results . size ( ) > 0 )
assertEquals ( expected , actual )
Assert . assertEquals ( faceted . getFaceted ( ) , facet )
assertEquals ( - PASSED_PAWN_BOOST + DOUBLED_PAWN_HANDICAP , score )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( BGPError . CEASE , e . getError ( ) )
assertThat ( event . isShowChat ( ) , equalTo ( false ) )
assertNotNull ( ds )
assertNotNull ( result )
assertResponse ( "method withoutParameters was invoked" , response )
assertTrue ( population . size ( ) >= 98 )
assertTrue ( sut . isWhitespace ( ) )
assertTrue ( stmt instanceof CreateTableNode )
assertThat ( resolver . replace ( "${m1}, ${m2}, ${m3}!" , true ) , is ( "Hello1, Hello2, Hello3!" ) )
assertFalse ( "Schemas" , schemaHomology . schemasMatch ( schema1 , schema2 , exclusionRegex ) )
Assert . assertThat ( matchingArtifacts . isEmpty ( ) , Matchers . is ( false ) )
assertTrue ( rpcServiceMetaInfo . getRpcServiceMetas ( ) != null )
Assert . assertEquals ( sum , 20 )
assertEquals ( "Lorem ipsum" , transform . get ( 0 ) . foo )
assertEquals ( map . size ( ) , n * nThreads )
assertEquals ( expected , actual )
assertEquals ( true , result )
assertEquals ( d1 , d2 )
assertNull ( immediateValue . getValue ( ) )
assertions . isEqualTo ( new Double ( 6d ) )
assertTrue ( aRes . getPath ( ) , aRes . canRead ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
Assert . assertEquals ( jdkHand , acHand )
assertEquals ( false , start )
assertEquals ( 200 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "MyRepositoryName" , RepoAndTableUtil . getOwningRepository ( tableDescriptor ) . getName ( ) )
assertThatThrownBy ( ( ) -> queryService . processRequest ( request ) )
assertThat ( actual , is ( notNullValue ( ) ) )
assertThat ( bc . topologyOf ( 2 ) . configuration ( ) , is ( Configuration . AL1 ) )
assertEquals ( sb . toString ( ) , stmtb . prepareStatementString ( ) )
assertEquals ( 2 , hits . totalHits )
context . assertIsSatisfied ( )
Assert . assertFalse ( handler . hasBeenCalled ( ) )
assertNotNull ( Message . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "IMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "Hello World" , resp )
assertEquals ( expected , actual )
assertThat ( result , is ( true ) )
assertNull ( "Got constructor arguments" , cd . getConstructorArgs ( ) )
assertTrue ( "Row should be wider than tree" , treeGrid . getTableWrapper ( ) . getSize ( ) . getWidth ( ) > tree . getRow ( 0 ) . getSize ( ) . getWidth ( ) )
assertEquals ( "XAU_USD" , currencyPair )
Assert . assertFalse ( "Error report should not contain errors" , reportStats . hasErrors ( ) )
assertThat ( offset . canonical ( ) , is ( "UTC+02:00" ) )
assertTrue ( i1 . contains ( i1 ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 2 , ( ( Number ) o ) . intValue ( ) )
assertNotNull ( myTestInstance . deleteAsync ( doc , Durability . ACK ) )
assertEquals ( SC_OK , response . getStatus ( ) )
assertTrue ( resolver . resolve ( ) . equals ( Arrays . asList ( "a" , "b" , "c" ) ) )
assertThat ( referencableDaoService . get ( ConfigRefEnum . ACHIEVEMENTS_REFRESH_RATE ) . getValue ( ) , is ( "1" ) )
assertEquals ( "100_000_000_000" , money . toString ( ) )
assertThat ( connection2 , is ( connection ) )
assertEquals ( 400 , cr . getStatus ( ) )
assertTrue ( builder instanceof NettyChannelBuilder )
assertEquals ( "((?:\\\\Qabc\\\\E){3})" , p . toString ( ) )
assertNotNull ( mapping )
assertEquals ( TestClass . class , clazz )
assertEquals ( mockServerConfig , result )
assertEquals ( p . toString ( ) , perOS ( "org/raml/jaxrs/parser/source/LocalClassTestType.java" ) )
assertEquals ( "Output order: " + outputOrder , exp , out )
assertEquals ( ResultCodeEnum . INVALID_CREDENTIALS , resp . getLdapResult ( ) . getResultCode ( ) )
assertEquals ( "value1" , container1 . stringBuilder . toString ( ) )
assertNotNull ( instance . getAlumno ( ) )
Assert . assertEquals ( "test" , rdr . readLine ( ) )
assertEquals ( "Wrong number of URI references found" , 0 , result . size ( ) )
assertEquals ( "xxêaxx" , result )
assertIsSemver ( semver , version , 1 , null , null , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
assertThat ( driver . findElement ( By . id ( "user1" ) ) . getAttribute ( "href" ) , is ( "user1" ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 1 , comparison1 )
assertTrue ( fixture . eof ( ) )
assertNotNull ( doc )
assertEquals ( source , actual )
Assert . assertTrue ( out . contains ( "viewId=0" ) )
assertTrue ( testResult )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolationAtActivity ( route . getEnd ( ) , route ) , 0.01 )
assertThat ( cargo . getCommandsRun ( ) , contains ( "cargo test dirmod:: --jobs 1 --verbose -- --nocapture" ) )
assertTrue ( game2 . isGameOver ( ) )
assertTrue ( isThrown )
Assert . assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del)" , aa_change_deletion . toStringTree ( parser )
assertEquals ( ( byte ) 34 , s . m0_0 ( ) )
assertEquals ( expResult , result )
Assert . fail ( "RuntimeException should be thrown!" )
assertEquals ( ABSTRACT , a . getLocalAddress ( ) )
assertThat ( getClientConnectionPoolStats ( sut ) . getLeased ( ) , equalTo ( 0 ) )
assertEquals ( "<div id=\\"1\\"><h2>Hello world!</h3></div>" , Strings . trim ( html ) )
Assert . assertTrue ( containerResolver . isContainer ( ) )
assertEquals ( authors , test . getAuthors ( ) )
assertTrue ( result )
assertMockEndpointsSatisfied ( )
assertProperty ( "explicitMethod" , true , false , String . class , false , property )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 1f ) )
assertNotNull ( getPartition ( partitionManager , Realm . DEFAULT_REALM ) )
assertFalse ( splitBrainProtectionFunction . apply ( members ) )
assertEquals ( expected , actual )
assertEquals ( "Expected response not seen." , "Hi There!" , response )
assertEquals ( 1 , count . get ( ) )
assertEquals ( "" , value )
assertEquals ( "redis://11.0.0.1:1234" , config . getAddress ( ) )
assertFalse ( field . isRequired ( ) )
assertEquals ( TypeInfoFactory . getMapTypeInfo ( TypeInfoFactory . getMapTypeInfo ( TypeInfoCreator . createString ( ) , TypeInfoCreator . createDouble ( ) ) ) , orcType )
assertEquals ( context , cache . get ( "foo" ) )
assertEquals ( 16000.0 , tripRounds . getDouble ( ) , 0.001 )
Assert . assertEquals ( 100 , value )
assertEquals ( writeData , toString ( response ) )
assertHasModifier ( JMod . PUBLIC , constructor . getModifiers ( ) , "public" )
Assert . assertEquals ( null , filterResult )
assertNotNull ( result )
assertTrue ( MVEL . evalToBoolean ( "d.age == val" , m ) )
assertViewName ( mav , "redirect:/topics/" + TOPIC_ID )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  ok " ) )
assertEquals ( asList ( debug ( mdcValues , marker , message ) ) , testLogger . getLoggingEvents ( ) )
assertTrue ( getTaint ( bc . imei ) != 0 )
assertEquals ( "toString output" , "bufferSize=12, anotherKey02=coolValue02" , manager . toString ( ) )
Assert . assertEquals ( "unexpected url composed for fetching scheduler info" , EXPECTED_SCHEDULER_INFO_URL , resolvedUrl )
assertThat ( result . statusCode , is ( Response . BAD_REQUEST ) )
assertEquals ( testPlatform . getPlatformValue ( ) , pValues . get ( 0 ) )
assertThat ( requestXml , equalTo ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\" ?>\\n" + "<wps:Execute>" + "<wps:Identifier>L2Plus</wps:Execute>" + "<wps:
Assert . assertNotNull ( url )
Assert . assertTrue ( "Expected a positive value but it was: " + actualValue , actualValue > 0 )
assertEquals ( "Betty Ford" , u . getName ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . assertTrue ( threw )
Assert . assertTrue ( "Expected no rights" , auths . size ( ) == 0 )
assertEquals ( ( short ) 0x0009 , s . m0_0 ( ) )
assertThat ( errors , not ( hasFieldErrors ( "prefix" ) ) )
assertThat ( TestI18n . testMessage . id ( ) , is ( "testMessage" ) )
assertInjectsCollectionsOfMocks ( exampleTest )
assertThat ( attribute , is ( notNullValue ( ) ) )
assertThat ( sb . toString ( ) , is ( "" ) )
assertEquals ( 1 , manager . list ( metaStore ) . size ( ) )
Assert . assertEquals ( "bla" , r . getText ( ) )
assertEquals ( expectedArg , parsedArg )
assertThat ( RunningNode . getRunningTaskNodePath ( nodePath ) , is ( nodePath ) )
assertThat ( directInvoker , instanceOf ( DirectMessageHandlerInvoker . class ) )
rule . assertScenarioEnded ( )
assertEquals ( 401 , httpResponse . getStatusLine ( ) . getStatusCode ( ) )
assertFalse ( result . hasErrors ( ) )
Assert . assertEquals ( toArray ( "json" , "aaa" ) , merged )
assertEquals ( "Data::datatype::Integer" , results . get ( 0 ) )
assertNotNull ( sessionImpl )
Assert . assertNotNull ( setter )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" ) . getValue ( ) )
assertNotNull ( schema . getComponents ( ) . getSchemas ( ) . get ( "A" ) )
assertEquals ( localDate , normalizer . convert ( timestamp ) )
NVAssert . assertEquals ( EXPECTED_NV_RESPONSE , nvResponse )
Assert . assertEquals ( "label1" , cardLabelRepository . findUserLabelNameByProjectNoRead ( noRead . getProject ( ) . getId ( ) ) . getName ( ) )
assertEquals ( "Matched code set" , UTF16_ID , CodeSet . getMatchingCodeSet ( local , remote , true ) . getId ( ) )
assertNull ( result )
assertTrue ( millis == null )
assertTrue ( converter . canConvert ( LikeAction . class ) )
Assert . assertEquals ( 2 , success . get ( ) )
assertEquals ( "Wrong result" , sb . toString ( ) , result . toString ( ) )
assertTrue ( Arrays . equals ( key . getPubKey ( ) , keyOnion ) )
assertEquals ( "Task in embedded subprocess" , task . getName ( ) )
assertEquals ( 0 , latch . getCount ( ) )
assertResultMap ( target )
assertEquals ( 10 , answer )
assertEquals ( "fra 1 secolo" , t . format ( new Date ( 1000L * 60 * 60 * 24 * 365 * 101 ) ) )
assertEquals ( "TRACE" , trace . toString ( ) )
assertTokenInfo ( info , creds )
Assert . assertEquals ( filter . filter ( spanEventBo ) , SpanEventFilter . ACCEPT )
assertMockEndpointsSatisfied ( )
assertArrayEquals ( expected , Proto . build_filler ( 1 ) )
MatcherAssert . assertThat ( PodHelper . getPodDomainUid ( pod ) , equalTo ( "domain1" ) )
assertThat ( pool , is ( notNullValue ( ) ) )
assertThat ( new JSONObject ( actual ) , sameJsonAs ( rawSchemaJson ) )
Assert . assertEquals ( 0 , ret )
assertEquals ( filterResult , result )
assertEquals ( 2 , m0 . backing . size ( ) )
assertTrue ( message . isComplete ( ) )
Assert . assertEquals ( 100 , janus . getServer ( ) . getRefreshIntervalInMillis ( ) )
assertThat ( stream . toString ( ) , equalTo ( "{\\"MyString\\":\\"Some text\\",\\"MyByteProperty\\":1,\\"MyShortProperty\\":2,\\"MyIntegerProperty\\":3,\\"MyFloatProperty\\":4.0,\\"MyDoubleProperty\\
assertEquals ( expected , actualQuery )
assertThat ( target . request , is ( nullValue ( ) ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response5 . getResponseObject ( ) )
assertThat ( clickedButton . getCssValue ( "-webkit-animation-name" ) , is ( "none" ) )
assertEquals ( 2 , actualFileInputs . size ( ) )
assertThat ( attack , nullValue ( ) )
assertNotEquals ( frameData1 , frameData2 )
assertEquals ( "[[John], [Jane], [Rocky], [Total]]" , results . toString ( ) )
assertNull ( form )
Assert . assertNull ( st )
Assert . assertNotNull ( interesado . getId ( ) )
assertEquals ( "PONG" , cl . ping ( ) )
Assert . assertNull ( "description should not be present" , actualDescription )
assertNotNull ( "Dispatcher was returned" , dispatch )
assertThat ( StubWatchFactory . getRequestParameters ( ) . get ( 0 ) , both ( hasEntry ( "resourceVersion" , Integer . toString ( INITIAL_RESOURCE_VERSION ) ) ) . and ( hasEntry ( "labelSelector" , asList ( DOMAINUID_LABEL , CREATEDBYOPERATOR_
assertTrue ( "Custom content model " + customContentModelQName . toString ( ) + " is not present" , allContentModels . contains ( customContentModelQName ) )
assertTrue ( "Expected HostPost" , obj instanceof Host )
assertThat ( buf . toString ( ) , is ( equalTo ( "foo" ) ) )
Assert . assertEquals ( schema , fromJson . getSchema ( ) )
assertTrue ( raw . length > 0 )
Assert . assertEquals ( sql , expected . replaceAll ( "#ALIAS#" , EntityMetaDataCache . getMetaData ( RestrictionTestEntity . class ) . getAlias ( ) ) )
assertEquals ( "ID = userId" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertThat ( result , is ( 2 ) )
assertTrue ( filter . allow ( event , listener ) )
assertEquals ( "custom Titi" , html )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertTrue ( appender . getEvents ( ) . size ( ) == 0 )
assertEquals ( actualJSON , expectedJSON )
assertOut ( "/**\\n * @param {number} bar\\n * @param {string} baz\\n * @param {Array} goo\\n */\\n" + "foo.bar.RoyaleTest_A.prototype.method1 = function(bar, baz
assertEquals ( CamelCase . class . getName ( ) , client . inflect ( ) . getClass ( ) . getName ( ) )
assertEquals ( new BigDecimal ( "60.00" ) , max )
assertThat ( page . image . getSourcePath ( ) , is ( expectedPath ) )
assertThat ( a , equalTo ( a1 ) )
assertEquals ( ( Integer ) 0 , zero )
Assert . assertEquals ( "EXECUTE ERROR:" , sqltrue , sqlnew )
assertEquals ( 1 , holder . get ( ) )
assertEquals ( "{0=22, 1=22, 2=22, 3=22}" , map . toString ( ) )
assertEquals ( "He's a jerk.\\nA complete kneebiter." , toWikiText ( note ) )
assertTrue ( xmas . before ( newYearsDay ) )
Assert . assertEquals ( "http://services.com/services" , url )
Assert . assertNotNull ( factory )
assertEquals ( expected , actual )
connection . assertBufferEndsWith ( "FOO" + LINE_SEPARATOR + "BAR" + LINE_SEPARATOR )
assertTrue ( entity . equals ( entity2 ) )
visitor . assertSatisfied ( "checking state contains two branches" , _rootComposite )
assertFalse ( dao . isSecretAnswer ( userJoe , SECRET_ANSWER ) )
assertFalse ( xAttrsEnabled ( ) )
assertTrue ( result . isEmpty ( ) )
assertEquals ( "0" , grid . getCell ( 0 , 0 ) . getText ( ) )
assertEquals ( "Unexpected state class" , TreeTableState . class , state . getClass ( ) )
assertThat ( query . hasOption ( QueryFlag . FILTER_TAG_INCLUDE ) , is ( true ) )
Assert . assertTrue ( "claims topics should not merge when same topic name" , MergeUtils . shouldMerge ( t1 , t2 ) )
assertEquals ( "" , html )
assertEquals ( "two" , actual )
assertSurplus ( ref , 3 )
assertEquals ( assertion , samlAssertion . getAssertion ( ) )
Assert . assertEquals ( settings . getCallback ( ) , "/dummyCallback" )
assertNotNull ( result )
assertThat ( instance1 . hashCode ( ) , not ( equalTo ( instance2 . hashCode ( ) ) ) )
JSONAssert . assertEquals ( expected , flowSnapshotsJson , false )
assertEquals ( cs , dto2 . toString ( ) )
Assert . assertEquals ( 10 , rowKeys . size ( ) )
Assert . assertEquals ( "Error received: " + error , 0 , error . length ( ) )
assertThat ( domain . getReplicaCount ( "unconured" ) , equalTo ( 3 ) )
assertFactorization ( poly , UnivariateSquareFreeFactorization . SquareFreeFactorization ( poly ) )
Assert . assertEquals ( expected , actual )
Assert . fail ( )
assertEquals ( expectedType , TalendType . convertFromAvro ( fieldSchema ) )
Assert . assertEquals ( "<th>type</th> <th>name</th> \\n" + "<th>website</th>" , title )
Assert . assertEquals ( "test" , testScopePath . getRootScope ( ) . getName ( ) )
assertNoViolations ( constraintViolations )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
assertEquals ( true , Util . isEmpty ( collection ) )
assertThat ( query . getAttributeTypes ( ) , contains ( ObjectType . MNT_BY , ObjectType . MNT_REF , ObjectType . MNT_LOWER ) )
assertOut ( "var /** @type {ArgumentError} */ a = new ArgumentError()" )
assertThat ( wrapper . retrieveModelVersion ( ) , is ( wrapper . retrieveModelVersion ( ) ) )
assertEquals ( "Wrong result" , "" , stream . getTail ( ) )
assertOperation ( ( ) -> roleClient . createProject ( createProjectRequest ) )
assertThat ( query . getParameters ( ) . size ( ) , is ( 1 ) )
assertNull ( StringCompressionUtil . unpackAndDecompress ( testChars ) )
assertEquals ( ctd1 , classCapture . getValue ( ) )
assertTrue ( hasReset )
assertEquals ( expected , actual )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertThat ( result , is ( expectedResult ) )
assertTrue ( true )
assertEquals ( "<text>" , label )
Assert . assertEquals ( 1 , mapper . map ( versification ) . size ( ) )
assertEquals ( 23583599999L , q . getLastMillisecond ( ) )
assertEquals ( "cpu,memory,disk,100%\\n" + "100MB/s" , textTableFormatter . format ( ) )
assertEquals ( NEW_FACTORY_RESPONSE , handleResponse )
Assert . assertNotNull ( dbRangerServiceDef )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 299.0 , 299.0 )
assertTrue ( contains )
Assert . assertEquals ( "test case " + testCase . getKey ( ) + " failed." , testCase . getValue ( ) . intValue ( ) , magnitudeResult )
assertNotNull ( RatePlan . reader ( ) . read ( ) )
assertEquals ( "http://example.com/events/{eventId}" , affordance . getHref ( ) )
assertEquals ( o1 , o2 )
Assert . assertTrue ( ks == ks2 )
AssertJUnit . fail ( "Unexpected error" )
assertions . isNotEqualTo ( expected )
assertEquals ( "a b" , result )
assertSame ( expected , result )
assertEquals ( "(x INT)\\n" , found )
assertEquals ( proxy . i1 , 23 )
Assert . fail ( "Invalid input" )
Assert . assertEquals ( Integer . class , clazz )
assertThat ( dbObject . get ( "_id" ) , Matchers . is ( ( Object ) "ok" ) )
assertTrue ( latch . await ( 15000 , TimeUnit . SECONDS ) )
assertEquals ( "incorrect size" , SIZE , Struct . size ( new LongPadding ( ) ) )
Assert . assertArrayEquals ( hammingWindow_EXPECTED , hammingWindow_ACTUAL , DELTA )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertThat ( editor . getValue ( ) , is ( ( Object ) Credential . builder ( ) . userName ( "user" ) . setPassword ( "password" . toCharArray ( ) ) . database ( "db" ) . cr ( ) . build ( ) ) )
assertFalse ( game . isGameOver ( ) )
Assert . assertNotNull ( m )
assertEquals ( "TextBuilder String Is 1.0" , _textBuilder . toString ( ) , "1.0" )
assertThat ( "Count of customer" , res , is ( 2 ) )
assertEquals ( r3 , mostRelevantResource )
assertEquals ( expectedLines , seenLines )
assertThat ( result . fullName ( ) , is ( Long . class . getName ( ) ) )
Assert . assertTrue ( sb . toString ( ) . equals ( result ) )
assertTrue ( this . containsAll ( expectedResult , actualResult ) )
assertEquals ( str , tuple . getValue1 ( ) )
Assert . assertEquals ( createObjectNode ( "name" , "testperson" , "age" , 30 ) , result )
assertNotNull ( result )
assertTrue ( "nodeExists returned true when there is a node there" , store . nodeExists ( "node1" ) )
assertTrue ( violation )
assertEquals ( "env.value" , value )
assertEquals ( "failure: " + translated , ExpressionFactory . exp ( "db:toArtist.paintingArray = $p and artistExhibitArray.toExhibit.closingDate = $d" ) , translated )
assertSame ( ret , company . getOwner ( ) )
assertTrue ( shardManager . getMBean ( ) . getLeaderSyncStatus ( ) )
assertEquals ( expected , actual )
assertAttribute ( lv )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 6 , warnings . size ( ) )
assertEquals ( exist , true )
assertArrayEquals ( coeffs , actual )
assertEquals ( 3 , roles . size ( ) )
assertTrue ( pm . getAlternativeEnabledModel ( d_sertrSet ) . getValue ( ) )
assertEquals ( parser , reg . get ( name ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( "try is error" , "hello" , error . getValue ( ) )
assertEquals ( "/vrap/referer" , refererResult . getReferer ( ) )
assertEquals ( HttpStatus . SC_UNPROCESSABLE_ENTITY , response . getStatus ( ) )
Assert . assertNotNull ( resource )
assertEquals ( myMode , entry . getMode ( ) )
assertResultSet ( res )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff58_" ) )
assertArrayEquals ( new byte [ ] { 48 , "Hello World!" } , RecordPath . compile ( "toBytes(/s)" ) . evaluate ( record ) . getSelectedFields ( ) . findFirst ( ) . get ( ) . getValue ( ) )
assertThat ( mergedPredicate . getHasBeenList ( ) , Matchers . is ( true ) )
assertThat ( spy . getPropertyChangedCount ( ) , is ( 1 ) )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( String . format ( TextHelper . LOCALE_ROOT , "usage: argparse4j install [-h] [--foo FOO]%n" + "%n" + "install [-h] [--foo FOO]%n" + "%n" + "named arguments:%n
Assert . assertFalse ( errors . hasErrors ( ) )
assertFalse ( lockAcquired )
assertions . isEqualTo ( ( short ) 2 )
assertTrue ( outAny . equal ( inAny ) )
assertEquals ( "allocation that filled the gap after deallocation should have been removed" , Lists . newArrayList ( new Allocation ( control , 0 , 15 ) , new Allocation ( withLogin , 15 , 10 ) ) , allocations . getAllocations ( ) )
Assert . assertTrue ( topic instanceof PatternTopic )
assertEquals ( result , loremIpsum . substring ( 0 , result . length ( ) ) )
assertEquals ( "Index created: oss" , response )
runner . assertAllFlowFilesTransferred ( AbstractBigQueryProcessor . REL_SUCCESS , 1 )
assertEquals ( NodeConstants . Types . NULL , originatingNode . getType ( ) )
assertThat ( domain . isDomainHomeInImage ( ) , is ( false ) )
assertEquals ( "ErrorCode:IotHubUnauthorizedAccess;Unauthorized" , bestMessage )
Assert . assertEquals ( 5 , woffFont . getTables ( ) . size ( ) )
Assert . fail ( e . getMessage ( ) )
Assert . assertEquals ( query , interpretedQuery )
assertEquals ( expected , transformed )
assertTrue ( true )
assertTrue ( latch . await ( 3 , TimeUnit . SECONDS ) )
Assert . assertFalse ( pss . getEligiblePositionalParameters ( ) . hasNext ( ) )
Assert . assertEquals ( "runtime_id" , request . getParameters ( ) . get ( 0 ) . getDefaultValue ( ) . toString ( ) )
assertNoMoreTokens ( )
assertThat ( "Reversed Complemented sequence not as expected" , s , is ( "GCAT" ) )
assertEquals ( "" , pattern . toString ( ) )
assertThat ( results . getTotalNumberOfResults ( ) , is ( equalTo ( 2 ) ) )
assertNotNull ( features )
assertEquals ( 3 , list . size ( ) )
Assert . assertEquals ( 1.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertTrue ( "No errors" , FileUtil . findPatternInFile ( new File ( resultFilename ) , "Errors found" ) )
assertEquals ( 9 , lineCounter )
Assert . assertEquals ( 1 , count . get ( ) )
assertEquals ( asList ( "after-date" , "N" , "past" ) , actualOptions )
Assert . assertEquals ( ByteArrayNodeLeafVoidValue . class , node . getClass ( ) )
assertEquals ( "one dollar and sixty-five cents" , actual )
assertEquals ( "jim" , retrievedEntity . getProperty ( "name" ) )
assertEquals ( unicodeNode , model )
Assert . assertEquals ( expected , SmallPrimes . findSuitableHit ( expected . toString ( ) ) )
assertFalse ( "List size mismatch across lists" , words1 . equals ( words2 ) )
Assert . assertEquals ( "{" + "\\"@context\\":\\"../$metadata#ESAllPrim(32767)/PropertyString\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":\\"First Resource - positive values\\"\\
assertFalse ( getTestChargingStationFromRepository ( ) . isReservable ( ) )
assertEventLogClient1 ( CLOSE )
assertEquals ( 10 , tokens . size ( ) )
Assert . assertTrue ( "Generated template does not match expected XML." , XmlHelper . compareXMLStrings ( expectedXML , message ) )
assertEquals ( "{foo{bar}" , pattern . glob ( ) . toString ( ) )
assertEquals ( body . toString ( ) , "operation _timeout" )
assertEquals ( 1360204148L , date . getTime ( ) )
JSONAssert . assertEquals ( "{a:[{id:1}]}" , ARRAY_OF_JSONOBJECTS , regExCustomArrayValueComparator . compare ( "{a:[{id:1}]}" , null ) )
assertTrue ( psa . getLegend ( ) instanceof ProportionalPoint )
assertEquals ( Long . valueOf ( 0 ) , account . getEntityId ( ) )
mockEndpoint . assertIsSatisfied ( )
Assert . assertEquals ( - 1 , sFsShell . run ( "mount" , "/" , ufsPath ) )
assertEquals ( "2015-08-20T20:10:00Z" , formatted )
assertTrue ( sut . writeList ( new short [ ] { 1 , 2 } ) )
assertThat ( response . getBody ( ) , equalTo ( "Hello World" ) )
assertEquals ( expected , actual )
assertEquals ( expected , output )
assertEquals ( "status" , HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( ArtifactRepositoryService . GLOBAL_M2_REPO_URL , ArtifactRepositoryService . getRepoURL ( ) )
assertTrue ( allStateCapitals . length == 50 )
assertEquals ( "" , result )
assertResultSet ( res )
assertEquals ( expResult , result )
assertEquals ( "(Foo,5)" , pair1 . toString ( ) )
assertThat ( target . parse ( ) , is ( false ) )
GAssert . assertEquals ( ImmutableMultimap . of ( "a" , "5.000" ) , postWithDouble )
assertThat ( offset . canonical ( ) , is ( "UTC+02:00" ) )
assertTrue ( validator . validate ( connectionLimits , PUT ) . passedValidation ( ) )
assertNotNull ( thr )
assertFalse ( code . isValid ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( DateUtils . getDate ( toml , "d" ) , DateUtils . getDate ( 2011 , 11 , 10 ) )
assertEquals ( expected , actual )
Assert . fail ( "No such class exist" )
assertThat ( "Ensure internal stops stay" , pep . equals ( testpep ) , is ( true ) )
assertEquals ( 1 , r . getCandidateResults ( ) . size ( ) )
assertEquals ( "mypic.png" , user . getProfilePicture ( ) )
assertEquals ( "select a from Artist a" , select . getExpression ( ) )
assertThat ( width , equalTo ( 2f ) )
assertEquals ( currentTimeMillis , readTimeStamp )
assertEquals ( SuppliedNameSuffixKit . getId ( ) , settings . getKitId ( ) )
assertThat ( developerEntity , equalTo ( positionEntityArgumentCaptor . getValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( authenticate , is ( present ( ) ) )
Assert . assertFalse ( testObj . containsWord ( "test" ) )
assertNull ( result )
Assert . assertEquals ( 2 , union . size ( ) )
assertEquals ( sampledResponseTimeList , responseTimeChartGroup )
Assert . assertEquals ( 0 , agents . size ( ) )
Assert . assertTrue ( true )
assertEquals ( "formatBlock() escapes \\"<\\" chars" , "<error>                            </error>\\n" + "<error>                            </error>\\n" + "<error>                            </error>" , formatter . formatBlock ( "<error>                            </error>" ) )
assertEquals ( 1 , executor . run ( AdultUnit . class ) )
assertTrue ( fileSizeAfter == fileSizeBefore )
assertNotNull ( user )
Assert . assertEquals ( "Invalid result" , "text" , result )
assertEquals ( Collections . emptyList ( ) , filter . getOperators ( ) )
assertEquals ( HOSTNAME , env . getDefaultVersionHostname ( ) )
assertTrue ( ! valid )
assertThat ( ConversionUtil . convert ( cal . getTime ( ) , Calendar . class , Locale . US ) , is ( cal ) )
assertThat ( options . getMaxCopyAttempts ( ) , is ( 1 ) )
assertNotNull ( DependentHostedNumberOrder . reader ( "PXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( gcd0 . monic ( ) , mod . monic ( ) )
assertFalse ( victim . isIncrementalBuild ( ) )
assertActive ( player1 , player3 , player4 )
assertEquals ( NO_CONTENT_204 , deleteResponse . getStatus ( ) )
Assert . assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( expResult , result )
assertEquals ( 0 , parts )
assertEquals ( 3 , dbHandler . getDataElementCount ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "bG9yZW0gaXBzdW0=" , result )
assertThat ( ioUtils . getDataIndex ( post . getBytes ( charset ) , charset ) , Matchers . equalTo ( 19 ) )
Assert . assertTrue ( errors . hasFieldErrors ( "patients" ) )
assertThat ( getCollection ( ) . count ( ) , is ( 1L ) )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isWarnEnabled ( ) )
assertEquals ( expected , api . getAPIUrl ( "" ) )
assertEqualsSet ( "ObjectOneOf.rdf" , Declaration ( indA ) , Declaration ( indB ) )
assertOut ( "s.toLowerCase() == 'foo'" )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( cal . getTime ( ) , date . getTime ( ) )
assertEquals ( array . getBaseTypeName ( ) , baseType )
Helpers . assertJson ( Deencapsulation . invoke ( twinMetadata , "toJsonElement" ) . toString ( ) , expectedJson )
assertEquals ( "Framework profile" , "myProfile" , config . getFrameworkProfile ( ) )
assertOut ( "a = a.filter(attribute('name').length())" )
assertEquals ( getLabel ( ) , 0.0 , prod . minus ( aperm ) . getRMS ( ) , TOLERANCE )
Assert . assertFalse ( TrainerFactory . isValid ( mlParams ) )
assertEquals ( Arrays . asList ( data ) , stream . asByteArray ( ) )
assertTrue ( result )
assertEquals ( expectedArg , parsedArg )
assertEquals ( String . format ( "Value %d: %d" , val1 , val2 ) , expected , compare ( val1 , val2 ) )
assertEquals ( "Incorrect authentication type" , AuthenticationType . FORM , sut . getAuthenticationType ( ) )
assertNull ( metricsFactory )
Assert . assertEquals ( "JD <john.doe@acme.org>" , decode ( field ) )
assertThatPersonIsNotProtected ( mapper ( FOR_NON_AUTORITY_CLIENT ) . map ( person , CPRProtectionLevel . DoNotCensorCPR ) )
assertEquals ( 5 , purged )
Assert . assertEquals ( "Status code should be the same." , 200 , conn . getResponseCode ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( now , tx . estimateBlockTime ( ) )
assertTrue ( "Mixed style error should have been discovered: " + getStdErr ( ) , getStdErr ( ) . indexOf ( "Mixed style error" ) > - 1 )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( "Params:\\n" + "foo: bar" , response )
assertEquals ( metadata , repository . getModuleMetadata ( "TEST-SLAVE" ) )
assertTrue ( check ( "a" , input , output ) )
assertEquals ( expResult , result )
assertThat ( xml ( stream . toString ( ) ) , hasXPath ( "//soapwms:ExtendedCapabilities/soapwms:SOAP/wms:OnlineResource" , nsBindings ( ) ) )
assertEquals ( " 33 297\\n" , found )
assertEquals ( body , responseMessage . getContent ( ) )
assertEquals ( STREAMING . ZK_EPHEMERAL_NODE_STATUS_DOWN , status )
assertEquals ( ExpressionFactory . exp ( "path not in (1, 2, 3)" ) , exp )
assertEquals ( 2 , springBeansConfig . getTargets ( ) . size ( ) )
assertEquals ( "S.a\\n" , found )
assertArrayEquals ( new long [ ] { 2 , 2 } , otherResult . getShape ( ) )
assertEquals ( 0 , report . getEventCount ( "flaggedDates" ) )
assertNotNull ( "ID should not be null" , book . getId ( ) )
assertEquals ( expected , actual )
assertTrue ( kieBuilder . getResults ( ) . hasMessages ( Level . ERROR ) )
assertEquals ( false , check . isRequired ( ) )
assertFalse ( i1 . equals ( null ) )
assertEquals ( "Failed applied BufferTransformation WithInvertedPositiveDistances" , desiredGeometry , transformedGeometry )
assertThat ( _cut . getDomains ( ) , containsInAnyOrder ( FOAF . NAMESPACE , SKOS . NAMESPACE ) )
assertEquals ( "Failed at " + i , kv . getBuffer ( ) . position ( ) + offset , buffer . position ( ) )
assertEquals ( null , result . getId ( ) )
assertEquals ( "Value \\\\" , result )
assertEquals ( "<p>Hello</p>\\n<p>There</p>" , divs . html ( ) )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( true ) )
assertEquals ( expResult , result )
Assert . assertEquals ( ki3 [ i ] . toString ( ) , ki2 [ i ] . toString ( ) )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "{\\"e_hi\\":0,\\"e_he\\":1}" , res )
assertTrue ( matcher . find ( ) )
assertEquals ( "public static final EntityProperty<TargetEntity> TO_ONE_REL = PropertyFactory.createEntity(\\"to_one_rel\\", TargetEntity.class);" , definition )
assertThat ( DateInterval . parseISO ( "2012-01-01/P775D" ) , is ( expected ) )
rule . assertScenarioEnded ( )
assertEquals ( 2 , result . getSources ( ) . size ( ) )
Assert . assertTrue ( Arrays . equals ( expected , target ) )
assertTrue ( cluster . getClient ( ) instanceof LocalJobRunner )
assertEquals ( "V1 Comment" , wrapper . getComment ( ) )
assertEquals ( expected , successors )
assertThat ( outcomes . get ( 0 ) , havingTag ( TestTag . withName ( "true" ) . andType ( "security" ) ) )
assertThat ( profile . getName ( ) , is ( "untitled-1" ) )
assertEquals ( 1 , found )
assertThat ( processor . getTables ( ) , is ( empty ( ) ) )
assertThat ( System . getProperty ( SYSTEM_PROPERTY ) , is ( "new-value-for-tests" ) )
Assert . assertFalse ( this . manager . remove ( this . person1 ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa must be a number(####)." ) )
assertEquals ( buf . toString ( ) , "[\\"a\\", \\"b\\"]" )
assertThat ( json , is ( "{\\"a\\":3}" ) )
assertTrue ( "DataPoints list is non-null on initialization" , null != subject . getDataPoints ( ) )
assertFalse ( c . isValidForSqlQuery ( ) )
assertTrue ( "Constant permission mapper should be created" , ops . exists ( TEST_CONSTANT_PERMISSION_MAPPER_ADDRESS ) )
assertThat ( tester . count ( Lock . KIND ) , is ( 0 ) )
assertTrue ( xmlResult . contains ( "ns:twine" ) && xmlResult . contains ( "ns:cord" ) )
assertThat ( target . createPath ( "node1" , "node2" ) . isEmpty ( ) , is ( false ) )
assertThat ( builder . getPatches ( ) , hasItemInArray ( "ADD /status/message = 'new and hot'" ) )
assertEquals ( "<!DOCTYPE html PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\" \\"http://www.w3.org/TR/html4/loose.dtd\\">\\n<html>\\n<head>\\n<meta
Assert . assertEquals ( 0 , patients . size ( ) )
Assert . fail ( "Exception should have been thrown" )
assertEquals ( 1 , x . size ( ) )
assertEquals ( 0 , resp . getStatus ( ) )
assertEquals ( updateCount , clock . sum ( increment ) . getSeconds ( ) )
assertTrue ( seen . add ( UUIDGenerator . nextString ( UUIDGenerator . TYPE4 ) ) )
assertTrue ( "There should be a cache" , handler . getContext ( ) . getThriftClientCache ( ) . containsKey ( dnode1Address ) )
assertEquals ( "sajand tagasi" , t . format ( new Date ( 0 ) ) )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD1 == 'enrichValue1') OR (SOURCEFIELD2 == 'sourceValue' AND TARGETFIELD2 == 'targetValue' AND ENRICHFIELD2 == 'en
ActionResultAssert . assertThat ( result )
Assert . assertTrue ( "result had wrong width" , result . getWidth ( ) == 1 )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertEquals ( "test" , empty . getMessageType ( ) )
assertEquals ( Collections . singleton ( TestEnum . TWO ) , select . getSelectedItems ( ) )
assertEquals ( 1 , packetIn . getCount ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( array ) , equalTo ( new double [ ] { 5 , 1 , 2 , 3 , 4 , 0 } ) )
assertThat ( integerOnePresent , is ( true ) )
assertThat ( TestI18n . testMessage3 . text ( "Test" , "Message" ) , is ( "Message Test Message" ) )
assertEquals ( expected , destination . toString ( ) )
assertTrue ( Arrays . equals ( msg1 , ciob . getContent ( ) ) )
Assert . assertNotNull ( "did not find collection" , entry )
Assert . assertEquals ( fastSqrt , computedSqrt , 0.000000001f )
assertCompletionInactive ( )
assertEquals ( "Local repository" , new URL ( "file:somewhere/localrepository" ) , config . getLocalRepository ( ) . getURL ( ) )
Assert . assertEquals ( 0 , solution . getValue ( ) , .0000001 )
assertEquals ( "no-cache" , wrapper . getFirstHeader ( "Cache-Control" ) . getValue ( ) )
assertEquals ( "English" , newSubtitles )
assertEquals ( "patient/" , path )
assertEquals ( json , gson . toJson ( value ) )
assertEquals ( 1 , result . length )
assertEquals ( ROUTE , route )
assertEquals ( ncTestName , result . get ( "namedCluster" ) )
Assert . assertEquals ( ambiente , eventoRetorno . getAmbiente ( ) )
assertFalse ( hasNoProjects )
assertEquals ( "BLOB" , sb . toString ( ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert . assertEquals ( "did not set use parallel transfer option" , false , transferOptions . isUseParallelTransfer ( ) )
assertEquals ( names . size ( ) , 1 )
assertEquals ( AuthStatus . SEND_FAILURE , module . validateRequest ( messageInfo , client , null ) )
Assert . assertEquals ( "true" , result )
Assert . assertNotNull ( rb )
assertEquals ( 15 , routeState . get ( 0 ) )
assertTrue ( "atan2() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( expected , a . getPrefixes ( ) . get ( 0 ) )
assertNull ( "default 3" , FixedDateFormat . createIfSupported ( options ) )
assertE ( "�尖�尖�尖�尖��" + "��  �烩��" + "�
Assert . assertTrue ( "Type1 font expected" , FontProgramFactory . createType1Font ( afm ) instanceof Type1Font )
assertEquals ( BuilderFactory . start ( ) . add ( "a" , new ObjectId ( 0x4e9d87a , 0x5825b60b637815a6L ) ) . build ( ) , doc )
assertFalse ( c1 . getSourceId ( ) . equalsIgnoreCase ( c2 . getSourceId ( ) ) )
assertSearch ( "1" , query , null , 1 , 1 )
assertFalse ( ref . isPresent ( ) )
assertOnResponseAttachment ( f2 , MAX_SIZE1 , "Client3mbAttachment.txt" )
assertEquals ( "emailAddress" , HospitalModelUtils . extractPIEmail ( hospitalModel ) )
assertEquals ( "property should be gotten" , testViewerId , sut . getViewerId ( ) )
assertTrue ( key . prefixOf ( itemKey ) )
assertEquals ( "lastSeenMessage must not be null " , 0 , lsys . getDesiredYear ( dt ) )
assertFalse ( SetStatementValidator . validate ( setters ) )
assertTrue ( readMap . equals ( testMap ) )
assertEquals ( V8 . getUndefined ( ) , result )
Assert . assertEquals ( 249.84d , result1 . get ( ) , 0.001d )
checker . assertIsErrorFree ( )
Assert . assertNull ( result )
assertEquals ( "fcr:metadata" , relativizeSubpath ( rootObjectId , resourceId ) )
assertEquals ( asList ( START , OFFER , OFFER_OFFER_2 , END ) , events . collect ( ) )
assertThat ( testIsValidAppProperty , is ( expectedIsValidAppProperty ) )
Assert . assertNotNull ( count )
assertEquals ( "1970-01-01T00:00:00" , rendered )
assertNotNull ( weakRef )
assertEquals ( "Incorrect cached response" , false , result )
result . assertErrorFreeLog ( )
assertPermanentCount ( playerA , "Azure Drake" , 1 )
assertEquals ( Suit . SPADES , fd . getType ( ) )
assertThat ( session . getCriteria ( ) , notNullValue ( ) )
assertCapturedMessage ( eventMessage ( "sess1" , "/topic" , "publishMessage1" ) , eventMessage ( "sess2" , "/topic" , "publishMessage1" ) )
assertEquals ( "abcd" , xmlString )
assertThat ( iconCaptor . getValue ( ) , is ( "ghost" ) )
assertEquals ( 0 , cap . get ( 0 ) )
assertTrue ( res . equals ( expected ) )
assertEquals ( "Incorrect file extension" , testExtension , actual )
Assert . assertEquals ( "Incorrect duration" , duration , res . getDuration ( ) )
Assert . assertTrue ( dsDao . getDSInfo ( remoteDSAddress ) . isUp ( ) )
assertRoundtrip ( input )
assertError ( ( ) -> target . getServices ( ) , ConnectionException . class , expectedMessages . getConnectionError ( ) )
assertEquals ( pp . getValue ( ) , "No handlers for address hello1" )
assertFalse ( skillConstraint . fulfilled ( insertionContext ) )
assertEquals ( AppConfigProperties . DEFAULT_BISERVER_BASE_URL , baseUrl )
arrays . assertContainsOnlyNulls ( someInfo ( ) , actual )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "/macro/edit" , result )
assertInState ( STATE . STARTED , STATE . STARTED )
assertEquals ( "ia32" , process . arch ( ) )
assertThat ( repository , notNullValue ( ) )
assertEquals ( "<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup
assertNotNull ( "Social Groups (JSON STRING)" , groups )
assertExpectedProtectedPorts ( dai )
assertEquals ( ImmutableMap . of ( 17 , "foo" , 4711 , "bar" ) , maps . oxen ( ) )
assertNull ( ex . getMessage ( ) )
assertThat ( term , is ( "���炽�裤���" ) )
assertArrayEquals ( data , ( float [ ] ) deserialize . readObject ( float [ ] . class ) , 0.0001F )
assertEquals ( calendar . newVersion ( ) , savedCalendar . newVersion ( ) )
assertTrue ( t . verify ( t . getEndorsers ( ) . get ( 0 ) , key . getPublic ( ) ) )
assertKernel ( kernel , ANNULUS , e )
assertEquals ( "test" , echo . echo ( "test" ) )
assertReceivedEvents ( 0 , this )
assertTrue ( a . isNormal ( null ) )
Assert . assertTrue ( "should have been second time" , secondTime )
assertEquals ( o1 . hashCode ( ) , o2 . hashCode ( ) )
Assert . assertEquals ( 1 , errors . size ( ) )
assertEquals ( 1 , views . size ( ) )
assertEquals ( expected , actual , delta )
Assert . assertTrue ( resultString . startsWith ( expected ) )
assertEquals ( "c" , gateway . getObject ( obj2 . getName ( ) ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( "failed to post rating" , 12 , result . getCode ( ) )
Assert . assertEquals ( THIRTEEN_FLOAT , pi . getThirteenFloat ( ) , 0.1f )
assertEquals ( v21Employments1 , v21Employments2 )
assertTrue ( stackTrace . contains ( msg ) )
Assert . fail ( )
assertEquals ( "value" , cacheEntry )
Assert . assertEquals ( new URI ( "stuff?param1&param2=stuff#fragment" ) , uribuilder . build ( ) )
result . assertIsNotSatisfied ( 1000 )
assertNotEquals ( one , differentClass )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertThat ( underTest . isFrozen ( ) , is ( false ) )
Assert . assertEquals ( "The file is packaged as test-deps-c-1.0.0.jar" , "test-deps-c-1.0.0.jar" , file . getName ( ) )
assertArrayEquals ( expected , list . toArray ( ) )
Assert . assertEquals ( 1 , q . getResultList ( ) . size ( ) )
Assert . assertTrue ( 2 + 2 == 4 )
assertEquals ( 10 , classUnderTest . getWidht ( ) , 0 )
assertThat ( result , equalTo ( "localhost" ) )
assertNotNull ( action )
assertThat ( values , containsInAnyOrder ( "other" , "value" ) )
assertEquals ( 1 , partitions . size ( ) )
assertTrue ( expectedMaxPoolingWithPaddingActivation . compare ( poolingActivation , TOLERANCE ) )
Assert . assertEquals ( "java.lang.Double" , provider . getCanonicalDataTypeName ( Mockito . mock ( Column . class ) ) )
Assert . assertEquals ( 200 , response . getStatus ( ) )
assertPutAndGet ( map )
assertTrue ( Arrays . equals ( readBytes , message1 . getBytes ( ) ) )
Assert . assertTrue ( isEqual ( distance , 1.0 ) )
Assert . assertEquals ( outcome , output )
Assert . assertEquals ( "(124_125inv3)" , inv . toHGVSString ( ) )
assertEquals ( getFailureMessage ( ) , 0.0025851 , distance , 1e-7 )
Assert . assertEquals ( "abc" , html )
assertEquals ( expected , actual )
assertThat ( backend . isEmpty ( ) , is ( true ) )
assertEquals ( "alpha" , v2 . getIdentifier ( ) )
Assert . assertEquals ( "SGVsbG8gS2VybWl0IQo=" , result )
assertEquals ( null , DateUtil . parse ( dateString , formatString ) )
Assert . assertEquals ( element . getText ( ) , "click me" )
Assert . assertTrue ( Files . isSameFile ( path , path ) )
Assert . assertEquals ( state , retrievedState )
assertTrue ( e . getMessage ( ) . contains ( badCell ) )
assertEquals ( "September 1752" , mpp . getPlannerCalendars ( ) . get ( 0 ) . getDate ( ) . toString ( ) )
assertEquals ( "a" , TYPE_HANDLER . getResult ( rs , 1 ) )
assertThat ( event . getPlatform ( ) , is ( sameInstance ( mockPlatform ) ) )
assertEquals ( Arrays . asList ( expected ) , mappingFiles )
assertTrue ( xml . contains ( "java.lang.NullPointerException" ) )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( LabeledUnicastRoute . class ) )
assertObjectEquals ( "[{f:'a'},{f:'b'},{f:'c'},{f:'d'},{f:'e'}]" , p . run ( bs , in , sa ) )
Assert . assertEquals ( 1 , compareResult )
assertEquals ( 5 , diff . getValue ( ) . get ( ) )
Assert . fail ( "Expected ConfigurationException" )
assertEquals ( descriptor , descriptor2 )
assertThat ( "Count of customer" , res , is ( 2 ) )
assertEquals ( null , form . getFieldValue ( ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertNotNull ( result )
assertEquals ( "87030-020" , String . format ( "%s" , cep ) )
Assert . assertArrayEquals ( expected , actual )
assertNotNull ( modelDTOs )
assertKernel ( kernel , ANNULUS , e )
assertArrayEquals ( new String [ ] { "a" , "b" } , post . getParams ( ) )
assertEquals ( "this is" , source . getValue ( "Book/name" ) )
Assert . fail ( "Expected a KeyProviderException" )
assertEquals ( tested , myDate . getTime ( ) )
Assert . assertEquals ( "did not reconstitute path correctly" , "/" , actual )
Assert . assertEquals ( 3 , vertices . size ( ) )
assertEquals ( "fileName-" + HASH + ".js" , result )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
Assert . fail ( e . getMessage ( ) )
assertEquals ( "host2 is not a valid host group" , result )
assertTrue ( dao . selectAll ( ) . size ( ) == 1 )
assertEquals ( Result . FAIL , user . apply ( item ) )
assertThat ( generatedGraph , equalTo ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n" + "<graph xmlns=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns
assertThat ( hBaseAdmin . tableExists ( "mytable" ) , is ( false ) )
assertTrue ( validator . validate ( EntityNames . ATTENDANCE , attendances ) . equals ( attendances ) )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
assertThat ( exists , is ( true ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertNull ( flashMap )
assertEquals ( "jdbc:h2:mem:test;MODE=ORACLE" , embeddedDatabaseRule . getConnectionJdbcUrl ( ) )
assertEquals ( "GBP 3.57" , test . toString ( ) )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( false ) )
assertNull ( entryRelationship )
assertThat ( count . getValue ( ) , equalTo ( 3L ) )
assertEquals ( "remote" , sf1 . getField ( ) )
assertEquals ( 0 , scores . getScore ( ) )
assertEquals ( 1 , query ( ) . from ( employee ) . where ( sq1 . exists ( ) ) . fetchCount ( ) )
assertEquals ( BOOLEAN , v8Object . getType ( "key" ) )
assertEquals ( "���" , I . currency ( ) . format ( Locale . ENGLISH ) )
assertTrue ( rsp . toString ( ) , rsp . get ( FAILURE_DESCRIPTION ) . asString ( ) . contains ( "WFLYEE0109" ) )
assertTrue ( verifier . isValid ( interceptor , controllerMethod , controllerInstance , constraints ) )
assertNotNull ( "Created EventSourceTopology" , eventSourceTopology )
PositionCollectorTestUtil . assertEmpty ( collector )
assertEquals ( 1 , synchronization . getOrder ( ) )
assertEquals ( models , actual )
assertEquals ( "Done." , messages . getMessage ( MESSAGE_ID . DONE ) )
assertThat ( response . getEntity ( ) , CoreMatchers . < Object > equalTo ( userRoleList ) )
out . assertIsSatisfied ( )
Assert . assertArrayEquals ( Base64 . encodeBase64 ( value ) , ( byte [ ] ) f . func ( value ) )
ctx . assertEquals ( 2 , result . size ( ) )
assertEquals ( transactionCompletion , senderSupplier . get ( ) . sendFiles ( ) )
assertTrue ( order . isDiscontinued ( DateUtils . parseDate ( "2014-11-01 11:11:11" , DATE_FORMAT ) ) )
assertEquals ( expected , elements )
assertEquals ( expectedOutput , dummyXmlOutputStreamProvider . getXmlString ( ) . trim ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( "!ys1\\n" , sWriter . toString ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff22_" ) )
assertTrue ( Arrays . equals ( Arrays . copyOf ( movie . getOutline ( ) . getLength ( ) , outlineLength ) , true ) )
assertEquals ( true , wizard . canComplete ( ) )
assertEquals ( "middleN" , person . getMiddleName ( ) )
assertFalse ( "our host shouldn't have set our attribute" , retAttr . contains ( attributes . get ( 0 ) ) )
assertEquals ( EarlyHints . MESSAGE , ri . getDescription ( ) )
assertTrue ( SudokuValidator . isValidSudoku ( board ) )
assertEquals ( 2 , nodeUnits . size ( ) )
assertEquals ( "(Object obj, int count)String" , sig . toString ( ) )
assertEquals ( groupId , kafkaStore . getKafkaStoreReaderThread ( ) . getConsumerProperty ( SchemaRegistryConfig . GROUP_ID_CONFIG ) )
assertFalse ( handler . test ( null , null , Direction . In , null , null ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . assertEquals ( "OK" , reference . get ( ) . getAttachment ( Http2Client . RESPONSE_BODY ) )
assertEquals ( "book.css" , css )
assertTrue ( "It should be true - HDFS host: " + config . getNamedCluster ( ) . getHdfsHost ( ) , ncPropertiesNotNullOrEmpty )
assertTrue ( problem )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getNodeSelector ( ) , hasEntry ( "os_arch" , "x86_64" ) )
Assert . assertEquals ( 2 , messageListener . getReceivedMessages ( ) . size ( ) )
Assert . assertEquals ( pullRequestActivity , parsedPullRequestActivity )
assertTrue ( first . equals ( second ) )
assertEquals ( dlsn , FutureUtils . result ( writer . write ( record ) ) )
assertTrue ( converter . canConvert ( CommentAction . class ) )
assertEquals ( "Mark is 37" , result . getValue ( ) )
assertTrue ( tchannel . isOpen ( ) )
Assert . assertTrue ( exception )
assertTrue ( capturedCallOptions . getValue ( ) . getTimeout ( ) . equals ( timeout ) )
assertAdaptiveScalarEncoder ( )
assertFalse ( ps . canRead ( ) )
assertEquals ( newLastname , customer . getLastName ( ) )
assertDelete ( )
Assert . assertEquals ( 1 , operation . operations . size ( ) )
assertThat ( mdcValueStr , nullValue ( ) )
assertOut ( "var /** @type {RegExp} */ a = /[^\\\\s+(\\\\w+)(?:\\\\s*=\\\\s*(\\".*?\\"|'.*?'|[\\\\w\\\\.]+))?/sg" )
assertTrue ( "exact match on class should run" , exactFilter . shouldRun ( firstClassName ) )
this . assertEdgesOkResponseJsonStructure ( 0 , 0 , response )
assertEquals ( Boolean . TRUE , value )
assertEquals ( of ( response ) , listener . getEventLog ( ) )
assertTrue ( "Login succeed for alias not in roles.properties" , success )
assertThat ( inputStream , notNullValue ( ) )
assertThat ( out , containsString ( "<birthDate value=\\"2012-01-02\\"/>" ) )
assertEquals ( "Expected 10 results!" , 10 , n )
assertThat ( pattern , specificPart ( is ( ",\\"type\\":\\"log\\",\\"logger\\":\\"%replace{%logger}{\\"}{\\\\\\\\\\"}\\",\\"thread\\":\\"%replace{%thread}{\\"}{\\\\\\\\\\"}\\",\\"level\\":\\"
assertEquals ( channel , typedChannelFactory_ . get_typed_channel ( id . value ) )
assertMappedFieldValueIs ( this . resourceTargetedByMapping )
assertTrue ( population . size ( ) == 100 )
assertIterationsEqual ( expected , Views . iterable ( shuffled ) )
Assert . assertTrue ( isArchived )
assertEquals ( 2 , i . get ( ) )
Assert . areEqual ( 1 , 1 , "发生了不该有的异常" )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( "The quick brown fox has many silly" + "red fox sox" , result )
assertEquals ( index1 , index1Duplicate )
JSONAssert . assertEquals ( "Message" , "{id:12346}" , actual , false )
assertFalse ( query ( func . args ( ) ) . isEmpty ( ) )
assertEquals ( 3 , dataMgr . getCommandHistory ( ) . size ( ) )
assertThat ( "Locations created with different paths and different properties must not be equal" , locationA1 , is ( locationA2 ) )
Assert . assertEquals ( 0 , returned . size ( ) )
assertEquals ( "one" , actual )
assertFocusedCell ( 4 , 2 )
assertNotNull ( result )
assertArrayEquals ( new long [ ] { 1 , 1 } , outArr . shape ( ) )
assertNotNull ( MessagingBinding . fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( baos . toString ( ) , startsWith ( String . format ( "0 m 0 s%n" ) ) )
assertEquals ( 5 , v )
assertTrue ( normalizedProbability > 0 && normalizedProbability <= 1 )
assertEquals ( expResult , result )
Assert . assertEquals ( "�注�� 12 �拽�转" , t . format ( new Date ( System . currentTimeMillis ( ) + 1000 * 60 * 12 ) ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
assertEquals ( 1 , kieSession . fireAllRules ( ) )
assertThat ( scheduler . isScheduling ( "mytask" ) , is ( false ) )
assertEquals ( "the url should be http://localhost/api/rest/v1/staffs?ids=" + ids , "http://localhost/" + PathConstants . API_SERVER_PATH + "/staffs/" + ResourceNames . STUDENTS , url . toString ( ) )
assertNotEmptyAndClear ( writer )
assertNotNull ( resolver )
Assert . assertEquals ( actual , "yy-mm-dd" )
assertTrue ( impl . mustRevalidate ( entry ) )
assertEquals ( response . get ( 0 ) , testResponse . get ( 0 ) )
assertEquals ( 6 , methods . size ( ) )
assertEquals ( "MATCH (n) WHERE id(n) IN [\\"ids\\"]" , json )
assertEquals ( "xsd:float" , prefixedName )
Assert . assertEquals ( "<v>1\\n1</v>" , writer . toString ( ) )
assertEquals ( xmlString , xmlReturn )
assertTrue ( IsoMatcher . isomorphic ( dataset , model . asDatasetGraph ( ) ) )
assertEquals ( expectedClass , actualClass )
Assert . assertEquals ( setA . hashCode ( ) , setB . hashCode ( ) )
assertEquals ( 1L , count . longValue ( ) )
assertEquals ( 1 , expectedLinks . size ( ) )
Assert . assertEquals ( ADParagraphStreamTest . NUM_SENTENCES , count )
assertEquals ( "nested error field is missing" , "missing" , result . getError ( ) )
assertThat ( watchers . of ( question ) , hasItem ( subscribedWatcher ) )
test . assertOutput ( "input" , input , "output" , output )
runner . assertAllFlowFilesTransferred ( SelectHive_1_1QL . REL_FAILURE , 1 )
assertEquals ( match , matcheCounts [ 2 ] + matcheCounts [ 3 ] )
assertTrue ( topLevel == MongoTopLevel . CONSISTENCY )
Assert . assertEquals ( "width=340 height=200\\r\\n" , readText ( decoder ) )
Assert . assertTrue ( verifyTest ( crlBuilder ) )
assertTokens ( Tokens . TEXT , Tokens . PLUS , integer ( 10 ) )
assertEquals ( 3600. , Time . parseTimeToSeconds ( time ) , 0.01 )
Assert . assertNull ( "List is not null" , list )
Assert . assertEquals ( 7 , instance . size ( ) )
assertThat ( intervals , is ( expected ) )
Assert . assertTrue ( getFactory ( ) . exists ( ConfigServiceAccessorTestConfiguration . class ) )
Assert . assertFalse ( result )
assertEquals ( 10 , template . getMetaData ( context . getEntityResolver ( ) ) . getStatementFetchSize ( ) )
assertThat ( target2 . getSubscriberId ( ) , is ( "subscriber_id" ) )
assertEquals ( "Select with not null check" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertEqualHQL ( "allen love dandan" , sb . toString ( ) )
assertEquals ( resp . getCode ( ) , 204 )
assertEquals ( "" , r1 . toString ( ) )
Assert . assertTrue ( planetsReflected . length == 6 )
Assert . assertEquals ( "ITEM 001Product             0005000005\\n" , result )
assertFalse ( BooleanIndexing . or ( array , Conditions . lessThan ( 1e-6f ) ) )
assertEquals ( "Columns size is wrong" , 2 , columns . size ( ) )
assertEquals ( "/_snapshot/kangsungjeon/leeseohoo,kangsungjeon" , getSnapshotRepository . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertTrue ( listChesse . getTotalAmount ( ) == 0 )
assertEquals ( expectedResult , OSValidator . isWindows ( ) )
Assert . assertEquals ( 1 + 2.2 + string , doc2 . getContentField ( "out" ) )
assertEquals ( expectedClassPath , classPath . asArgumentString ( ) )
assertEquals ( Status . FORBIDDEN , status )
assertTrue ( typedArray . isAvailable ( ) )
assertNull ( result )
assertEquals ( 30 , ( int ) new AcceptsLambda < Integer > ( ) . accept ( x :: addInts ) )
assertNotNull ( result )
Assert . assertEquals ( expect_sql , sql )
assertTrue ( obj . containsKey ( "foo" ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
Assert . assertEquals ( 1 , an . analyze ( new CandidateNode ( new CandidateRule ( "test" , rule ) , nnode ) , results ) . size ( ) )
assertNotNull ( result )
assertTrue ( "message should be authenticated with salt" , verifyMAC ( message , mac ) )
assertThat ( getPodSpec ( jobSpec ) . getRestartPolicy ( ) , equalTo ( "Always" ) )
assertTrue ( provider . getPainter ( ) instanceof PainterAware )
Assert . assertTrue ( fs . exists ( target ) )
Assert . assertEquals ( "Rule computation was called " + n + " times" , 1 , n )
assertEquals ( 2 , passages . size ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( clientWrapper . add ( "test" , 1000 , "value" , transcoder ) )
assertEquals ( v1 , v2 )
Assert . assertEquals ( 0 , analyser . getTimeWindowViolationAtActivity ( route . getStart ( ) , route ) , 0.01 )
Assert . assertFalse ( encounter . equals ( null ) )
assertNull ( result )
assertNotEquals ( idA , idB )
Assert . assertEquals ( 412 , stringResponse . getStatus ( ) )
assertEquals ( presenter . getName ( ) , ph )
arrays . assertHasSize ( description , null , 8 )
assertEquals ( 7 , smsd1 . getAllAtomMapping ( ) . getCount ( ) )
Assert . assertEquals ( 4 , p . i ( 1 , new C1 ( ) ) )
Assert . assertEquals ( 0 , collect . size ( ) )
assertHtml ( childrenHtml , "children=2" )
Assert . assertEquals ( count , chronicle . getNumEvents ( 0 , count * period ) )
Assert . assertNull ( part )
assertNotNull ( Certificate . fetcher ( "FLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "Amount is GBP12.50" , sub . replace ( "Amount is ${code}${amount}" ) )
assertEquals ( monthBoundsLToR , ui . getMonthHeaderBounds ( 1 , 1 ) )
Assert . assertEquals ( 1 , updates . getOperations ( ) . size ( ) )
assertEquals ( latch . getCount ( ) , 0 )
assertThat ( actual , is ( "server1.mycompany.com" ) )
assertTrue ( algorithm . shouldRetry ( attempt ) )
assertEquals ( "John Doe" , RecordPath . compile ( "concat('fullName', 'lastName', 'firstName')" ) . evaluate ( record ) . getSelectedFields ( ) . findFirst ( ) . get ( ) . getValue ( ) )
Assert . assertEquals ( value , tested . getTypes ( ) )
assertEquals ( 1 , listener . updatedInjectedFilters . size ( ) )
assertThat ( "getValue" , node . getValue ( ) , is ( false ) )
assertEquals ( "2 > 3" , expr . getParameterValue ( ) )
Assert . fail ( "Missing required input" )
assertTrue ( ContextDataFactory . createContextData ( 1 ) instanceof FactoryTestStringMap )
assertEquals ( 1 , map . size ( ) )
assertEquals ( expResult , result , 1 )
assertEquals ( asSet ( "nonExistentId" , "xForm:nonExistentId" , "ySubview:nonExistentId" ) , resolvedIds )
assertEquals ( g1 , g2 )
Assert . assertNotNull ( node )
assertTrue ( TeiidURL . isValidServerURL ( SERVER_URL ) )
assertEquals ( true , CollectionUtils . isEmpty ( coll ) )
assertEquals ( 4096 , testInt )
assertEquals ( "testuuid" , sut . transform ( "/blah/whatever/someversionhere_uuid_testUUID" ) )
assertEquals ( "missing" , caller . getResponseBody ( ) )
assertSame ( System . getenv ( "PATH" ) , value . getValue ( ) )
assertNotNull ( Files . getFileAttributeView ( gfs . getPath ( "/file.txt" ) , FileAttributeView . class ) )
assertEquals ( criterion2 , instance . getQueryString ( criterion1 ) )
assertTrue ( events . size ( ) == 5 )
assertEquals ( i , readIter . getSample ( ) )
Assert . assertEquals ( "a\\n\\nb\\n\\nc" , html )
assertNotEquals ( instanceId1 , instanceId2 )
assertTrue ( tree1 . isLeaf ( ) )
assertTrue ( "IllegalArgumentException expected" , ex . getCause ( ) instanceof IllegalArgumentException )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/page/foo" ) )
assertEquals ( testQueryValue , rval )
assertEquals ( exception , fn . apply ( 1 ) )
assertEquals ( PCEPErrors . LSP_NOT_PCE_INITIATED , this . errorsSession1 . get ( 0 ) )
assertEquals ( expectedSignature , mapResourceType . getSignature ( ) . toString ( ) )
Assert . assertEquals ( valResult , Bytes . toBytes ( "val1" ) )
assertEquals ( "Bad character in " + input , expected , Encoder . encode ( input . toCharArray ( ) ) )
assertToken ( profile , token , VALUE )
Assert . assertEquals ( getExpectedDelegationTokenCount ( ) , delTokens . size ( ) )
assertThat ( result , Matchers . equalTo ( "" ) )
assertEquals ( "from ((select SURVEY.ID\\n" + "from SURVEY survey1)\\n" + "union\\n" + "(select SURVEY.ID\\n" + "from SURVEY survey2)\\n" + "
assertThat ( getMatchingContainerEnv ( domainPresenceInfo , jobSpec ) , allOf ( hasItem ( configMapKeyRefEnvVar ) , hasItem ( secretKeyRefEnvVar ) , hasItem ( fieldRefEnvVar ) ) )
assertEquals ( h , TextUtil . stripNewlines ( out ) )
assertNull ( event )
Assert . assertEquals ( 1.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
assertEquals ( Sets . newHashSet ( rt_descendant , rt_ancestor ) , ancestors )
assertEquals ( cVector , normalizedCVector )
assertEquals ( notSymLink , Files . readSymbolicLink ( symLink2 ) )
assertNotNull ( "pre 1.8 storageInfo should return non null retentionPolicy" , retentionPolicy )
assertTrue ( capture . toString ( ) . contains ( "useClassPath" ) )
assertEquals ( "{" + newLine ( ) + "    with ($p) { setAge($p.getAge() + 1) };" + newLine ( ) + "}" , printConstraint ( expression ) )
assertEquals ( expectedJson , message . toJson ( ) )
assertSerializable ( new ArtifactDescriptorException ( result ) )
assertEquals ( "wrong filename" , "FIX40.xml" , dd . getFilename ( ) )
assertEquals ( err , "Directory, 'EasyMock for class java.io" )
assertEquals ( StatusCode . NAMESPACE_NOT_FOUND , response . getCode ( ) )
this . assertGet ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/
assertEquals ( insertNum , count )
assertAnnotations ( 3 , Quantity . class , new TestQuantity ( 0 , "25ml" , 25 , "m^2" , 250 , "m^2" , "area" ) , new TestQuantity ( 1 , "35 millilitres" , 35 , "m^2
assertTrue ( entity . getId ( ) > 0 && entity . getDate ( ) == null )
assertEquals ( "Johny" , value )
Assert . fail ( )
assertFalse ( voter . voteMatch ( affiliation , organization ) )
assertNoneEqual ( otherVoFqans )
assertConstraintViolationToOneValidation ( constraintViolations )
assertTrue ( false )
assertEquals ( HttpServletResponse . SC_OK , resp . getStatus ( ) )
assertEquals ( "checker should return 'enabledStatus' string" , "enabledStatus" , checker . run ( ) )
assertNull ( dao . read ( association . getHandle ( ) ) )
Assert . assertEquals ( sourceCardinality , subplanCtx . getOutputCardinality ( 0 ) )
observer . assertObservations ( "14" , PhaseId . APPLY_REQUEST_VALUES , PhaseId . APPLY_APPLICATION , PhaseId . PROCESS_VALIDATIONS , PhaseId . RENDER_RESPONSE , PhaseId . RESTORE_VIEW , PhaseId . UPDATE_MODEL_VALUES , PhaseId
Assert . assertTrue ( ( ( LocatorTargetSelector ) client . getConduitSelector ( ) ) . getStrategy ( ) instanceof LocatorSelectionStrategy )
assertEquals ( 84 , id3tag . getBPM ( ) )
assertTrue ( theSize . getClassInformation ( ) instanceof SizeClassInformation )
assertTrue ( handled )
assertThat ( p . type , is ( Packet . CLOSE ) )
assertEquals ( "0 days, 00:05:12" , howLongFromNow )
assertTrue ( valid )
Assert . assertTrue ( pattern . list ( ) . isEmpty ( ) )
assertNull ( new Patterns ( ) . getPattern ( entityId ) )
assertEquals ( "The first state on first page is not correct" , FIRST_STATE_FIRST_PAGE , actual )
assertEquals ( "/genPath" , path )
assertThat ( stepListener . getCurrentTestOutcome ( ) . getTestSteps ( ) . get ( 0 ) . getDescription ( ) , is ( "final title" ) )
CustomAsserts . assertEquals ( definition , expected , actual )
assertEquals ( 5500 , safe . get ( ) )
assertFalse ( result . hasFailures ( ) )
assertEquals ( LocalDate . of ( 2012 , 6 , 4 ) , test )
assertThat ( matcher . matches ( null ) , is ( true ) )
assertEquals ( 0 , records . size ( ) )
assertEquals ( field . getLabel ( ) , "label" )
assertProcessEnded ( processInstance . getId ( ) )
Assert . assertEquals ( message . name ( ) , translated )
assertThat ( description . toString ( ) , is ( "<3> row <1>" ) )
assertTrue ( isFocusInsideElement ( radioButtonGroup2 ) )
assertEquals ( taskService . createTaskQuery ( ) . singleResult ( ) . getTaskDefinitionKey ( ) , "afterBpmnError" )
assertStatus ( Status . OK , book )
assertEquals ( expecting , result )
assertThat ( value . isPresent ( ) , is ( equalTo ( false ) ) )
assertThat ( result , is ( Collections . singletonList ( "setMyField" ) ) )
assertThat ( testValues , is ( expectedValues ) )
assertThat ( response , containsString ( "source:TEST" ) )
Assert . assertFalse ( results . hasNext ( ) )
assertEquals ( "" , result )
assertEquals ( null , result )
assertThat ( target . getConvNetworkId ( nwId ) , is ( "network01" ) )
assertFalse ( connection . connect ( ) )
assertEquals ( mappedEntityID , event . getEntityForNaming ( true , false , true ) )
assertEquals ( 1 , count )
Assert . assertFalse ( bpInfo1 . equals ( bpInfo2 ) )
Assert . assertEquals ( Syntax . XWIKI_2_1 . toIdString ( ) , syntaxId )
assertEquals ( "fffff" , data )
Assert . assertTrue ( ctx . getResult ( ) )
assertEquals ( expectedMessage , result )
assertEquals ( r1 , r2 )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( expected , actual )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2007 , 5 , 15 ) , OFFSET_PONE ) , t )
assertThat ( unlocked . getInteger ( ) , equalTo ( - 2 ) )
assertNotNull ( entity . getId ( ) )
assertNull ( result )
Assert . assertFalse ( result )
assertCoordinates ( 9 - 1 , HEIGHT - 1 )
Assert . assertTrue ( authorizeInteraction )
assertEquals ( Arrays . asList ( 42 ) , list )
assertTrue ( me . isNewMsg ( ) )
assertEquals ( "" , result )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
assertEquals ( expectedBounds , actualBounds )
Assert . assertEquals ( 150 , terminatedAfter )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertBoard ( "�尖�尖�尖�尖��\\n" + "��   ��\\n" + "��
assertNull ( converter . getAsObject ( facesContext , new UIPanel ( ) , null ) )
assertEquals ( "Parser error: DeviceProvisioningServiceName mismatch!" , expected , actual )
assertTrue ( currentProjectPathProvider . getValue ( ) . isEmpty ( ) )
AssertAnnotations . assertSentence ( sentences , select ( jcas , Sentence . class ) )
Assert . assertEquals ( true , booleanConstant . evaluate ( null ) )
Assert . assertEquals ( path , "dir" + File . separatorChar + "dir2" )
Assert . assertEquals ( 0 , m . size ( ks1 . getKeyspaceMetaData ( ) . getPartitioner ( ) . partition ( "row1" ) , "column2" ) )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertAxisEquals ( timeInterval , new ArrayDouble ( 1.0 / 18.0 , 6.0 / 18.0 , 11.0 / 18.0 , 16.0 / 18.0 ) , Arrays . asList ( TimeScalesTest . create ( 2014 , 12 , 24 , 22
Assert . assertEquals ( 6.0 , calc . evaluate ( "* this is a test,ref2,*" ) , 0.0 )
assertThat ( path . getString ( NO_OP_ENCODER ) , is ( "/{http://www.modeshape.org/1.0}a/{}b/{http://www.modeshape.org/1.0}c/../{}d/./{http://www.modes
Truth . assertThat ( outputStream . toString ( ) )
assertEquals ( "foo.bar" , pathConnector . getPropertyPath ( ) )
assertTrue ( "Accepts a method that returns a PageSubclass" , interceptor . accepts ( resourceMethodThatReturnsPageSubclass ) )
Assert . assertTrue ( errors . hasFieldErrors ( "retireReason" ) )
assertEquals ( 80 , uniqueWords )
Assert . assertFalse ( new ProcessorDecorator ( processor ) . isMinimize ( ) )
assertThat ( replaced , is ( newEditRelation ) )
assertTrue ( HttpTestUtils . semanticallyTransparent ( resp2 , result ) )
assertEquals ( "hello world" , record . getAnnotation ( Annotation . RELATIONAL_PLANNER ) )
Assert . assertEquals ( "{\\"alice\\":{\\"@charlie\\":\\"david\\",\\"$\\":\\"bob\\"}}" , result . toString ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "host" , result )
runner . assertNotValid ( )
assertEquals ( "Hello World" . substring ( 2 , 7 ) , bytes . parseUtf8 ( CONTROL_STOP ) )
assertArrayEquals ( CAFEBABE_SHA1 , sha1 )
Assert . assertTrue ( "Expected tuples to be equal" , Utils . equals ( t1 , t2 ) )
assertLife ( playerB , 16 )
Assert . assertEquals ( 0 , patients . size ( ) )
assertTrue ( splitOnWhitespace . size ( ) == 8 )
assertEquals ( "Did not get expected parameter count" , 3 , params . size ( ) )
assertNull ( request . getSession ( ) . getAttribute ( UsernamePasswordCheckcodeAuthenticationFilter . SPRING_SECURITY_FORM_USERNAME_KEY ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( FILE_BASE ) ) )
assertEquals ( "UNLOCK" , fileEntry . getLockType ( ) )
assertEquals ( "<html><head></head><body></body></html>" , rewritten )
assertNull ( sut . execute ( new DeleteActivityRequest ( smithersId , bogusId ) ) )
assertThat ( environmentVariables . getProperty ( "properties" ) , is ( "undefined" ) )
Assert . assertTrue ( configuration . isDubboEnabled ( ) )
assertThat ( newActivity , instanceOf ( TestSpyActivity . class ) )
assertInvocations ( invocations , "prepare" , "commit" )
assertTrue ( "Coercing to VARBINARY failed for PDataType " + p , obj instanceof byte [ ] )
assertEquals ( 1 , missingNumber . missingNumber ( array ) )
assertTrue ( source . isRoot ( ) )
assertThat ( PrettyTime . of ( Locale . US ) . print ( dur , TextWidth . WIDE , true , 3 ) , is ( "1 jour, 0 heure et 4 minutes" ) )
assertTrue ( result )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , query1 ) )
assertThat ( c . resolve ( getSchema ( ) ) , is ( nullValue ( ) ) )
assertEquals ( "Expected 99 results!" , 99 , n )
assertEquals ( result , expected , 0.0000001 )
Assert . assertTrue ( _c . canConvertTo ( Integer . TYPE ) )
assertThat ( Template . parse ( source ) . render ( ) , is ( "first-block-stringtest-string" ) )
assertEquals ( "Wrong # of objects found" , 1 , objects . size ( ) )
Assert . assertFalse ( inBlackList )
assertEquals ( 0 , fooDao . create ( ( Foo ) null ) )
assertEquals ( "Expected 2 results!" , 2 , n )
Assert . assertTrue ( "The expected values were not send. The missing values are " + expectedValueMap , expectedValueMap . isEmpty ( ) )
assertFalse ( source . exists ( ) )
assertEquals ( "fireActionActivated2\\n" , actionList )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isTraceEnabled ( ) )
assertThat ( element . isPresent ( ) , is ( true ) )
this . assertHeadersSet ( CONTEXT + "/topics/1" )
assertThat ( house . getMouse ( ) , is ( sameInstance ( tom ) ) )
assertTrue ( t . compareTo ( rt ) == 0 )
assertEquals ( outputExpect , output )
Assert . assertNull ( u )
assertFix ( "8=FIX.4.4|9=64|35=1|34=1|49=CLIENT|52=20140101-10:10:10.100|56=SERVER|7=1|16=1|10=199|" )
assertThat ( encodedValue , equalTo ( GLOBAL_ENCODED_SHA_384_VALUE ) )
editor . assertProblems ( "vm_extensions|unknown 'VMExtension'. Valid values are: [vm1, vm2, vm3, vm4]" )
assertEquals ( "{ a : [ { a : 1 } ] }" , doc )
assertTrue ( tup . getRight ( ) == MissingNode . getInstance ( ) )
assertNotNull ( CallSummary . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( pgpSignedMessage . verify ( getPublicKey_5763950D ( ) ) , is ( true ) )
assertTrue ( options . isStrict ( ) )
assertHierarchyIs ( "virtual/resource/type" )
assertEquals ( 2 , services . size ( ) )
assertThat ( mySignalHandler . wasCalled , IsEqual . equalTo ( false ) )
assertEquals ( Arrays . asList ( filter1 , filter2 ) , returned )
assertEquals ( "" , result )
Assert . assertEquals ( msg , expected , actual , delta )
assertSame ( category , categoryProvider . convertToEntityAttribute ( "name" ) )
assertEquals ( 0 , ( float ) calculator . add ( 1 , 0 ) , - 1 )
Assert . assertNotNull ( mxBeanMapping2 )
assertEquals ( "abcdef" , buf . getTail ( ) )
Assert . assertTrue ( fitResidualSum < noisyResidualSum )
Assert . assertTrue ( "Text should be selected" , toggle . isSelected ( ) )
assertions . isNotEmpty ( )
assertEquals ( 6 , results . size ( ) )
assertEquals ( "XXX" , tr . getAttribute ( "X" ) )
Assert . assertEquals ( SearchAction . SEARCH_VIEW , streetSearchAction . search ( ) )
assertEquals ( 100 , ( int ) tree . entries ( ) . count ( ) . toBlocking ( ) . single ( ) )
assertEquals ( "Wrong visited nodes" , expected , visitor . getVisitedNodes ( ) )
assertResultSet ( res )
assertThat ( form . isValid ( ) , equalTo ( true ) )
assertEquals ( expected , out )
assertTrue ( newYearsDay . isAfter ( newYearsEve ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertEquals ( "Expected 100 results!" , 100 , n )
assertNull ( result )
Assert . assertEquals ( str , new String ( byteData ) )
Assert . assertTrue ( contentType , contentType . contains ( "text/plain" ) )
assertRequest ( "DELETE" , "Call/%s/Play/" , callId )
assertEquals ( 1 , output . getEntry ( ) . size ( ) )
Assert . assertEquals ( 3 , output . size ( ) )
assertEquals ( msg , i , curVal )
assertEquals ( 1 , inverses . size ( ) )
assertTrue ( "File audit log should be created" , ops . exists ( TEST_FILE_AUDIT_LOG_ADDRESS ) )
assertFalse ( matchResult )
Assert . assertNull ( getWithTimeout ( commit ) )
assertEquals ( "注�� 专�注" , t . format ( new Date ( ) ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertEquals ( initEmptyContainer , 0L )
assertNotNull ( _notification )
assertResultSet ( res )
assertEquals ( "org.talend.components.kinesis.runtime.KinesisDatasetRuntime" , runtimeInfo . getRuntimeClassName ( ) )
assertThat ( query . getQuery ( ) , is ( expectedToString ) )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( false ) ) )
assertTrue ( message , message . contains ( "builder" ) )
assertEquals ( ScenarioSimulationModel . Type . RULE , retrieved . getSettings ( ) . getType ( ) )
Assert . assertEquals ( expected , actuals )
assertNotNull ( alumnoPaquete . getId ( ) )
assertAxisEquals ( 234567 , 678967 , new double [ ] { 300000 , 400000 , 500000 , 600000 } , new String [ ] { "3e5" , "4e5" , "5e5" } , axis )
assertEquals ( 3 , arr . reduceRight ( callbackfn ) . intValue ( ) )
assertEquals ( getMessage ( MessageKeys . E_TR_FW_0001 ) , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) )
assertNotNull ( dockerInfo )
assertEquals ( expResult , result )
assertEquals ( options1 , options2 )
assertTypeCheckFileOk ( "abssamples/deltas/P2P_P4.abs" )
assertThatSliderValueIs ( value )
assertSame ( envelope , cellRenderer . getIcon ( ) )
Assert . assertTrue ( terminated )
Assert . fail ( "LoggingServlet messages should be presented only in files specified in profiles, but found: " + line )
assertSame ( given , actual )
assertThat ( request . getTimeLoaded ( ) , is ( notNullValue ( ) ) )
assertNull ( OpenShiftContext . get ( ) . get ( "foo" ) )
Assert . assertTrue ( "Timeout reached." , System . currentTimeMillis ( ) - start > 6000 )
assertEquals ( 200 , rst . getStatus ( ) )
Assert . assertTrue ( scandiumUtil . waitConsole ( "CIPHER is " + cipher ) )
assertContextOk ( ctx , "O1:doc:doc,O2:doc:ref,O3:ref:doc" , "Hello 1!,Hello 2!,Hello 3!" , "Source,Source,Source" )
assertEquals ( "127.0.0.1:123" , m . getHZAddress ( ) . toString ( ) )
assertFalse ( _wardenService . isWardenServiceEnabled ( ) )
assertThat ( out . toString ( ) , containsString ( "Using timeout for story a_short.story of 25" ) )
assertTrue ( equalsResult )
assertEquals ( 3 , query . count ( ) )
assertSingleIssue ( issues , 1 , "For statement." , "10min" )
assertEquals ( ts , t . exec ( newTuple ( input ) ) )
assertEquals ( 10.0 , Solutions . bestOf ( solutions ) . getRoutes ( ) . iterator ( ) . next ( ) . getStart ( ) . getEndTime ( ) , 0.1 )
Assert . assertEquals ( 100. , analyser . getFixedCosts ( route ) , 0.01 )
Assert . assertNotNull ( getInst ( ) . findCon ( id , age ) )
Assert . assertTrue ( executor . awaitTermination ( 120 , TimeUnit . SECONDS ) )
Assert . assertEquals ( expResult , result )
assertThat ( history . getHistory ( ) , contains ( ShellCommand . exit ( ) ) )
Assert . assertNull ( actual )
assertEquals ( res , bossAllValuesFromRestr )
assertEquals ( "<div> jsoup </div>" , doc . body ( ) . html ( ) )
Assert . assertNull ( job )
assertThat ( queryPaths . length , is ( 1 ) )
assertThat ( schema , hasEntry ( is ( TYPE_2 ) , hasProperty ( "predicates" , hasItem ( predicate ( ) . withName ( PROP_I ) . withIsList ( true ) . withValueTypeCount ( 3 ) ) ) ) )
assertEquals ( "valueA" , pc . getString ( "keyA" ) )
assertFalse ( deleteSubtasksHidden )
assertEquals ( "vuosituhannen p盲盲st盲" , t . format ( new Date ( 1000L * 60 * 60 * 24 * 365 * 1000 * 3 ) ) )
AssertAnnotations . assertSentence ( sentences , select ( jcas , Sentence . class ) )
assertNotNull ( symmetricAnnotation )
assertEquals ( ace , parsed )
assertNotNullOrEmpty ( MultiTainter . getMergedTaint ( arr ) )
Assert . assertTrue ( error != null && info != null )
assertFalse ( iter . hasNext ( ) )
assertTrue ( String . format ( "geoPos at <%d> is invalid" , i ) , geoPos . isValid ( ) )
assertEquals ( 3l , session . from ( $ ( emp ) ) . where ( $ ( emp ) . in ( emp1 , emp2 , emp3 ) ) . count ( ) )
Assert . assertNull ( osm . generateLabel ( ) )
Assert . assertEquals ( 1 , executor . executedQueries . size ( ) )
assertThat ( tester . getMessages ( FeedbackMessage . ERROR ) . size ( ) , is ( 1 ) )
assertThat ( range1 . isFinite ( ) , equalTo ( false ) )
assertFalse ( valid )
assertTrue ( detectWrap )
assertEquals ( "some text" , text )
assertEquals ( "Serialised data set" , expectedXML , actualXML )
assertEquals ( 10.0 , scores . get ( "brown fox" ) , 0.0001 )
Assert . assertEquals ( 0 , labels . size ( ) )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . END )
Assert . assertEquals ( "a {}" , br . readLine ( ) )
Assert . assertEquals ( Logger . EVENT_UNSPECIFIED . toString ( ) , markerCapture . getValue ( ) . getName ( ) )
assertEquals ( "GBP 3.57" , test . toString ( ) )
assertNotNull ( module . getClassLoader ( ) )
Assert . assertEquals ( expectedResult , res )
assertEquals ( false , result )
assertTrue ( rule . isVersionValid ( ) )
assertNotNull ( team1 . getId ( ) )
assertArrayEquals ( expected , Proto . build_fixed_str ( 3 , str ) )
Assert . assertTrue ( timestamp instanceof Long )
assertEquals ( 0 , argument . getValue ( ) . getTranscript_consequences ( ) . size ( ) )
assertEquals ( expected , modified )
assertNoOrders ( )
assertEquals ( asUnorderedSet ( o . logicalAxioms ( ) ) , asUnorderedSet ( o1 . logicalAxioms ( ) ) )
assertBeanValidation ( json , "query.metric[0].tags[0] must not be empty" )
Assert . assertTrue ( MsgUtils . compareIgnoringWhiteSpaces ( serializedRequest , fu . readFile ( "TradingSessionStatusRequest.xml" ) ) )
Assert . assertNotNull ( addressResultsDto )
assertThat ( node , instanceOf ( Node . class ) )
assertEquals ( 0 , result )
assertEquals ( 1 , result . size ( ) )
assertThat ( image . subtract ( null , ImageUtils . createEmptyImage ( ) ) , Matchers . is ( true ) )
assertThat ( requestedShutdownCallable . call ( ) , equalTo ( false ) )
assertThat ( parents , contains ( propertyB ) )
assertEquals ( asList ( "FOOFOO" , "BARBAR" , "BAZBAZ" ) , result )
assertImagesEqual ( servedImage , null )
assertThat ( target . delLink ( link ) , is ( false ) )
assertThat ( msg , startsWith ( "Unwritten file" ) )
assertEquals ( false , result )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
Assert . assertEquals ( new Integer ( 4 ) , count )
assertEquals ( "/onlyDefaultRealmName" , picketLinkRequest . get ( ) . getServletPath ( ) )
assertEquals ( "Expects to retrieve the 2 patients which reference the two different organizations" , expectedIds , actualIds )
assertEquals ( Arrays . asList ( expected . build ( ) ) , builder . build ( ) . getPipeline ( ) )
assertTrue ( actionServiceRegistered )
assertEquals ( 0.0 , cov , 0.0001 )
assertEquals ( TEST_2007_07_15_PONE , t )
assertEquals ( 1 , executor . getException ( ) . getLineNumber ( ) )
Assert . assertEquals ( 35L , id )
assertNull ( ivl )
assertEquals ( "" , c . getStyleName ( ) )
assertThat ( status , equalTo ( shutdownReason ) )
assertThat ( sw . toString ( ) , is ( "{\\"piyo\\":2}" ) )
assertEquals ( "<span><span>Cur</span></span>" , output )
assertTrue ( translator . isMethodSupported ( "refreshUserToGroupsMappings" ) )
CustomAsserts . assertEquals ( definition , left , actual )
assertIntValues ( array , 1 , 2 , 3 )
assertEquals ( "bcc@domain.com" , emailer . getProperties ( ) . getProperty ( "bcc" ) )
Assert . assertEquals ( createKeySpace . createQuery ( query ) , "javabahia" )
assertTrue ( g1 instanceof PublicCloneable )
Assert . fail ( "Missing required input" )
assertEquals ( exp , res )
assertThat ( resolver . isValid ( "abcd" ) , is ( true ) )
assertEquals ( null , testSet . getTestResult ( 1 ) . getComment ( ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( asNumberArgument . getValue ( ) . intValue ( ) , AS_NUMBER )
assertEquals ( 10 , classUnderTest . getColumOrder ( ) )
assertEquals ( "Method #toString is wrong" , "TextMapper{field=field, indexed=false, sorted=true, validated=true, column=field, " + "analyzer=English}" , mapper . toString ( ) )
assertEquals ( expResult , result )
Assert . assertTrue ( defaultExecutor . calledCount == 2 )
assertEquals ( expResult , result )
Assert . assertTrue ( "Failed to list resources: " + result , Operations . isSuccessfulOutcome ( result ) )
assertThat ( conf , containsString ( "<interaction><code value=\\"" + TypeRestfulInteraction . HISTORYINSTANCE . toCode ( ) + "\\"/></interaction>" ) )
assertFalse ( completed . get ( ) )
Assert . assertNotNull ( _logger )
assertTooltips ( )
assertNotNull ( feather . instance ( Plain . class ) )
assertEquals ( count , query ( ) . from ( cat ) . where ( cat . id . notIn ( ImmutableList . < String > of ( ) ) ) . fetchCount ( ) )
assertThat ( graph . run ( executorService ) . get ( ) . intValue ( ) , equalTo ( 5 ) )
assertEquals ( "Test Model Type" , otherModelType . getName ( ) )
assertEquals ( "RESOURCE" , r . get ( String . class ) )
assertThat ( appRegistryService . importApplication ( "foo" , ApplicationType . source , "1.0" , true ) , is ( appRegistration ) )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 0 ) )
assertEquals ( expectedSize , actualSize )
assertThat ( relunctant . parse ( "foo:bar" ) , instanceOf ( Identifier . class ) )
assertFalse ( strings . hasMoreElements ( ) )
assertNotNull ( IncomingPhoneNumber . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "^/cntrl/actn/clients/([0-9]+)/([^/]+)$" , pattern )
assertThat ( rdx . toString ( ) , not ( Matchers . isEmptyOrNullString ( ) ) )
assertEquals ( "3" , result . getXdmValue ( ) . itemAt ( 0 ) . getStringValue ( ) )
assertEquals ( vo . getPhoneNumbers ( ) . size ( ) , 0 )
assertEquals ( expected , actual )
assertEquals ( "" , container1 . bytesField . toString ( ) )
Assert . assertEquals ( 2 , result . intValue ( ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertActionFailedExceptionWithMessageIndicatingWriterWasUnableToActivateEditor ( )
Assert . assertNull ( command )
assertThat ( c , not ( nullValue ( ) ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
Assert . assertFalse ( sut . isScopeValid ( scope ) )
assertEquals ( 3 , count )
assertEquals ( true , result [ 0 ] )
assertEquals ( false , getMoveObjectDownAction ( ) . isEnabled ( ) )
assertEquals ( 1 , processInstances . size ( ) )
assertTrue ( expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
assertEquals ( 1000 , testeeCacheGenerator . getUserPeriod ( ) )
assertContains ( e . getMessage ( ) , "'name'" )
assertNotNull ( reporter )
assertEquals ( "Unexpected status code in HTTP response." , SC_UNAUTHORIZED , statusCode )
assertions . endsWith ( sequence )
context . assertIsSatisfied ( )
assertTrue ( "Shouldn't get buffer" , responseReader == null )
assertEquals ( "Expecting well formed hql" , "from CcAndInferredLocationRecord cc ," + "ArchivedInferredLocationRecord in where cc.vehicleId= :vehicleId" + " and cc.vehicleAgencyId= :vehicleAgencyId order by
Assert . assertNotNull ( dataSource )
assertNotNull ( LastMonth . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "000000000000000000000000000000000000000000000000000000000000000a" , key . getPublicKeyAsHex ( ) )
assertEquals ( expected , sanitized )
assertThat ( converter . convert ( formattedValue , BigDecimal . class , bundle ) , is ( equalTo ( theValue ) ) )
assertNotNull ( ids )
Assert . assertEquals ( incorrectQuery , query , this . app ( ) . query ( query ) )
strings . assertStartsWith ( mock ( Description . class ) , null , "Yoda" )
assertTrue ( xpath . getXPathWithoutDeclarations ( ) . length ( ) == 5 )
assertMatrixEquals ( grid . getGridToCRS ( PixelInCell . CELL_CORNER ) , matrix )
assertSeq ( new String [ ] { "<a/>" , "<b/>" } , "reverse((/top/*, 'a', 'b'), 2)" )
assertEquals ( "OU=NiFi#Organisation,CN=testuser" , escapedClientDn )
assertFalse ( hasPermission )
assertTrue ( "" , types != null && types . size ( ) == 1 && types . contains ( ProfileType . INDUSTRY ) )
assertEquals ( DATA , storage . loadPerson ( ID ) )
Assert . assertEquals ( true , agent . detectMobileQuick ( ) )
assertEquals ( 2 , parsed . getContained ( ) . size ( ) )
assertEquals ( "Expected exception doesn't occurs" , ReplyCode . KO_STREAM_OPERATION_NOT_ALLOWED . getCode ( ) , ( Integer ) code )
assertEquals ( "Mismatched data" , expected , res )
assertEquals ( SPEC0_GEFIELD , entityDef . getGeoField ( ) )
assertEquals ( expected , elements )
assertEquals ( 2 , manager . getMessageCount ( ) )
assertThat ( wrapperFilename , is ( nullValue ( ) ) )
Assert . assertEquals ( 0 , descriptors . size ( ) )
Assert . assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getCode ( ) )
assertTrue ( comparator . compare ( "/hotels/{hotel}/**" , "/**/**" ) < 0 )
assertEquals ( CHILD_RESOURCE_SET , childContext . getResources ( ) )
assertEquals ( "Hello {id}" , ResponseBodyInterpolator . interpolate ( "Hello ^{id}" , req ) )
assertNotNull ( avatar )
result . assertErrorFreeLog ( )
assertEquals ( 2 , users . size ( ) )
assertEquals ( result , true )
assertEquals ( expectedURL , token . toURL ( ) )
assertEquals ( true , ConfigUtils . getOrNull ( config , null ) )
assertEquals ( 100 , out . getRecords ( ) . size ( ) )
assertions . contains ( value , index )
assertTrue ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( workerADeploymentID . getServiceID ( ) ) )
AssertJUnit . assertEquals ( "SLAVE" , output . getInstanceState ( TEST_RESOURCE , partition , TEST_INSTANCE ) )
FactorDecompositionTest . assertFactorization ( poly , factors )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Start>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Start>" , elem . toXml ( ) )
XMLAssert . assertXpathEvaluatesTo ( String . valueOf ( true ) , "//accepted" , response )
assertEquals ( Arrays . asList ( "Hello" , "Holla" ) , list )
Assert . assertSame ( addresses , cacheManager . getAvailableServers ( ) )
assertEquals ( config . getMetricsEnabledDimensions ( ) , expectedMetricsEnabledDimensions )
assertNotNull ( WorkflowQueue . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WQXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 160 , query . getCacheCount ( cache , 160 ) )
assertTrue ( "testReinstateAuth 0" , it . isWithdrawn ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertDateEquals ( dateTime , result )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( "select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 )" , select . getQuery ( ) )
assertTrue ( hashed . matches ( "^[a-zA-Z0-9]{24}$" ) )
assertEquals ( "invalid percent complete" , 100.0f , analysisSubmissionServiceImpl . getPercentCompleteForAnalysisSubmission ( ID ) , DELTA )
assertArrayEquals ( longng , m . getRecipients ( NEWSGROUPS ) )
Assert . assertTrue ( sut . isWeekday ( cal . getTime ( ) ) )
Assert . assertNotNull ( domain )
assertEquals ( 37.5 , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( lt . getConfiguredThreadPoolSize ( ) , equalTo ( 2 ) )
assertEquals ( 1 , counter . getBeforeFileTreeWalkCount ( ) )
assertThat ( getTemplateLabel ( jobSpec , LabelConstants . JOBNAME_LABEL ) , equalTo ( JOB_NAME ) )
Assert . assertNotNull ( "Facebook app test user list was null" , testUserList )
assertEquals ( "matchAllQuery" , result . getQueryBuilder ( ) . toString ( ) )
assertEquals ( 89 , id3tag . getWmRating ( ) )
assertFalse ( eq . test ( entity . build ( ) ) )
Assert . isTrue ( "Updated Description" . equals ( newOrganization . getDescription ( ) ) && departmentList . size ( ) == newDepartmentList . size ( ) && departmentList . size ( ) > 0 )
AssertAnnotations . assertNamedEntity ( ne , select ( jcas , NamedEntity . class ) )
assertEquals ( expected , actual )
assertEquals ( expectedResult , verifyDrugref . invoke ( audit ) )
assertNull ( result )
Assert . fail ( "Cannot create ReplicateConfig with negative replicate number" )
assertEquals ( "/projects/iur-service-client/target/classes" , actualObj )
assertThat ( _response . getStatus ( ) , is ( METHOD_NOT_ALLOWED ) )
assertTrue ( jsonld . contains ( "\\"@context\\":{" + "\\"@vocab\\":\\"http://schema.org/\\"" + "}" ) )
assertEquals ( 0 , entities . size ( ) )
assertEquals ( expectedVector , node . marshallize ( ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
assertThat ( target . readValue ( value ) , is ( false ) )
assertNotNull ( statistics )
assertThat ( logoutResponseXML , containsString ( "<samlp:LogoutResponse" ) )
assertThatAppletWasLaunched ( )
Assert . assertEquals ( - 1 , comparator . compare ( currentRelease , laterRelease ) )
assertEquals ( ( i / 3 ) + " : " + testData [ i ] + ", " + testData [ i + 1 ] , expectedResult , actualResult )
assertEquals ( hash1 , hash2 )
assertThat ( result , is ( new String [ ] [ ] { { "c" , "" } } ) )
Assert . assertNotNull ( res )
Assert . assertEquals ( json , writer . toString ( ) )
assertThat ( service . getUid ( ) , is ( "account" ) )
assertThat ( augustHours , closeTo ( 184.0 , 0.1 ) )
Assert . assertTrue ( responseList . size ( ) < 2 )
assertEquals ( 3 , result . scoreDocs . length )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( "http://localhost:8080/api/v1/key/123456/agency/1/command/predictions/?rs=16E|6010&rs=52|6010&rs=53|6010&rs=54|6010&format=json
assertEquals ( expected , actual )
assertIteratedKeys ( x , "1" , "2" , "5" )
assertTrue ( errorsContainer . equals ( errors ) )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=all&minSupportCount=50" ) )
assertEquals ( 1 , foundPosts . size ( ) )
Assert . assertEquals ( 0 , analyser . getLoadAtBeginning ( route ) . get ( 0 ) )
assertArrayEquals ( new long [ ] { 1 , 2 } , result )
assertHasReturnValue ( response , "bar" )
assertTrue ( hour1 . equals ( hour2 ) )
assertTrue ( asyncMap . containsKey ( key ) )
assertTrue ( result == 0 )
assertNotNull ( result )
assertEquals ( 5 , sut . getMaxDaysToKeepEntries ( ) )
Assert . assertEquals ( "Hello Kermit" , result )
assertSeen ( results , s1 )
assertThat ( array , is ( new double [ ] { 2 , 3 , 5 , 7 } ) )
assertNotNull ( assertion )
assertNull ( facade . getProxy ( ) )
assertNotNull ( coreMlFile )
assertNotNull ( fixture )
assertContains ( e . getMessage ( ) , "'id'" )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatusCode ( ) )
assertInstanceOf ( "findOperation" , CoordinateOperation . class , op )
assertTrue ( matcher . match ( msg , rule ) )
assertEquals ( expected , toJSON ( object ) )
assertTrue ( "toDegrees() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( 1 , count )
assertEquals ( input , output )
this . assertLoadBlobViaTuples ( tuples , false , true )
Assert . assertNotNull ( ret3 )
Assert . assertTrue ( "Headers array not set correctly" , uic . getHeaders ( ) != null && uic . getHeaders ( ) . length > 0 )
assertThat ( result , is ( object ) )
assertTrue ( keyCodesSet . size ( ) == keyCodes . size ( ) )
assertNotSame ( l0 , l1 )
assertNotNull ( target )
assertThatSql ( query , is ( "SELECT table.col1,table.col2 FROM table" ) )
Assert . assertFalse ( mockDevice . getDeviceExtension ( ArchiveDeviceExtension . class ) . isVisibleSOPClass ( "9" ) )
Assert . assertThat ( e . getMessage ( ) , containsString ( expected ) )
Assert . assertEquals ( expected , actual )
assertFootersJoined ( )
Assert . assertEquals ( "Assert.assertTrue(\\"regexp:.*all\\",Pattern.compile(\\".*all\\").matcher(driver.findElement(By.id(\\"location\\")).getText());" , result )
assertEquals ( expectedUrl , authorizationUrl )
assertTrue ( Script . matchNamed ( MatchType . EQUALS , "data" , null , "data" , ctx ) . pass )
assertSame ( Sex . MALE , select . getSelectedItem ( ) . orElse ( null ) )
assertEquals ( Paths . get ( PATH1 ) , query ( func . args ( PATH1 + NAME ) ) )
assertThat ( file , not ( exists ( ) ) )
assertNotNull ( result )
assertThat ( result , is ( jsonNull ( ) ) )
assertEquals ( StrictMath . asin ( 0.4 ) , asin )
assertEquals ( 1 , locationManager . getAll ( ) . size ( ) )
assertThat ( Datastore . defaultDelegate , is ( notNullValue ( ) ) )
assertNull ( "The theme was not deleted" , theme )
assertEquals ( r1 , r2 )
assertEquals ( "TextBuilder String Is 1" , _textBuilder . toString ( ) , "1" )
assertEquals ( TargetType . PILLAR_EXACT , target . getType ( ) )
assertEquals ( jid , component . jid )
assertEquals ( ( byte ) 0xFF , meta . getColor ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "There should be no header detected" , bufPos , - 1 )
assertEquals ( "<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( expResult , result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff08_" ) )
assertEquals ( "id64" , policy2 . getApiIds ( ) . get ( 0 ) )
assertThat ( applicationSettings . getProjectCreationSetting ( ) , is ( PROJECT_CREATION_ALLOWED ) )
assertEquals ( thisYear - year , age )
Assert . assertNull ( pm . getPmDefaults ( ) . getDiResolver ( ) )
assertEquals ( "<customer firstName=\\"Max\\">Mustermann</customer>" , render ( model ) )
assertTrue ( "The decrypted message was " + new String ( dec ) + " and must be " + "equal to " + TEST_XML_STRING , Arrays . equals ( dec , original ) )
assertThat ( ChronoHistory . from ( history . getVariant ( ) ) , is ( history ) )
assertEquals ( "Wrong number of roof surfaces has been detected" , 1 , nDetect )
assertId ( items , result )
Truth . assertThat ( actual )
assertEquals ( testStyle , classUnderTest . getFunctionStyle ( ) )
uit . assertValid ( STR_VAL , STR_VAL )
assertThat ( allResourcePermissions . isEmpty ( ) , is ( true ) )
assertEquals ( DummyDrawHandler . drawCircleToString ( 50 , 100 , 10 , ColorOwn . forString ( "pink" , Transparency . FOREGROUND ) , ColorOwn . forString ( "black" , Transparency . BACKGROUND ) , LineType . SOLID , 25.0 )
assertFalse ( result . passedValidation ( ) )
assertThat ( actual , sameJSONAs ( expected ) )
assertTrue ( hiveDatabaseMeta . isDriverVersion ( 5 , 5 ) )
assertThat ( isValid , is ( true ) )
assertEquals ( testResponse , response . get ( 0 ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertFalse ( RGW_ADMIN . getUserInfo ( userId ) . isPresent ( ) )
assertTrue ( "Wrong parameters" , params2 . containsKey ( "throwExceptionOnMissing" ) )
assertEquals ( "Base for IPv4 is wrong" , "192.168.0.13" , parsed )
Assert . assertEquals ( 2 , result . length ( ) )
assertEquals ( "OnThisDay" , output . get ( id ) )
assertTrue ( supportsPlacement )
assertFalse ( CacheUtils . isSymbolicLink ( "/test_file.txt" , cache ) )
assertTrue ( ( ( BooleanType ) respParam . getParameter ( ) . get ( 0 ) . getValue ( ) ) . booleanValue ( ) )
assertEqualsWithoutWhiteSpaces ( "" , testSubject )
Assert . assertEquals ( 140 + 4 * winScore - loosePenalty , scores . getScore ( ) )
Assert . assertEquals ( present , listener )
assertEquals ( ZIP_INPUT_NESTED_DIRS_COUNT , count )
assertEquals ( 1 , dao . create ( foo ) )
Assert . assertNotNull ( savedTenant2 )
assertThat ( control . matches ( "/clients/3" ) , is ( true ) )
Assert . fail ( "Expected to fail, but didn't" )
assertNotNull ( w . getFundingGroup ( ) . get ( 0 ) . getFundingSummary ( ) . get ( 0 ) . getUrl ( ) . getValue ( ) )
assertNotNull ( cred )
assertEquals ( "{\\"text\\":null}" , toJSON ( title ) )
assertThat ( shortForm , is ( equalTo ( "root-ontology-iri" ) ) )
assertEquals ( 0 , services . size ( ) )
assertTrue ( instance . hasNext ( ) )
assertResponseContainsExpectedPayload ( response , respPayload )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
assertEquals ( svalues , svalues1 )
Assert . assertNull ( actualValue )
assertEquals ( "{}" , patchedVer . toString ( ) )
assertTrue ( hash == 0x0920e0c1b7eeb261l )
assertEquals ( 0 , map . size ( ) )
assertEquals ( query , result )
Assert . assertEquals ( "" , query . getCommandText ( ) )
assertTrue ( "Short Ref too short" , constraintViolations . size ( ) > 1 )
assertEquals ( Arrays . asList ( "9A3F" , "ewa" ) , production . getJobIds ( ) )
assertEquals ( vars ( "a" , "b" , "c" ) , getNonPseudoVars ( csv , true ) )
assertEquals ( 0 , result )
assertEquals ( 3 , proc . getProjectedSymbols ( ) . size ( ) )
assertCount ( 1 , "one >= 0" )
assertEquals ( 3 , query ( ) . from ( cat ) . innerJoin ( cat . bookVersion , bookVersion ) . innerJoin ( cat . bookMark , bookMark ) . where ( cat . version . eq ( bookVersion . id ) ) . fetchCount ( ) )
assertEquals ( 3 , array [ pivot ] )
assertSameEnumeration ( "PostOrderModelConstructor" , coreEnum , xEnum )
assertThat ( underTest . isAccessAllowed ( httpServletRequest ) , is ( false ) )
assertTrue ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , STARTING_BYTE_OF_3_BYTE_CHAR ) )
assertNull ( principal )
assertTrue ( helper . getFileObjects ( ) . size ( ) == 1 )
assertTrue ( mvj . get ( "BlockRef" ) != null )
assertEquals ( 3 , res )
assertCard ( expectedCard , "http://magiccards.info/dgm/en/5.html" , expectedCard . getRarity ( ) . toDisplayName ( ) , expectedCard . getName ( ) )
assertEquals ( expected , result . getAttributes ( ) )
assertEquals ( "type" , propSchema . getType ( ) . toString ( ) )
assertThat ( StubWatchFactory . getRequestParameters ( ) . get ( 0 ) , both ( hasEntry ( "resourceVersion" , Integer . toString ( INITIAL_RESOURCE_VERSION ) ) ) . and ( hasEntry ( "labelSelector" , asList ( DOMAINUID_LABEL , CREATEDBYOPERATOR_
assertEquals ( LocalDate . of ( 2009 , Month . JANUARY , 1 ) , fourthQuarter )
assertTrue ( file . exists ( ) )
assertEquals ( "new_end" , vRoute . getEnd ( ) . getLocation ( ) . getId ( ) )
assertTrue ( testEntity . isNew ( ) )
assertEquals ( 2 , tables . size ( ) )
assertEquals ( "Yagga Yagga" , result )
Assert . assertTrue ( "The returned digester for  '" + algorithm + "' algorithm is not right one." , digester instanceof RightOneDigester )
assertThat ( check . isCompatible ( ) , is ( true ) )
assertThat ( builder , hasToString ( "<script type=\\"text/javascript\\">/* <![CDATA[ */\\n" + "(function() {var s = document.createElement('script')," + "t = document.getElementsByTagName('script')[0];" + "s
assertEquals ( expResult , result )
assertions . contains ( value , index )
assertArrayEquals ( ArrayConverter . hexStringToByteArray ( "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" ) , result )
assertEquals ( expResult , result )
assertEquals ( 1 , session . from ( $ ( noteVar ) ) . where ( where ) . list ( $ ( noteVar ) ) . size ( ) )
assertEquals ( "user@example.com" , dss . parseEmail ( ) )
Assert . assertEquals ( data [ i ] * i , m . getEntry ( i , i ) , 0d )
assertThat ( handler , is ( instanceOf ( PersonValidator . class ) ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . FUNDING_READ_LIMITED )
assertEquals ( "g1.js" , groupNames . get ( "g1.js" ) )
assertEquals ( "hello, world!" , result )
assertThat ( conf , instanceOf ( ClearCacheConfirmation . class ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertThat ( isDepartmentValid , is ( Boolean . FALSE ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
Assert . assertEquals ( CORSFilter . CORSRequestType . INVALID_CORS , requestType )
assertNotNull ( Revision . reader ( "FWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( 2 , list . size ( ) )
assertFalse ( matchResult )
assertRecurrencesCorrect ( "MINUTE" , 2 , process ( trigger ) . getMinuteRecurrences ( ) )
assertTrue ( validator . validate ( EntityNames . STUDENT , studentIds ) . equals ( expected ) )
assertEquals ( "<html><body>{{ <!--foo--> }}</body>     </html>" , engine . compileMustache ( "minify_html_preserve_pattern" , template ) . render ( new Hammer ( ) ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 0 , analyser . getLoadAtBeginning ( route ) . get ( 0 ) )
assertEquals ( expectedScript , observedScript )
Assert . assertFalse ( "overwrite should not be successful" , success )
assertThat ( result . contains ( expectedString ) , is ( true ) )
assertTrue ( "WeakCipherSuites list should have been empty" , requester . getWeakCipherSuites ( ) . size ( ) == weakCiphersSuites . length )
assertTrue ( className . equalsIgnoreCase ( Double [ ] . class . getSimpleName ( ) ) )
assertEquals ( "fake-token" , kc . getAccessToken ( ) )
assertEquals ( "application/json;odata.metadata=minimal" , request . getResponseContentType ( ) . toContentTypeString ( ) )
Assert . assertEquals ( expected , resultString )
Assert . assertEquals ( avroMessage , output )
assertThat ( sequencerContext . getNamespaceRegistry ( ) , is ( notNullValue ( ) ) )
assertEquals ( 10L , target . get ( ) . longValue ( ) )
assertTrue ( deleteUploadedFilesOnEnd . get ( ) )
assertEquals ( now , result )
Assert . assertEquals ( random , decrypted )
Assert . assertEquals ( 0 , ( ( List < User > ) ret . getValue ( ) ) . size ( ) )
assertEquals ( object . doubles , result . doubles )
assertEquals ( responsesRemaining , collector . getResponsesRemaining ( ) )
assertTrue ( converter . canRead ( clazz , mediaType ) )
assertSizes ( validator , char [ ] . class )
Assert . assertTrue ( message , assertion )
assertEquals ( singleValue , stats . getStatisticValue ( Statistic . VARIANCE ) )
Assert . assertEquals ( state . IDLE , state )
assertEquals ( "/home/work" , mConfiguration . get ( PropertyKey . WORK_DIR ) )
Assert . fail ( "UnknownComponentException should not be thrown" )
Assert . assertTrue ( h . match ( cookie , origin ) )
assertEquals ( third , foundStore )
assertEquals ( 1 , view . getItems ( ) . size ( ) )
Assert . assertFalse ( result )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertEquals ( TaskState . IN_PROGRESS , _driver . getJobState ( queueName , TaskUtil . getNamespacedJobName ( queueName , "JOB" + 3 ) ) )
assertEquals ( sqrt ( 2 ) * E * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
Assert . assertFalse ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertEquals ( "org.apache.hadoop.fs.shell.Ls" , cmd . getClass ( ) . getName ( ) )
assertGenerators ( result , generator . getClass ( ) )
Assert . assertEquals ( 86300000L , newDate . getTime ( ) - date . getTime ( ) )
Assert . assertEquals ( simple . getName ( ) , name )
assertNull ( m )
assertGridCoordinates ( grid , 0 , 0 , 1 )
assertEquals ( 5 , l . size ( ) )
Assert . assertNull ( retireable . getRetireReason ( ) )
assertThat ( module . getPackagesWithMappedClasses ( ) , is ( equalTo ( Collections . EMPTY_LIST ) ) )
assertSeen ( results , s0 )
assertTrue ( repository . getFeatureState ( DummyFeature . TEST ) . isEnabled ( ) )
assertTrue ( response . contains ( "Hello Jenkins" ) )
Assert . assertTrue ( errMsg , appId . endsWith ( expectedAppId ) )
assertExtendedEquals ( expected , dd , PRODUCT_TOLERANCE_FACTOR )
assertFalse ( cmd . onCommand ( sender , new CommandParser ( plugin , args , 1 ) ) )
assertEquals ( 0.0 , result , TOL )
assertSplit ( result , stringToSplit )
assertEquals ( Resolution . KEEP_EXISTING , subject . getResolution ( ) . get ( ) )
assertTrue ( url2 == url1 )
Assert . assertEquals ( "The file is packaged as test-deps-c-1.0.0.jar" , "test-deps-c-1.0.0.jar" , file . getName ( ) )
assertEquals ( "Response users should be equal to the mocked users" , mockedUsers , responseUsers )
Assert . assertEquals ( LogLevel . INFO , testedStore . getProperty ( "logX" ) . getValue ( ) )
assertEquals ( expectedData , filteredData )
assertFalse ( impl . isLate ( ) )
assertNotNull ( Country . reader ( ) . read ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertNull ( chainedBuilder . build ( ) . getAttribute ( ) . getValueConverter ( ) )
assertSame ( e , result )
assertEquals ( test , getInputStream ( ) . readString ( ) )
assertEquals ( "Wrong date" , DATE_PATTERN , conf . getDate ( DataConfiguration . DATE_KEY ) )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertEquals ( "<abc_def id=\\"1\\">Hello</abc_def> <abc-def>There</abc-def>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "testCreatesFooClass" , generatedName )
assertTrue ( view . showPaging ( ) )
assertEquals ( "bar" , s )
assertEquals ( expResult , result )
assertEquals ( "db: path" , o1 . toString ( ) )
Assert . assertEquals ( "(aa_range (aa_point_location (aa_char Cys) Ter 125) _ (aa_point_location (aa_char Ala) Ter 123))" , loc . toStringTree ( parser ) )
assertEquals ( "swarmcom.org" , room . getId ( ) )
assertThat ( ddlParsers . getParsers ( ) , is ( myParsers ) )
assertThat ( subject . getAbuseContact ( autnum ) . isPresent ( ) , is ( true ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertSetDirty ( )
Assert . fail ( "Error retrieving customer workflow list caused by: " + e . getMessage ( ) )
assertThat ( result , equalTo ( true ) )
assertEquals ( " Echo Message = vasu" , response )
assertNotNull ( result )
assertTrue ( "Aggregate sasl server factory should be created" , ops . exists ( TEST_SERVER_FACTORY_ADDRESS ) )
assertEquals ( 2 , capturedEvent . getValue ( ) . getRemovedItemsCount ( ) )
assertEquals ( CONF_DIR , appConfig . getConfDirectory ( ) )
assertArrayEquals ( new float [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 } , ArraysUtils . shrink ( array , 0f ) , 0f )
assertDistinctDegreeFactorization ( poly , f )
assertEquals ( 0x84 , responseApdu . getSW ( ) )
assertThat ( TimestampInterval . between ( t1 , t2 ) . toZonalInterval ( systz ) , is ( MomentInterval . between ( m1 , m2 ) ) )
assertEquals ( dataObject , entityAsInserted )
assertEquals ( "one" , firstElement )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertNull ( ic . getContainerProperty ( object1 , null ) )
assertThat ( noOfSolutions , is ( 3 ) )
runner . assertAllFlowFilesTransferred ( PublishKafkaRecord_0_10 . REL_FAILURE , 3 )
assertArrayEquals ( results , lcsMatch . toArray ( ) )
assertNotNull ( result )
assertEquals ( 10 , ref . atomicGet ( ) )
Assert . assertTrue ( element instanceof ExclusiveElement )
assertTrue ( retDocumentProjects . collect ( toList ( ) ) . equals ( expectedDocumentProjects ) )
Assert . assertTrue ( "The list is not ordered ascending" , sortedTestFields . equals ( testFields ) )
assertEquals ( "{method: 'abc', args: ['1234-12-25', '1234-12-25T11:12:13.456Z', '1234-12-25T11:12:13.456Z', '1234-12-25T11:12
Assert . fail ( "Expected an exception" )
assertEquals ( expected , actual )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 2 , orderableConcepts . size ( ) )
assertEquals ( "foo==2011-03-01 12:34 +0000" , ret )
throwables . assertHasRootCauseMessage ( INFO , error , "expected message" )
assertEquals ( expected , actual )
assertEquals ( "x=" + x , expectedResult , result )
assertEquals ( "test.war" , normalizeArchiveName )
assertEquals ( 0 , playerScores . getScore ( ) )
assertSame ( stringMessageBodyReader , applicationProviders . getMessageBodyReader ( String . class , null , null , TEXT_PLAIN_TYPE ) )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'integer',format:'int32'}}}" , s . getSchema ( SimpleList . class ) )
assertTrue ( bugs . toString ( ) , bugs . isEmpty ( ) )
assertEquals ( o1 , o2 )
assertEquals ( new ContinuesRandomGenerator ( testSeed ) . toString ( ) , new ContinuesRandomGenerator ( testSeed ) . toString ( ) )
assertThat ( ( Map ) Whitebox . invokeMethod ( target , "getMap" , 1 , 2 ) , is ( expected ) )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "brokerUrl" , SINGLE_TIBCO_BROKER ) )
assertTrue ( instance . runCommand ( ) )
assertEquals ( newArrayList ( subResourceLocatorFor ( "foo" ) , subResourceLocatorFor ( "bar" ) , subResourceLocatorFor ( "foo" ) ) , resourceLocators )
assertEqualHash ( byteBuffer , murmur3a )
assertThat ( signature , hasItem ( namedIndividualProperty ) )
assertNotNull ( result )
assertEquals ( innocent . getaString ( ) , back . getaString ( ) )
context . assertIsSatisfied ( )
assertEquals ( "Wrong value" , ( byte ) 0xef , u . s8 . get ( ) )
assertEquals ( 0xffffffffffffffffL , result )
mojos . assertBuildOutputs ( new File ( basedir , "target" ) , "classes/proc/Source.class" )
Assert . assertFalse ( property . equalsIgnoreCase ( "true" ) )
assertThat ( data . getOriginal ( ) , is ( "{\\"str\\":\\"hoge\\",\\"nest\\":[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]" ) )
assertEquals ( newName , project1 . getCascadingParentLinks ( ) . get ( 0 ) . getName ( ) )
assertTrue ( exp instanceof ASTCurrentTimestamp )
assertThat ( logRecords , containsInfo ( CREATING_CRD ) )
Assert . assertEquals ( testResult [ i ] , reslut )
assertEquals ( 0 , result . getVoxel ( 5 , 15 , 5 ) , .01 )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Integer" ) )
TestsIOUtils . assertEqualSets ( documents , new AvroDataStoreReader < Document > ( path ) )
assertNotNull ( entryCaptor . getValue ( ) . getStackTraceWriter ( ) )
assertPlanMatches ( access )
assertEquals ( "5" , fake . operation ( 5 ) )
Assert . assertEquals ( configuration . getLong ( KafkaConfig . KAFKA_TEST_MESSAGE_COUNT_KEY ) , KafkaConsumerUtils . INSTANCE . getNumRead ( ) )
assertSingleElementCollection ( testCommandClientId , executeIds )
assertThat ( userCount , is ( 1 ) )
assertNull ( task )
assertNull ( classUnderTest . getTableFrameXmlBean ( ) )
assertEquals ( "1.0.0-alpha" , v2 . toString ( ) )
Assert . assertTrue ( hasIndexHashKeyEqualCondition )
Assert . assertTrue ( hedgeErrorRMS < 0.05 )
assertEquals ( list , Arrays . asList ( 2 , 2 , 2 , 2 , 2 , 2 ) )
context . assertIsSatisfied ( )
assertNotEquals ( table1 , table2 )
assertEquals ( AnnotationDataDummy . CLASS_CACHE , data . getCacheName ( ) )
assertThat ( msg . getValue ( ) , containsString ( String . format ( "Exit value of %s" , command ) ) )
assertEquals ( 3600 , timeBucket )
assertEquals ( "Fusco" , person . getLastName ( ) )
assertEquals ( "r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator , sw . toString ( ) )
Assert . assertEquals ( "example (wiki:XWiki.user (127.0.0.1): null at null)" , ex . toString ( ) )
assertEquals ( DEFAULT_VALUE , value )
assertThat ( age . getValue ( ) , equalTo ( 5L ) )
Assert . assertEquals ( new Complex ( - 2.0 , 0.5 ) , z . reciprocal ( ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 6 , undefRes . size ( ) )
assertEquals ( ValidationResult . Result . OK , validationResult . getStatus ( ) )
assertEquals ( "Good Morning" , cfg . getProperty ( "salutation.text.salutation" , "Good Morning" ) )
assertEquals ( expected , generateAttributesClass ( Car . class ) )
assertMessages ( "write" , 1 , "write_bytes_offset" )
assertTrue ( "value was " + Arrays . toString ( target ) , Arrays . equals ( expected , target ) )
assertEquals ( 3 , InMemoryJournal . getAllEntries ( ) . size ( ) )
assertEquals ( "127.0.0.1-11210" , strategy . hash ( infoMock , 0 ) )
assertEquals ( now . getMillis ( ) , gelfMessage . getTimestamp ( ) )
assertEquals ( "mycmd a\\\\b" , s )
assertThat ( result , is ( sameInstance ( cacheFileMetadataRequest ) ) )
assertEquals ( list . get ( 0 ) . getName ( ) , "testUpdate" )
assertNotNull ( result )
assertTrue ( dest . getServerPolicy ( ) != null )
assertEquals ( 123 , result )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( "incorrect value" , result , aNumber . toString ( ) )
assertThat ( isValid , is ( true ) )
assertEquals ( packet , p )
assertTrue ( false )
assertNotNull ( constraints )
assertEquals ( b . build ( ) , doc )
assertThat ( output . get ( ) , hasContent ( "first" , "second" ) )
assertTrue ( "Failed to match declaration" , md . group ( 1 ) . equals ( "dog-chapter" ) )
Assert . assertEquals ( e1 , e2 )
assertEquals ( Boolean . TRUE , methodOutcome . getCreated ( ) )
Assert . assertEquals ( "" , json , notification . toJSON ( ) )
assertThat ( testValue . fields ( ) , containsInAnyOrder ( TestValueType . AGE . of ( 23 ) , TestValueType . NAME . of ( "Hello" ) ) )
assertThat ( jcrWorkspaces , is ( graphWorkspaces ) )
assertFound ( Files . newDirectoryStream ( dir , "child" ) , child , child2 )
assertEquals ( "Hello ^^^^ John" , ResponseBodyInterpolator . interpolate ( "Hello ^^^^ :name" , req ) )
assertEquals ( "Method #toString is wrong" , "BooleanMapper{field=field, indexed=false, sorted=true, validated=true, column=field}" , mapper . toString ( ) )
assertEquals ( euclideanAssertion , result )
Assert . assertEquals ( "EXECUTE ERROR:" , sqltrue , sqlnew )
assertThat ( readXml ( ) , is ( equalTo ( instanceXml . xml ( ) ) ) )
assertEquals ( 0 , start . getSize ( ) . get ( 0 ) )
Assert . assertNotNull ( dao )
assertPowerToughness ( playerA , "Pillarfield Ox" , 3 , 3 )
assertOut ( "a.setAttribute(z, 'foo')" )
assertEquals ( expected , new ResolverUtil ( ) . extractPath ( url ) )
assertTrue ( main . getWidget ( output . sourceType ) . isVisible ( ) )
assertNotNull ( manager . x )
assertEquals ( countryName , "<http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Country-United%20Kingdom>" )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( connMock , dbcManagerSpy . getPooledConnection ( DBType . MYSQL , DB_URL , DHARMA_USER , DHARMA_PASSWORD ) )
Assert . assertEquals ( result . toStringWithoutTime ( ) . trim ( ) , expectedResult . trim ( ) )
assertThat ( gtx . get ( Hoge . class , key , key ) , is ( notNullValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( - 623347200000L , m . getFirstMillisecond ( c ) )
assertEquals ( 1 , tasks . size ( ) )
assertEquals ( converter . getClass ( ) , converterDescription . getImplementationClass ( ) )
assertThat ( output , containsString ( "Template deleted:" ) )
assertEquals ( profile . getId ( ) , "user123" )
Assert . assertSame ( this . patient , this . mocker . getComponentUnderTest ( ) . get ( this . patientReference ) )
assertEquals ( true , code . toString ( ) . contains ( "d<-3\\n" ) )
assertNotNull ( result )
assertEquals ( instance , deserialize ( serialized ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( target . matchExactly ( ( FlowAction ) action ) , is ( true ) )
Assert . assertEquals ( "value" , ds . getStringProperty ( ) )
assertBreadcrumbsAreEqual ( actualList , expectedList )
Assert . assertEquals ( 10 , l . size ( ) )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 LEFT OUTER JOIN table2 AS t2 ON t1.c0 = t2.c0" ) )
assertEquals ( 5 , result . size ( ) )
assertThat ( InvertListNumber . index ( actualCoords , sizes , invert ) , equalTo ( index ) )
assertEquals ( "http:/foo/bar" , got . toString ( ) )
Assert . assertTrue ( nettyClient == clientReference . get ( ) )
assertMatrixEquals ( expectedTableau , tableau . getData ( ) )
propertyChangeListenerTester . assertPropertyChanged ( true )
assertConfigErrorForMissingAttributeRequired ( data )
assertEquals ( String . valueOf ( i ) , blc . size ( ) )
propertyChangeListenerTester . assertPropertyChangedOnce ( )
Assert . assertTrue ( "Channel is not closed" , channel . isOpen ( ) )
assertThat ( root , hasType ( Type . SCHEDULING_POINT ) )
assertThat ( extractMonitorables ( histogramAdapter ) . get ( MEDIAN ) . get ( ) , Matchers . < Object > is ( newMedian ) )
assertEquals ( unit1 , unit2 )
Assert . assertEquals ( "LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;" , text )
Assert . assertEquals ( nodeToKey ( or01 ) , nodeToKey ( or02 ) )
Assert . assertEquals ( clickMe . getText ( ) , buttonText )
assertTrue ( areBonded ( atom1 , atom2 ) )
assertEquals ( "%1-%2 something %1-%3" , BufferTools . substitute ( source , "" , "" ) )
Assert . assertEquals ( expected , pass . concretizeCell ( term ) )
assertEquals ( String . valueOf ( me . getCode ( ) ) , me . getNick ( ) )
assertEquals ( field . getValue ( ) , entityField . get ( IndexingUtils . FIELD_BOOLEAN ) )
assertEquals ( pool , house . getSwimmingPool ( ) )
Assert . assertNull ( result )
assertEquals ( sha1sum , instance . getSha1sum ( ) )
assertContentChanges ( changes )
assertEquals ( p1 , p2 )
assertEquals ( 2 , objects . size ( ) )
this . tester . assertContains ( "<p class=\\"empty\\">hello!</p><p class=\\"empty\\">foo</p>" )
assertFalse ( authentication . isAuthenticatedAsSystem ( ) )
Assert . assertEquals ( "" , getLine ( PATH_LINE , canonicalRequest ) )
assertThat ( result , is ( true ) )
assertTrue ( model . contains ( parent , child ) )
Assert . fail ( "Should have thrown an exception" )
assertEquals ( 0 , handlers . length )
Assert . fail ( "This sequencer run should not exist, should not have lanes, and should show a 404 Not Found" )
assertTrue ( mappedUrl . startsWith ( expectedPath ) )
assertEquals ( 3 , collection . count ( ) )
assertEquals ( "Port property not recognized" , 4573 , defaultAgiServer . getPort ( ) )
assertThat ( body , not ( containsString ( "ScientificNotationOfNumber" ) ) )
assertTrue ( videos . contains ( video ) )
assertTrue ( v . equals ( v ) )
assertEquals ( "Unsupported parameter test for pwd." , result )
Assert . assertEquals ( 6 , entries . size ( ) )
assertEquals ( Status . DOWN , impl . getStatus ( ) )
assertEquals ( documento , documentoCreado )
assertThat ( result , is ( "LinkLayerizer Component" ) )
assertArrayEquals ( refar , d . getResult ( ) )
assertEquals ( 10 , getCache ( provider , "foo" ) . capacity )
assertEquals ( 3 , result . getSize ( ) )
assertEquals ( 2 , e1 . getObjectContext ( ) . performQuery ( query ) . size ( ) )
assertThat ( "same relationship from index" , lookedUpRelationship , is ( relationship ) )
assertFalse ( or . isDefined ( ) )
assertThat ( Lists . newArrayList ( iterable ) , is ( empty ( ) ) )
assertThat ( ( Integer ) dummyExpression . evalChild ( 0 , returnNode , super . variables , super . functions , super . expressions ) , is ( 4 ) )
this . assertIndexOkResponseJsonStructure ( 0 , 10 , response )
assertEquals ( s . toString ( ) , expecting )
assertEquals ( UnresolvedAddressException . class , thrown . getClass ( ) )
assertFalse ( stopAtFirstIneligibleField ( field ) . isEmpty ( ) )
assertEquals ( HttpStatus . SC_NOT_MODIFIED , result . getCode ( ) )
assertEquals ( CSV_FILE , writer . toString ( ) )
assertTrue ( spyAppConfigProperties . isHibernateManaged ( ) )
assertEquals ( Status . FORBIDDEN . getStatusCode ( ) , response . getStatus ( ) )
assertTrue ( accountOperations . size ( ) == 0 )
assertModelForInjectionIsOriginalModel ( )
assertThat ( jobDetail . getInvokedContext ( ) , hasEntry ( "testKey" , "testValue" ) )
assertNotNull ( domain )
assertNull ( extensionMapping )
assertTrue ( serviceNode . exists ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( Util . canExecute ( file ) )
assertEquals ( 1 , listLocationEvent . size ( ) , 0 )
assertThat ( result . httpRequestType , equalTo ( "GET" ) )
Assert . assertEquals ( Integer . class , m . getParameterTypes ( ) [ 0 ] )
Assert . assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertFalse ( om . exists ( "keyspace_name" ) )
assertThat ( conv , is ( "2011-87-30-123" ) )
Assert . assertEquals ( "and(in(Car.DOORS, 2, 4), existsIn(IndexedCollection<Garage>, \\"manufacturer\\", \\"brandsServiced\\", equal(\\"location\\", \\"Dublin\\"))" , query . toString (
assertTrue ( filter . shouldDeliverNotification ( eventContext ) )
assertEquals ( expected , actual )
assertEquals ( "q w" , result )
assertFloatEquals ( "Y position moved over the edge" , 64F , viewportVector . getY ( ) )
Assert . assertEquals ( "somethingmock" , ret . getValue ( ) )
Assert . assertEquals ( Integer . class , clazz )
assertEquals ( "protocol" , i . intValue ( ) )
assertThat ( result , is ( false ) )
assertEquals ( "input" , action . execute ( ) )
assertTrue ( "timestamp changed" , first != second )
assertFalse ( result )
assertSame ( expected , actual )
assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd" ) . format ( dt ) , new SimpleDateFormat ( "yyyy-MM-dd" ) . format ( dueDate ) )
assertEquals ( 5000 , connectTimeout )
assertEquals ( "MethodKey:" + c . getMethodKey ( ) , str )
arrays . assertDoesNotContain ( description , actual , null )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 0 , warnings . size ( ) )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
Assert . assertEquals ( TEST_RECORD_VALUE , readRecord . get ( TEST_RECORD_KEY ) )
context . assertIsSatisfied ( )
assertTrue ( "Session was closed" , wsnSession . isClosed ( ) )
assertTrue ( observer . accept ( path ) )
assertEquals ( result . build ( ) , myTestInstance . distinctAsync ( builder ) . get ( ) )
assertEquals ( "/sendError" , view )
assertTrue ( "Cache file was not created." , cacheFile . exists ( ) )
assertThat ( domain . getExportedNaps ( ) , hasEntry ( "foo" , "bar" ) )
assertEquals ( "b:alt 2 a:alt 1\\n" , found )
assertEquals ( "Organization/AAA" , p . getManagingOrganization ( ) . getReference ( ) )
Truth . assertThat ( callable . call ( 1 ) )
assertEquals ( NDArrayMath . toffset ( arr , slice ) , arr . slice ( slice ) . toffset ( ) )
assertEquals ( "http://foo/Patient?_format=json" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertEquals ( "{\\"foo\\":\\"bar\\",\\"hello\\":\\"world\\"}" , doc . jsonString ( ) )
Assert . assertEquals ( HttpStatus . SC_NO_CONTENT , argument1 . getValue ( ) . getCode ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import org.kissmda.AException;\\n" + "import org.kissmda.BException;\\n" + "import org.kissmda.
assertFalse ( v . isReturnToDepot ( ) )
assertEquals ( expected , cls )
assertEquals ( "3.5.13" , verison )
Assert . assertEquals ( "chosen overwritten-should have stayed the same" , firstLength , compareIrods . length ( ) )
assertTrue ( tuple instanceof StaticBinding )
assertEquals ( "TEXT" , p2 . getCode ( ) . getText ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . UNKNOWN_DESTINATION_QUEUE , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertThat ( Asn1DerDecoder . readSubjectPublicKeyAlgorithm ( data ) , is ( "DSA" ) )
assertThat ( rows . getRowCount ( ) , is ( equalTo ( 100 ) ) )
assertLogEvent ( logEvent )
assertEquals ( "Got content" , "" , layout . getContent ( ) )
assertThat ( value , is ( equalTo ( 1024L ) ) )
assertEquals ( extractedYAML , expectedYAML )
Assert . assertTrue ( ! result . isSetName ( ) && ! result . isSetDescription ( ) && ! result . isSetMetadata ( ) )
assertEquals ( 0 , listener . updatedInjectedFilters . size ( ) )
assertNull ( constraints . getExpiryTime ( ) )
assertThat ( toJson , is ( "{\\"out\\":null}" ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , query1 ) )
Assert . assertEquals ( Explain . ExplainType . NONE , o . explainType )
assertEquals ( gcd . evaluate ( variable , point ) . monic ( ) , sparseInterpolation . evaluate ( point ) . monic ( ) )
assertThat ( comboBox . getItems ( ) , notNullValue ( ) )
assertEquals ( origDatagrams [ testIdx + 1 ] , d )
assertThat ( attributeValues . getProperties ( ) , hasEntry ( "x" , "z" ) )
assertArrayEquals ( new BigDecimal [ ] { new BigDecimal ( 1 ) , new BigDecimal ( 2.23 ) , new BigDecimal ( 3 ) } , params . valuesAsBigDecimal ( "a" ) )
assertFalse ( ResultSetCompare . equalsByTerm ( r2 , rs1 ) )
assertThat ( expected , equalTo ( actual ) )
assertEquals ( TestUtil . HTTPS_TEST_PROXY , result . get ( 0 ) )
Assert . assertEquals ( "a.b$PI" , expression . execute ( ) . toString ( ) )
assertThat ( extractor . extractDataModelCondition ( sheet ) , is ( ( Object ) EnumSet . noneOf ( DataModelCondition . class ) ) )
Assert . assertFalse ( rdbStore . getRdbFile ( ) . exists ( ) )
assertOut ( "var /** @type {*} */ a = function() {\\n}" )
assertEquals ( "short field not aligned" , MAGIC , testlib . struct_align_Signed16 ( s ) )
assertSame ( test , base )
assertEquals ( "foo" , command . getName ( ) )
assertEquals ( version . toString ( ) , "2" )
assertEquals ( result , sameResult )
assertEquals ( "https" , scheme )
assertEquals ( 2 , repository . getCommits ( ) . size ( ) )
assertThat ( result . isSuccess ( ) , is ( true ) )
Verify . assertListsEqual ( FastList . newListWith ( "John's Saving Account 2" , "My Account" , "Running" , "No customer Account" , "Virtual" ) , accounts . asEcList ( ) . collect ( CustomerAccountFinder . name ( ) ) )
assertArrayEquals ( FRX_2012_DISCLOSURE_EXPECTED , UtilsForTesting . tableToArrayOfRows ( table ) )
assertThat ( file . exists ( ) , is ( true ) )
Assert . assertEquals ( expectedKeys , actualKeys )
Assert . assertEquals ( 1 , rcs . size ( ) )
assertEquals ( "my=value" , getLastRequestQuery ( ) )
assertNotNull ( victim . getInputStream ( mockRequest , mockResponse , null ) )
assertThat ( doc . getKey ( ) , is ( notNullValue ( ) ) )
assertNotEquals ( one , 1 )
Assert . assertEquals ( "Address" , type . getName ( ) )
Assert . assertEquals ( 2 , analyser . getLoadRightAfterActivity ( route . getActivities ( ) . get ( 2 ) , route ) . get ( 0 ) )
assertTrue ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( 1 , events . size ( ) )
Assert . assertEquals ( "SimpleSens (T)" , retour . getValueSensDirect ( ) )
Assert . assertEquals ( matrixCplx_EXPECTED , matrixCplx_ACTUAL )
assertEquals ( action . getShowWeekender ( ) , true )
assertResultSet ( res )
Assert . assertFalse ( impl . canCachedResponseBeUsed ( host , request , entry , now ) )
assertThat ( backToJson , sameJSONAs ( inputJson ) )
assertEquals ( 1 , violations . size ( ) )
assertEquals ( expected , cassandraRowMapper . map ( resultSet ) . next ( ) )
assertTrue ( "exact match on name should run" , exactFilter . shouldRun ( suite ) )
assertTrue ( handler . supportsView ( ComplexObsHandler . RAW_VIEW ) )
Assert . assertTrue ( updatedRows > 0 )
assertFalse ( result . isResult ( ) )
context . assertSentrySemanticException ( statement , "CREATE database " + DB1 , semanticException )
assertEquals ( saved . getPrefLabel ( ) , updated . getPrefLabel ( ) )
Assert . assertEquals ( "URL should be the same" , TEST_URL , popup . getUrl ( ) )
assertImgEquals ( gaussOut , bilateralOut )
assertEquals ( ReadConcern . MAJORITY , parsedReadConcern )
assertThat ( match , is ( BestTypeMatch . T1 ) )
assertEquals ( String . class , collectionParameterType )
assertEquals ( id , dc . getClientID ( ) )
assertThatAcceptorWasNotStarted ( )
assertTrue ( downloader . getClass ( ) . equals ( BasicDownloader . class ) )
assertThat ( identifiedPrincipals , hasItems ( new UidPrincipal ( 1000 ) , new GidPrincipal ( 1000 , true ) , new JwtSubPrincipal ( "EXAMPLE" , sub ) , new JwtJtiPrincipal ( "EXAMPLE" , jti ) ) )
assertThat ( minimizedChanges , is ( empty ( ) ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertNull ( config . getContainer ( "gadgets" ) )
assertOut ( "var /** @type {XML} */ a = new XML(\\"<top attr1='cat'><child attr2='dog'><grandchild attr3='fish'>text</grandchild></child></top>\\")" )
assertHistoricProcessInstances ( )
assertEquals ( "failed to generate new object with parameterized type" , "new ArrayList<java.lang.String>()" , s )
Assert . assertEquals ( 6 , permutations . size ( ) )
Assert . assertEquals ( "Invalid input" , "test" , new SPQRNodeManagementResource ( mockedNodeManager ) . registerNode ( request . getProtocol ( ) , request . getHost ( ) , request . getServicePort ( ) , 8081 ) . getState ( ) )
assertNull ( this . mocker . getComponentUnderTest ( ) . getStackTrace ( ) )
assertEquals ( expResult , result )
assertEquals ( "{\\"a\\":1}" , n )
assertTrue ( message . contains ( "No topic specified" ) )
assertEquals ( "There should be two registrations/unregistrations of MavenResolver before final (ConfigAdmin based) registration" , 5 , count )
assertEquals ( "Created incorrect LinkedHashMap" , 0 , hm2 . size ( ) )
assertIsAborted ( tx )
context . assertIsSatisfied ( )
assertThat ( remoteFilesList . getResourceList ( ) , containsInAnyOrder ( allOf ( hasProperty ( "url" , is ( baseUrl + "files/dataset.nq" ) ) , hasProperty ( "mimeType" , is ( "application/n-quads" ) ) ) , all
Assert . assertEquals ( buckets5 , buckets5After )
AssertJUnit . assertTrue ( difference . isZero ( 1e-7 ) )
assertEquals ( JSON . serialize ( result ) , "[ \\"value1\\" , 12]" )
Assert . assertEquals ( 1 , ( int ) reporter . getProblemCounters ( ) . get ( Code . FIELD_NOW_STATIC . code ( ) ) )
Assert . assertEquals ( new Path ( "obj1.nested.objArr.*.nestedArrObjString1" ) , fullPath )
assertEquals ( "code" , macroFactory . groovyMacroCode ( GROOVY_MACRO ) )
assertEquals ( "INSERT INTO user (user_id,user_name,pwd ) VALUES ( :userId,:userName,:pwd ) " , t . getInsertSql ( ) )
assertThat ( params , emptyArray ( ) )
assertEquals ( "DELETE" , request . getMethod ( ) )
runner . assertAllFlowFilesTransferred ( ListenRELP . REL_FAILURE , 1 )
assertFalse ( userCanSubmitChangeRequest )
assertSideBarContainsClass ( "closed" )
Assert . assertEquals ( "This a <i>MyPage</i>\\n" , printer . toString ( ) )
Assert . assertFalse ( handler . deleteCgroup ( cgroupDir . getAbsolutePath ( ) ) )
assertEquals ( "helloworld" , result )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertEquals ( foo , objectAccessor . getObject ( ) )
assertThat ( result , hasSize ( 1 ) )
assertEquals ( "Method #toString is wrong" , exp , mapper . toString ( ) )
context . assertIsSatisfied ( )
assertEquals ( "Expected 10 results!" , 10 , n )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : from the rule button" ) )
assertStatementCanBeDeparsedAs ( select , statementTgt )
assertEquals ( 1 , listener . groups . size ( ) )
assertions . startsWith ( sequence )
rule . assertScenarioEnded ( )
assertThat ( result , containsString ( "auth:           PGPKEY-ASD" ) )
assertTrue ( readMap . equals ( testMap ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "12345" , job . getConfiguration ( ) . get ( "hbase.client.scanner.timeout.period" ) )
assertEquals ( "Getting a feed should return an empty feed" , HttpStatus . SC_NOT_FOUND , httpClient . executeMethod ( getFeedMethod ) )
assertEquals ( asList ( "忙\\n     | o\\n     | a\\n 酶\\n酶\\n" ) , texts )
assertEquals ( FleetSize . INFINITE , vrp . getFleetSize ( ) )
assertTrue ( max < connPerRoute . getMaxPerRoute ( route ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "prop like \\"abc\\"" , e . toString ( ) )
Assert . assertEquals ( vector , new Vector ( 50 , 50 , 50 ) )
assertEquals ( false , out . firstElement ( ) . get ( ) )
assertThat ( givenStories . getPaths ( ) , equalTo ( Arrays . asList ( GIVEN_STORY_PATH1 ) ) )
assertThat ( mode , is ( equalTo ( BatchMode . full ( ) ) ) )
assertThat ( testStatus , is ( expectedStatus ) )
assertTodo ( expected , actual )
assertTrue ( 0 != rmAdminCLI . run ( args ) )
Assert . assertFalse ( lanes . isEmpty ( ) )
assertThat ( connection , instanceOf ( SerialConnection . class ) )
Assert . assertArrayEquals ( new String [ ] { "w=what" } , cg . getContext ( 0 , TOKENS_1 , null , AC_1 [ 0 ] ) )
assertEquals ( 1 , list . size ( ) )
Assert . assertFalse ( sso . isSessionValid ( us ) )
assertTrue ( "Failed permission check was not logged" , loggedFailedPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertThat ( messages . getMessages ( ) . getAllMessages ( ) , hasSize ( 0 ) )
assertFalse ( channelManager . isEphemeralNode ( user1 ) )
assertArrayEquals ( array ( "Don\\47t Panic!" ) , linesOutput ( ) )
assertEquals ( bd , result )
assertEquals ( 15634800000L , q . getFirstMillisecond ( ) )
assertEquals ( "a = 1\\n" , read ( output ) )
Assert . assertEquals ( 9 , providers . size ( ) )
assertThat ( File . separator , is ( "\\\\" ) )
assertThat ( stdoutObsWasRead . get ( ) )
assertFalse ( webSocketUpgrade . validateUpgradeReply ( responseStr . getBytes ( ) ) )
assertThat ( owlOntologyChange , is ( ontologyChange ) )
Assert . assertTrue ( t <= list . size ( ) )
Assert . assertNotNull ( addressResultsDto )
Assert . assertTrue ( resource . contains ( DummyService . class . getName ( ) ) )
assertEquals ( "unknown" , column . getExpression ( ) )
Assert . assertEquals ( 1 , ( int ) dropResult . count ( ) )
assertEquals ( 1L , result )
Assert . assertEquals ( 0 , trailers . get ( ) . size ( ) )
assertThat ( userInfo , nullValue ( ) )
assertCanUpload ( s3Properties )
arrays . assertEndsWith ( someInfo ( ) , actual , emptyArray ( ) )
assertEquals ( RenameSettings . MachStrategy . EMBEDDED , view . getMachStrategy ( ) )
Assert . assertEquals ( "ref:g.43491" , gPos . toString ( ) )
assertFalse ( sf . getCache ( ) . containsEntity ( "com.hazelcast.hibernate.entity.DummyEntity" , 0L ) )
assertNull ( new GitHubPRDecisionContext ( ) . withPrTrigger ( trigger ) . check ( instance ) )
assertThat ( Timezone . of ( fallback ) , is ( expected ) )
Assert . assertEquals ( argumentCaptor1 . getValue ( ) , argumentCaptor2 . getValue ( ) )
assertThat ( change . isChangeFor ( axiomType ) , is ( false ) )
assertNotNull ( Recording . fetcher ( "RTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertNotSame ( instruction1 , instruction2 )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
assertNotNull ( "Created run was not assigned an ID." , mr . getId ( ) )
assertEquals ( e1 , e2 )
assertEquals ( ( Integer ) Integer . MAX_VALUE , extractedId )
assertNull ( daoService . get ( userWrapper , "PKEY" , "Config" ) )
assertEquals ( 100 , snapshot . getValue ( ) )
assertActive ( player1 , player2 , player3 )
given ( ) . when ( ) . get ( "rest/session/1223344" ) . statusCode ( 404 ) . assertThat ( )
assertEquals ( "   " , res )
assertNull ( account . getBalance ( ) )
assertEquals ( expected , properties )
assertThat ( countNeoFriends , is ( 7 ) )
assertEquals ( 1 , runtimeService . createProcessInstanceQuery ( ) . processDefinitionKey ( "assigneeThroughSpringService" ) . count ( ) )
assertFalse ( valid )
assertEquals ( expected , splitter . split ( str ) )
assertNotNull ( Metric . reader ( "CAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertFalse ( deviceMastership . isDeviceMastered ( ) )
assertThat ( actual , equalTo ( expected ) )
assertNull ( resourceEntity . getExternalLink ( ) )
assertThat ( FileUtils . readFileToString ( new File ( tempCopyFile ) ) , CoreMatchers . is ( cp_file . asText ( ) ) )
assertEquals ( "(10, 0)" , grid . getCell ( 10 , 0 ) . getText ( ) )
assertEquals ( "{}" , r . toString ( ) )
assertEquals ( "one dollar" , actual )
editor . assertHoverContains ( "@ConditionalOnMissingBean" , "@ConditionalOnMissingBean (types: example.Hello; SearchStrategy: all) did not find any beans\\n" + "\\n" + "Process [PID=22022, name=`test-conditionals-live-
assertTrue ( null == obj )
Assert . assertEquals ( m , UnitTestUtils . serializeAndRecover ( m ) )
assertEcssEquals ( ".myDiv{" + "background-image:\\"url(#{resource['test?gradientHeight=100px&height=150px&gradientColor=Skin.myskin']})\\";" + "}" , convertFragment ( xcss ) )
assertEquals ( "1, 2, 3" , tree . toString ( ) )
assertThat ( "minCores" , sut . getMinCores ( ) , is ( equalTo ( minCores ) ) )
assertEquals ( "name" , entityNameExtractor . getEntityName ( ) )
assertEquals ( stringConstructor . hashCode ( ) , resolvedConstructor . hashCode ( ) )
assertNotNull ( "body cannot be null" , body )
assertThat ( credentialsProvider , instanceOf ( AWSStaticCredentialsProvider . class ) )
assertEquals ( "testDesc" , trace . getDescription ( ) )
Assert . assertTrue ( c1 . isCompatible ( c2 , mutations ) )
assertEquals ( 11 , orders . size ( ) )
assertEquals ( "Close the day" , close )
assertThat ( foundResources , empty ( ) )
assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . assertEquals ( 2 , analyser . getNumberOfPickupsAtBeginning ( route ) , 0.01 )
assertErrorResponse ( response , ErrorResponse . ErrorType . INVALID_INPUT , "Invalid input" )
assertNotNull ( result )
assertNotEquals ( otherHashCode , foreignableFieldHashCode )
assertNull ( localFileInstanceStorageManager . getBinlogInfo ( "test1" ) )
assertEquals ( "test" , JsonbProvider . provider ( ) . create ( ) . build ( ) . fromJson ( new StringReader ( json ) , SimpleProperty . class ) . value )
Assert . assertNotNull ( "null data object, was not found" , dataObject )
assertNotNull ( concreteCache . get ( "key" ) )
Assert . assertNotNull ( resultEntity )
assertEquals ( expectedFlows , actualFlows )
assertTrue ( output . contains ( "cspassword: A1B2C3D4" ) )
assertThat ( localAddressProvider . getLocalAddress ( ) , is ( notNullValue ( ) ) )
assertEquals ( 2000 , testVehicleSetTests . getYear ( ) )
assertEquals ( "http://example.com#frag" , actual )
assertEquals ( "#" , link . getAttribute ( "href" ) )
assertEquals ( "kill" , result )
assertTrue ( SOME_FLOAT == result )
assertThat ( command . accept ( state ) , is ( false ) )
assertEquals ( "Select with simple join" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( extensionConverterManager , sm . getExtensionConverterProvider ( ) )
assertEquals ( "$metadata#ESCompMixPrimCollComp(*)" , ContextURLBuilder . create ( contextURL ) . toASCIIString ( ) )
Assert . assertEquals ( "88095550" , endereco . getCep ( ) )
assertThat ( url , is ( EXPECTED_URL_BASE ) )
assertEquals ( ss , namespace . getSubscriptionsStore ( ) )
Assert . assertEquals ( 13 , list . size ( ) )
assertEquals ( 0 , population . size ( ) )
Assert . fail ( "expected IllegalArgumentException" )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEqual ( "1" , query . execute ( ) )
assertNotSame ( fsU1 , fsU2 )
assertNotNull ( newMember . getId ( ) )
assertSame ( mockConnection , connection )
assertTrue ( userCanUpdateProject )
assertTrue ( d_domain . getIndications ( ) . isEmpty ( ) )
assertTrue ( cs . getValueReference ( ) == null )
assertTrue ( callbackRan )
assertEquals ( newVariable , variable )
e . put ( "/B?body=" + UonSerializer . DEFAULT . serialize ( DTOs . B . INSTANCE ) , "a" ) . execute ( ) . assertBody ( expected )
assertThat ( time . with ( PlainTime . COMPONENT . roundedToFullMinute ( ) ) , is ( PlainTime . midnightAtEndOfDay ( ) ) )
assertEquals ( "https://github.com/burakdd/" , githubPage )
assertEquals ( template . getParameters ( ) , clone . getParameters ( ) )
assertEquals ( 5 * ShipUtils . SHIP_MEM_SIZE , actualCapacity )
assertThat ( auth . getTotpKey ( ) , nullValue ( ) )
assertThat ( "Count of customer" , res , is ( 0 ) )
assertThat ( isValid , is ( true ) )
Assert . assertEquals ( "Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw" , endereco . getDescricaoM
assertEquals ( "one" , event . getPayload ( ) . getValue ( ) )
assertThat ( Template . parse ( markup ) . render ( assigns ) , is ( expected ) )
assertThat ( service . ping ( ) . isSuccess ( ) , is ( false ) )
assertTrue ( get ( request ) . ok ( ) )
Assert . assertEquals ( 0 , suggestions . size ( ) )
assertNotNull ( nre )
assertEquals ( mode , permission . getMode ( ) )
assertEquals ( obj , stringDeserializer . deserialize ( result ) )
assertTrue ( FluentLogger . getLogger ( "test" ) . isDebugEnabled ( ) )
assertThat ( secret , is ( "secret" ) )
assertEquals ( CollectionStringProducer . class , typeProducer . getClass ( ) )
assertTrue ( values . contains ( new SymbolicValue ( "func1" , "func1.js" ) ) )
assertEquals ( "select cast('a' AS b)" , result )
Assert . assertTrue ( result )
assertEquals ( actualDeviceClientList . size ( ) , 1 )
assertOut ( "a(b.toString())" )
assertThat ( minimizedChanges , is ( empty ( ) ) )
assertEquals ( expected , actual )
assertTrue ( connector instanceof NioSocketConnector )
assertThat ( hijri . with ( CommonElements . weekOfYear ( HijriCalendar . family ( ) , model ) . atCeiling ( ) ) , is ( expected ) )
Assert . assertTrue ( "new file does not exist" , checkCopiedFile . exists ( ) )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "ENVELOPE [id='']((11.0 22.0,44.0 22.0,44.0 88.0,11.0 88.0,11.0 22.0))" , writer . toString ( ) )
assertEquals ( Alignment . LEFT , gridColumn . getAlign ( ) )
Assert . assertNull ( comp . getHtmlClassList ( ) )
assertThat ( jPath . elementFrom ( glossaryRoot ) . getAsString ( ) , equalTo ( "XML" ) )
assertEquals ( 0 , buyPercentageFee . compareTo ( new BigDecimal ( "0.001" ) ) )
this . assertGet ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Fponyuniverse%252Finjector/F
assertNull ( entityField . get ( IndexingUtils . FIELD_STRING ) )
assertEquals ( 123L , info . getId ( ) )
assertThat ( md , is ( notNullValue ( ) ) )
assertNotNull ( uploadResponse )
assertTrue ( ctx . isAborted ( ) )
assertThat ( stringFragment , is ( "FOOBAR with NO " ) )
Assert . assertArrayEquals ( expected_output , outputD , 1e-6 )
assertEquals ( expResult , result )
Assert . assertEquals ( list , objectTree . get ( "randomStrings" ) )
Assert . assertTrue ( false )
assertThat ( edges , containsInAnyOrder ( likeEdge ( ) . withProperty ( "collection" , "prefixpersons" ) , likeEdge ( ) . withProperty ( "collection" , "prefixdocuments" ) ) )
assertThat ( session1 , is ( not ( session2 ) ) )
assertEquals ( new Float ( 123.4F ) , result )
assertTrue ( outAny . equal ( inAny ) )
assertEquals ( "Wrong variable value" , TEST_VALUE , interpolator . resolve ( ":" ) )
assertNotNull ( provisioningServiceClient )
Assert . assertEquals ( now , value )
assertEquals ( "All rules have been imported" , 6 , ss . size ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertFalse ( TestRMILoadBalancerFactory . areServerBalancersClosed ( ) )
assertThat ( context . statement ( ) , is ( "\\"b ' c\\"" ) )
assertThat ( returnedMode , is ( AvroMode . GENERIC ) )
assertEquals ( 10 , entities . size ( ) )
assertEquals ( 1 , result . getRequiredPlugins ( ) . size ( ) )
assertEquals ( "the file-input/0.1.0.SNAPSHOT/jar" , computePathToDepsFromMvnUrl )
assertThat ( result , isFailedCommand ( ) )
Assert . assertEquals ( msg , expected , actual , delta )
assertTrue ( caughtException )
assertThat ( priceSum , is ( 50L ) )
assertEquals ( o , null )
assertEquals ( 1 , result )
assertEquals ( new Scanner ( getClass ( ) . getResourceAsStream ( "/expected-2-sample.html" ) , "UTF-8" ) . useDelimiter ( "\\\\A" ) . next ( ) , sw . toString ( ) )
assertEquals ( entity , entity2 )
assertEquals ( "1" , client . portfolios . findById ( "1" ) . execute ( ) . gid )
assertThat ( actual , sameJsonAs ( expected ) )
assertFalse ( criteriaReader . start ( ) )
assertEquals ( future , underTest . streamCollectEmpty ( futures , consumer , supplier ) )
assertEquals ( opponentHealth , opponent . getHero ( ) . getHp ( ) )
assertEquals ( reference , lessSpecific )
assertEquals ( "2:John\\n" + "3:Taro" , got )
assertEquals ( expected , actual )
Assert . notNull ( ( Department ) departmentDao . getDepartmentById ( departmentParent . getId ( ) ) )
assertThat ( "Unexpected MDX query" , getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "Cross
assertNotNull ( ejercicio )
Assert . assertEquals ( "Test.B_A_two" , column )
assertEquals ( expResults , results )
assertViolationsThat ( report . getValidationViolations ( ) , equalTo ( "The baseUri has no variable 'invalid' in Root definition" ) , equalTo ( "baseUriParameter with name 'version' is not allowed in Root definition" ) )
assertTrue ( constrainedReturnDescriptor . hasConstraints ( ) , "Method has one return value constraint defined in supertype." )
assertThat ( request . getConnectorId ( ) , equalTo ( zeroValue ) )
Assert . assertEquals ( "Document ID mismatch" , expectedDocumentID , actualDocumentID )
Assert . assertEquals ( getManager ( ) . count ( ) , 0 )
assertEquals ( "{\\"d\\":{\\"MaximalAge\\":99}}" , StringHelper . inputStreamToString ( ( InputStream ) result . getEntity ( ) ) )
assertTrue ( fileContents . contains ( MULTI_LINE_VALUE ) )
TerminalParserTest . assertResult ( parser , "order by foo desc" , OrderBy . class , "order by foo desc" )
Assert . assertEquals ( "41 �拽�转" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
Assert . assertEquals ( objective , counter )
assertThat ( StatsdMetricAggregated . getInfluxdbV1JsonFormatString ( statsdMetricAggregated ) , equalTo ( "{\\"aggregated.counterMetric@#$%^_123AaZz09\\":1.2222000000}" ) )
assertEquals ( expected , uri . toString ( ) )
assertTrue ( "our user should be member in one VO" , vos . size ( ) >= 1 )
assertTrue ( banner . contains ( "Microservice Meeting Room Booking API Application" ) )
Assert . assertTrue ( lu . isSingular ( ) )
assertEquals ( "(String,String...)" , mnd . getParameterDisplaySignature ( ) )
assertEquals ( "Wrong class forolatednode" , IsolatedNodeFilterType . class , filter . getClass ( ) )
Assert . assertNotNull ( addressResultsDto )
assertTrue ( tester . testXmlSerialization ( ) )
assertEquals ( future , underTest . collectDefaultCollection ( futures , consumer , supplier ) )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
assertEquals ( Optional . empty ( ) , response )
Assert . assertArrayEquals ( coeff_EXPECTED , coeff_ACTUAL , DELTA_03 )
assertSame ( reply , myTestInstance . runCommand ( "command" ) )
assertEquals ( expected , output )
assertEquals ( "Base for doubles is wrong" , Double . valueOf ( 3.6d ) , parsed )
assertThat ( target . getOutput ( ) , is ( sameInstance ( output ) ) )
assertFalse ( redis . getReader ( ) . contains ( jedis ) )
Assert . assertTrue ( "All file types should have been cleared" , CollectionUtils . isEmpty ( widget . getFileTypes ( ) ) )
Assert . assertEquals ( "file length does not match" , irodsFile . length ( ) , actual . length )
assertEquals ( theColPos , thePosition1 )
assertEquals ( true , ( ( BufferManagerImpl ) core . getBufferManager ( ) ) . isThreadBound ( ) )
assertEquals ( "Success" , json . getString ( "status" ) )
assertEquals ( expectedSource , instrumentedSource )
Assert . assertEquals ( 4 , arrays . size ( ) )
assertTrue ( MessageController . isPopupVisible ( cell ) )
assertEquals ( "a\\nbla\\nc" , lineNumbered . toString ( ) )
assertEquals ( 4 , fixture . bytesRead ( ) )
assertEquals ( "gonzo" , result . getId ( ) )
assertTrue ( sr instanceof SpatialReferenceImpl )
Assert . assertTrue ( result . size ( ) > 0 )
assertFalse ( "Top250 is empty" , result . isEmpty ( ) )
assertTrue ( "Same arrays should be equal" , equals )
assertThat ( validationList1 , is ( Arrays . asList ( INVALID_DB_TYPE , INVALID_DB_SERVER_NAME , INVALID_USERNAME , INVALID_PASSWORD , INVALID_TRUST_ALL_ROOTS , INVALID_RESULT_SET_TYPE , INVALID_RESULT_SET_CONCURRENCY
assertEquals ( a . getSnapshotDate ( ) , b . getSnapshotDate ( ) )
assertThat ( query . getQuery ( ) , is ( "EmptyEntity" ) )
assertEquals ( "An unexpected node membership was returned" , expected , result )
assertTrue ( validator . validate ( EntityNames . TEACHER , teachers ) . isEmpty ( ) )
assertThat ( testHostname , is ( expectedHostname ) )
Assert . assertEquals ( 1 , count )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( "47" , tracking . getNewSessionId ( ) )
assertEquals ( wrapped . length , 16 )
Assert . assertEquals ( expected , actual , delta )
Assert . assertEquals ( "[3,4,2,1]" , linkedList . toString ( ) )
runner . assertAllFlowFilesTransferred ( FetchS3Object . REL_FAILURE , 1 )
Assert . assertTrue ( "Failed to verify signed challenge" , SaslEcdsaNist256PChallenge . verify ( recreatedPrivateKey , CHALLENGE , signature ) )
assertEquals ( expectedValue , actualValue )
assertNull ( widget )
assertEquals ( oldPos + size , buffer . position ( ) )
assertThat ( method . toString ( ) , is ( "GET" ) )
assertContainsOnly ( testee . getFileFilters ( ) , filter1 , filter3 )
assertEquals ( IotHubStatusCode . OK_EMPTY , result )
assertEquals ( endOfDay ( base . plusWeeks ( 3 ) ) , absoluteTime )
assertTrue ( entity . equals ( loadedEntity ) )
assertEquals ( expected , actual )
assertEquals ( 3 , result . getViolations ( ) . size ( ) )
assertEquals ( 0 , kars . size ( ) )
assertTrue ( Sets . difference ( setA , setB ) . size ( ) == 1 )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
Assert . assertTrue ( contains )
AssertJUnit . assertTrue ( difference . isZero ( 1e-7 ) )
assertTrue ( "Result: " + session . getHtmlToDisplay ( ) , session . getHtmlToDisplay ( ) . contains ( "value=\\"true\\"" ) )
assertEquals ( expected , actual )
MutableMessageFactoryTest . assertExpiryDateEquals ( expiryDateValue , message )
Assert . assertEquals ( String . format ( "send to\\n%s now" , html ( bb , "email" , "address.domain" ) ) , formatter . format ( "send to\\nemail@address.domain now" , defaultOptions ( ) ) )
assertEquals ( padded ( ARRAY_OVERHEAD + FIRST_DIM * ( OBJECT_REF + padded ( ARRAY_OVERHEAD + SECOND_DIM * OBJECT_REF ) ) ) + padded ( ARRAY_OVERHEAD + 2 * INT ) , ThreadTrackingContext . getBytes ( ) )
Assert . fail ( "server-group missing name" )
assertTrue ( qf1 . equals ( qf2 ) )
assertTrue ( meta . pofClassAttribute == null )
assertEquals ( 4 , dispatcher . getReceivedRates ( ) . size ( ) )
assertThat ( parsed , is ( answer ) )
assertTrue ( connectionServiceImpl . updateConnection ( mockDBConnection ) )
assertEquals ( "Unexpected state class" , TwinColSelectState . class , state . getClass ( ) )
assertServiceEvent ( ServiceEvent . REGISTERED , TestService . class , 5 , TimeUnit . SECONDS )
assertions . doesNotContain ( 'a' , 'b' )
Assert . assertEquals ( "Candidate size should be " + EXPECTED_CANDIDATE_SIZE , EXPECTED_CANDIDATE_SIZE , termList . size ( ) )
assertParser ( twig )
assertEquals ( CustomsDeclarationCollection . getData ( ) . size ( ) , 1 )
Assert . assertTrue ( EqualsBuilder . reflectionEquals ( result , expected ) )
Assert . assertEquals ( ps2 . getUuid ( ) , vol . getPrimaryStorageUuid ( ) )
assertTrue ( true )
assertFlowState ( ACCEPTED_NOT_ENOUGH )
assertEquals ( "Hello, World" , rep . receiveMessage ( ) . popString ( ) )
assertEquals ( expected , actual )
assertEquals ( 15 , FontUtils . calculateTextWidth ( fontMetics ) )
assertEquals ( "\\"lexicalvalue\\"@en" , literal . getLiteral ( ) )
Assert . assertEquals ( xmlEsperado , icms101 . toString ( ) )
Assert . assertEquals ( nowPlusOneMin + 1 , deadline . value ( ) )
assertArrayEquals ( expectedOutput , output )
assertServerReceived ( "<iq id=\\"*\\" type=\\"set\\" from=\\"userc@localhost/voxeo\\" to=\\"#callId@localhost\\"><say xmlns=\\"urn:xmpp:tropo:say:1\\"><audio xmlns=\\"
assertEquals ( 1L , query ( ) . from ( show ) . where ( show . acts . containsKey ( "a" ) ) . fetchCount ( ) )
maps . assertDoesNotContain ( description , actual , null )
assertTrue ( timeInstant != null )
assertTrue ( success )
assertTrue ( foundNews )
assertEquals ( literal , newLit )
assertEquals ( mockList , queryPlan . getChildQueryPlans ( ) )
assertEquals ( "udp://[@" + networkInterface + "]:8000" , loopbackResourceAddress . getResource ( ) . toString ( ) )
assertEquals ( expectedGmtOffset , actual )
assertPolicyIndirect ( server )
assertEquals ( 1 , victim . getPreProcessors ( ) . size ( ) )
assertTrue ( "Invalid response statusCode: " + statusCode , statusCode == HttpServletResponse . SC_OK )
assertTrue ( "return too late" , time < TIME )
assertOut ( "a |= b" )
assertTrue ( ts == 2016 -04-21T20:54:41.103Z )
Assert . assertNull ( wordAfter )
assertNotNull ( connector )
assertFalse ( flag )
assertEquals ( "MyResource" , result )
Assert . assertEquals ( "-1234567890" , result . getText ( ) )
assertEquals ( "O" , to . getMotion ( ) )
Assert . assertEquals ( expected , superflatPreset )
assertEquals ( "xxx" , o )
context . assertIsSatisfied ( )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( 1 , result . size ( ) )
assertTrue ( headerUserAchievements . getBronzeBadgesCount ( ) > 0 )
Assert . assertTrue ( combiSet . getTotalNb ( ) == 4 )
assertEquals ( result , ParseUtils . parseQuery ( "consumer." , "verion=1.0.0&cluster=china" ) )
assertMockEndpointsSatisfied ( )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( "Base value is not properly parsed" , date . getTime ( ) , parsed )
assertEquals ( Long . valueOf ( arg ) , il . exec ( t ) )
Assert . assertEquals ( previousGamma , gamma , 1.0e-16 )
assertEquals ( 2451545.0 , julDate . getJulianDate ( ) , TOLERANCE )
assertEquals ( Integer . valueOf ( 1 ) , myTestInstance . insertAsync ( Durability . ACK , doc ) . get ( ) )
Assert . assertNotNull ( savedTenant )
assertTrue ( canCopy )
assertEquals ( location . getPort ( ) , 443 )
assertThat ( result ( ) , not ( containsString ( "<price>" ) ) )
Assert . assertEquals ( ImmutableList . of ( ThresholdFilterHeaderExtender . FILTER_GT_MIN_COV_HET ) , annotator . getFiltersFor ( gt ) )
assertEquals ( c , new Constant ( "blah" ) )
Assert . assertEquals ( "when the import is not in progress, the " + ResetImportAction . ASK + " view should be returned" , ResetImportAction . ASK , view )
Assert . fail ( )
assertThat ( formatter . parse ( "(246) Anno Domini 1603" ) , is ( PlainDate . of ( 1603 , 4 , 4 ) ) )
assertTrue ( b )
context . assertSentryException ( statement , "CREATE ROLE r2" , SentryAccessDeniedException . class . getSimpleName ( ) )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
assertEquals ( true , check . isRequired ( ) )
assertTrue ( parser . isMyType ( document ) )
assertValidQuery ( query )
assertEquals ( 6. * 3600. + 6. * 60. + 6. , sec , 0.01 )
assertThat ( outcomes . get ( 0 ) . getResult ( ) , is ( TestResult . SUCCESS ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertEquals ( Action . DISCONTINUE , discontinuationOrder . getAction ( ) )
assertHandCount ( playerB , 0 )
assertThat ( removedOrganizationalUnit . getRepositories ( ) , is ( empty ( ) ) )
assertEquals ( expResult , result )
assertEquals ( Arrays . asList ( ")" ) , candidates )
Assert . assertTrue ( result . isMain ( ) )
assertVisitorSatisfied ( )
assertTrue ( xml . contains ( "John Doe" ) )
assertEquals ( "service" , s1 . getType ( ) )
assertNotNull ( victim . get ( new COSObjectKey ( 6 , 0 ) ) )
Assert . assertEquals ( expected . getAttribute ( "id" ) , actual . getAttribute ( "id" ) )
assertNull ( array . getArray ( ) )
assertOffline ( s . getName ( ) )
JSONAssert . assertEquals ( "{" + "status: 'inProgress', startTime: '" + now . toString ( ) + "', endTime: '" + now . toString ( ) + "', " + "description: 'This was a commit', commit: {}" + "}" , s , JSONCompareMode . LEN
assertEquals ( item . getClass ( ) , actual )
assertEquals ( mockedTransportException , actualException )
assertEquals ( executions . size ( ) , 1 )
assertEquals ( "This is my cookie from the server" , response )
Assert . assertEquals ( d , Disabled . class )
assertEquals ( new Double ( 20.0 ) , request . getEcommerceRevenue ( ) )
assertResponse ( response , 403 , "[{\\"Forbidden\\": \\"ADD API methods are disabled on this KairosDB instance.\\"}]\\n" )
assertEquals ( baseVersion , AltcoinBlock . getBaseVersion ( auxpowVersion ) )
Assert . assertEquals ( "Incorrect condition" , "(WTextField=\\"1\\" and WTextArea=\\"2\\" and WDropdown=\\"3\\")" , builder . build ( ) . toString ( ) )
assertEquals ( combineCounts ( ) , result )
assertEquals ( "King Brothers Holdings Inc...; (former big ticker symbol KKQ)" , Arrays . toString ( words ) )
assertEquals ( DEFAULT_IDENTITY , identity )
assertTrue ( actual . size ( ) >= REPEATS )
assertEquals ( SpringPropertyProxy . DelayedWriteSpringPropertyProxy . class , result . getClass ( ) )
assertEquals ( "TextBuilder String Is Test" , _textBuilder . toString ( ) , "Test" )
assertEquals ( "Pattern" , s . getPattern ( ) )
assertEquals ( "ST" , loop . getSegment ( 0 ) . getElement ( 0 ) )
assertEquals ( 1 , counter . get ( ) )
assertResultSet ( res )
assertThat ( indexHits . isVisible ( ) , is ( false ) )
Assert . assertNull ( user )
assertEquals ( BaseAction . INPUT , action . doDefault ( ) )
assertTrue ( result . contains ( "descriptionIndex" ) )
assertFalse ( isEditable )
assertEquals ( "public static  main(final String[] args) {}" , actualContent )
assertEquals ( "" , eventsReceived )
assertEquals ( "Testing error message in " + name , TEST_MSG , actual )
Assert . fail ( "Error retrieving workflow list caused by: " + e . getMessage ( ) )
assertEquals ( CUSTOM_NOTIFICATION_DOC_TYPE , document . getDocumentTypeName ( ) )
assertEquals ( Boolean . TRUE , result )
assertArrayEquals ( str . getBytes ( ) , mpis . getParts ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertThat ( vraptor . getParameterValues ( "name" ) , is ( equalTo ( values ) ) )
assertEquals ( obj . getNetName ( ) , null )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertTrue ( "Window width should be " + original_width + " instead of " + table . getSize ( ) . getWidth ( ) , original_width > table . getSize ( ) . getWidth ( ) )
assertEquals ( 2147483647 , fixture . readVarInt ( ) )
assertEquals ( "test_message" , result . getCommit ( ) . getFullMessage ( ) )
assertThat ( parse ( contents ) , contains ( map ( "value" , "1" ) ) )
assertEquals ( events . size ( ) , size ( stream ) )
assertEquals ( expecetedTableName , builtTableName )
assertJsFunctionCallSequence ( asList ( "" + "formatter.scenario({\\n" + "  \\"description\\": \\"\\",\\n" + "  \\"keyword\\": \\"Scenario\\",\\n" + "  \\"name\\": \\"scenario name\\"
assertEquals ( "something == " , result )
Assert . assertEquals ( "(124delAinsCT)" , del . toHGVSString ( ) )
Assert . assertEquals ( "Decode brackets not correct" , out , WebUtilities . decodeBrackets ( in ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\\\\\\\t" } } ) ) )
assertEquals ( booleanPropertyAsString , everrestConfiguration . getBooleanProperty ( "foo" , false ) )
assertNotNull ( Record . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( threadReleasedLatch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( AppConfigProperties . DEFAULT_BISERVER_CONTEXT_PATH , biServerContextPath )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertFalse ( "The text field of the calendar should not be empty after selecting a date" , textField . getAttribute ( "value" ) . isEmpty ( ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
assertArrayEquals ( Arrays . toString ( d . getResult ( ) ) , refar , d . getResult ( ) )
Assert . assertEquals ( "[]" , reference . get ( ) . getAttachment ( Http2Client . RESPONSE_BODY ) )
assertTrue ( result )
assertNull ( destination . getCredentials ( ) )
assertEquals ( SliceReadStatus . StreamDeleted , slice . status )
assertTrue ( doubleArray . length == 3 )
assertThat ( select , hasSelectedOption ( hasValue ( SELECTED_OPTION_VALUE ) ) )
assertNotNull ( getResponse )
assertEquals ( new Dimension ( 100 , 100 ) , res )
assertEquals ( actual , output . toString ( ) )
assertTheEntireDomainTreeHasPermissionsDefined ( client )
assertEquals ( "Device URL mismatch!" , expected , actual )
assertFalse ( validator . isValidForRoutingTable ( replyToAddress ) )
assertFalse ( lock . lock ( ) )
Assert . assertArrayEquals ( expected , processed )
assertEquals ( cache . get ( "a" ) , "b" )
Assert . assertEquals ( 400 , json . getInt ( "code" ) )
assertNotNull ( photoContext )
assertEquals ( name , ChannelzProtoUtil . toAddress ( other ) . toString ( ) )
assertBounds ( 0 , - 10 , 10 , 20 )
assertTrue ( fs . exists ( newDir ) )
assertEquals ( asList ( debug ( mdcValues , message , arg1 ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( exp , out )
assertTrue ( map . isEmpty ( ) )
Assert . assertEquals ( "{*var}" , e . toString ( ) )
assertThat ( nextToken , is ( nullValue ( ) ) )
assertEquals ( atomContainer . getBondCount ( ) , query . getBondCount ( ) )
assertEquals ( Arrays . asList ( "a" , "ab" , "ac" , "ba" , "bb" ) , kittens )
assertEquals ( sb . toString ( ) , b . toString ( ) )
assertTrue ( true )
assertEquals ( packet , p )
assertThat ( term , is ( "�ゃ��" ) )
assertTrue ( text . contains ( "en" ) )
assertEquals ( "1" , type . getValue ( rs , 1 ) )
assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , is ( 4l ) )
assertNotNull ( node )
Assert . assertEquals ( "Test template" , rt . getContents ( ) )
assertEquals ( true , rss )
assertEquals ( 1l , session . from ( $ ( dep ) ) . where ( $ ( dep . getEmployees ( ) ) . contains ( emp1 ) ) . count ( ) )
assertValidationFailures ( schema , config )
Assert . assertNotNull ( config )
assertThat ( testHeader , sameInstance ( header ) )
assertThat ( queue . hasRemaining ( ) , is ( false ) )
assertEqualDoubleArrays ( pytranspose , transpose , epsilon )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'the' " ) )
assertArrayEquals ( expected , target . getPixels ( ) )
assertNotNull ( factory . getSink ( ) )
assertEquals ( "567" , StringUtils . join ( toText ( select ( jcas , Token . class ) ) , " " ) )
assertGeometryEquals ( parsed , source )
assertEquals ( expectedResult , result )
assertThat ( "Integer schema" , combined , matches ( new SchemaMatcher ( expected ) ) )
assertEquals ( MultipleChoices . MESSAGE , ri . getDescription ( ) )
assertEquals ( "Outer class instance variable is 779" , 779 , ret )
Assert . assertNotNull ( user )
Assert . assertEquals ( "<customIcon><Icon><UUID>h9T0QaXsTOCMqYKlB50o7w==</UUID><Data>AAAAAAAAAAAAAA==</Data></Icon></customIcon>" , xml )
assertXpathEvaluatesTo ( "group" , "//ui:label/@what" , label )
assertTrue ( peterRank <= 3 )
Assert . assertNotNull ( logManager )
assertSame ( "Wrong handler" , handler , detector . getFileHandler ( ) )
TestHelpers . assertDeepEquals ( expected , snapshot . getValue ( ) )
assertAppearanceFontSize ( dest , 12.77f )
assertions . contains ( values )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expResult , result )
Assert . assertEquals ( arc , arc2 )
assertThat ( phase . getGoals ( ) , contains ( goal ( "goal0" , 0 , 500 ) ) )
assertThat ( options . getSnippetType ( ) , is ( SnippetType . UNDERLINE ) )
context . assertIsSatisfied ( )
assertEquals ( "de" , pebbleEngineProducer . pebbleEngine ( ) . getDefaultLocale ( ) )
assertions . isNotGreaterThan ( new Double ( 2d ) )
assertEquals ( refPoint , testPoint )
assertEquals ( queryCopy . getQueryGeometry ( ) , query . getQueryGeometry ( ) )
assertEquals ( new HashSet < String > ( Arrays . asList ( "staff1" , "staff2" , "staff3" ) ) , underTest . filterConnectedViaEdOrg ( new HashSet < String > ( staffIds ) , e ) )
assertThat ( finalType . getName ( ) , equalTo ( "FinalType" ) )
assertSame ( injector . getInstance ( ScopeTest . class ) , injector . getInstance ( ScopeTest . class ) )
Assert . assertEquals ( userConfig . getIntField ( ) , result . getIntField ( ) )
assertReceivedJson ( )
assertMap ( navigator . getStateParameterMap ( ) , entry ( "bar" , "baz" ) )
assertThat ( value , is ( ( Object ) "DIARY" ) )
assertTrue ( multiThreadedSingleKernelReportObserverTestHelper ( device , 8 ) )
assertEquals ( DOCS_TO_INSERT , result . size ( ) )
assertTrue ( expectPawn == Piece . WHITE_PAWN )
assertTrue ( satisfiesPrecondition ( cu ) )
assertTrue ( ! collector . getStatements ( ) . isEmpty ( ) )
assertEquals ( expectedAllocationPolicy , actualAllocationPolicy )
assertEquals ( "\\"How pretty she is!\\" said Ben to himself." , s . get ( 0 ) )
assertEquals ( "Wrong IMDB ID" , test . getImdb ( ) , result . getImdbId ( ) )
assertTrue ( v . handlesOwnValidationPath ( ) )
assertEquals ( expResult , result )
assertFalse ( generatedIds . contains ( id ) )
Assert . assertFalse ( "Invalid request from interceptor" , result )
assertThat ( runtimeClass , typeCompatibleWith ( BundleClassResolverHelperDecorator . class ) )
assertEquals ( expectedOutput , TemplateReplacer . applyTemplateChanges ( context , customTemplate ) )
Assert . assertEquals ( component , componentByFieldInjection )
assertTrue ( validator . validate ( EntityNames . STUDENT_SCHOOL_ASSOCIATION , associations ) . isEmpty ( ) )
Assert . assertTrue ( "warnings list should be empty" , warnings . isEmpty ( ) )
assertEquals ( response . getEntities ( ) . size ( ) , 3 )
assertFalse ( "Shard allocated" , result )
assertEquals ( 1 , allVisible . size ( ) )
assertEquals ( expected , actual )
assertEquals ( SearchType . DEFAULT , request . getSearchType ( ) )
assertEquals ( "Required profiles" , "tui" , new KnopflerfishPlatformBuilderF300 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertEquals ( resizer , receivedResizer )
assertThat ( "Unexpected MDX query after adding a new hierarchy" , getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS
assertEquals ( map1 , map2 )
assertArrayEquals ( ONE_BYTE_CODE , ByteArray . readAllBytes ( nlriByteBuf ) )
assertEquals ( Hex . toHexString ( outputStream . toByteArray ( ) ) , "000000000041fa2f0270204bafe49cd42e5b4584" )
Assert . assertEquals ( status . getBlockSizeBytes ( ) , data . length )
assertEquals ( dataflowInputPort , edit . getSubject ( ) )
assertTrue ( customerKey . prefixOf ( key ) )
assertThat ( result , is ( false ) )
assertTrue ( Pattern . matches ( "(?s).*/phaseListener01.jsp PASSED.*" , page . asXml ( ) ) )
assertEquals ( expected , getString ( TestUpdateImpl . example ( ) ) )
assertTrue ( it . next ( ) . asText ( ) . contains ( "mvc" ) )
assertTrue ( captor . getValue ( ) . isCancelled ( ) )
assertEquals ( FilterReply . DENY , mockAppender . getFilterChainDecision ( loggingEvent ) )
assertThat ( underTest . childMapOf ( map ) . values ( ) . size ( ) , is ( 0 ) )
assertTrue ( hasPermission )
Assert . assertTrue ( schema instanceof DirectSchema )
assertEquals ( 5 , d , 0 )
result . assertIsSatisfied ( 100 )
assertThat ( parsed , is ( answer ) )
assertEquals ( 16 , profile . dashBoards [ 0 ] . widgets . length )
assertFalse ( violation )
assertEquals ( input , written )
assertEquals ( "GBP -5.83" , test . toString ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "注�� 专�注" , t . format ( new Date ( ) ) )
assertStoreContains ( out , 1 , 2 , 3 , 5 , 4 , 4 )
assertThat ( a . getBrokerInfo ( ) , is ( notNullValue ( ) ) )
assertEquals ( post , newPost )
Assert . assertFalse ( "Failure expected false" , r . getLeft ( ) )
assertThat ( getInst ( ) . findNode ( "nodeName" ) , nullValue ( ) )
assertEquals ( "Object Type: RPKI RPKI\\n" + "Signing time: 2008-09-01T22:38:29.000Z\\n" + "Version: 0\\n" + "Number: 68\\n" + "This update time: 200
assertTrue ( unit . isValid ( Money . of ( 0 , "EUR" ) , null ) )
assertEquals ( 1 , matcher . groupCount ( ) )
assertEquals ( 20 , example . search . getSolutionListener ( ) . solutionsNo ( ) )
assertThat ( authorization , is ( present ( ) ) )
assertEquals ( 1 , size )
assertEquals ( "Invalid number." , five )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( true , resultA . compareTo ( resultB ) < 0 )
Assert . assertEquals ( expected , input )
Assert . assertEquals ( "SELECT INTERVAL '5-3' YEAR TO MONTH + INTERVAL'20' MONTH\\nFROM DUAL;\\n" , text )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-l" , "1" , "-d" , file . getAbsolutePath ( ) } ) )
Assert . assertTrue ( "Expected at least 5 sources" , sources . size ( ) >= 5 )
assertEquals ( null , this . userService . getHash ( ) )
assertEquals ( 281547991161788L , ceosReader . readB8 ( ) )
assertTrue ( tableList . size ( ) > 0 )
assertEquals ( "Remainder should be same" , pathFoo123 . remainder ( pathFooNull ) , remainder1 )
assertNotNull ( sb . install ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertOut ( "var /** @type {number} */ a = new Number(\\"1\\")" )
assertEquals ( consumerState , ShardConsumerState . SHUTDOWN_COMPLETE )
assertEquals ( 3 , result )
Assert . assertEquals ( boundary , BatchParserCommon . BOUNDARY )
assertTrue ( Arrays . equals ( data , wrapper . getData ( ) ) )
Assert . assertArrayEquals ( info , infoProxy )
assertSame ( MgAsrMode . MRT , conf . getMgAsrMode ( ) )
assertEquals ( "Substitution was not correctly applied" , "test lunch" , logRecord . getMessage ( ) )
assertEquals ( 0 , service . getSoftlinksForCpi ( cpiResource ) . size ( ) )
assertTrue ( 10 > IterableUtils . countNodes ( getDatabase ( ) ) )
arrays . assertHasSize ( description , null , 8 )
assertEquals ( ( Double ) 0.5d , getTarget ( results , "output" ) )
assertEquals ( false , this . result . included ( ) . get ( "isUserWatchingTopic" ) )
assertTrue ( time > 0 )
assertThat ( page . singleSelectWithSelection . getAllSelectedValues ( ) , contains ( "1" , "3" ) )
assertNull ( "Date parsing is wrong" , mapper . readBitemporalDate ( columns , "tt_to" ) )
assertNull ( convSessionId )
Assert . assertEquals ( "{\\"at\\":\\"1930-09-04T00:03:48.750431006Z\\"}" , os . toString ( ) )
assertTrue ( avroSchema != null )
assertEquals ( 6 , locales . size ( ) )
Assert . assertSame ( edit , pa . getAccessLevel ( OTHER_USER ) )
assertArrayEquals ( new short [ ] { 0 , 0 } , cv2 . getPhaseAngles ( ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoICMSTotal ( ) . toString ( ) )
assertTrue ( "Incorrect mapping of property with annotated field" , actual . indexOf ( "field: value1\\r\\n" ) >= 0 )
assertThat ( foundThread , is ( Optional . of ( thread ) ) )
assertEquals ( 4 , exceptions )
Assert . assertEquals ( set ( b , c ) , presenceDao . getSubdirectories ( a ) )
assertEquals ( 65423.332f , executeTestMethod ( test , Float . class , null , - 65423.332f ) , 0.0f )
assertThat ( actualJson , is ( expectedJson ) )
assertTrue ( latch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( HTTP_RESPONSE_MESSAGE , inMessage . get ( HTTPConduit . HTTP_RESPONSE_MESSAGE ) )
Assert . assertTrue ( "Unable to fetch update url: " + url , updateRdf . contains ( "<updates" ) )
assertNotNull ( result )
Assert . assertArrayEquals ( bytes , bytes2 )
assertThat ( ( String ) criterion . convertValueForDatastore ( SortDirection . ASCENDING ) , is ( "ASCENDING" ) )
assertEquals ( "((ENTITY_ID is_null  OR ENTITY_ID != " + userId + ") AND ((ID = " + userId + " AND (ACTUALOWNER =  OR ACTUALOWNER is_null )) OR ACTUALOWNER = " + userId + "))" , dataSetLookup . getFirst
assertTrue ( "flux vide" , output . size ( ) > 0 )
assertEquals ( 2 , healthMessages . size ( ) )
assertEquals ( "b" , toml . getString ( "target \\"cfg (unix)\\".dependencies.b" ) )
assertMockEndpointsSatisfied ( )
assertResultSet ( res )
assertEquals ( "" , victim . readNumber ( ) )
assertEquals ( settings . getServerName ( ) , "serverName" )
assertThat ( feature . getType ( ) , is ( "Feature" ) )
assertThat ( other , DateMatchers . sameSecond ( date ) )
assertNotNull ( "No company information" , company )
assertTrue ( result . get ( ) )
assertEquals ( "'a'b'c',xyz" , sw . toString ( ) )
assertTrue ( check ( "a" , input , output ) )
assertNotNull ( result )
assertEquals ( 0 , s . getRequiredSkills ( ) . values ( ) . size ( ) )
assertTrue ( set . contains ( tuple ) )
assertEquals ( expected , actual )
assertEquals ( "There should be one file" , 1 , files . length )
assertThat ( rmc . getCorrectedCourse ( ) , is ( expected ) )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertEquals ( 1 , fired )
assertThat ( component . getWorkflowUrl ( ) , is ( "http://" + expectedName + ".jenkins" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "wmfImageTest01.pdf" , sourceFolder + "cmp_wmfImageTest01.pdf" , destinationFolder , "diff_" ) )
assertThat ( views , hasSize ( 0 ) )
assertEquals ( "CREATE TABLE SCHEMA_NAME.TABLE_NAME (COLUMN1_NAME BIGINT IDENTITY NULL)" , generatedSql [ 0 ] . toSql ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertNumEquals ( DoubleNum . valueOf ( 5 ) , cost )
Assert . assertNotNull ( "ticket was returned" , ticket )
assertEquals ( 10 , toTest . available ( ) )
assertEquals ( v , v2 )
assertEquals ( 5.0 , v . getValue ( ) , 1e-10 )
assertEquals ( 1 , clusters . size ( ) )
assertEquals ( expected , proxy )
assertThat ( monthsStartWith_M . values ( ) , hasSize ( 2 ) )
Assert . assertEquals ( bitField . getStartElapsedEncodingStrategy ( ) , StartElapsedTimeEncodingStrategy . PREV_DELTA )
assertEquals ( id , db . getLongValue ( id , LONG_STORED_FILED_NAME ) )
Assert . assertFalse ( result . iterator ( ) . hasNext ( ) )
assertEquals ( graphIds . size ( ) , elementMock . getGraphCount ( ) )
assertTrue ( result . getSuccess ( ) )
assertEquals ( 1 , fired )
assertContains ( " " , content )
assertEquals ( testResource1 , testResource2 )
Assert . assertNull ( concept . getShortestName ( Context . getLocale ( ) , true ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( "10078668" , user . getId ( ) )
assertThat ( displayableGoal , is ( new DisplayableGoal ( "project1" , "phase1" , "goal1" , "dep1 dep2" , 0 , 16 , 32 ) ) )
Assert . fail ( "Should have Assert.failed on the second parameter to 'ends-with' not being" + "bound." )
assertFalse ( problem )
assertTrue ( handler . getBuffer ( ) . toString ( ) . endsWith ( "media:thumbnail" ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "com.example.TypeNameConflict" ) )
assertEquals ( "aTestString" , classUnderTest . getDatabaseSize ( ) )
Assert . assertEquals ( r . asNode ( ) , query . getParam ( "s" ) )
assertEquals ( "Hello <b>there</b>!" , TextUtil . stripNewlines ( cleanHtml ) )
assertTrue ( endState )
assertTrue ( checker . cleanupCalled )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
assertActive ( player1 , player2 )
Assert . assertEquals ( 0 , errors . size ( ) )
assertThat ( hostConfig . restartPolicy ( ) , is ( HostConfig . RestartPolicy . onFailure ( ) ) )
assertTrue ( actual . isEmpty ( ) )
assertEquals ( 12 , groupMembers . size ( ) )
assertEquals ( settingsA . hashCode ( ) , settingsB . hashCode ( ) )
assertEquals ( contractClass , ContractRegistry . INSTANCE . getContractClass ( targetClass ) )
Assert . assertNull ( foundTenant )
assertThat ( result , is ( true ) )
Assert . assertFalse ( context . getResult ( ) )
assertEquals ( 1d , t [ 0 ] , 0.1d )
Assert . assertEquals ( "a" , qy . get ( 0 ) )
assertEquals ( "aTestString" , classUnderTest . getProcedureSeparator ( ) )
assertThat ( result , stringContainsInOrder ( "<Bundle" , "<meta>" , "<tag value=\\"http://hl7.org/fhir/tag\\"/>" , "<code value=\\"http://hl7.org/fhir/tag/message\\"/>" , "<lastUpdated value
assertThat ( formatterOutput , is ( "classpath:path/test.feature:2\\n" ) )
assertThat ( status . code , is ( HttpURLConnection . HTTP_BAD_REQUEST ) )
Assert . assertEquals ( "desktop" , provider . getPropertyValue ( mockServletRequest ) )
assertThat ( isTransactionRelated , is ( false ) )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertThat ( expected . getMessage ( ) , startsWith ( "[foo] did not satisfy [" + StartsWith . class . getName ( ) + "]." ) )
assertTrue ( file . toString ( ) . contains ( "pig" + Path . SEPARATOR + "sharelib" ) )
assertNotNull ( result )
assertSingleReplacement ( tokenIterator , "{foo}" , "bar" , "{bar}" )
assertEquals ( 5 , p . getTotalPages ( ) )
assertEquals ( "gt0100|Hypertension" , code )
Assert . assertNotNull ( entry1 )
Assert . assertEquals ( 1 , beans . size ( ) )
assertNotNull ( result )
assertEquals ( "5" , e . getAttribute ( "name" ) )
assertEquals ( "I've had msg2" , RuleUtil . correctTextFromMatches ( matches , "msg1" ) )
assertEquals ( modifyAliases1 , modifyAliases1Duplicate )
Assert . assertEquals ( 1 , l . size ( ) )
Assert . assertEquals ( expected , actual )
assertFalse ( constraint . fulfilled ( iContext ) )
Assert . assertEquals ( null , vo )
assertEquals ( "http://foo.bar.com/fu/bar?_a=b&c=d,e" , eu . toString ( ) )
assertThat ( messages . size ( ) , is ( 1 ) )
assertAccessForbidden ( client )
assertThat ( description . toString ( ) , startsWith ( "a stage that completed exceptionally with java.io.IOException: error" ) )
assertEquals ( 1 , stat . getSize ( ) )
assertEquals ( "test" , res . toCompletableFuture ( ) . join ( ) )
Assert . assertTrue ( response . contains ( "<out>BmwTesting enhanced REST Feature relative mapping</out>" ) )
assertEquals ( "https://www.google.com/apis/ads/publisher" , config . getNamespacePrefix ( ) )
assertThat ( p . get ( ) , is ( notNullValue ( ) ) )
assertCorrectPropertyPathStringRepresentations ( constraintViolations , "addressesPerCity[Lyon]" )
assertMockEndpointsSatisfied ( )
assertThat ( driver . findElement ( By . id ( "user1" ) ) . getAttribute ( "value" ) , is ( "user1" ) )
assertArrayEquals ( context , sha512 , actual . getBytes ( ) )
assertTrue ( okstate . get ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( "OK" , status )
assertTrue ( events . size ( ) == 5 )
assertTrue ( "Wrong simplified filter: " + simplified , simplified == null || simplified instanceof AllFilter )
assertThat ( listener . awaitCompletion ( 500 , TimeUnit . MINUTES ) , is ( true ) )
assertEquals ( "{\\"d\\":{\\"Age\\":42}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( newName , hadoopClusterDelegate . newNamedCluster ( variableSpace , iMetaStore , shell ) )
assertLog ( Log . VERBOSE , "test trace argument argument2 argument3" , exception )
assertFocused ( c41 )
arrays . assertContainsOnly ( description , actual , other )
assertNotNull ( tutor )
assertEquals ( "注�� 专�注" , t . format ( new Date ( ) ) )
assertEquals ( uuid , Whitebox . invokeMethod ( ovsdbPortUpdateCommand , "extractUuid" , insert ) )
Assert . assertTrue ( this . people . anySatisfy ( predicate ) )
Assert . assertEquals ( 40 , bh . decodeXml ( multiValuedAttribute , null , null ) )
assertSame ( expectedResult , result )
assertNotNull ( entity . getId ( ) )
arrays . assertDoesNotContain ( description , actual , value , null )
assertTrue ( registry . getMarkers ( ) . isEmpty ( ) )
assertThat ( book . getTitle ( ) , is ( "S�owacki" ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . EDIT , this . doc ) )
Assert . assertEquals ( m , support . convert ( m ) )
assertEquals ( "Unexpected primary style name" , "v-optiongroup" , state . primaryStyleName )
Assert . assertEquals ( 4 , root . left . right . data . intValue ( ) )
Assert . assertThat ( properties . size ( ) , IsEqual . equalTo ( 2 ) )
assertValueModelFires ( model , interval , expected )
assertResultSet ( res )
assertNotNull ( SupportingDocumentType . reader ( ) . read ( ) )
assertTrue ( plan . contains ( "- Node Output Rows: 1" ) )
assertEquals ( expected , actual )
assertThat ( this . requestMap , hasKey ( "pagedData" ) )
assertEquals ( 1 , currentPixel % width )
assertThat ( chksumChannel . getChecksums ( ) , contains ( expectedChecksum ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
assertEquals ( 0 , count )
Assert . assertTrue ( false )
assertAnnotations ( 1 , MilitaryPlatform . class , new TestMilitaryPlatform ( 0 , "armoured vehicle" , "UAV" ) )
assertEquals ( "Usage: man [<options>]" + getLineSeparator ( ) + "[OPTION...]" + getLineSeparator ( ) + "Options:" + getLineSeparator ( ) + "  -d, --debug    emit debugging messages" + getLineSeparator ( ) + "  -D, --default
Assert . fail ( "Expected MessageConversionException" )
assertEquals ( exceptions , repository . findByException ( new Exception ( "Exception1" ) ) . asList ( ) )
assertEquals ( 0 , result )
assertEquals ( new Character ( 'b' ) , ctxt . getCompositeElementSeparator ( ) )
assertEquals ( expected , actual )
assertEquals ( repeats , counter . get ( ) )
assertNull ( array )
assertThat ( representation , is ( representationRepresentation ) )
assertEquals ( historyTimeToLive , activity . getHistoryTimeToLive ( ) )
assertEquals ( 50 , bean . getNumber ( ) . intValue ( ) )
context . assertTrue ( ar . succeeded ( ) )
assertThat ( data . getStreq ( ) , is ( "test" ) )
assertEquals ( "incorrect value" , 0 , aNumber . signum ( ) )
assertEquals ( expected , dbMeta . getFieldDefinition ( valueMeta , null , null , false , false , false ) )
assertEquals ( "Basic parameters are not correct" , new BasicBuilderParameters ( ) . basic ( ) , basic )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( "testSetPlace 0" , mv . getPlace ( ) , equalTo ( place ) )
assertThat ( evaluateStartConditions . size ( ) , is ( 2 ) )
Assert . assertEquals ( 2 , path . getShapes ( ) . size ( ) )
Assert . assertEquals ( "the woman kicks the dog on the rock and kicks the dog behind the curtain" , this . realiser . realise ( aggregated ) . getRealisation ( ) )
assertPointArrayArrayEquals ( expected , actual )
assertTrue ( StepUtils . hasStreamingStep ( step , stepConfig ) )
assertEquals ( "java.lang.NullPointerException: 4\\n" + "java.lang.NullPointerException: 4\\n" + "java.lang.NullPointerException: 6\\n" , exceptionWithNulls . toString ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertTrue ( "output contains exception" , ! listOutput . contains ( "Exception" ) )
assertEquals ( "aaa$Bbb" , aaa . getBbb ( ) )
assertEquals ( "CompoundInterest{\\n" + " RateAndPeriods{\\n" + "  rate=Rate[0.05]\\n" + "  periods=100}}" , ci . toString ( ) )
Assert . assertNull ( RpcUtils . getInvocationId ( inv ) )
assertTrue ( mediator . changeNick ( " Amy " ) )
assertArrayEquals ( test , getInputStream ( ) . readLittleFloatArray ( test . length ) , 0.0000001f )
assertFalse ( txNew . isPresent ( ) )
assertEquals ( expected , actual )
assertThat ( results , hasSize ( 2 ) )
assertArrayEquals ( GPUVec . convert ( result ) , transpose . toArray ( ) , 0.01 )
Assert . assertEquals ( 11 , patientCount )
assertEquals ( expected , result )
Assert . assertEquals ( 0 , sessionID . getBytes ( ) . length )
assertEquals ( "Didn't get last modified" , new Date ( System . getProperty ( "user.dir" ) . replaceAll ( Matcher . quoteReplacement ( String . valueOf ( File . separatorChar ) , "/" ) , "/" ) , "UTF-8" ) , graph . lastModified ( )
assertThat ( taskLogOnlyTaskLogger . getNexusLogLocation ( ) , startsWith ( TASK_LOG_LOCATION_PREFIX ) )
assertEquals ( "format does not match" , StringDateTimeModel . DATETIME_FORMAT_DEFAULT , format . format ( first ) )
assertEquals ( 1 , users . size ( ) )
assertFalse ( presenter . isDirty ( ) )
assertEquals ( defaultTimeZone2 , defaultTimeZone )
assertThat ( formatterOutput , sameJSONAs ( expected ) )
assertEquals ( expResult , result )
assertEquals ( diff , result . intValue ( ) )
assertSuccess ( result )
Assert . assertEquals ( "testuser1" , username )
Assert . assertTrue ( "Endpoint returned wrong object" , retObj instanceof String )
assertEquals ( fakeResolver , factory . newNameResolver ( new URI ( "aaa://" ) , Attributes . EMPTY ) )
assertEquals ( 1 , correlatedExecutions )
assertTrue ( ex . isPrime ( 71 ) )
assertFalse ( arr . some ( callbackfn ) )
assertEquals ( "" , result )
assertThat ( serialisedBadgesDetailsOf ( job ) , is ( nullValue ( ) ) )
assertDropdownIsBelow ( )
assertEquals ( null , target . anotherProperty )
assertOut ( "goog.array.forEach(obj, function (i) {\\n\\tbreak;\\n})" )
assertNull ( tuple . getMap ( "field" ) )
assertThat ( m , arrayWithSize ( 1 ) )
assertEquals ( - 1000000000L , ulonglongValue . longValue ( ) )
assertThat ( children , containsInAnyOrder ( clsB ) )
Assert . assertEquals ( String . format ( "a %s text" , this . html ( bb , "red" , "colored" ) ) , formatter . format ( "a [color=\\"red\\"]colored[/color] text" , defaultOptions ( ) ) )
assertEquals ( "Response body is not correct." , USER_IN_DEFAULT_REALM , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_DEFAULT_REALM , CORRECT_PASSWORD , SC_OK ) )
assertTransformedText ( normalizedText , inputText , "de" , segmenter , normalizer )
assertTrue ( d1 instanceof PublicCloneable )
Assert . assertEquals ( 5L , gcd . longValue ( ) )
assertEquals ( CodecSupport . toString ( Base64 . decode ( EX_12_SUFFIX ) , true ) , plaintext )
assertEquivalent ( bufferB , emptyBuffer ( ) )
assertFalse ( df . isAvailable ( ) )
assertEquals ( "[1]" , builder . toString ( ) )
assertEquals ( PaxDate . of ( 2012 , 13 , 5 ) , test )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertEquals ( 10 , musicPlayer . getSongCount ( ) )
Assert . assertEquals ( "[:d = at(document.type, \\"blog-post\\")" , p . q ( ) )
assertTrue ( diff . toString ( ) , diff . similar ( ) )
assertEquals ( 0 , SolutionListUtils . findIndexOfBestSolution ( list , comparator ) )
Assert . assertEquals ( 6 , total )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<ediroot>" + "<interchange Standard=\\"EDIFACT\\" SyntaxId=\\"UNOB\\" SyntaxVersion=\\"1\\" Date=\\"ZZUK\\" Time=\\"1
assertEquals ( ( short ) 123 , deserialize . readShort ( ) )
Assert . assertEquals ( "(aa_change_ssr (aa_point_location (aa_char C) 123) _ (aa_char A) 124) ( 3 _ 4 ))" , aa_change_ssr . toStringTree ( parser ) )
assertEquals ( expected , converted )
assertEquals ( testUser , androidUserInterface . getUser ( 1235 ) )
assertFalse ( ic . outgoingResponse ( reqDetails , new ResponseDetails ( resource ) , req , resp ) )
Assert . fail ( "an exception should have been thrown" )
assertNotNull ( Daily . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
listener . assertEventFired ( new SortOrder ( "foo" , SortDirection . ASCENDING ) )
assertEquals ( 2 , res . getInt ( "nbHits" ) )
assertEquals ( "Unexpected maximum sequence length" , 2 , manager . getSourcePolicy ( ) . getSequenceTerminationPolicy ( ) . getMaximumLength ( ) )
Assert . assertEquals ( applicationModule , savedAppModule )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( Arrays . asList ( new BooleanValue ( true ) , new DoubleValue ( 4.3 ) , null ) , res . getValues ( ) )
assertEntityCount ( 1 , entity )
assertEquals ( 0.0267 , density , .001 )
Assert . assertEquals ( 3 , resultList . size ( ) )
assertThat ( subject . getVersion ( ) , is ( "1.0.2" ) )
assertEquals ( t , new HttpURL ( s ) . toString ( ) )
Assert . assertEquals ( false , retval )
Assert . assertTrue ( result . equals ( "Jumps" ) )
assertEquals ( "Boolean value does not match" , bookmark . isRead ( ) , loadedBookmark . isRead ( ) )
assertThat ( records . size ( ) , is ( 1 ) )
Assert . assertEquals ( 501 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( mockResponse , testResult )
assertions . containsSequence ( null )
assertThat ( HibernateSettingsXml . class , hasValidGettersAndSettersExcluding ( excludeProperties ) )
assertEquals ( "123" , se . getSQLState ( ) )
assertThat ( domainPermission . toString ( ) , is ( systemPermissionName ) )
assertEquals ( 3 , s1 . getClausesCount ( ) )
assertNotNull ( template )
assertEquals ( "HTTP @ /127.0.0.1:9997" , httpRequestBuilder . getProxy ( ) . toString ( ) )
assertTrue ( set . isEmpty ( ) )
assertEquals ( authors , result )
assertNull ( drug )
assertEquals ( mvj . get ( "BlockRef" ) , null )
assertEquals ( newService , newRegister . get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
assertThat ( duration , equalTo ( EffortDuration . zero ( ) ) )
assertFalse ( deserialize ( toTest , "true" ) )
assertSame ( target , root . getThis ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( testPlan1 , testPlan2 )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertEquals ( getUrl ( "" ) , finalURL )
Assert . assertEquals ( "GeocodingServlet parameter is not correct" , GeocodingServlet . GEOCODING_PARAMETER , geocodingServlet . getParameter ( ) )
assertThat ( resources , contains ( orgId , parentOrgId ) )
assertGraphHead ( expected , received )
assertThat ( encoded , stringContainsInOrder ( "<MedicationRequest xmlns=\\"http://hl7.org/fhir\\">" , "<contained>" , "<Medication xmlns=\\"http://hl7.org/fhir\\">" , "<id value=\\"123\\"/>" , "<
assertThat ( path . size ( ) , equalTo ( 3 ) )
Assert . assertThat ( classList . size ( ) , is ( 1 ) )
assertEquals ( "1" , XPathAfterVisitor . saxVisitedAfterElement . getTextContent ( ) )
assertEquals ( "" , found )
assertEquals ( edges . size ( ) , tx2 . getEdges ( ) . size ( ) )
assertTrue ( result )
assertEquals ( millisecond , millisecond )
assertEquals ( out , frame2 )
context . assertIsSatisfied ( )
assertThat ( result , is ( nullValue ( ) ) )
assertNull ( "current workflow null" , presenter . currentWorkflow )
runner . assertNotValid ( )
AssertJUnit . assertTrue ( result . isSuccess ( ) )
assertEquals ( new org . apache . http . client . utils . URIBuilder ( SERVICE_ROOT + "/Categories(1)/Products/Model.AllOrders()" ) . build ( ) , uriBuilder . build ( ) )
assertThat ( result , hasItems ( testTeam . simpleRowFor ( testTeam . emil , "member" ) , testTeam . simpleRowFor ( testTeam . david , "member" ) ) )
assertThat ( duration . dividedBy ( 1 ) , equalTo ( TimeDuration . ofSeconds ( 0.1 ) ) )
assertTrue ( "isPresent should return true if no specific requirement limit is specified for" + " for a list that has at least a single element present." , view . isPresent ( ) )
assertEquals ( TEST_XML , prettyPrintedXml )
assertEquals ( 3 , list . size ( ) )
TestUtils . assertEquals ( "MatrixUtils.inverse() returns wrong result" , MatrixUtils . createRealIdentityMatrix ( data . length ) , result , Math . ulp ( 1d ) )
assertTrue ( "DB info can't be empty" , ! driverInfo . isEmpty ( ) )
assertTrue ( isHurricaneSeason )
assertEquals ( count , metric . getCount ( ) )
assertEquals ( "category" , request . getEventCategory ( ) )
assertEquals ( "Gadcontext#12345678" , spec . getContext ( ) . getModuleId ( ) )
assertFalse ( resultMessage ( result , HttpRequestType . POST ) , result . passedValidation ( ) )
assertEquals ( "x,y" , cs . execute ( ssc ) )
Assert . assertEquals ( doppler_EXPECTED , doppler_ACTUAL , eps05 )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes WHERE CONTAINS(nodes.property,'expression')" ) )
Assert . assertEquals ( SkipPlan . Type . Skip , skip . getType ( ) )
assertEquals ( inputString , outputString )
Assert . assertEquals ( "涓��戒汉姘��惰�" , words )
assertThat ( options . toJSON ( ) , is ( ( JsonElement ) json ) )
assertEquals ( Object . class . getSimpleName ( ) , result )
assertEquals ( expected , actual )
assertEquals ( "(boo 34)\\n" , found )
assertEquals ( jedisCluster . get ( "foo" ) , "bar" )
assertResultsEqual ( net , 1.0 , 2.0 , 3.0 , 4.0 )
resultListener . assertTestCasePassed ( )
Assert . assertEquals ( "preliminary end of stream" , bytes . length / 8 , i )
assertEquals ( prevDate , DateUtils . getPrevDay ( theDate ) )
assertRows ( filePath , 1 , TEST_COLUMNS )
Assert . assertEquals ( - 1 , comparator . compare ( id1 , id2 ) )
assertThat ( e . getClass ( ) . getName ( ) , is ( AuthAccessDeniedException . class . getName ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( errors . toString ( ) , containsString ( "No issues" ) )
assertEquals ( "S:12" , x . toString ( ) )
Assert . assertEquals ( range . getQualifyingPageNums ( 5 ) , Arrays . asList ( 5 ) )
assertEquals ( HttpServletResponse . SC_NOT_MODIFIED , responseWrapper . getStatusCode ( ) )
assertEquals ( OrderBy . FWD_ROW_KEY_ORDER_BY , plan . getOrderBy ( ) )
assertThat ( getter . invoke ( instance ) , is ( true ) )
assertThat ( fakeValues . get ( FOO ) , is ( nullValue ( ) ) )
assertFalse ( appender . isStarted ( ) )
assertEquals ( "export" , test )
assertTrue ( solution . getAttributes ( ) . isEmpty ( ) )
assertOut ( "a.removeChild('child').removeChildAt(0)" )
assertEquals ( view , viewName )
assertEquals ( expectedArray , actualArray )
assertThat ( managementService . createJobDefinitionQuery ( ) . jobDefinitionId ( jobDefinition . getId ( ) ) . singleResult ( ) . getOverridingJobPriority ( ) , is ( 1701L ) )
assertEquals ( "" , result )
Assert . assertEquals ( "<div class=\\"htmlform\\"></div>" , session . getHtmlToDisplay ( ) )
assertTrue ( response . getNumberOfFeatures ( ) . intValue ( ) == 7 )
assertEquals ( "ECHO xpto1" , retrievedParent . getName ( ) )
assertFalse ( isElementPresent ( By . className ( "v-grid-editor" ) ) )
assertThat ( options . getGlue ( ) , contains ( URI . create ( "classpath:/com/example/steps" ) ) )
assertArrayEquals ( expectedOffsetValues , actualOffsetValues , 1e-10 )
assertTrue ( "No 'administrator' in " + home , home . contains ( "administrator" ) )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 4 , 8 , 4 , 4 , 4 , 3 ) )
Assert . assertEquals ( 1 , forumToChange . getDisplayOrder ( ) )
Assert . assertTrue ( ( scopePath . findScopeByName ( UserScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( CodeDefaultScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( DefaultScopeDescriptor . NAME ) != null ) && ( scope
assertEquals ( 2 , processInstances . size ( ) )
assertEquals ( 16 , dt . intValue ( ) )
assertThat ( key . getVersion ( ) , is ( "1.1.1" ) )
assertEquals ( Status . FAIL , jxm . getStatus ( ) )
assertThat ( converter . convert ( formattedToday , Date . class , bundle ) , is ( equalTo ( date ) ) )
assertions . isNotEqualTo ( actual )
assertThat ( stream ( extract ) . filter ( v -> v == SPECIFIC_VALUE ) . count ( ) , is ( Long . valueOf ( extract . length ) ) )
assertFalse ( appender . isStarted ( ) )
assertTrue ( status == 0 )
Assert . fail ( "Not valid" )
assertEquals ( "POINT (0 0)" , Evaluator . evaluate ( ex ) )
assertTrue ( instance . verify ( signature ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( 4 , counter . getValue ( ) )
assertEquals ( YarnApplicationAttemptState . NEW , applicationAttempt . createApplicationAttemptState ( ) )
objects . assertIsEqualToComparingOnlyGivenFields ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) , "name" )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . END )
Assert . assertEquals ( text , serialize )
assertEquals ( expecteds , actuals )
assertRequest ( "GET" , "Powerpack/" , params )
assertThat ( actual . stream ( ) . map ( ValidationResult :: getExplanation ) . collect ( Collectors . toList ( ) ) , hasSize ( 2 ) )
Assert . assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( shortForm , sfp . getShortForm ( root ) )
assertTrue ( new Matcher ( ) . matchExecuteInstance ( output , ei ) )
assertEquals ( get ( "propIsTrue" ) , actual )
Assert . assertEquals ( 4 , fields . size ( ) )
assertEquals ( asList ( warn ( mdcValues , marker , throwable , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertServiceEvent ( ServiceEvent . REGISTERED , TestService . class , 5 , TimeUnit . SECONDS )
assertNode ( "/sequenced/teiid/vdbs/YahooUdfTest" , "vdb:virtualDatabase" , "mix:referenceable" , "mode:derived" )
assertTrue ( checkPoint )
assertFalse ( history . isStepBackwardAllowed ( ) )
assertThat ( ServiceHelper . getServiceDomainUid ( service ) , equalTo ( "domain1" ) )
Assert . assertTrue ( "Expect null expression: " + expr , expr . isNullExpression ( ) )
assertEquals ( 1 , root . getChildren ( ) . size ( ) )
Assert . assertEquals ( config . getUserID ( ) , config2 . getUserID ( ) )
assertEquals ( "doi10.000" , work . getPid ( ) )
assertThat ( timeTransition . isStarted ( ) , IsEqual . equalTo ( false ) )
assertEquals ( "RemoteAddr" , entity . getRemoteAddr ( ) )
Assert . assertEquals ( 1 , integer . get ( ) )
assertNotNull ( result )
Assert . assertEquals ( 3.141592653589793 , toml . getDouble ( "foo" ) . doubleValue ( ) , 0.0000001 )
assertEquals ( - 1 , first . compareTo ( second ) )
assertThat ( request . getChargePointVendor ( ) , equalTo ( stringLength20 ) )
Assert . assertTrue ( EdtfPattern . YEAR_MONTH_DAY_Q . matches ( edtf ) )
assertEquals ( Arrays . asList ( "foo:1234" , "bar:1234" ) , config . getServers ( ) )
assertNotNull ( cp )
assertEquals ( expResult , result )
assertEquals ( 0 , sibs . size ( ) )
assertEquals ( "Hi commons!" , StrSubstitutor . replacePrefixSuffix ( "Hi ${name}!" , map ) )
assertEquals ( "Hello World!" , stringBuilder . toString ( ) )
Assert . assertFalse ( "Failure expected true" , r . getLeft ( ) )
context . assertIsSatisfied ( )
assertPhantomJSExecutablePropertyPointsToExecutableInClasspath ( resolvedPath )
assertNotNull ( writer . toString ( ) )
assertEquals ( "maxTime" , result )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertEquals ( numBlocks , numBlocksRead )
Assert . assertEquals ( 0 , list . length )
assertTrue ( callbackArgument . getValue ( ) )
assertEquals ( "test" , registryKey . getName ( ) )
assertEquals ( mod , modSer )
assertEquals ( rde , bd )
arrays . assertDoesNotContain ( description , actual , values )
assertEquals ( obj . toString ( ) , "LSAPR_POLICY_PRIMARY_DOM_INFO{DomainName:null, DomainSid:null}" )
assertEquals ( field . getXrefEntity ( ) , xrefEntity )
assertThat ( isValid , is ( false ) )
assertSame ( i , test . getValue ( ) )
assertEquals ( 100 , storage . size ( ) )
assertTagsetMapping ( files )
assertEquals ( expectedResult , actualResult )
assertEquals ( false , ExclusionTriggers . ShouldTriggerOnListOfFiles ( "" , "dir_1" , changedfilespath ) )
assertPattern ( info , "getList" )
Assert . assertEquals ( "Location[coordinates=2.12345 41.123456,2.12345 41.123457,2.12346 41.123461]" , location . toString ( ) )
assertEquals ( obj . toString ( ) , "SAMPR_USER_ALL_INFORMATION{UserId:50,PrimaryGroupId:100,UserName:\\"UserName1\\",FullName:\\"FullName1\\"}" )
assertArrayEquals ( result , CompactEncoder . binToNibbles ( test ) )
assertThat ( formatter . format ( PlainDate . of ( 1752 , 9 , 13 ) ) , is ( "(246) 1752 n. Chr." ) )
Assert . assertEquals ( expResult , result )
assertThat ( client . getMongoUri ( ) , is ( "mongodb://localhost" ) )
assertThat ( retrievedPost , is ( equalTo ( post ) ) )
assertValues ( presentFieldList , actual )
assertNotNull ( resultString )
assertNotNull ( image )
assertThat ( replaced , is ( sameInstance ( change ) ) )
assertFalse ( testPropertyLoader . properties . isEmpty ( ) )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertThat ( target . getEdgeActions ( ) . get ( "node1" ) , is ( actions ) )
Assert . assertEquals ( String . valueOf ( now . getTime ( ) ) , string )
assertFalse ( resolver . supportsParameter ( param ) )
assertEquals ( "should get right result" , jsonResult , json )
runner . assertAllFlowFilesTransferred ( DeleteS3Object . REL_SUCCESS , 1 )
assertEquals ( job . getName ( ) , "com.zuoxiaolong.niubi.job.sample.spring.job.Job1" )
assertTrue ( matcher . match ( msg , rule ) )
assertThat ( parser . parse ( builder . build ( ) ) , equalTo ( parser . parse ( json ) ) )
assertNull ( credentialManager . getKeystore ( alias ) )
assertEquals ( 1 , userWrapperDaoService . getAll ( ) . size ( ) )
assertEquals ( data . getBytes ( "Windows-1252" ) . length , result . limit ( ) )
assertPermanentCount ( playerB , "Damping Sphere" , 1 )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertEquals ( expectedQuery , actualQuery )
rule . assertScenarioEnded ( )
assertEquals ( second , sut )
Assert . assertThat ( methodMatcher . matches ( methodInvocationTree ) , is ( false ) )
Assert . fail ( "Shouldn't be able to update dataset with wrong name " + datasetName )
assertThat ( ListNumbers . toListNumber ( array ) , equalTo ( ( ListNumber ) new ArrayDouble ( array ) ) )
assertEquals ( decoded , attData )
assertEquals ( "!Proxy!" + servletName + "JSESSIONID=1234;path=" + servletPath , rsp . getHeaderField ( "Set-Cookie" ) )
Assert . assertTrue ( ! file . exists ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Wrong property value (path=" + path + ")" , USER_JACK_POLYNAME_ORIG , found )
Assert . assertEquals ( 0 , unitMoveIntents . getIntentVectors ( ) . size ( ) )
assertThat ( noOfSolutions , is ( 2 ) )
assertEquals ( 3 , output . split ( "\\n" ) . length )
assertThat ( request . getIdTag ( ) , equalTo ( idTag ) )
assertEquals ( "insertion (col1, col2, value1, value2)" , builder . toString ( ) )
assertNotNull ( tag )
assertThat ( Generator . generate ( Parser . parse ( smi ) ) , is ( "c1cccc2-c3ccccc3-c12" ) )
assertTrue ( true )
assertThat ( modelInstance , notNullValue ( ) )
assertEquals ( expResult , result )
assertNotNull ( nodeMap )
runner . assertValid ( cfProvider )
assertSame ( e , CRestException . handle ( e ) )
assertEquals ( expected , actual )
assertEquals ( "decimal" , shortForm )
assertFalse ( list . isEmpty ( ) )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n  return React.createElement('div', { 'id': 'foo', 'text': 'Foo' });\\n}" )
assertEquals ( 500 , node . endTime ( ) )
assertThat ( captures , hasItems ( new byte [ ] { 0 , 0 , 0 , 5 } ) )
assertEquals ( EventType . RS_ZK_REGION_FAILED_OPEN , data . getEventType ( ) )
assertNotNull ( result )
XMLAssert . assertXMLEqual ( "<stringParameterFilter>\\n" + "  <key>TEST</key>\\n" + "  <defaultValue>Default</defaultValue>\\n" + "  <normalize>\\n" + "    <case>UPPER</case>\\
assertThat ( result , is ( false ) )
assertEquals ( "UID1 should have Permission . UNPROCESSABLE_TO , Permission . UNPROCESSABLE_TO , localDomainAccessController . getConsumerPermission ( UID1 , DOMAIN1 , INTERFACE1 , OPEARATION1 , TrustLevel . HIGH ) )
Assert . assertEquals ( - 1 , compareResult )
assertEquals ( FOUND , action . getCode ( ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  var /** @type {Function} */ f = this.b
assertThat ( token . getType ( ) , is ( PCRELexer . NewLineSequence ) )
assertThat ( client . hello ( helloWorld ) , is ( "Czesc" ) )
assertEquals ( loader , bf . getClassLoader ( ) )
assertNotNull ( PropertyUtils . getProperty ( result , "auditInfo" ) )
assertTrue ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertResponse ( response , 400 )
assertThat ( target . exists ( ) , is ( true ) )
assertThat ( longProperty , is ( equalTo ( 42L ) ) )
Assert . assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.simplefileio.runtime.s3.S3OutputRuntime" ) )
assertNotNull ( schema )
Assert . assertEquals ( false , context . error ( ) . isPresent ( ) )
assertArrayEquals ( new String [ ] { "bb" , "ccc" , "a" } , strings )
assertNull ( db . get ( key ) )
assertTrue ( cleanExit )
assertEquals ( 5 , p1 . distance ( p2 ) , PRECISION )
assertEquals ( "10.1234" , d . getPrefix ( ) )
assertErrorResponse ( response , ErrorResponse . ErrorType . INVALID_INPUT , "INVALID_ACCESS_TOKEN" )
assertEquals ( 4 , results . size ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
EvictorTestUtils . assertEvictionPlanValid ( minCapacity , plan , mMetaManager )
assertMockEndpointsSatisfied ( )
assertListsEqual ( explicitList , defaultedList )
Assert . assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "<th class=\\"pass\\">Col 2</th>\\n
assertTrue ( md . getClass ( ) . isAssignableFrom ( MyDatum . class ) )
assertIsSemver ( semver , version , 1 , 2 , 3 , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
assertEquals ( 500 , getCap . get ( 0 ) )
assertEquals ( "Wrong csv value" , "47.5678" , csvValues . get ( "lat" ) )
assertReflectionEquals ( topicDraft , result )
Assert . assertEquals ( "<p:foo></p:foo>" , writer . toString ( ) )
assertTrue ( usl . getPenStroke ( ) . getDashArray ( ) . equals ( "3" ) )
Assert . fail ( "Expect adding partition to fail" )
assertSame ( people , result )
assertFeatureValues ( expected , testQuery , testText , getChain ( ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertFalse ( result )
context . assertAuthzException ( statement , "USE default" )
assertTrue ( lines . contains ( "longest-mention: Bill C" ) )
assertArrayEquals ( new int [ ] { 1 , 2 } , actual )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "default" , processEngine . getName ( ) )
assertEquals ( "" , value )
assertArrayEquals ( new int [ ] { 0 , 0 , 1 } , closed )
assertEquals ( 2 , css . getSeverity ( ) )
assertEquals ( "" , Bytes . toString ( res ) )
Assert . fail ( "Did not throw expected exception for " + s )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 2 ) )
assertEquals ( xtreemfsValue , javaValue )
assertEquals ( 2 , business . findGreatest ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
Assert . assertEquals ( "StreamEvent[stream=STREAMID,timestamp=2016-11-09 05:01:26,971,data=[namevalue,hostvalue],metaVersion=metaVersion]" , streamEvent . toString ( ) )
assertEquals ( Arrays . asList ( "aaa" , "bbb" , "ccc" ) , topics )
assertEquals ( "\\"a'b\\":\\"a'b\\\\\\"c\\"" , writer . toString ( ) )
assertTrue ( writer . toString ( ) . contains ( "bad response" ) )
assertCancelActionMessage ( actionId , controllerId )
assertFalse ( cnf . evaluate ( vertex , new Metadata ( ) ) )
assertEquals ( "alt 1\\n" , found )
assertNotNull ( tpmAttestation )
assertEquals ( expected , result )
assertNumEquals ( 0 , getCriterion ( ) . calculate ( series , new BaseTradingRecord ( ) ) )
assertEquals ( expected , result )
assertThat ( graphManager . getGraph ( ) . traversal ( ) . E ( ) . has ( "tim_id" , targetId . toString ( ) ) . count ( ) . next ( ) , is ( 1L ) )
assertEquals ( 3 , lines . size ( ) )
assertTrue ( axis . isTickMarksVisible ( ) )
assertNotNull ( presenter . form )
assertNotNull ( woodcuttingPlugin . getSession ( ) )
assertThat ( syncData , is ( equalTo ( expectedSyncData ) ) )
assertThat ( target , notNullValue ( ) )
assertEquals ( s , UrlUtils . urlDecode ( encoded ) )
assertEquals ( "hintCount" , 1 , requestManager . requestMap ( ) . size ( ) )
assertThat ( "missing owner shall be detected" , validation . hasErrorAbout ( "no" , "owner" ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( 3 , keyspaces . size ( ) )
Assert . fail ( "Missing required input" )
assertSame ( new DefaultSecurityContext ( s ) . getSubject ( ) , s )
assertEquals ( html , sanitized )
assertThat ( updateCounter . getUpdatesCount ( ) , equalTo ( 1 ) )
assertEquals ( 1 , entityLog . size ( ) )
assertHasError ( result , PlanningExecutionResult . ErrorCode . TASK_MODIFIED_ALREADY_ASSIGNED , errorMessage , CONTAINER_ID )
Assert . assertEquals ( 0 , ( ( CountingReceiver ) receivers [ i ] ) . msgCount )
Assert . assertEquals ( "testadmin@example.com" , oAuthMachine . readAttributeFromBodyMap ( input , "email" ) )
assertThat ( manager . registerVoter ( "foo" ) , is ( nullValue ( ) ) )
assertFalse ( topic . isPlugable ( ) )
assertThat ( NameUtils . limitNodeNameLength ( nodeName , 1 ) , equalTo ( Integer . MAX_VALUE ) )
assertTrue ( RelaxNgSchemaValidator . validateAgainstRelaxNg ( actualXml ) )
assertEquals ( 3 , execute ( Artist . class , parsed1 ) . size ( ) )
assertEquals ( expected , weekModel . getValue ( i ) )
assertEquals ( 2 , rs . getRules ( ) . size ( ) )
assertEquals ( expectedSource , instrumentedSource )
assertThat ( result , equalTo ( root . getFileSystem ( ) ) )
org . junit . Assert . assertEquals ( expectedPatterns * maxCount , count . get ( ) )
assertEquals ( sz , z , FastInteger . parseUint ( sz ) )
assertNotNull ( informe . getId ( ) )
assertTrue ( cut . isPositive ( 50 ) )
assertThat ( "Body is incorrect!" , body , matchesPattern ( "^Processed \\\\[message] with \\\\[Camel \\\\(test\\\\) thread #\\\\d+ - Profile Threads]$" ) )
assertEquals ( c . nullable ( ) , record . get ( c . name ( ) ) . nullable ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertTrue ( p . hasTag ( tag ) )
Assert . assertEquals ( FastMath . toDegrees ( x ) , value . toDegrees ( ) . getReal ( ) , epsilon )
assertEquals ( expected , actual )
assertOut ( "public class A extends B implements IA, IB, IC {\\n}" )
assertTrue ( persons . contains ( key . intValue ( ) ) )
service . callCounter . assertCalls ( "{findIds=2, getItemCount=2, getItems=6}" )
assertOutput ( expected )
Assert . assertTrue ( score <= 0 )
assertArrayEquals ( this . ipv6MsgWithDistinguishergBytes , ByteArray . readAllBytes ( aggregator ) )
assertEqualsIgnoreWhitespace ( expected , drl )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( pl . get ( "filename" ) , "\\\\a\\\\b\\\\c.txt" )
assertEquals ( selectedInterval . getName ( ) , "Engineering" )
assertEquals ( CREATED . getStatusCode ( ) , response . getStatus ( ) )
assertArrayEquals ( data , stream . toByteArray ( ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location (nt_number 123)) (nt_offset + (nt_number 4)))" , loc . toStringTree ( parser ) )
assertTrue ( HttpTestUtils . semanticallyTransparent ( resp2 , result ) )
assertNull ( channel21 . readOutbound ( ) )
assertEquals ( "wrapping renderer must use list's default on null" , defaultRenderer . getClass ( ) , renderer . getDelegateRenderer ( ) . getClass ( ) )
assertEquals ( producedJson , correctJson , "JSON serialization is wrong" )
assertTrue ( result . isSuccess ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
descriptor . assertValid ( )
assertEquals ( ZigBeeStatus . COMMUNICATION_ERROR , manager . getTransportVersionString ( ) )
assertEquals ( 1 , handler . recover ( new Object [ ] { "Dave" } , new RuntimeException ( "Planned" ) ) )
assertEquals ( expecting , t . toStringTree ( ) )
assertEquals ( "" , result )
assertEquals ( topic . getUserPostCount ( new JCUser ( ) ) , 0 )
assertNotNull ( toolSpec )
arrays . assertStartsWith ( description , actual , null )
ReflectionAssert . assertReflectionEquals ( except , result )
assertEquals ( lbl . size ( ) , lbl2 . size ( ) )
Assert . assertEquals ( "Hello" , e . evaluate ( jc ) )
assertEquals ( "Hello" , invoke . invoke ( null ) )
assertEquals ( "2015-10-05" , mo . getDateWrittenElement ( ) . getValueAsString ( ) )
assertEquals ( "The view paths aren't correct" , "loadrules" , scm . getViewPaths ( null , null , launcher ) [ 0 ] )
assertPutFails ( occurrence , OntopiaRestErrors . MANDATORY_FIELD_IS_NULL )
assertEquals ( 0 , m . size ( ) )
assertEquals ( COSBoolean . FALSE , victim . nextBoolean ( ) )
assertEquals ( PREFIX_URL_WITHOUT_SLASH , casClient . getPrefixUrl ( ) )
assertEquals ( "One" , doc . head ( ) . text ( ) )
Assert . assertEquals ( 3 , hm . keySet ( ) . size ( ) )
Assert . assertEquals ( expectedSpec , actualSpec )
Assert . assertEquals ( expected , knownItems . get ( b ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertThat ( ClockInterval . parseISO ( "1220/PT1H55M30S" ) , is ( interval ) )
assertCorrectLoggerName ( )
Assert . assertEquals ( originalFont . getOs2 ( ) . getVersion ( ) , parsedFont . getOs2 ( ) . getVersion ( ) )
Assert . assertEquals ( "user" , ctx . getSqlStatement ( ) )
assertNotNull ( emailAlerter )
assertEquals ( asList ( "O" , "�" , "�" ) , stringsToSort )
assertEquals ( aseVariant2 . getA2Counts ( ) , expResult )
assertThat ( NF . numberNode ( BigDecimal . ONE ) , is ( sut ) )
assertTrue ( this . factory . indicatesFailure ( null , dialect ) )
assertEquals ( 2 , constraints . size ( ) )
Assert . assertEquals ( Constants . DEFAULT_START_LEVEL , startLevel . getStartLevel ( ) )
assertEquals ( SampleLocations . STOCKHOLM , cargo . getDelivery ( ) . getLastKnownLocation ( ) )
assertTrue ( connection . isAuthenticated ( ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 7 )
Assert . assertEquals ( s , new String ( expanded ) )
assertEquals ( startOffset , endOffset )
assertEquals ( 2 , rsp . getHits ( ) . getTotalHits ( ) )
assertThat ( sel , is ( dataProperty ) )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( "|Monday|Tuesday|Wednesday|Thursday|Friday" , days )
assertNull ( actual )
assertNoViolations ( constraintViolations )
assertEquals ( DeviceTwinCommon . STATUS . SUCCESS , deviceUnderTest . deviceTwinStatus )
Assert . assertEquals ( expectedGeoJson , geoJson )
assertThat ( storyText , equalTo ( "Test directory" ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertTrue ( result )
Assert . assertEquals ( 2 , result . length ( ) )
PatternAssert . assertThat ( H2DB_CONNECTION_STRING_PATTERN )
Assert . assertEquals ( "ZZZZ" , FastqTools . convertQualities ( fastq , FastqVariant . FASTQ_SOLEXA ) )
assertEquals ( "\\n# Level1\\n\\n## Level2\\n" , writer . toString ( ) )
assertTrue ( validator . validate ( EntityNames . TEACHER_SCHOL_ASSOCIATION , teacherSchoolAssociations ) . isEmpty ( ) )
assertThat ( validPeriods , definedBy ( StartOfTime . create ( ) , point ( contemporaryExample ) , EndOfTime . create ( ) ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( 2 , p . getLocations ( ) . size ( ) )
assertEquals ( "The run should be deleted" , 0 , listPage . getRuns ( ) . size ( ) )
assertEquals ( UserCreatedEvent . EVENT_TYPE , userCreatedEvent . getEventType ( ) )
assertNotNull ( tg )
Assert . assertNotNull ( result )
assertEquals ( expected , query )
Assert . assertEquals ( element . getText ( ) , "click me" )
Assert . assertNull ( testsuites )
assertThat ( serializer , is ( instanceOf ( IgnoringSerializer . class ) ) )
assertThat ( rs . size ( ) , equalTo ( 3 ) )
Assert . assertEquals ( "2015-01-01" , formatted )
assertTrue ( monitor . isSendQueueWarning ( ) )
assertThat ( exported , is ( expected ) )
assertThat ( xml , is ( aListApartXML ) )
assertNotNull ( token )
assertThat ( add , is ( 4.5 ) )
assertEquals ( 3 , bs . getPlayerNumber ( ) )
assertEquals ( "  EAP Test" + j , trueEAP_LSAT7 [ j ] , eap , 1e-4 )
assertThat ( before , is ( nullValue ( ) ) )
assertTail ( input , 100 , expectedOutput )
assertEquals ( true , xmlHelpers . validateSignature ( document ) )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( "4 Nov 2010 16:06:04 GMT" , block . getTime ( ) . toGMTString ( ) )
assertions . isNotEqualTo ( actual )
assertThat ( formatterMember , is ( "1970-01-01T00:00:00.000Z" ) )
Assert . assertEquals ( SizeUnit . GIGABYTE . toByte ( 100 ) , vo . getSize ( ) )
assertThat ( resultedQuery , is ( expectedQuery ) )
Assert . assertNotNull ( limitOrder )
assertNotNull ( mav )
assertPrefetchResult ( result )
assertTrue ( check . missingHeaders . size ( ) > 0 )
Assert . assertEquals ( mixer . user , user )
TestUtils . assertEquals ( "scalar add" , new Array2DRowRealMatrix ( testDataPlus2 ) , m . scalarAdd ( 2d ) , entryTolerance )
assertTrue ( "Expected at least 7 blocks, got " + totalBlockLoads , totalBlockLoads >= numBlocks )
Assert . assertTrue ( findCitiesCalled )
Assert . assertEquals ( "EMIDYNHBWMBCXVDEFOFWINXTERALUKYYPPHKP9JJFGJEIUY9MUDVNFZHMMWZUYUSWAIOWEVTHNWMHAN
assertNull ( slEndpoint . getAddress ( ) )
assertEquals ( 3L , result )
assertEquals ( HttpStatusCode . ACCEPTED . code , response . getStatus ( ) )
assertEquals ( Rational . ONE , result )
assertTrue ( testFailed . isEmpty ( ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( expResult , result )
assertFailureValue ( "missing (2)" , "y" )
Assert . assertTrue ( list . isEmpty ( ) )
assertEquals ( tourInstance , deliveryDay )
assertEquals ( "Incorrect status code" , new Integer ( 400 ) , new Integer ( resp . getStatusCode ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertNotNull ( doc )
assertEquals ( CUSTOM_PRIORITY , seedJob . getPriority ( ) )
Assert . assertEquals ( "custom-value" , mf . getMainAttributes ( ) . getValue ( "Custom-Entry" ) )
Assert . assertTrue ( new File ( dir , "target/logs" ) . list ( ) . length > 0 )
assertEquals ( "[]" , Iterables . toString ( tree . getKeysContainedIn ( document ) ) )
assertNotNull ( scriptStatement )
assertEquals ( "Graph head was not equal" , graphHeadIn , GradoopFlinkTestUtils . writeAndRead ( graphHeadIn , getExecutionEnvironment ( ) ) )
assertTrue ( ProfileLogger . dump ( ) . isEmpty ( ) )
Assert . assertNotEquals ( clockTime . getTime ( ) , clockTime2 . getTime ( ) )
assertEquals ( expResult , result )
assertDates ( p1 , p21 , p22 , actual )
assertEquals ( 0.5d , prediction )
assertThat ( run ( script ) , containsString ( "built 1" ) )
assertEquals ( "Wrong property" , values , config . getStringArray ( String [ ] . class , KEY_PREFIX ) )
assertEquals ( fixture . get ( "id" ) , response . get ( "id" ) . asText ( ) )
Assert . assertNotNull ( clusterMeta )
Assert . assertTrue ( msg , Arrays . deepEquals ( esperado , resultado ) )
assertEquals ( "topologyIIdKeyed" , result . getKey ( ) )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "��
assertNotNull ( DatabaseFieldConfigLoader . fromReader ( new StringReader ( m . toString ( ) ) ) )
assertFalse ( evaluator . shouldProxyHost ( "1.232.13.7" ) )
assertTrue ( b )
assertFutureCancelMetaCancel ( future )
assertEquals ( 54321 , settings . getSysColor ( ) )
Assert . assertTrue ( expected . equals ( actual ) )
Assert . assertNotNull ( migrationPlan . getDeploymentCache ( ) )
assertEquals ( "JPEG" , TestUtils . getFormatName ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) )
assertEquals ( 12345 * 1000 * 1000 , result )
Assert . assertEquals ( 1 , stateContext . getData ( ) )
assertEquals ( 0 , records . size ( ) )
Assert . assertEquals ( "Huawei_Gsm" , vertexTraversal ( this . sqlgGraph , softwareVersion ) . in ( "softwareVersion_vendorTechnology" ) . next ( ) . value ( "name" ) )
assertEquals ( expectedFirstname , result . get ( ) . getStringValue ( ) )
assertEquals ( 10 , execCount . get ( ) )
Assert . assertEquals ( "div" , div . getNodeName ( ) )
Assert . assertEquals ( "The <word content='fox'>jumps over</word>" , hl . makeWellFormed ( xmlContent ) )
assertEquals ( TEST_INITIAL_DFS_REPLICATION , testConfiguration . get ( "dfs.replication" ) )
assertThat ( span . to ( SECONDS ) , is ( 17L ) )
Assert . assertEquals ( xmlEsperado , referenciada . toString ( ) )
assertEquals ( 0 , consumerPrefetch . retriesAttempted )
assertEquals ( "Mismatched data" , expected , res )
Assert . assertEquals ( 0 , queue . size ( ) )
assertFalse ( "Initiator should not have an Ack request from disapproval because they were the disapprover user" , document . isAcknowledgeRequested ( ) )
assertEquals ( 0 , ( ( Object [ ] ) emptyArray . getArray ( ) ) . length )
assertTrue ( ! result )
assertThat ( uriContent . asText ( ) , is ( SCHEMA_FILE_CONTENT ) )
assertFalse ( abstractRule . test ( patent ) )
assertNull ( converter . getAsObject ( facesContext , new UIPanel ( ) , "     " ) )
Assert . assertTrue ( "collection should have inherit turned on" , isInherit )
assertThat ( sampleEntities . getTotalElements ( ) , equalTo ( 0L ) )
assertEquals ( radiuses [ 0 ] , estimate . getValue ( ) , 0 )
assertEquals ( "testExpression" , "testExpression" , feel . evaluate ( "testExpression" ) )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertFalse ( dnsMessage . getHeader ( ) . isQuery ( ) )
assertSame ( GBP_2_34 , test )
assertEquals ( expecting , result )
assertEquals ( 6 , result1 . size ( ) )
assertEquals ( expectedFileName , message )
assertThat ( idAndVersion1 . compareTo ( idAndVersion2 ) , is ( - 1 ) )
assertEquals ( "Expected 2 results!" , 2 , count )
Assert . assertEquals ( numObjects , numCollections . get ( ) )
assertThat ( proxy . getClass ( ) . getName ( ) , equalTo ( ReflectionInstanceCreatorTest . class . getName ( ) ) )
assertThat ( response , is ( "person: Test Person\\nnic-hdl: TP1-TEST" ) )
assertEquals ( "A_" , buffer . removeCString ( GSM7BIT ) )
assertNull ( Files . getPosixFilePermissions ( tempFile . toPath ( ) ) )
assertEquals ( 4 , bs . capacity ( ) )
assertTrue ( Pattern . matches ( "(?s).*text%20before%20query%20string.*?text%20after=query%20string.*" , page . asXml ( ) ) )
assertEquals ( combinationsExpected , result )
Assert . assertTrue ( referredGraphs . contains ( STORED_NAME_GRAPH ) )
assertEquals ( requestString , StaxUtils . toString ( response ) )
assertEquals ( s . fromReal ( 2 * - 4 + 3 * 6 + 5 * 7 ) , t1 . getDotProduct ( t2 ) , 1e-13 )
assertThat ( Template . parse ( markup ) . render ( assigns ) , is ( expected ) )
assertTrue ( HttpStatus . SC_NOT_CACHEABLE == result . getCode ( ) )
assertTrue ( "Returned object should be an TransformedQueue." , queue instanceof TransformedQueue )
Assert . assertEquals ( "Should have 1 cookie" , 1 , result . size ( ) )
assertTrue ( "Wrongly reduced InOid filter: " + query . getFilter ( ) , query . getFilter ( ) instanceof NoneFilter )
assertTrue ( props . size ( ) > 0 )
assertEquals ( topic . getUserPostCount ( new JCUser ( ) ) , 0 )
assertThat ( result , is ( expectedAxiom ) )
assertThat ( validator . getErrors ( ) , empty ( ) )
assertThat ( Integer . parseInt ( codepoints ) , is ( CodePoints . NOT_FOUND ) )
assertNull ( remainingBuffer )
assertEquals ( PlanningExecutionResult . Status . FAILED , result . getStatus ( ) )
assertThat ( copyObjectRequest . getCopiedObjectLocation ( ) , is ( new Path ( "s3://source/" ) ) )
assertTrue ( tweets . length == 6 )
assertEquals ( "from SURVEY SURVEY with (NOWAIT)\\nfrom SURVEY SURVEY2 with (NOLOCK)\\nwhere SURVEY.NAME is null" , query . toString ( ) )
Assert . assertEquals ( 8 , lineCount )
assertEquals ( "<order><id>123/id><customerId>4444/customerId><date>20100110</date>" + "<item><id>222</id><amount>1</amount></itemn></order>" , xml )
assertTrue ( runtimeService . createProcessInstanceQuery ( ) . singleResult ( ) . isSuspended ( ) )
Assert . assertTrue ( true )
Assert . assertEquals ( instantiatedMethod . getGeneratedClass ( ) . toString ( ) , "java.lang.Iterable<Integer>" )
assertEquals ( value , ( Double ) 20.0 )
assertEquals ( String . valueOf ( ReturnCode . NO_SPEECH . code ( ) ) , firstEvent . getParameter ( "rc" ) )
assertThat ( extractMonitorables ( adapter ) . get ( MIN ) . get ( ) , Matchers . < Object > is ( newMin ) )
assertEquals ( "" , result )
Assert . assertEquals ( expect , text )
assertEquals ( in , out )
assertEquals ( STATUS_BAD_REQUEST , resp . getStatus ( ) )
assertTrue ( fromJson instanceof BigInteger )
assertEquals ( destination , OutlineUtils . toPageDestination ( victim , catalog ) . get ( ) )
assertThat ( date . with ( YEAR , 2000 ) , is ( PlainDate . of ( 2000 , 2 , 28 ) ) )
assertNotSame ( asyncReconnectBeforeReset , asyncReconnectAfterReset )
Assert . assertEquals ( BatchStatus . FAILED , jobExecution . getBatchStatus ( ) )
Assert . assertEquals ( "All is well" , message )
assertThat ( anonymized , is ( "Cookies: Parsing b[]: remember-me=MTAI4MjHY0MjcXxMTpjM2U0Zjk3OWQwMjk0; Auth-Type=http; Auth-Token=C8
assertEquals ( "Generic<T>@" + identityHashCode ( new Generic < > ( ) ) + "()" , logAdapter . asString ( new Generic < > ( ) ) )
assertTrue ( observer . await ( tc ) )
Assert . assertEquals ( "涓�椤�|1" , value )
assertEquals ( "double: 7,654,321.099" , b . primitiveDouble ( 7654321.0987d ) )
assertThat ( options . getCredentialsProvider ( ) , is ( URI . create ( "http://file/foo/bar.jceks" ) ) )
Assert . assertEquals ( "5649231f84039ce2b2b886e58f88dcee26fa3e3" , fp )
assertEquals ( "the artifact must be downloaded" , true , new File ( localRepo , "ant/ant/1.5.1/ant-1.5.1.jar" ) . exists ( ) )
Assert . assertSame ( dElem , mergeElem )
assertThat ( testOutcome . getIgnoredCount ( ) , is ( 1 ) )
assertTrue ( callback . timeout > 10000000 )
assertTrue ( runtimeService . createProcessInstanceQuery ( ) . singleResult ( ) . isSuspended ( ) )
Verify . assertSize ( 3 , pets )
Assert . assertEquals ( "s0" , udf . evaluate ( args ) )
Assert . assertEquals ( true , a . contains ( b ) )
assertEquals ( ResponderOptions . MATCH_ALL_BINDING_KEY , responderOptions . hashCode ( ) )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( VpnRoute . class ) )
assertEquals ( AssetPathToFilterConfigMapper . XLIFF_FILTER_CONFIG_ID , filterConfigId )
assertNotNull ( u . getSubject ( ) )
assertions . isNotEmpty ( )
assertTrue ( ok )
assertEquals ( String . format ( "Failed on iteration %d: expected=%s, actual=%s" , i , e , a ) , e , a )
assertFalse ( "List size mismatch across lists" , words1 . equals ( words2 ) )
assertEquals ( BODSentence . class , ebl . sentenceType )
assertEquals ( Arrays . asList ( "ok" ) , list )
assertNull ( conceptService . getConceptProposal ( conceptProposalId ) )
assertEquals ( Nd4j . ones ( rows * rows * cols ) , grad . getStateViewArray ( ) )
Assert . assertEquals ( reply , receivedReply )
assertEquals ( 2 , Solutions . bestOf ( solutions ) . getRoutes ( ) . size ( ) )
assertQualityIssues ( receipt , qtys_4300 , qtys_10 )
assertTrue ( or . isDefined ( ) )
assertParsedMessages ( "8=FIX.4.4|9=82|35=A|34=1|49=CLIENT|52=20140101-10:10:10.100|56=SERVER|98=0|108=30|141=Y|383
assertThat ( found , is ( true ) )
assertArrayEquals ( "{ 'hello' : 'world' } not the expected bytes." , helloWorld , out . toByteArray ( ) )
assertEquals ( "date" , type . getDataType ( 0 , 0 , 0 , false ) )
assertScriptEquality ( expectedScript , actualScript )
assertEquals ( "{\\"firstkey\\":1,\\"secondkey\\":2}" , d . deserialize ( objectStrategy ) . toString ( ) )
assertTrue ( cache . remove ( key , new String ( value ) ) )
assertThat ( restored . getAsString ( ) , is ( option . getAsString ( ) ) )
assertThat ( alertService . hasAlerts ( ) , equalTo ( true ) )
assertEquals ( "From is not properly parsed" , new Date ( 5 ) , mapper . readFrom ( columns ) )
Assert . assertEquals ( "Nodes should be free even though run is considered new" , 10 , freeThreads )
assertEquals ( out , expectedResults [ i ] , classz . format ( method . invoke ( object ) ) )
assertEquals ( "info@effektif.com" , value )
assertEquals ( persistenceModel , persistenceModel2 )
Assert . assertNotNull ( "Reply message was null on reply queue: " + replyQueue , reply )
assertEquals ( 1 , repository . getCommits ( ) . size ( ) )
assertThat ( impl . isPermitted ( Sets . newLinkedHashSet ( Arrays . asList ( "repoName" , "repoName2" ) ) , "repoFormat" , BreadActions . READ , variableSource ) , is ( true ) )
assertThat ( result , containsString ( "<type>basic</type>" ) )
assertEquals ( "valueA" , pc . getString ( "keyA" ) )
this . assertLoadBlobViaTuples ( tuples , false , true )
assertEquals ( res , String . class )
assertEquals ( CREATED . getStatusCode ( ) , actual . getStatus ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertTrue ( templateFile . exists ( ) )
assertEquals ( Arrays . asList ( "Duke Oracle" ) , person )
assertEquals ( result , new Pair < > ( 0 , 4 ) )
assertEquals ( "Used the DemoService as default.\\r\\nYou can cancel default service by command: cd /" , result )
assertThat ( testSupport . getResources ( CUSTOM_RESOURCE_DEFINITION ) , contains ( crd ) )
assertEquals ( 3 , count )
assertThat ( attributeValueNs , is ( "false" ) )
Assert . assertEquals ( "ZZZZ" , FastqTools . convertQualities ( fastq , FastqVariant . FASTQ_SANGER ) )
Assert . assertEquals ( 1 , id )
assertEquals ( expecteds , actuals )
assertTrue ( ca . getFallbackParameters ( ) . equals ( ap2 ) )
assertEquals ( outputExpected , outputString )
Assert . assertEquals ( "/css/ui.css" , ModuleUtil . getPathForResource ( module , path ) )
assertThat ( exported , is ( expected ) )
Assert . assertEquals ( 0 , ret . size ( ) )
assertNotNull ( reporter )
assertEquals ( expOut , out )
Assert . assertEquals ( boundingBoxOf , new Rectangle ( 20f , 30f , 10f , 10f ) )
assertEquals ( false , result )
assertEquals ( 1 , messages . size ( ) )
Assert . assertEquals ( IdentityConstants . BAD_REQUEST , IdentityResponseWrapper . buildFaultMessage ( responseMock ) . getCode ( ) )
assertThat ( command . accept ( state ) , is ( false ) )
assertFalse ( user . isPresent ( ) )
assertEquals ( String . valueOf ( me . getCode ( ) ) , me . getNick ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , destinationFolder , "diff" + testName + "_" ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( RESULT_COUNT , actual )
Assert . assertEquals ( "did not get expected packing instruction" , sb . toString ( ) , dataObjInp . getParsedTags ( ) )
assertions . contains ( new byte [ 0 ] )
assertEquals ( expected , stats1 )
assertEquals ( 188 , result )
assertNotNull ( adviceController )
assertEquals ( z1 , z2 )
assertEquals ( "Resolved" , "scan-jar:" + file . toURL ( ) . toExternalForm ( ) , m_underTest . resolve ( file . getAbsolutePath ( ) ) )
assertThat ( b . getConsole ( ) , Matchers . containsString ( "Build succeeded." ) )
assertThat ( field . getDate ( ) . getDayOfMonth ( ) , is ( - 1L ) )
assertEquals ( "1.0" , instance . getParentVersion ( ) )
assertEquals ( 0 , tuple . len ( ) )
assertEquals ( qm1 , qm2 )
Assert . assertEquals ( EXPERIMENT_ID , deserialize ( buffer ) )
assertEquals ( Bytes . toBytes ( "hello" ) , stopRow )
assertRequest ( "POST" , "Message/" )
assertTrue ( acualValues . isEmpty ( ) )
assertThat ( ordinals . findOrdinals ( TEST_ARCHETYPE_ID ) . get ( 0 ) . getDescription ( ) , is ( "ordinalDescTest1a" ) )
assertArrayEquals ( yhat1 , yhat2 , 1e-8 )
Assert . assertEquals ( 3 , registrationsRepository . getAllRegistrations ( ) . size ( ) )
assertEquals ( 3 , serverRequest . getQueryStringParams ( ) . size ( ) )
assertEquals ( "some_kind (1)" , prettifiedKey )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x0 ) ) )
assertThat ( transformed , is ( "transform_string_to_type=" ) )
this . assertLoadBlobViaTuples ( tuples , false , true )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ACTIVITIES_READ_LIMITED , ScopePathType . AFFILIATIONS_READ_LIMITED , ScopePathType . FUNDING_READ_LIMIT
assertThat ( PlainTimestamp . of ( 2014 , 4 , 22 , 0 , 0 ) , is ( PlainTimestamp . of ( date , 0 , 0 , 0 ) ) )
assertDefaultConfig ( config , false )
assertTrue ( pages . size ( ) >= 5 )
assertEquals ( 0 , h . nestLevel )
assertThat ( StepEventBus . getEventBus ( ) . areStepsFinished ( ) , is ( true ) )
assertThatStepsInstancesAre ( builderUnloadableResource . buildCandidateSteps ( ) )
assertTrue ( result )
Assert . assertTrue ( workerThread . isAlive ( ) )
assertStack ( new Object [ ] { - 1 , null , null , null , null , null } , stack )
assertTrue ( "Unexpected compressed size: " + compressed . size ( ) , compressed . size ( ) > SAMPLE_SIZE )
assertTrue ( ( Boolean ) result )
assertEquals ( "Base for string is wrong" , Long . valueOf ( 3 ) , parsed )
assertEquals ( 0 , JNIBusyWaiting . INSTANCE . whileLessThan ( null , buffer . address ( ) , runs , 1 ) )
Assert . fail ( "Expected an exception" )
assertEquals ( 10 , vrp . getJobs ( ) . get ( "1" ) . getSize ( ) . get ( 0 ) )
assertThat ( timeLine . getValidIntervals ( ) , definedBy ( StartOfTime . create ( ) , EndOfTime . create ( ) ) )
runner . assertNotValid ( )
assertNull ( principal )
assertEquals ( expBefore , profile . getExpirationTime ( ) )
Assert . assertEquals ( expected , mFileSystemMaster . checkConsistency ( new AlluxioURI ( "/" ) , CheckConsistencyContext . defaults ( ) ) )
assertEquals ( "select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 and entity_0.primitiveInt > :primitiveInt_2 and entity_0.name is not null )" , select . getQuery ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" + "456" ) . getValue ( ) )
assertThat ( view . status ( ) , containsString ( "disabled" ) )
assertThat ( candidate , nullValue ( ) )
assertEquals ( breakpointCount , 1 )
assertNotNull ( InstalledAddOnExtension . reader ( "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertFalse ( mojo . isSkip ( ) )
assertNotNull ( model )
assertEquals ( expected , actual )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� �
assertEquals ( 0 , document . select ( ".vcard" ) . size ( ) )
assertEquals ( "redis://10.0.0.1" , config . getAddress ( ) )
assertEquals ( results , clientWrapper . get ( keys ) )
TestUtil . assertSuccess ( result )
assertEquals ( 1 , posts . size ( ) )
assertTrue ( connectFuture . isConnected ( ) )
assertThat ( tuple . getList ( "field" ) , equalTo ( value ) )
assertEquals ( 1 , map . size ( ) )
assertTrue ( foundBanners . isEmpty ( ) , "It should return empty collection, cause found banners do not exist." )
assertThat ( buf . toString ( ) , is ( equalTo ( "foo;bar" ) ) )
assertFalse ( count . isShowQuotas ( ) )
assertEquals ( new Point ( 1 , 2 ) , foo . point )
assertEquals ( text , adapter . getStringAt ( 2 , 0 ) )
assertTrue ( entity . getName ( ) . equals ( "" ) )
assertRedirectsToLogin ( )
Assert . assertEquals ( Response . Status . OK . getStatusCode ( ) , modifyingResponse . getStatus ( ) )
assertEquals ( "{}" , gson . toJson ( p ) )
Assert . assertEquals ( "{\\"@context\\":\\"../$metadata#Collection($ref)\\"," + "\\"value\\":[{\\"@id\\":\\"ESAllPrim(32767)\\"}," + "{\\"@id\\":\\"ESAllPrim(-3276
assertEquals ( NAME_NODE , action . getNameNode ( ) )
assertNotNull ( ase )
assertEquals ( 5. , start . getTheoreticalEarliestOperationStartTime ( ) , 0.01 )
assertEquals ( "Result" , "Success" , task . getResult ( ) )
assertFalse ( AuthzResolver . authorizedInternal ( null , "default_policy" ) )
assertions . endsWith ( sequence )
assertEquals ( exp , area , 1e-10 )
assertEquals ( value , propertiesConfigurationProperties . get ( null ) )
Assert . assertEquals ( "56138725000103" , infoConsultaCadastro . getCnpj ( ) )
Assert . assertEquals ( Schema . Type . STRING , subSchema . getType ( ) )
assertEquals ( today . format ( new Date ( ) ) , config . getStorageIndexNamePrefix ( ) + "-1970-01-01_00" )
assertEquals ( "result is expected" , Result . NO_SUCH_METHOD , result )
assertEquals ( "HELLO WORLD" , response )
assertEquals ( " " , pluginParameters . indentCharacters )
assertThat ( target . equals ( flow ) , is ( true ) )
assertTrue ( GitFileUtils . exists ( file , commit , repo ) )
assertXMLEqual ( "Invalid source" , "<child/>" , result . toString ( ) )
assertTrue ( d >= 0 && d <= 1 )
assertEquals ( GitTool . DESCRIBE , nullGitTool . describe ( ) )
assertTrue ( sn . equals ( other ) )
assertEquals ( fixture , this . libshout . getDumpfile ( ) )
Assert . assertEquals ( build . getBestStrategy ( ) , StringEncodingStrategy . ALWAYS_SAME_VALUE )
assertHelpLines ( "Option                                Description                       " , "------                                -----------                       " , "-t, --cutoff, --threshold <Double: a  a threshold value beyond which a  " , "  positive decimal number that will     certain level of the application" , "  represent the threshold that
assertThat ( ff . andThen ( i -> i + 1 ) . apply ( "" , "" , "" , "" , "" , "" ) , is ( 2 ) )
assertThat ( DockerHost . certificatePath ( ) , equalTo ( new File ( "foobar/certificates" ) . toURI ( ) . toURL ( ) ) )
assertEquals ( 1 , tracer . finishedSpans ( ) . size ( ) )
Assert . assertTrue ( Integer . MIN_VALUE == _c . convert ( "-9223372036854775808" ) )
assertEquals ( expected , toString ( tx ) )
assertNotNull ( result )
files . assertIsEmptyDirectory ( INFO , actual )
assertEquals ( actualPage , expectedPage )
assertTrue ( map . containsKey ( "vsName" ) )
assertEquals ( "select * from (  " + "select a.*, rownum rn from (   " + "select survey1.ID from SURVEY survey1  ) " + "a) " + "where rn > ? and rownum <= ?" , query . toString (
assertEquals ( FleetSize . FINITE , vrp . getFleetSize ( ) )
assertEquals ( URL + "?param+1=value1&param+2=value2" , uri . toString ( ) )
assertIdentical ( "/xref-need-of-repair.obo" , ontology )
assertThat ( Version . findHighestMatchingBuildNumber ( version , versionSet ) , equalTo ( 2 ) )
assertResultSet ( res )
assertScoreAndParse ( content , "oracle_test_statements_4" , 50 )
assertEquals ( example , decoded )
assertThat ( taskService . createTaskQuery ( ) . taskAssignee ( "aUser" ) . count ( ) , is ( 1L ) )
assertEquals ( "Mr T" , value )
assertThat ( breakers . size ( ) , is ( 3 ) )
Assert . assertEquals ( ste . toString ( ) , frame . toString ( ) )
assertXmlVersionInProlog ( bytesWithBom , "1.1" , "<?xml version='1.1'>" )
assertFalse ( srcGeoCoding . isCrossingMeridianAt180 ( ) )
assertTrue ( videos . contains ( video ) )
assertCorrectBinaryString ( data , expected )
assertEquals ( qn , qnExpected )
assertThat ( ids , contains ( "Observation/O1" ) )
assertEquals ( g1 , g2 )
assertEquals ( "Mismatched result" , expected , actual )
Assert . assertEquals ( 200 , response . getStatus ( ) . getStatusCode ( ) )
assertNull ( Deencapsulation . getField ( twinMetadata , "lastUpdatedVersion" ) )
assertTrue ( mappedNames . isEmpty ( ) )
assertFalse ( JobUtils . isJobExecutionStoppable ( jobExecution ) )
assertScoreCompareToOrder ( comparator , buildNode ( 1 , "-110" , 5 , 41 ) , buildNode ( 1 , "-110" , 5 , 40 ) , buildNode ( 1 , "-110" , 7 , 40 ) , buildNode ( 1 , "-90" , 5 , 40
assertEquals ( body . toString ( ) , "error test error" )
assertEquals ( "test-value" , clientWrapper . get ( "key1" , transcoder ) )
assertSame ( resource , actualResource )
assertEquals ( UriComponentsBuilder . fromHttpUrl ( "http://www.indexer.com/api?t=search&extended=1" ) . build ( ) , testee . buildSearchUrl ( searchRequest , null , null ) . build ( ) )
assertEquals ( "Got: " + val , number , Utils . intToString ( val . getBytes ( ) ) )
assertEquals ( 2 + 3 * 256 + 4 * 256 * 256 , fromLittleEndian ( b ) )
assertEquals ( expResult , result )
assertTrue ( "Models not isomorphic" , isomorphic ( m0 , m ) )
Assert . notNull ( canalInstance )
Assert . assertNotNull ( request . getHeaders ( ) )
Assert . assertNotNull ( str )
assertProposalDoesNotExist ( proposals , "Pick out selected part of String" )
assertEquals ( test , loadedEntity . getSomeBytes ( ) )
assertThat ( underTest . equals ( new Object ( ) ) , is ( false ) )
assertThat ( "system-input-def-3.xml" , systemInputDef , matches ( new SystemInputDefMatcher ( expected ) ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "a" , 1.0 , 2.3 , "b" ) ) )
assertThat ( output . toString ( ) , allOf ( containsString ( "< c" ) , containsString ( "< d" ) , containsString ( "< e" ) , containsString ( "< f" ) , containsString ( "< g" ) , containsString ( "< d" ) , containsString
assertEquals ( "The message is incorrect" , expectedLogMessage , actualLogMessage )
Assert . assertTrue ( list . size ( ) == 1 )
assertTrue ( Arrays . equals ( expected_output , actual_output ) )
assertEquals ( svalues , svalues1 )
Assert . assertEquals ( expected , computed , 0.0 )
assertEquals ( new BigDecimal ( "0.00" ) , min )
Assert . assertEquals ( 50 , getRowCount ( ) )
assertEquals ( 4 , dao . findAllAssociations ( ) . size ( ) )
assertNull ( getTestChargingStationFromRepository ( ) )
assertNotNull ( schema )
assertUrlProtected ( servletUrl )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) )
assertEquals ( constVal . get ( d ) , access . get ( ) . get ( ) )
Assert . assertEquals ( "x" , l . get ( 0 ) )
Assert . assertNull ( option )
Assert . assertTrue ( "File size should be greater than " + usage . getMax ( ) , usage . getMax ( ) > result . available ( ) )
assertEquals ( expected , actual )
Assert . assertArrayEquals ( centroidExpected , location . getCentroid ( ) )
assertThat ( uris , is ( asList ( new URI ( "http://baseurl/static/rapture/resources/loading-prod.css" ) , new URI ( "http://baseurl/static/rapture/resources/baseapp-prod.css" ) , new URI
JsonAssert . assertJsonObjectEquals ( EXPECTED_JSON_RESPONSE , jsonResponse )
assertTrue ( engine instanceof SimpleExecutionEngine )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
Assert . assertTrue ( removedEventFired )
Assert . assertTrue ( links . isEmpty ( ) )
assertEquals ( "testStr" , bean . getTestStr ( ) )
assertTrue ( "Run called" , flag )
Assert . assertTrue ( "the 'stopMaintenanceMode' method was not invoked as expected." , invoked )
assertEquals ( "{\\"duration\\":{\\"days\\":[1,2,16,43]}" , JSONUtils . toJSON ( res ) )
assertEquals ( nodeIid , optNodes . get ( ) )
assertThat ( message . getKeyword ( ) , is ( Keyword . NEW ) )
assertTrue ( "Expected successful outcome" , response . getUnderlying ( ) )
assertNumEquals ( "1.0" , highestValue . getValue ( 12 ) )
assertEquals ( set , sameSet )
context . assertTrue ( res . failed ( ) )
assertEquals ( "en" , child . getAttribute ( mediaTypeAttributeType . getName ( ) ) . getValue ( ) )
Assert . assertTrue ( result )
assertTrue ( "Configurable http server mechanism factory should be created" , ops . exists ( TEST_SERVER_MECHANISM_FACTORY_ADDRESS ) )
Assert . assertThat ( item . getName ( ) , is ( "vtoraja zajavka" ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertThat ( list . size ( ) , is ( 2 ) )
assertSame ( "OutputStream is not set correctly." , outputStream , entrancePi . getOutputStream ( ) )
assertEquals ( bd1 , bd2 )
assertTrue ( "t value should be null" , null == cr . getTag ( "t" ) )
assertTrue ( searchResults . hasResults ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( families , arrayContaining ( ProcessingFamilyDefinition . NAME ) )
given ( ) . param ( "expand" , 1 ) . when ( ) . get ( "resources/" ) . then ( ) . assertThat ( )
assertThat ( header . getName ( ) , is ( "name" ) )
assertEquals ( 1 , setWithUpperBound . size ( ) )
assertEquals ( expected , buchberger )
assertEquals ( "!yro1\\n" , sWriter . toString ( ) )
assertEquals ( expecteds , actuals )
assertNotNull ( jobs )
assertThat ( gson . fromJson ( gson . toJson ( i ) , Interval . class ) , is ( i ) )
assertAnnotations ( 1 , Temporal . class , new TestEntity < > ( 0 , "25th February 2013" ) )
assertNotNull ( resp )
assertThat ( new JSONObject ( actual ) , sameJsonAs ( rawSchemaJson ) )
Assert . assertEquals ( FastMath . toRadians ( x ) , value . toRadians ( ) . getReal ( ) , epsilon )
assertEquals ( "foo" , testClass4StringFieldAccessor . getValue ( testClass4 ) )
assertEquals ( "true" , FileUtils . readFileToString ( testSavePropertiesFile ) . trim ( ) )
assertEquals ( "replName noteId, testParagraphId, testParagraphText, " + "replName, noteId, username," + " authenticationInfo" , actual )
Assert . assertTrue ( "Adler32 mismatch between written and read" , processListener . checkAdlers ( ) )
assertEquals ( 10 , classUnderTest . getUpdateAction ( ) )
assertNotNull ( model )
assertNotNull ( lp )
assertThat ( result , equalTo ( "withIsmyField" ) )
assertEquals ( OracleMode . ECB , guess )
assertEquals ( String . format ( "%s %s" , CliExtCommandHandler . HELP_TEXT , CliExtCommandHandler . HELP_TEXT ) , cli . getOutputOutput ( ) )
assertSuggestions ( suggestions , "foo" , "foob" , "foobar" )
assertEquals ( 2 , response . getTotalResults ( ) )
assertEquals ( "noVehicle" , v . getId ( ) )
assertEquals ( "DELETE FROM [dal_client_test_1] WHERE (template = ? AND template = ?)" , test . build ( ) )
assertNotNull ( factory . create ( ) )
assertThat ( output , stringContainsInOrder ( "   <text>" , "      <div" , "         <pre>line1\\nline2\\nline3  <b>BOLD</b></pre>" ) )
assertEquals ( "342\\n" , found )
assertThat ( copy ( m ) , is ( equalTo ( m ) ) )
assertEquals ( "Number of upgrades steps" , 3 , path . size ( ) )
assertThat ( actual , is ( "localhost" ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
testRunner . assertAllFlowFilesTransferred ( PutParquet . REL_FAILURE , 1 )
assertions . doesNotContainNull ( )
assertEquals ( "99\\n" , found )
assertTrue ( Arrays . equals ( recreated , secret ) )
assertEquals ( buf . toString ( ) , "{\\"a\\":\\"aa\\"}" )
assertThat ( element . getText ( ) , is ( "still 0123456789" ) )
assertEquals ( vNum , stringsNum )
assertEquals ( BPResultType . NO_POSSIBLE , result . getResultType ( ) )
assertEquals ( 3 , algo . getSearchStrategyManager ( ) . getStrategies ( ) . size ( ) )
assertThat ( result , is ( "Slicer" ) )
assertNotNull ( query . getSingleResult ( ) . lazyPic )
assertEquals ( expected , uri . toString ( ) )
assertTrue ( properties . size ( ) >= 1 )
assertSame ( dg1 , dg2 )
assertEquals ( input . limit ( ) , input . position ( ) )
assertFalse ( found )
Assert . assertEquals ( "OK" , dMsg )
assertProcessEnded ( pi . getId ( ) )
assertFalse ( validate )
assertNotNull ( "Condition builder is not built" , builder )
assertEquals ( FeatureState . ENABLED , state )
assertValidationFailures ( deriver , config )
assertTrue ( ! failed . get ( ) )
assertErrorResponse ( response , ErrorResponse . ErrorType . INVALID_INPUT , "INVALID_ACCOUNT_ID" )
assertArrayEquals ( helloMessageSerialised , serialised )
assertEquals ( NUMADD , table . size ( ) )
assertTrue ( entity . getId ( ) > 0 ? entity . getSex ( ) : null )
assertEquals ( "xmlEntity() content-type-header=[application/x-www-form-urlencoded; charset=UTF-8] accepts-header=[*/*]" , actual )
assertArrayEquals ( expectedSorted , data )
assertNotNull ( logger )
assertThat ( defn . equals ( defn2 ) , is ( false ) )
assertTrue ( "Domain role in store should have Role.MASTER" , store . getDomainRoles ( UID1 ) . get ( 0 ) . getRole ( ) . equals ( Role . MASTER ) )
assertValid ( result )
assertNotNull ( result )
Assert . assertEquals ( expected , actual )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
assertFalse ( fs . exists ( new Path ( src ) ) )
assertTrue ( expectedDesc . containsAll ( list ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( entity ) )
assertTrue ( sut . isTokenValid ( "/rest/api/1.0/projects/TEST/repos" , "testuser" , providedToken ) )
assertEquals ( "val2" , value )
assertEquals ( "xyz" , record . toString ( ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsFile , accessObjectFactory , irodsAccount )
assertNotNull ( Media . fetcher ( "FXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( 1 , conflicts . size ( ) )
assertEquals ( "No errors should be registered" , 0 , errors . getErrorCount ( ) )
assertTrue ( pageXml . contains ( "foo bar" ) )
assertThat ( value , is ( "value1" ) )
assertEquals ( StatusCode . NAMESPACE_NOT_FOUND , response . getCode ( ) )
assertFailureLogPresent ( pi , "failingTask" )
assertEquals ( Collections . singletonList ( 4L ) , context . performQuery ( query ) )
assertEquals ( null , min )
assertTrue ( Objects . equals ( city , getDocumentDataAsCity ( docRef ) ) )
Assert . assertEquals ( "(hgvs_variant (nt_single_allele_var (nt_single_allele_multi_change_var (reference NM_000109.3 :) c. (nt_multi_change_allele [ (nt_multi_change_allele_inner
assertNull ( polygonSymbolizer . getFill ( ) )
assertThat ( getPodSpec ( jobSpec ) . getReadinessGates ( ) , nullValue ( ) )
assertThat ( result . getPayload ( ) , is ( not ( instanceOf ( ExceptionPayload . class ) ) ) )
assertEquals ( "abcdef" , c . getFunction ( "test" ) . invoke ( DefaultElParseContext . create ( ) ) )
Assert . assertEquals ( 0 , proposals . size ( ) )
assertEquals ( "Mismatched data" , expected , res )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertArrayEquals ( shapeAssertion , get . shape ( ) )
Assert . assertEquals ( - 1 , index )
assertEquals ( 1 , message . getMessageId ( ) )
assertEquals ( "T" , da . getDocType ( ) )
assertMatches ( expr . matcher ( "/a/b/c/d/e/@something" ) , "/a/b/c" , "/x/y" )
assertEquals ( r1 , r2 )
assertEquals ( ( byte ) 8 , ( byte ) result . getByteWrapperValue ( ) )
assertEquals ( result , targetPermission )
assertEquals ( 3 , allAlarms . size ( ) )
assertEquals ( 4 , xreader . findIPStart ( packet ) )
assertEquals ( reference , andPredicate . asCNF ( ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
Assert . assertEquals ( msg , result )
assertEquals ( "newauthor" , savedModel . getAuthor ( ) )
assertNotNull ( registerSingletonService )
assertSame ( hello . getIterationStrategyStack ( ) . get ( 0 ) , uriTools . resolveUri ( HELLO_URI . resolve ( "iterationstrategy/" ) , wfBundle ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( BytesHelper . BYTE_MAX_ONE , BytesHelper . pinGet ( setPin , checkPin ) )
assertEquals ( Sets . newHashSet ( "server=server1->db=jranalyst1" , "server=server1->functions" ) , backend . getPrivileges ( Sets . newHashSet ( "manager" ) , new ActiveRoleSet ( Sets . newHashSet ( "junior_an
Assert . assertTrue ( cp . size ( ) > 0 )
Assert . assertNotNull ( obj )
assertNotNull ( errMsgList )
assertThat ( editor . getValue ( ) , is ( nullValue ( ) ) )
assertThat ( result , Matchers . equalTo ( "test1=blah1&test2=blah2" ) )
assertEquals ( 3.14159 , result , 0.00001 )
assertEquals ( 5L , impl . getNanoTime ( ) . size ( ) )
assertIdentityNotExist ( securityRealm , evidence )
assertTrue ( "jar should exist" , destinationJar . exists ( ) )
assertEquals ( 5 , serviceManager . getAllServiceTypes ( ) . size ( ) )
assertThat ( rendering , is ( "4th September 2011" ) )
assertEquals ( 2 , users . size ( ) )
assertEquals ( "a < b" , out . getDrl ( ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertEquals ( "with recursive sub as ((select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.SUPERIOR_ID\\n" + "from EMPLOYEE EMPLOYEE\\n" + "where E
assertEquals ( expected , stripped )
this . context . assertIsSatisfied ( )
Assert . fail ( "API broken here" )
Assert . assertTrue ( runtimeFolder . exists ( ) )
assertThat ( date , is ( PlainDate . of ( 2014 , 21 , 1 ) ) )
Assert . assertTrue ( exception )
assertEquals ( 0 , ( int ) tree . entries ( ) . count ( ) . toBlocking ( ) . single ( ) )
assertTrue ( dsl . size ( ) == 1 )
assertEquals ( 200 , result . getStatus ( ) )
assertFalse ( strategy . shouldRetry ( request , env ) )
assertTrue ( infoValidator . validate ( info ) )
assertThat ( target . getMatch ( ) , is ( match ) )
assertThat ( "Count of customer" , res , is ( 0 ) )
assertThat ( store . containsSession ( address ) , equalTo ( false ) )
assertFalse ( capabilities . isOperationSupported ( Put ) )
assertEquals ( MAX_NUMBER_OF_SYMBOLS_IN_RESPONSE , symbols . size ( ) )
assertTrue ( "Row should be selected" , getGridElement ( ) . getRow ( 0 ) . isSelected ( ) )
assertEquals ( "-23" , sb . toString ( ) )
assertThat ( configurer . getBaselineRate ( ) , is ( 9600 ) )
assertEquals ( 0 , validationIssues . size ( ) )
assertEquals ( pb . size ( ) , 0 )
Assert . assertTrue ( errors . hasFieldErrors ( "frequency" ) )
assertTrue ( client . hasMobile ( ) )
assertPaths ( paths , "s,t,t" )
Assert . assertNotNull ( content )
assertEquals ( "not anymore" , concrete . finalMethod ( ) )
assertThat ( driver . findElement ( By . cssSelector ( ".date-and-time" ) ) . isDisplayed ( ) , is ( true ) )
assertThat ( target . matchExactly ( match ) , is ( false ) )
assertEquals ( s , s2 )
assertTrue ( result . getMessage ( ) + " should contain a reason" , result . getMessage ( ) . contains ( "reason" ) )
assertEquals ( TestEnum . A , settings . getEnumValue ( "key" ) )
assertTrue ( cut . getLinks ( ) . isEmpty ( ) )
assertEquals ( "my/branch" , result . get ( ) )
assertEquals ( 4L , analyser . getCommands ( ) . values ( ) . stream ( ) . flatMap ( c -> c . getCommands ( ) . stream ( ) ) . collect ( Collectors . toList ( ) ) . size ( ) )
assertEquals ( expected , actual )
assertNotNull ( childCert )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoImportacao ( ) . toString ( ) )
assertTrue ( operation . isCompleted ( ) )
Assert . assertEquals ( "Result is not 1" , new Integer ( 1 ) , o )
assertThat ( currentSessionManager . getMeasurementStreams ( ) . size ( ) , equalTo ( 0 ) )
Assert . assertEquals ( "bar" , resolved )
assertFalse ( lockAcquired )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertTrue ( tctf . isReady ( mock ( CyCell . class ) ) )
assertFalse ( timeLine . isValid ( contemporaryExample ) )
assertEquals ( 1 , ( int ) access . readFromExpecting ( "count" , 1 ) )
assertThat ( actual , is ( expected ) )
Assert . assertEquals ( "Hello Kermit" , result )
assertThat ( action , is ( "action" ) )
assertEquals ( "result = result.entrySet().retainAll(arr.entrySet);" , CodeModelTestsHelper . toString ( aLambda ) )
assertEquals ( Status . CREATED . getStatusCode ( ) , response . getStatus ( ) )
Assert . assertEquals ( 2 , resultWarningsCount )
assertThat ( manager . getApplicationPreferences ( ) , is ( applicationPreferences ) )
assertTrue ( accept )
assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertFlatResult ( result )
assertNotNull ( entity . getId ( ) )
utils . assertStatus ( "/stacks/" + id , HttpStatus . OK )
assertNotNull ( createdPost . getId ( ) )
runner . assertValid ( )
Assert . assertEquals ( "11mzXHR8rZTgfE35EqfGhiShiIwQfLCAziFDXVgs3EjLSPkZkCvfGNLMEf5y" , endereco . getNumero (
assertThat ( buf . toString ( ) , is ( equalTo ( "// Act\\r\\n" ) ) )
Assert . fail ( "Failed to catch unsupported comparator names" )
assertTrue ( rootNode . isAuthenticationEnabled ( ) )
assertEquals ( 3.0 , WeightedLevenshtein . distance ( "totanic 1" , "titanic 2" , e ) )
Assert . assertEquals ( "Hello " , new String ( err . toByteArray ( ) ) )
assertEquals ( "" , converter . getAsString ( facesContext , new UIPanel ( ) , null ) )
Assert . assertEquals ( expected , actual )
assertTrue ( cont1 == 10 )
assertEquals ( asList ( foo4 , foo5 ) , results )
assertEquals ( initialVersion , ref . getVersion ( ) )
assertEquals ( "PONG" , result )
assertFalse ( v . isSameTypeAs ( new String [ ] { "alpha" , "123" } ) )
assertEquals ( "[Cookie{name='foo', value='bar', path=Optional[/], domain=Optional.empty, httpOnly=false, maxAge=Optional.empty}]" , content )
assertSameEnumeration ( "BreadthFirstModel" , coreEnum , xEnum )
assertTrue ( caughtNullMutation && caughtNullEntry )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( PaginationHelper . DEFAULT_PAGE_LIMIT , limit )
assertEquals ( attributeName , wadlAttributeName . getName ( ) )
assertEquals ( row , null )
assertTrue ( gfs . getStatusProvider ( ) . isDirty ( ) )
Assert . assertEquals ( "<p><a href=\\"https://google.com\\" target=\\"_blank\\"></a></p>\\n" , text . asHtml ( linkResolver ) )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertEquals ( TERM_FACTORY . getConstantLiteral ( "15:57:02.03" , XSD . TIMESTAMP ) , translation )
assertEquals ( newLabel , withLabel . getItem ( ) . getLabel ( ) )
assertThat ( result . fullName ( ) , is ( "boolean" ) )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_BOXING ) )
Assert . assertEquals ( 200L , tuplesPerWindow )
assertThat ( throttler . throttledUntil ( new Object ( ) , request ) , equalTo ( Instant . EPOCH ) )
assertNotNull ( result )
assertions . doesNotContainFeature ( "foo" )
assertThat ( next . join ( ) , is ( VALUE ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "/abc" , servletURI )
assertEquals ( String . format ( "Create table new_table from select single column" + "%n    - A non-null column called column_one [STRING(10)]" ) , HumanReadableStatementHelper . generateAddTableStringFromSelectSingleColumn ( newTable ) )
assertResultsMatch ( select ( windowFunction ( count ( ) ) . orderBy ( field ( "partitionValue1" ) ) . or ( field ( "partitionValue2" ) ) . build ( ) . as ( "theCount" ) ) . from ( tableRef ( "WindowFunctionTable" )
assertNotNull ( svg )
assertEquals ( externalLink , delegatedExternalLink )
Assert . assertEquals ( score , smsd1 . getEnergyScore ( 0 ) )
Assert . isTrue ( 13388L == time )
assertEquals ( val . awaitAndGet ( ) , "from instance" )
assertEquals ( "the status of message replied must be 'ok'. " , "ok" , reply . body ( ) . getString ( "status" ) )
assertEquals ( 3 , inMemoryResultAccumulator . getAggregationResultCount ( ) )
assertThat ( properties , not ( containsInAnyOrder ( hasProperty ( "name" , equalTo ( "name" ) ) ) ) )
assertTrue ( baseTestFailed )
assertThat ( returnValue , equalTo ( "private" ) )
Assert . assertEquals ( 2 , providerList . size ( ) )
assertIdentical ( "/simple_elk.owl" , reasoned )
assertEquals ( new HashSet < String > ( ) , all )
assertThat ( sut . getGMPath ( ) , is ( expectedPath ) )
assertThat ( coll . withComplement ( window ) , is ( expected ) )
assertQuery ( em , 1 , query )
assertEquals ( 3 , ac . size ( ) )
assertEquals ( BigInteger . valueOf ( 0x1234 ) , ti [ 0 ] )
assertNotNull ( result )
assertEquals ( 0x10 , acia . read ( 0x0001 , true ) )
Assert . assertEquals ( 1 , timeZoneDefinition . compare ( second , null ) )
assertNotNull ( Service . reader ( ) . read ( ) )
Assert . assertTrue ( ( ( BasicDecider ) instance ) . compareWorkflowRunFiles ( metadata . getWorkflowRun ( workflowRunAcc ) . getInputFileAccessions ( ) , filesToRun ) == BasicDecider . FILE_STATUS . DISJOINT )
assertEquals ( false , mockResult . included ( "canEdit" ) )
assertEquals ( m1 , m2 )
assertTrue ( ctx1 . getScore ( ) < ctx2 . getScore ( ) )
assertEquals ( valueIn , valueOut , 0.0001 )
assertTrue ( opsService . getNameSvrAddrList ( ) . contains ( testChangeNameSvrAddr ) )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "23-Aug-2013" )
Assert . assertEquals ( "Accession is incorrect" , "1235" , studyAccession )
assertEquals ( expecting , found )
Assert . assertEquals ( "CosmicRecord [chrom=1, pos=10066, id=., ref=T, alt=[T], " + "snp=false, cnt=0]" , record . toString ( ) )
assertEquals ( expectedValue . trim ( ) , entityExecutor . getEntities ( ) . get ( 0 ) . getContent ( ) . trim ( ) )
assertEquals ( 1 , allPatients . size ( ) . intValue ( ) )
assertEquals ( 0 , count )
assertNotNull ( "interfaceInfo should not be null" , interfaceInfo )
Assert . assertEquals ( ValidationType . DATE_OF_BIRTH , ctxUser . execute ( input ) )
assertTotal ( list )
assertTrue ( verifier . verify ( signature ) )
Assert . assertTrue ( count == 0 )
assertEquals ( expResult , stringBuilder . toString ( ) )
Assert . assertFalse ( "Failed to handle bad pattern" , grok . configure ( props ) )
assertEquals ( query , result )
assertTrue ( "DateTime entity validation failed" , schema . validate ( dateString ) )
assertThat ( obtainedLock , is ( true ) )
assertNotNull ( immunosuppressionTreatment . getId ( ) )
assertEquals ( expected . toString ( ) , PercentDecoder . decodeAll ( encoded . toString ( ) ) )
assertEquals ( expected , actual )
Assert . assertFalse ( "Should not be checked" , responseExpectations . containsKey ( RESPONSE ) )
assertNotNull ( testObj . getVendorOptionInfo ( ) )
Assert . assertEquals ( "Processing of the HL7 message did not result in the new proposal being added to the model" , initialOccurrences + 1 , Context . getConceptService ( ) . getConceptProposals ( "PELVIC MASS" ) . size ( ) )
assertTrue ( stmt instanceof CreateTableNode )
assertNotNull ( val )
Assert . assertEquals ( quantidadeItemEfetivamenteExportado , exportacaoIndireta . getQuantidadeItemEfetivamenteExportado ( ) )
Assert . assertEquals ( 200 , result . getStatus ( ) )
assertArrayEquals ( "Byte arrays are not the same." , bOut . toByteArray ( ) , finalOut . toByteArray ( ) )
assertEquals ( 0 , parser . classpath ( ) . size ( ) )
assertNotNull ( itemId )
assertEquals ( 6. * 3600. + 6. * 60. + 12. * 3600. + 12. , sec , 0.01 )
Assert . assertEquals ( Long . class , clazz )
Assert . assertTrue ( "Unexpected returned set" , ret . containsAll ( referenceList ) && ret . size ( ) == referenceList . size ( ) )
assertNotNull ( session . from ( $ ( var ) ) . where ( $ ( var . getText ( ) ) . containsIgnoreCase ( "a bcd e" ) ) . uniqueResult ( $ ( var ) ) )
assertNotNull ( fixture )
assertUnsuccessfulConversion ( res )
assertFalse ( controller . isConnected ( ) )
assertEquals ( object , result )
Assert . assertEquals ( "�驻�� 3 砖注�转" , t . format ( new Date ( 0 ) ) )
assertEquals ( "{a:{a1:{a11:'v1'},a2:{a2:'v2'},b:'v3'}" , global . toString ( ) )
assertThat ( attributeReference . getValue ( ) , is ( ciString ( "ORG-TEST" ) ) )
assertThat ( output . readValuesToList ( ) , equalTo ( expectedValues ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expect , sql )
assertTrue ( kbuilder . hasErrors ( ) )
assertTrue ( "processor does not support supported parameter" , processor . supportsParameter ( supportedParameter ) )
Assert . assertEquals ( 2 , count . get ( ) )
assertEquals ( properties , injectedProperties )
assertArrayEquals ( expected , jsonified )
assertEquals ( jsonValue , result )
assertNull ( response . getRedirectedUrl ( ) )
Assert . assertNotNull ( "StaticNonvoidNoParams should have returned a value" , returned )
Assert . assertEquals ( DEFAULT_USERNAME , callIntermediateWhoAmI ( ) )
assertThat ( getDomain ( domainPresenceInfo ) , hasStatus ( "FieldValueNotFound" , "Test this failure" ) )
tester . assertRenderedPage ( UserListPage . class )
context . assertAuthzException ( statement , "CREATE DATABASE " + dbName )
assertTrue ( bnode1 . equals ( bnode2 ) )
assertEquals ( "<p>Test</p>" , cleanHtml )
assertEquals ( rc . request ( ) . host ( ) , host )
assertEquals ( HttpStatus . OK . getStatusCode ( ) , restResponse . getStatus ( ) )
assertTrue ( conditionEvaluator instanceof FlipConditionEvaluator )
assertFalse ( impl . hasElapsed ( ) )
assertSame ( TEST_ROUTE , extractedValue )
Assert . assertEquals ( testString , decodedUTF8 )
assertTrue ( messageLatch . await ( 3 , TimeUnit . SECONDS ) )
assertEquals ( JAXRSClientFactoryBean . class . getName ( ) , ctx . getName ( ) )
assertThat ( dialect . addOptimizerHints ( sql , hints ) . toString ( ) , is ( "SELECT /* SQL_ID */ /*+ INDEX (PUBLIC.TEST_1 test_ix) USE_NL */" + System . lineSeparator ( ) + " * FROM PUBLIC.TEST_1" )
assertEquals ( "[0,0]" , pt . toString ( ) )
assertArrayEquals ( array . data ( ) , compressed . data ( ) . asInt ( ) )
assertTrue ( Arrays . equals ( getPacketData ( "1234567890ABCDEF" ) , response . serialize ( ) ) )
assertThat ( generatedHtmlReports . size ( ) , is ( 3 ) )
assertTrue ( Arrays . equals ( pktSerialized , pktSerialized1 ) )
Assert . assertFalse ( ldapLogin . doAction ( req , resp ) )
assertPayloadEqual ( "<faultString xmlns='http://www.springframework.org' />" )
assertEvent ( "org/osgi/framework/ServiceEvent/REGISTERED" , FilterUtils . eq ( "service.objectClass" , "org.knowhowlab.osgi.testing.it.testbundle.service.Echo" ) , 2 , TimeUnit . SECONDS )
assertEquals ( "URI is not built correctly" , expectedUri , newUri )
assertThat ( options . getRegion ( ) , is ( region ) )
assertNotNull ( kieBase )
Assert . assertEquals ( conn . getResponseCode ( ) , HttpURLConnection . HTTP_BAD_REQUEST )
assertNull ( ids )
assertFalse ( infoValidator . validate ( info ) )
assertEquals ( "Congratulations, you've just advanced a Hunter level.<col=000000><br><br>Your Hunter level is now 2." , screenshotPlugin . parseLevelUpWidget ( DIALOG_SPRITE_TEXT ) )
assertEquals ( - 1 , this . read ( input ) )
assertUrl ( url , scheme , host , port , path )
assertSame ( array , buffer . array ( ) )
assertEquals ( expired . getRemoteStatus ( ) . getSyncStatus ( ) , syncService . getLastSyncStatus ( ) )
assertTrue ( result )
assertEquals ( "4f00630063007500700061006e006300200002" , button . getStatusProperty ( "sensor_value" ) . get ( ) . getValue ( ) )
assertTrue ( matcher . matches ( mockElement ) )
assertOut ( "/**\\n * @export\\n * @return {number}\\n */\\nfoo.bar.B.prototype.b = function() {\\n  var /** @type {string} */ s = null;\\n  return s.length;\\n}"
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( configurator . getIntProperty ( propertyName ) , expectedValue )
assertEquals ( "user1,user2" , result )
assertEquals ( 1 , performImportScript ( csv , false ) )
assertEquals ( "com.querydsl.codegen.QPoint.query" , factory . create ( type ) . getFullName ( ) )
assertEquals ( "Some String" , leftTrimmedString )
Assert . assertFalse ( result )
assertEquals ( USER_PRINCIPAL , op . getUserPrincipal ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( exp instanceof ASTCurrentTime )
assertThat ( info . isTeiidSupport ( ) , is ( Boolean . FALSE . booleanValue ( ) ) )
assertEquals ( expected , actual )
assertMedianIs ( 3D )
Assert . assertTrue ( DeDupExample . Collector . isDone ( ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter a=\\"b\\" foo=\\"bar\\"/>" , elem . toXml ( ) )
assertFalse ( gc . moveToTrash ( path ) )
Assert . assertNull ( "No se ha borrado el documento" , getServicioDocumentos ( ) . getInfoDocumento ( ID_EXISTENTE ) )
Assert . assertTrue ( recoveryDir . isAbsolute ( ) )
assertEquals ( DummyDrawHandler . drawTextToString ( "Das ist \\" dfs " , 10 , 20 , left , ColorOwn . forString ( "pink" , Transparency . FOREGROUND ) , ColorOwn . forString ( "red" , Transparency . BACKGROUND ) , Line
assertEquals ( 0 , result . size ( ) )
assertAnnotationCompletions ( "@Value(\\"${spring.prop1}\\"=<*>)" )
assertEquals ( defaultRequest . getRequestHeaders ( ) , headers )
assertEquals ( query , expected )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( expecting , found )
assertMatch ( e , s )
assertEquals ( 15 , result )
Assert . assertEquals ( "Hello Kermit" , result )
assertTrue ( true )
assertEquals ( "��匕 12 丿�丕卅�" , t . format ( new Date ( 0 ) ) )
assertEquals ( Deencapsulation . getField ( deviceRegistrationState , "errorMessage" ) , VALID_ERROR_MESSAGE )
assertEquals ( target . field , check . send ( ) )
assertSame ( t . toLocalTime ( ) , LocalTime . MIDNIGHT )
Assert . assertEquals ( "[1,123]" , str )
assertTrue ( "Expected a non-empty set of values." , expected . length != 0 )
Assert . assertTrue ( this . component . setVisibility ( this . entity1 , PUBLIC ) )
Assert . assertEquals ( new Integer ( 3 ) , person . getAttribute ( "name2" ) . getName ( ) )
Assert . assertFalse ( creditService . getMessages ( ) . isEmpty ( ) )
assertEquals ( "UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = ? " + "AND AUTHOR = ? " + "AND FILENAME = ?"
assertTrue ( algos . length > 1 )
Assert . assertEquals ( Math . sqrt ( v ) , MathUtils . sqrt ( v ) , 1e-6 )
assertEquals ( response . getStatus ( ) , HttpServletResponse . SC_NOT_FOUND )
assertEquals ( "HmacMD5 size" , 20 , result . length )
assertEquals ( EXPECTED_HEADER , EXPECTED_HEADER )
Assert . assertEquals ( 33 , vm . getStack ( ) . pop ( ) )
assertEquals ( Collections . EMPTY_SET , nullFieldProblems )
assertEquals ( bagsInPNRExample . intValue ( ) , vo . getBagVos ( ) . intValue ( ) )
runner . assertNotValid ( )
assertNotNull ( getFixture ( ) . review ( null , master , slave ) )
assertNull ( proxy . executeStatement ( "statment" ) )
assertEquals ( "OU=NiFi/Organisation,CN=testuser" , escapedClientDn )
assertEquals ( result , "not ok" )
assertNotNull ( argumentType )
assertEquals ( "info:My message with 3 parameters : 1, 2, 3" , output )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<break/>" , elem . toXml ( ) )
assertEquals ( "https://localhost:6443/api/dashboard" , host . constructDashboardLink ( ) )
Assert . assertTrue ( "Expected a positive value but it was: " + actualValue , actualValue > 0 )
assertThat ( stepListener . getCurrentTestOutcome ( ) . getTestSteps ( ) . get ( 1 ) . getScreenshotCount ( ) , is ( 1 ) )
assertTrue ( this . fourthMapRequestHandlerAdvice . executeLatch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "| script | selenium driver fixture |\\n" + "| start browser | firefox | on url | http://example.com |\\n" + "| check | is | getText | on | field | exact | Out* |\\n" + "| check | is | getText | on
assertKernel ( kernel , CIRCLE3 , e )
assertEquals ( 14 , xreader . findIPStart ( packet ) )
assertXMLEqual ( expected , actual )
assertEquals ( expResult , result )
assertEquals ( "f3dc7765a8857e0f59129f971f81e29dfee4d2b1" , actual . get ( "/content/test-page/jcr:content" ) )
assertIterationsEqual ( out2 , out1 )
assertTrue ( containsMutatedSeededMethod )
assertArrayEquals ( expectedBuffer , buffer )
assertEquals ( "1.5" , singleResult . toPlainString ( ) )
Assert . assertEquals ( "item1" , irs . getItemName ( ) )
Assert . assertEquals ( 60 , total )
assertEquals ( ( ( SoapMessage ) messageContext . getRequest ( ) ) . getEnvelope ( ) , result )
FunctionTestUtil . assertResult ( stringFunction . invoke ( contextMap ) , "{ key1 : value1, key2 : { childKey1 : childValue1 } }" )
assertNotNull ( countTime )
assertThat ( config . getProvider ( ) . getClass ( ) , Matchers . is ( Matchers . typeCompatibleWith ( SpringContainer . class ) ) )
assertNotNull ( fixture )
assertEquals ( exp , rev )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
Assert . assertNotNull ( rec )
Assert . assertTrue ( this . component . setVisibility ( this . entity1 , VISIBILITY ) )
assertNotNull ( Fax . fetcher ( "FXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( "Printing the IOR failed" , result . equals ( ior . toString ( ) ) )
assertEquals ( AuthStatus . SUCCESS , module . validateRequest ( messageInfo , client , null ) )
assertEquals ( expResult , result )
Assert . assertNotNull ( editor . getValue ( ) )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertEquals ( expectedHmacSHA256Signature , actualHmacSHA256Signature )
Assert . assertTrue ( result . success ( ) )
Assert . assertTrue ( result . length ( ) > 0 )
assertSame ( channel , new GrpcCleanupRule ( ) . register ( channel ) )
assertNotNull ( maintenance )
Assert . assertEquals ( expected , testIndex . findConc ( " [pos='adj'] [pos='nou'] " ) )
assertEquals ( nnf , comp )
assertEquals ( expResult , result )
assertEquals ( 1 , DateTools . cutDate ( gmtDate , gmtDateOneHour ) )
assertSame ( theScene , theObject . getGameScene ( ) )
assertNotNull ( paquete )
assertEquals ( "All test cases should pass" , 4 , runner . getPassed ( ) )
assertTrue ( annotator . getText ( ) . length ( ) > 0 )
assertTrue ( actual )
Assert . assertEquals ( nIterations , genericObjectPool . getDestroyedCount ( ) )
Assert . assertNotNull ( result . getQueryExplanations ( ) )
assertThat ( model2 . getMyStringText ( ) , is ( "aaa" ) )
assertSame ( d , e . getDomain ( ) )
assertEquals ( after , Elements . slice ( before , after ) )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
assertEquals ( expectedPlan , actualPlan )
assertEquals ( "username" , usernameForAuthorEmail )
Assert . assertThat ( result . get ( 0 ) . getUsername ( ) , is ( "mick" ) )
assertEquals ( expectedTypes , adminService . getTypes ( TENANT_ID ) )
Assert . assertEquals ( "SELECT " + fixedColumns + ",`foo.bar` FROM v WHERE _user_ = 'me' GROUP BY `foo.bar`" , sql )
assertThat ( movie . toUri ( ) , equalTo ( rootUri . resolve ( "/movies/4" ) ) )
assertThat ( dispatched , is ( SYNC_OR_ASYNC_PRIVATE_FLOW_MSG + "@" + ASYNC_MAIN_FLOW_THREAD_NAME ) )
assertNotNull ( result )
assertTrue ( aNumber == result )
Assert . assertEquals ( 2 , lqs . size ( ) )
assertEquals ( new Long ( 1 ) , mojoTimer . getDuration ( ) )
Assert . assertEquals ( 1 , a . getMaxNestedBlocks ( ) )
assertSizeViolations ( validator . validate ( foo ) )
Assert . assertTrue ( this . manager . connectFromAll ( Arrays . asList ( null , this . family1 , null , this . family2 , null ) , this . person1 ) )
Assert . assertEquals ( "{\\"title\\":\\"fivesmallq\\"}" , result )
assertFalse ( violated )
assertThat ( processors , nullValue ( ) )
assertThat ( def . isMultiple ( ) , is ( true ) )
assertErrorEventDefinition ( "subProcessStart" , "myErrorCode" , null )
assertEquals ( expected , product , TOL )
assertEquals ( expecteds , actuals )
assertThat ( doHandle ( request , errorResponse ) , is ( sameInstance ( errorResponse ) ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 4 , warnings . size ( ) )
assertFalse ( status == 0 )
assertTrue ( savedEntity . isValid ( ) )
Assert . assertEquals ( joinDataSourceListBo . getId ( ) , id )
assertEquals ( 1 , ( int ) externalTaskService . createExternalTaskQuery ( ) . singleResult ( ) . getPriority ( ) )
assertEquals ( TypeInfoFactory . getListTypeInfo ( TypeInfoCreator . createLong ( ) ) , orcType )
assertEquals ( 0 , _fs . getACL ( dirInode ) . size ( ) )
assertThat ( doc . getKey ( ) , is ( notNullValue ( ) ) )
assertThat ( representation . getString ( "check-number" ) , is ( nullValue ( ) ) )
assertEquals ( testPublicId , resultPublicId )
Assert . assertNotNull ( personStructure )
assertEquals ( expr , printConstraint ( expression ) )
Assert . assertEquals ( expectedXML , actualXML )
assertTrue ( "Editor must not work when it is disabled!" , isElementPresent ( TextFieldElement . class ) )
assertArrayEquals ( expected1 . toArray ( ) , actual , DELTA )
assertEquals ( expectedIsNull ( ) , result )
assertEquals ( "myconfig" , configObservable . toBlocking ( ) . single ( ) )
assertTrue ( manager . getRules ( ) . contains ( forwardBlz ) )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optDistinctToReduced ) )
Assert . assertEquals ( "get" , parsedCmd . getCommandValue ( ) )
Assert . assertEquals ( actual , expected )
assertEquals ( openIds , user . getOpenIds ( ) )
assertEquals ( "Incorrect number of statements in the Block" , 2 , stmts . size ( ) )
assertEquals ( 13 , value )
assertTrue ( "incorrect value" , aNumber . toString ( ) . equals ( result ) )
rule . assertScenarioEnded ( )
assertNull ( accessToken )
assertEquals ( "foo" , result . getName ( ) )
assertTrue ( transform instanceof LinearTransform )
assertFalse ( isDisabled )
assertThat ( expectedDate , not ( nullValue ( ) ) )
assertEquals ( "max" , actual )
Assert . assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( "checkbox value" , value , cb . getValue ( ) )
assertEquals ( Status . FAILED , result . getStatus ( ) )
assertThat ( readUserId , is ( userId ) )
assertThat ( page . getOutputText ( ) , is ( "123" ) )
assertEquals ( filterClause , " AND \\"fieldName\\" = \\"fieldValue\\"" )
Assert . assertTrue ( result )
assertThat ( "candidates should contain [name=] but not [id=]" , candidates , hasItems ( "name=" ) )
assertTrue ( action == defaultActionGroup . getAction ( ) )
assertOut ( "for (var /** @type {number} */ i = 0, /** @type {number} */ len = 10; i < len; i++)\\n  break;" )
Assert . assertNotNull ( addressResultsDto )
Assert . assertNotNull ( instance . getAllAtomMapping ( ) )
Assert . assertEquals ( "chosen overwritten-should have stayed the same" , firstLength , compareIrods . length ( ) )
assertNotNull ( classUnderTest . getStart ( ) )
assertEquals ( reader , readerResult )
softly . assertThat ( currentSessionManager . getMeasurementStreams ( ) )
assertTrue ( aa . getName ( ) , actions . contains ( aa . getCanonicalName ( ) ) )
assertEquals ( UNLOCKED_ITEM , result )
assertEquals ( label , 0.0 , diff . getRMS ( ) , TOLERANCE )
assertExec ( "Should be the same" , Numbers . class , "deserDouble__D" , f )
assertThat ( log . getLogEntries ( 1 , 5 , quorumId ) , resultsIn ( empty ( ) ) )
assertNotNull ( "Wave name was null" , waveletName )
Assert . assertEquals ( "SELECT pet.id, pet.num, pet.name, pet.age, pet.cate, pet.master_id, pet.user_id FROM t_pet pet  ORDER BY age+0" , sql )
assertEquals ( expecteds , actuals )
assertEquals ( 2 , session . from ( var ) . listDistinct ( var ) . size ( ) )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( FlowspecL3vpnRoute . class ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Wrong output: " + output , output . contains ( "John Doe" ) )
assertFalse ( server . isComplete ( ) )
assertTrue ( elapsed >= numberLongEvents * 1000 )
Assert . assertNotNull ( md5 )
assertEquals ( "exists (select 1\\n" + "from cat.kittens as cat_kittens_0\\n" + "where anyCat.name = ?" , serialize ( predicate ) )
assertThat ( commands . get ( asList ( "test" ) ) . call ( ) , is ( "result" ) )
assertNotNull ( method )
assertEquals ( "Wrong URL" , file . getAbsoluteFile ( ) , FileLocatorUtils . fileFromURL ( url ) . getAbsoluteFile ( ) )
Assert . assertNotNull ( testConnectionDetails1 )
assertEquals ( host , other )
assertTrue ( control . matches ( "/any/ICanPutAnythingInHere/what" ) )
assertEquals ( Double . parseDouble ( testBytes ) , 127.22 , 0 )
Assert . assertEquals ( "linktitle" , node . getHref ( ) )
assertEquals ( expected , victim . process ( prefix , nameRequest ( ) . originalName ( originalName ) ) )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 2E-3 )
assertThat ( "view" , view , equalTo ( "redirect:/cart" ) )
assertTrue ( "Intersection point is incorrect" , pi . equals ( piExp ) )
assertNull ( eRetrieved )
assertNull ( variableValue )
assertEquals ( messageList . size ( ) , partitionMessageQueue . getMessageList ( ) . size ( ) )
assertThat ( found , equalTo ( expected ) )
assertEquals ( exp , res )
assertTrue ( matcher . match ( msg , rule ) )
Assert . assertEquals ( _runCounts . size ( ) , 5 )
assertEquals ( 4 , breakpoint . getPoints ( ) . length )
assertThat ( any . contains ( AM_PM_OF_DAY ) , is ( true ) )
Assert . assertEquals ( 2 , tables . size ( ) )
assertSequence ( visitor . getNodes ( ) , "c" , "b" , "e" , "d" , "a" )
Assert . assertEquals ( ServerParse . INSERT , sqlType )
assertSame ( p3 , result )
assertEquals ( 1.0101 , element . getLongValue ( ) , 0.0001 )
Assert . assertEquals ( idSet . size ( ) , 16 )
assertEquals ( 4 , response . getBody ( ) . getEntities ( ) . size ( ) )
assertEquals ( 1 , fakeClock . numPendingTasks ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert . fail ( ex . getMessage ( ) )
assertEquals ( 10 , sum , 0 )
assertEquals ( "columnControl must have same label as table columnControlButton" , table . getColumnLabel ( ) , control . getLabel ( ) )
assertSkipped ( myTasks )
objects . assertIsInstanceOf ( info , actual , Person . class )
assertEquals ( "car" , type . getProfile ( ) )
assertEquals ( cache . get ( "a" ) , null )
assertEquals ( profilePage . getUsername ( ) , "test-admin" )
assertEquals ( expectedResult , result )
assertEquals ( "_id" , res . getSearchParam ( ) . get ( 1 ) . getName ( ) . getValue ( ) )
assertEquals ( 20 , wrapper . getGenre ( ) )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isWarnEnabled ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertThat ( status , is ( 200 ) )
assertEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertThat ( record . getDate ( ) , is ( "201901061500-1.9;-1.4;271;15.1;24.1;898.5" ) )
Assert . assertEquals ( createObjectNode ( "fieldName" , 3 ) , result )
assertThat ( msg , is ( "MESSAGE_TEXT" ) )
Assert . assertEquals ( 3 , thesaurus . getThesaurusId ( ) . intValue ( ) )
assertEquals ( "error" , ex . getMessage ( ) )
assertEquals ( eventConfig . getRealmNames ( ) , storeConfig . getRealmNames ( ) )
assertEquals ( 2 , cnt . get ( ) )
Assert . assertEquals ( testTemplate1 . getTemplateName ( ) , templateName )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
assertEquals ( asList ( "4:1" , "1:0" , "1:2" , "2:3" , "2:4" , "5:6" , "6:7" , "6:8" ) , messageResults )
Assert . assertEquals ( 1 , countingNotifier . getNotificationCount ( ) )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
assertSame ( ctrlA , accelerator )
assertEquals ( Math . sqrt ( 2 ) , distance . compute ( point1 , point2 ) , EPSILON )
assertThat ( ifCounterDataIndexable . matchesPojo ( this . counterData ) , is ( true ) )
assertEquals ( 1 , added )
org . junit . Assert . assertEquals ( 0 , ret )
assertEquals ( CustomsItemCollection . getData ( ) . size ( ) , 1 )
assertEquals ( HttpStatusCode . NOT_FOUND . getStatusCode ( ) , connection . getResponseCode ( ) )
assertEquals ( ( ( Long ) ksession . getQueryResults ( "TestDeclaredLengthWindow" ) . iterator ( ) . next ( ) . get ( "$eventCount" ) ) . intValue ( ) , i )
Assert . assertEquals ( "b;a" , response . getSource ( ) . get ( "_labels" ) )
assertEquals ( 0.90 + 0.74 * 1.000 , score , 0 )
assertEquals ( "a\\n" , found )
assertThat ( skipped , is ( equalTo ( 2 ) ) )
assertThat ( result , is ( expected ) )
assertViewName ( mav , "editProfile" )
assertEquals ( jt . getRawClass ( ) , Long . class )
assertFalse ( hidden )
assertEquals ( 1 , command . serialize ( ) . size ( ) )
assertEquals ( 266L , folder . getUnpackSize ( ) )
Assert . assertEquals ( String . format ( "some %s" , this . html ( bb , "red" ) ) , formatter . format ( "some [color=red]red[/color]" , defaultOptions ( ) ) )
assertResultSet ( res )
assertTrue ( "Interpolation has been cloned" , cc2 . getInterpolator ( ) instanceof Interpolator )
assertArrayEquals ( new Timestamp [ ] { new Timestamp ( "1999-05-16 00:00:00.591" ) , new Timestamp ( "1970-02-04 01:02:33.01" ) , null } , getRow ( ) . getArray ( "timeStamp
assertEquals ( avClusteringCoefficient , 1.0 )
assertEquals ( HQLTemplates . DEFAULT , JPAProvider . getTemplates ( em ) )
assertProjectOut ( compiledFileNames , testDirPath )
assertThat ( conn , is ( notNullValue ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( tz . isInvalid ( date , PlainTime . of ( 2 , 0 ) ) , is ( false ) )
assertNull ( "null is returned when locale is not available" , city . getContinent ( ) . getName ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertTrue ( bar1 . equals ( bar2 ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( popup ) instanceof WPopupRenderer )
assertEquals ( o1 , o2 )
assertThat ( result . toString ( ) , is ( "OuterBean2{name='bingoohuang', bean=InnerBean2{addr='gongjianfang'}}" ) )
assertNotNull ( plist )
assertArrayEquals ( new byte [ ] { 0x01 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0
assertNotNull ( Regulation . reader ( ) . read ( ) )
assertEquals ( "1" , ( ( NumberValue ) value1 ) . getValue ( ) )
assertEquals ( "b/c" , result . toString ( ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . COMMENT , this . doc ) )
assertEquals ( "Unexpected type is returned for property 'simpleName'" , String . class , container . getType ( "simpleName" ) )
assertThat ( underTest . decrypt ( encodedPass ) , is ( password ) )
assertEquals ( 0 , shell . run ( new String [ ] { "listbookies" , "-all" } ) )
Assert . assertEquals ( 6 , count . intValue ( ) )
assertEquals ( 3 , orgUnits . size ( ) )
Assert . assertFalse ( "result should be false" , result )
assertThat ( nodeTuple , is ( nullValue ( ) ) )
given ( ) . cookies ( cookies ) . when ( ) . get ( "/rest/api/v1/projects/costcenters" ) . then ( ) . contentType ( ContentType . JSON ) . assertThat ( )
assertContentSame ( rs , rc , columnParam1 )
assertFalse ( "There was cacheable headers" , HeaderUtils . hasCacheableHeaders ( headers ) )
assertEquals ( top , entry . getValue ( ) )
assertAllTargetsCount ( 0 )
assertEquals ( "The cat loves a dog." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertEquals ( Short . valueOf ( "123" ) , converter . getAsObject ( facesContext , new UIPanel ( ) , "123" ) )
assertTrue ( uploadSuccessful )
Assert . assertNull ( result )
assertFalse ( optionalLong . isPresent ( ) )
assertTrue ( length == 10 )
Assert . assertEquals ( correlation . computeCorrelationMatrix ( input ) , new BlockRealMatrix ( expected ) )
assertEquals ( "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12" , out )
assertArrayEquals ( CodecSupport . toBytes ( EX_25_OLD_KEY ) , recovered )
assertEquals ( new HashSet < > ( Arrays . asList ( "1" , "2" , "3" , "4" , "5" ) ) , new HashSet < > ( accounts ) )
Assert . assertNotNull ( topic )
assertSame ( t , TEST_2007_07_15_12_30_40_987654321 )
assertSame ( "Wrong in-memory representation" , NodeStructureHelper . ROOT_AUTHORS_TREE , model . getInMemoryRepresentation ( ) )
assertEquals ( "2 & 3" , expr . getParameterValue ( ) )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
assertThat ( result . fullName ( ) , is ( Long . class . getName ( ) ) )
Assert . assertEquals ( "[1, 3]" , s . toString ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , name + "_diff" ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
Assert . assertEquals ( "99999999999.9999" , cide . getQuantidadeBCCIDE ( ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "A:\\t[A, C]\\t[A, C]\\t\\n" + "C:\\t\\n" , res )
assertThat ( source . contains ( "\\r" ) , is ( true ) )
Assert . assertEquals ( "(nt_range (nt_point_location (nt_base_location - (nt_number 456))) _ (nt_point_location (nt_base_location - (nt_number 123))))" , range . toStringTree ( parser ) )
assertTrue ( "failed to decrypt ciphertext" , Arrays . equals ( message , expectedMessage ) )
TerminalParserTest . assertResult ( parser , "synchronized(foo);" , SynchronizedBlockStatement . class , "synchronized(foo);" )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REGEX , v , TERM_FACTORY . getConstantLiteral ( "A.*B" , XSD . STRING ) , TERM_FACTORY . getConstantLiteral ( "i" , XSD . STRING ) ) , translation . get (
Assert . assertEquals ( 0 , queue . size ( ) )
assertEquals ( expression , new On ( new IntegerFieldValue ( 3 ) ) . asString ( ) )
assertTrue ( System . currentTimeMillis ( ) - startTime < 500 )
Assert . assertEquals ( expResult , result )
assertEquals ( value , this . impl . getString ( key ) )
assertThat ( id , greaterThan ( 0 ) )
assertEquals ( "Repository contains incorrect number of statements" , 1 , testCon . size ( ) )
assertTrue ( str . length ( ) == buffer . length )
assertThat ( result , is ( "" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<abuse-resources service=\\"abuse-contact\\" xmlns:xlink=\\"http://www.w3.org/1999/
assertThat ( captor . getValue ( ) , is ( true ) )
assertPutFails ( association , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
Assert . assertEquals ( "in the room and a car" , this . realiser . realise ( this . inTheRoom ) . getRealisation ( ) )
assertNotNull ( Role . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNotNull ( result )
assertEquals ( "2.25" , event . getLocation ( ) . getReference ( ) . toString ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( Result . OK , instance . afterFormFinishWizard ( ) . getStatus ( ) )
Assert . assertEquals ( session . getRandomGenerator ( foo0 ) , session . getRandomGenerator ( foo1 ) )
Assert . assertEquals ( expected , value )
assertEquals ( modelFromConfig , modelFromTest )
assertThat ( element . getText ( ) , is ( "value with appended text" ) )
assertEquals ( original , other )
assertOut ( "goog.array.forEach(obj, function (i) {\\n\\tbreak;\\n})" )
assertNull ( replicationCache . getIfPresent ( "someServer" , "someProject" , "refs/changes/1/1/1" , "someSlave" ) )
assertFalse ( undefined . isReleased ( ) )
assertObjectEquals ( "{type:'array',items:{type:'string'}}" , x . getSchema ( ) )
assertFalse ( "testIsInProgressSubmissionFalse 0" , itemService . isInProgressSubmission ( context , item ) )
Assert . assertEquals ( infoReverse . getSequence ( ) , resultTranscript )
Assert . assertEquals ( 11 , patients . size ( ) )
assertEquals ( "testString" , s . get ( 1 ) . orElse ( "testString" ) )
assertEquals ( new Integer ( 1 ) , MethodFixture . getArgNum ( ) )
assertStat ( result )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'true',h:'123'}" , r )
assertEqualsIgnoreWhitespace ( expected , real )
assertFalse ( listResponse . getEnvironments ( ) . isEmpty ( ) )
assertEquals ( "x.artistName = 'bla'" , ejbql )
assertValidQuery ( query )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertArrayEquals ( Arrays . toString ( d . getResult ( ) ) , refar , d . getResult ( ) )
assertEquals ( "Failed to generate do while loop with nested expressions and no rhs" , DOWHILE_NESTED_EXPRESSIONS , s )
assertEquals ( 20 , totalBestFriendAge )
assertEquals ( "Wireless LAN" , capitals )
assertTrue ( errors . equals ( noErrors ) )
assertSame ( version , Version . valueOf ( major ) )
assertThat ( zookeeperClient , not ( nullValue ( ) ) )
assertEquals ( expected , xml )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\\n  return React.createElement('div', { 'id': 'foo' });\\n}" )
Assert . assertEquals ( "http://foo:8080/bar?a=A&b=B" , filter . getRequestURL ( request ) )
assertThat ( writer . get ( ) , is ( - 100 ) )
assertThat ( target . getMergeFeature ( feature1 . getId ( ) ) . getStatuses ( ) . get ( 0 ) , is ( Statuses . UNKNOWN . getTextName ( ) ) )
assertEquals ( 12 , barCount )
assertEquals ( expected , recovered )
assertEquals ( expecteds , actuals )
Assert . assertEquals ( lb . getStatus ( ) , LoadBalancerStatus . ERROR )
assertNotNull ( "Specialty is null" , entity )
assertNotEquals ( 0 , tokenLists . size ( ) )
assertEquals ( expectedId , dao . findByName ( expectedId ) . getId ( ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
Assert . assertEquals ( Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertNotNull ( result )
Assert . assertEquals ( "213.200.193.129:36747" , StringUtils . getHexString ( c ) )
assertThat ( errors , hasFieldErrors ( "givenName" ) )
assertTrue ( "BinaryEncoder test-" + i , b )
assertEquals ( 3 , tool . heapCaculation ( ) )
assertResponse ( response , 400 , "{\\"errors\\":[\\"name is required." )
assertFalse ( validator . validate ( EntityNames . STAFF , staffId ) . equals ( staffId ) )
assertEquals ( "test" , cache . getProgram ( ) )
assertEquals ( f . getQuery ( ) , q )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
assertEquals ( metadata , repository . getModuleMetadata ( "TEST-REPLICA" ) )
assertNotNull ( writer )
assertEquals ( "" , result )
assertEquals ( 0 , app . executeApplication ( args ) )
assertNotNull ( transport . getAttributes ( ) )
Assert . assertEquals ( CATEGORY_A , category . getName ( ) )
Assert . assertNull ( result )
context . assertIsSatisfied ( )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
Assert . assertEquals ( 0 , osUtils . getCpuCount ( ) )
assertEquals ( drlExpected , drlActual )
assertEquals ( "" , v . toString ( ) )
assertEquals ( true , multiServer . indexPicture ( FileUtils . readPicture ( LOCALPICTURE2 ) , 3l , null ) )
assertEquals ( expResult , result )
Assert . fail ( e . getMessage ( ) )
assertTrue ( throwables [ 0 ] instanceof NullPointerException )
assertEquals ( ABSTRACT , ch . getLocalAddress ( ) . toString ( ) )
assertFalse ( pgql . parse ( query ) . isQueryValid ( ) )
assertEquals ( "Wrong value" , ( short ) 0xdead0000 , u . s16 . get ( ) )
Assert . assertFalse ( isPortInCircuit )
assertEquals ( professionalUser , checkProfessionalUser )
assertThat ( this . passwordService . passwordsMatch ( username , password ) , is ( true ) )
assertThat ( resolver . resolve ( CamelCase . class ) , equalTo ( "org/jbehave/core/io/camel_case.story" ) )
assertPermanentCount ( playerA , "Cabal Therapist" , 0 )
assertEquals ( expected , actual )
assertEquals ( 1 , linear . getRow ( 0 ) . sumNumber ( ) . doubleValue ( ) , 1e-1 )
assertOut ( "goog.provide('foo.bar.baz.A');\\n\\n/**\\n * @constructor\\n */\\nfoo.bar.baz.A = function() {\\n};" )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertSame ( t . toLocalTime ( ) , LocalTime . MIDNIGHT )
assertEquals ( TestUtil . SOCKS_TEST_PROXY , result . get ( 0 ) )
assertThat ( arbitraryObject , should ( matcher ) . before ( waiter ) )
assertNotNull ( con . createStatement ( ) )
Assert . assertEquals ( 1 , events . size ( ) )
assertThat ( result , is ( false ) )
Helpers . assertJson ( json , expectedJson )
assertEquals ( "Input value json should match output value json" , inputJson , outputJson )
assertNotNull ( cache )
assertNotNullOrEmpty ( "Tags should never be null." , tags )
assertSame ( t , TEST_2007_07_15_12_30_40_987654321 )
Assert . assertEquals ( true , localesInOrder . contains ( Locale . ENGLISH ) )
assertEquals ( 1 , ruleset . getRules ( ) . size ( ) )
assertEquals ( 1 , foundComments . size ( ) )
assertOut ( "a++" )
Assert . assertEquals ( diffusioncoefficient , result [ 0 ] , 0.1 )
assertTrue ( details . hasAborted ( ) )
assertEquals ( response . getStatusCode ( ) , 200 )
Assert . assertEquals ( "fred      " , delegate . retrieveStatsResponse ( Mockito . anyString ( ) ) )
Assert . assertEquals ( expected , queryFromBuilder )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( "1 OBE ;\\n" + "1 BLOB ;\\n" + "1 OBJ ;\\n" + "1 OBJ ;\\n" + "1 OBJ ;\\n" + "1 OBJ ;\\n" + "1 OBJ ;
MockEndpoint . assertIsSatisfied ( mockEndpoints )
Assert . areEqual ( true , countA == 20 && countB == 0 , "检查记录条数,countA=" + countA )
assertEquals ( "|1 |2 |3|\\n" + "|true|\\n" + "|false|\\n" + "|true|\\n" , tabulator . tableOf ( data ) )
assertEquals ( 1 , executeTestMethod ( test , Integer . class , null , 0 ) . intValue ( ) )
assertTrue ( content . contains ( ".metadata" ) )
assertThat ( result , is ( "value" ) )
assertEquals ( 2 , list . size ( ) )
Assert . assertEquals ( degree_EXPECTED , degree_ACTUAL )
assertEquals ( "Testing setLocation" , 77 , mr . getLocation ( ) )
assertEquals ( expected , actual )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertTrue ( "testCanEditBooleanAuth 0" , collectionService . canEditBoolean ( context , collection ) )
JsonTestUtils . assertHasIdFormat ( response , JsonTestUtils . getIdFormat ( response ) )
Assert . assertTrue ( new JSONObject ( PEDIGREE_3_MIGRATED_DATA ) . similar ( new JSONObject ( captured ) ) )
assertEquals ( r , circle . mbb ( ) )
Assert . assertEquals ( "caught" , o )
assertEquals ( String . valueOf ( ReturnCode . NO_SPEECH . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "rc" ) )
assertEquals ( null , io . getDocumentById ( id1 , false ) )
assertSame ( t1 , t2 )
assertEquals ( 1 , x . size ( ) )
assertEquals ( "GPGLL" , s )
Assert . assertEquals ( simpleJson , objectMapper . writeValueAsString ( auctionSummaryWithDeals ) )
assertOrecValue ( orec , orecValue )
assertFalse ( orFn . accept ( 1 ) )
assertTrue ( Bytes . equals ( key1Bytes , key1ExpectedBytes ) )
assertEquals ( 100 , vrp . getJobs ( ) . values ( ) . size ( ) )
assertFalse ( vo . getPhoneNumbers ( ) . isEmpty ( ) )
assertEquals ( port , result )
assertOut ( "var /** @type {CustomVector} */ a = new CustomVector([], 'String')" )
assertError ( ( ) -> target . getDomains ( ) , ConnectionException . class , expectedMessages . getConnectionError ( ) )
assertEquals ( expResult , result )
assertEquals ( 1 , repositoryService . createProcessDefinitionQuery ( ) . count ( ) )
assertEquals ( "<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body (
Assert . assertFalse ( setA . equals ( setB ) )
Assert . assertEquals ( 0.0059 , test . bootstrap ( x , y , 10000 , false , rng ) , 1E-3 )
assertEquals ( VALID_DATE . toString ( ) , Deencapsulation . getField ( enrollmentGroup , "lastUpdatedDateTimeUtcDate" ) . toString ( ) )
Assert . assertTrue ( persistence . insert ( contacts ) )
assertEquals ( "Failed to filter query string" , expectedResult , normalizedUrl )
assertEquals ( value , property . getOriginalValue ( ) )
assertOutput ( freemarker . benchmark ( ) )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
assertEquals ( FOO_VALUE , client . getAttribute ( DOMAIN_NAME , OBJECT_NAME , "foo" ) )
assertTrue ( exception . getMessage ( ) . contains ( "The annotation 'collectionWithNegativeNumberOfMocks' is missing." ) )
assertThat ( value , is ( equalTo ( 1024L ) ) )
assertEquals ( "Required profiles" , "runner" , new FelixPlatformBuilderF160 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertTrue ( "size must be 2, but it is - " + queryModel . size ( ) , queryModel . size ( ) == 2 )
assertTrue ( validRange + " must be valid" , accepts )
assertEquals ( expResult , result )
assertEquals ( constraintViolations . size ( ) , 0 )
Assert . assertEquals ( "result2" , result . get ( "outputVariable1" ) )
assertAntFilter ( filters , "{\\"address\\":{\\"streetName\\":\\"At my place\\",\\"streetNumber\\":\\"1\\"},\\"email\\":\\"somewhere@no.where\\",\\"firstName\\":\\"Martin\\",\\"lastName\\
assertNoConsumerError ( exception . get ( ) )
Assert . assertEquals ( 3.0 , f . someValues ( ) , 1e-5 )
testRunner . assertAllFlowFilesTransferred ( PutKudu . REL_SUCCESS , 1 )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( s , is ( ansi ( ) . a ( 'a' ) . a ( 'b' ) . a ( 'a' ) . a ( 'b' ) . a ( 'a' ) . a ( 'status' ) . toString ( ) ) )
Assert . assertEquals ( "mygoodlittlebadson" , StringUtils . join ( output . toByteArray ( ) , " " ) )
Assert . assertEquals ( "number emitted tuples" , 1 , swinSink . collectedTuples . size ( ) )
assertThat ( findFeature ( features , "UpdateFirmware" ) , is ( instanceOf ( UpdateFirmwareFeature . class ) ) )
assertEquals ( ha . eq ( hb ) , true )
assertEquals ( augmentationNode , entry . getValue ( ) )
assertEquals ( RequestOptions . WAIT_FOR_RESPONSES_UNTIL_TIMEOUT , requestOptions . getWaitForResponses ( ) )
assertEquals ( "ReasonToTerminate" , pod1 . getStatus ( ) )
Assert . fail ( "An exception should have been thrown." )
Assert . assertEquals ( "Tabby" , names . makeString ( ) )
Assert . assertTrue ( result . isValid ( ) )
assertEquals ( arr , resultArr )
assertThat ( entities . isEmpty ( ) , is ( true ) )
assertTrue ( address1 . equals ( address2 ) )
Assert . assertEquals ( dto1 , loaded1 )
assertThat ( result . toSet ( ) . size ( ) , is ( 1 ) )
assertEquals ( 25 , counter . getCountIterations ( ) )
Assert . assertEquals ( "rows in db" , NUM_TUPLES , outputOperator . getNumOfEventsInStore ( ) )
assertEquals ( "http://example.com?url=https://example.com" , got . toString ( ) )
assertThat ( entity , is ( sameInstance ( second ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
Assert . assertEquals ( file . length ( ) , text . length ( ) )
assertEquals ( HttpStatus . SC_NOT_FOUND , response . getStatus ( ) )
assertThat ( c , is ( 2 ) )
assertEquals ( 3 , cars . size ( ) )
assertNotNull ( AppContext . current ( ) . getServletContext ( ) )
assertThat ( encoded , stringContainsInOrder ( "<Patient xmlns=\\"http://hl7.org/fhir\\">" , "<contained>" , "<Condition xmlns=\\"http://hl7.org/fhir\\">" , "<id value=\\"1\\"/>" , "</Condition>"
assertArrayEquals ( value , opaque . getOpaque ( ) )
assertTrue ( result . length ( ) > 0 )
assertEquals ( ci . apply ( Money . of ( 1 , "CHF" ) ) , Money . of ( 2 , "CHF" ) )
assertFocusModificationSanity ( context )
assertEquals ( image . trim ( ) , "target/toGoogleImage.png" )
assertTrue ( "Should get response" , response != null && response . length ( ) > 0 )
assertOverflow ( new BigDecimal ( x ) . add ( new BigDecimal ( y ) ) , result , x + y )
assertTrue ( execContext . getDeliveryConfig ( ) instanceof DOMContentDeliveryConfig )
assertEquals ( model , actual )
assertEquals ( score , 0.0 , 0.00001 )
assertTrue ( activityManager . isSplashScreensEmpty ( ) )
assertNotNull ( getCoprocessor ( log ) )
assertTrue ( server . getAverageLatency ( ) >= last )
assertEquals ( "Expected 5 results!" , 5 , count )
assertTrue ( config . isClientProfile ( ) )
Assert . assertEquals ( "node path" , getPostData ( "uniqueness" ) )
JSONAssert . assertEquals ( expected , response . getBody ( ) , false )
assertEquals ( "urn:test:prem" , documentIRI . toString ( ) )
assertEquals ( dataSet . getRowCount ( ) , 50 )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optOrderByDistinctApplication ) )
assertEquals ( 0 , obj . getObservations ( ) . size ( ) )
assertEquals ( "!valid" , expr . getParameterValue ( ) )
Assert . assertEquals ( "Hello World!" , pm . sayHello ( ) )
assertEquals ( root . getNodeState ( ) , NodeState . FULL )
Assert . assertTrue ( isValid )
assertTrue ( objUnderTest . removeServiceProvider ( existingIssuer ) )
Assert . assertTrue ( dumpToFile . exists ( ) )
assertTrue ( flag )
assertNull ( msg . getStringValue ( key ) )
assertEquals ( "Container returned too many items when the range was >> container size" , 1 , ic . getItemIds ( 0 , 10 ) . size ( ) )
Assert . assertEquals ( 0 , queue . size ( ) )
Assert . assertEquals ( 0 , out . size ( ) )
assertThat ( elasticsearchTemplate . indexExists ( "test-index" ) , is ( true ) )
assertNull ( request . getEcommerceTax ( ) )
assertThat ( actual , is ( expected ) )
assertEquals ( expected , actual )
Assert . assertTrue ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , this . access , this . document ) )
Assert . assertEquals ( Arrays . < Object > asList ( 1 , 2 , 3 ) , list )
assertEquals ( logs . get ( i ) , message )
assertEquals ( expected , this . output . toString ( ) )
assertTrue ( ( Boolean ) result )
assertTrue ( between . appliesToProperty ( "foo" ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 5 , files . length )
assertNotNull ( result )
assertEquals ( "<a><b><xxx newElementAttribute=\\"1234\\"></xxx></b></a>" , result . getResult ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "17-Jun-2013" )
MatcherAssert . assertThat ( meaning . meaning ( ) , CoreMatchers . equalTo ( ImmutableMap . of ( one , two , three ) ) )
TestUtils . assertEquals ( anexo , anexoModificado )
assertEquals ( results [ p ] , density , 0.0 )
assertVisitorSatisfied ( )
assertEqualsIgnoreWhitespace ( expected , real )
assertNull ( singletonServiceGroup . unregisterService ( firstReg ) )
assertEquals ( "192.168.1.120" , spec . decodeString ( "192.168.1.120" ) )
assertNotNull ( SyncEntry . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ETXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 1 , ( ( ClusterMetricGetters ) statsCollector ) . getMessageFailedCount ( ) )
Assert . assertTrue ( Arrays . equals ( n3w , newBytes ) )
assertEquals ( 1 , pub . length )
assertEquals ( crisisDTO . getCollectionName ( ) , result . get ( 0 ) . getCollectionName ( ) )
assertArrayEquals ( TEST_DATA , attrs . getBytes ( 0x7FE00010 ) )
assertEquals ( 1 , actions . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertEquals ( Boolean . TRUE , f . evaluate ( ) )
assertEqualsJson ( expected , actual )
assertArrayEquals ( new byte [ ] { 6 , 5 , 4 , 3 , 2 , 1 } , bytes )
assertEquals ( 1 , ( int ) entries . count ( ) . toBlocking ( ) . single ( ) )
assertOut ( "org.apache.royale.utils.Language.sort(a, 16)" )
assertEquals ( description , activity . getProperty ( PROPERTY_ACTIVITY_DESCRIPTION ) )
assertThat ( windows . withGaps ( ) . isEmpty ( ) , is ( true ) )
assertCollectionSerialization ( expectedJSON , collection )
assertFalse ( PharmaModulo11Validator . isValid ( pzn ) )
assertEquals ( "Parameters are equal" , "Parameters are equal" , getParameterRepositoryService ( ) . getParameterValueAsString ( key ) )
Assert . assertNull ( new CompareTool ( ) . compareVisually ( dest , sourceFolder + "cmp_signed" + file , destinationFolder , "diff_" , getTestMap ( new Rectangle ( 30 , 245 , 200 , 12 ) ) ) )
assertThat ( status , is ( ApplicationLauncher . LAUNCH_ERROR ) )
Assert . assertEquals ( Collections . < Term > emptyList ( ) , terms )
assertEquals ( v2 . getKey ( 1 ) , v1 . getKey ( 1 ) )
assertEquals ( 3 , uris . size ( ) )
Assert . assertEquals ( "a" , rootEl . getNodeName ( ) )
Assert . assertEquals ( "somethings" , unit )
assertFalse ( currentData . isPresent ( ) )
assertMatches ( expr . matcher ( "/a/b/c/d/f/@something" ) , "/a/b/c" , "/\\\\$2u/b/c/y/z/d/f" )
assertThat ( "Count of customer" , res , is ( 0 ) )
assertEquals ( 0 , methods . size ( ) )
assertFalse ( val . getBoolean ( "a" ) )
Assert . assertEquals ( originalPaths , harPaths )
assertTrue ( producer . windowing instanceof Time )
assertSame ( root , transform ( root ) )
assertionHelper . assertIrodsFileOrCollectionDoesNotExist ( targetIrodsCollection , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
assertEquals ( "abc" , FuturesExtra . asyncTransform3 ( futureA , futureB , futureC , ( a , b , c ) -> Futures . immediateFuture ( a + b + c ) , MoreExecutors . directExecutor ( ) ) . get ( ) )
Assert . assertEquals ( "2" , res . toString ( ) )
assertEquals ( "UUUU-04-01" , result . getParameters ( ) . get ( "date" ) . getAsString ( ) )
Assert . assertEquals ( "%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CResponse%2F%3E" , elem . toUrl ( ) )
assertEquals ( null , receiveMsg )
assertEquals ( "from SURVEY s\\n" + "inner join a SURVEY s2\\n" + "on s.ID = s2.ID" , query . toString ( ) )
assertTrue ( "Bundle file '" + _bundle + "' for bundle'" + bundle + "' does not exist." , _bundle . exists ( ) )
assertEquals ( 5 , cashFlow . getSize ( ) )
assertTrue ( "Should equals" , toJsonNode ( res ) . equals ( toJsonNode ( TestUtils . readStringFromClasspathFile ( "/asserts/prepareCommentIndexedDocument_ORG-1501_1.json" ) ) ) )
assertNull ( entryRelationship )
Assert . assertTrue ( charset . equals ( CharsetUtil . getCharset ( charsetIndex ) ) )
assertNotNull ( form )
assertThat ( credentials , is ( notNullValue ( ) ) )
assertEquals ( 2 , actualExpectedWorkerLinkCount )
Assert . assertTrue ( response . contains ( "Call reached IMPL as schemaValidation went thru fine.siteid - 0clientid - abclang - 1" ) )
Assert . assertNotEquals ( resp . getStatus ( ) , HttpServletResponse . SC_UNSUPPORTED_MEDIA_TYPE )
given ( ) . param ( "expireaftertwoseconds" , 1 ) . when ( ) . put ( "resources/test" ) . then ( ) . assertThat ( )
assertTrue ( sc1 . equals ( sc2 ) )
assertThat ( stream . count ( ) , equalTo ( 1L ) )
assertEquals ( "lucene condition serialization is wrong" , expected , actual )
assertTrue ( outStr . contains ( NamenodeFsck . HEALTHY_STATUS ) )
Assert . assertFalse ( molecule1 . equals ( molecule2 ) )
assertThat ( domain . isLogHomeEnabled ( ) , is ( true ) )
assertTrue ( ( Boolean ) result )
Assert . assertTrue ( ( ms / 1000 ) < 1 )
Assert . assertTrue ( f . load ( je ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertEquals ( "Part1/Part2trunk/Part2branch/Part3" , sw . toString ( ) )
assertThat ( separators , is ( ";\\r\\n;" ) )
assertEquals ( recordTable , LilyHBaseSchema . getRecordTable ( recordTable . getTableDescriptor ( ) ) )
assertEquals ( 0 , report . getEventCount ( ) )
Assert . assertFalse ( t1 == t2 )
assertThat ( session . isOpen ( ) , is ( true ) )
assertThat ( new ShortTypeValidator ( "hoge" ) . validate ( parameters , "aaa" ) , is ( "hoge" ) )
Assert . assertEquals ( 4 , join1 . getSubPlans ( ) . size ( ) )
assertThat ( a . overlaps ( b ) , is ( true ) )
this . assertVerification ( )
assertEquals ( buf . toString ( ) , expected )
assertEqualsStoreParams ( params , params2 )
assertTrue ( bucket . tryManuallyRefill ( 2 ) )
assertEquals ( Expression . LESS_THAN , exp . getType ( ) )
assertTrue ( MatrixUtils . equals ( original , inverse , 0.00001 ) )
assertEquals ( RestrictedHealthStatus . WARN , response . getHealthy ( ) )
assertTrue ( predicate . isHighlighted ( null , adapter ) )
assertNull ( array )
assertEquals ( expectedSqlForMathOperations8 ( ) , result )
Assert . assertEquals ( "(aa_change_ssr (aa_point_location (aa_char Cys) 123) _ (aa_char Arg) 124) ( 3 _ 4 ))" , aa_change_ssr . toStringTree ( parser ) )
assertTrue ( pct . isOverrideSystemSettings ( ) )
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001_0001 {int m0;};\\n" + "    struct f_0001_0000 {int m0;};\\n" + "    struct f_
assertEquals ( err . getClass ( ) , ParseException . class )
assertUserByFullName ( users , "User 5" )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertNotNull ( kbase )
BatchMainMock . assertLog ( "main(" + "-initiator, myUser, " + "-type, broadcast, " + "-argument, " + new File ( broadcastOuputDir , "myFileToExport" ) . getPath ( ) + ", " + "-configuration, myBatchConfiguration
assertTrue ( filter instanceof MockFilter )
Assert . assertEquals ( items , matchingResults . size ( ) )
Assert . assertEquals ( "did not get expected length back" , expectedLen , actualRead )
assertEquals ( "Jimmie Barninger" , object . getString ( "firstname" ) )
Assert . assertTrue ( writer . isStopped ( ) )
assertEquals ( user , mockResult . included ( "user" ) )
assertEquals ( myFile , entry . getFile ( ) )
assertEquals ( 0 , violations . size ( ) )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertTrue ( Properties . class . isAssignableFrom ( p . getPropertyType ( ) ) )
assertArrayEquals ( expected , params . getTripleIndexes ( ) )
Assert . assertTrue ( p . g ( 2 ) < 7 )
assertEquals ( 0 , result . size ( ) )
assertEquals ( expected , actual )
assertEquals ( 70 , loadOntology . getAxiomCount ( ) )
assertSame ( "same info" , info , info ( "m" , "m desc" ) )
maven . forProject ( basedir ) . withCliOption ( "-Dprotobuf.version=241" ) . execute ( "verify" ) . assertErrorFreeLog ( )
Assert . assertEquals ( expectedResult , result )
assertEquals ( "failed to generate class with method calling method on this" , CLASS_WITH_METHOD_CALLING_METHOD_ON_THIS , cls )
assertEquals ( "Request should be allowed" , Response . Status . OK , val . getStatusInfo ( ) )
assertEquals ( "http://localhost:80/mywebapp/servlet/MyServlet/" , tested . getBaseUrl ( ) )
Assert . assertEquals ( map . transformers ( ) , expected )
assertEquals ( "http://foo/Patient?_include=A1&_include=A2" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertTrue ( cohortService . getCohortMembershipByUuid ( RestTestConstants2_1 . COHORT_MEMBERSHIP_UUID ) . getVoided ( ) )
assertTrue ( reduce . getWindowing ( ) instanceof Time )
assertTrue ( resultFound )
assertFalse ( validator . getValidationResult ( ) . hasFailures ( ) )
Assert . assertTrue ( checkFlowNodeInstanceState ( NodeInstaceStates . PASSED_STATE , process , defaultInstanceId ) )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertFalse ( "Expected DateTimeSchema string validation failure did not succeed" , schema . validate ( stringEntity ) )
assertTrue ( permissionEvaluator . hasPagePermission ( authentication , "project" , "branch" , DocumentrConstants . HOME_PAGE_NAME + "/foo" , Permission . VIEW ) )
assertNotNull ( statsd )
assertTrue ( result . isFailure ( ) )
Assert . assertEquals ( 2 , users . size ( ) )
assertNull ( "Property not removed" , node . getProperty ( ) )
assertThat ( readBytes ( testee ) , is ( "Hello|" ) )
Assert . assertEquals ( "[1, 2, 3]" , formatted )
assertEquals ( "Expected 400 but got " + response . getStatus ( ) , 400 , response . getStatus ( ) )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertThat ( result . getType ( ) , is ( "OFPOutPacket" ) )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
runner . assertNotValid ( service )
assertTrue ( Arrays . equals ( expectedResult , encoded . array ( ) ) )
Assert . assertEquals ( expected , returnValue )
assertEquals ( expected , actual )
assertEquals ( columnInfo1 , decodedColumnInfo . get ( 0 ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( sortedValues , values )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( expResult , result )
assertChangesDispatched ( listener )
Assert . assertEquals ( "did not correctly compute path" , expected , path )
assertThat ( url , is ( "/abc/Anything/def/123/ghi/123.45" ) )
assertIsRemovedToInvisible ( columnModel , 0 , false )
assertEquals ( 3 , longStream . getAsLong ( ) , 0 )
assertEquals ( expectedDate , actualDate )
assertEquals ( assertion , rowMean )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertEquals ( "Persist operator should be added to dag after stream.persist" , "Stream1_persister" , persistOperatorMeta )
assertEquals ( 123 , label . get ( ) . intValue ( ) )
assertResultSet ( res )
assertEquals ( testData , toMap ( scanner ) )
assertEquals ( 2 , findIndexObject . size ( ) )
assertNotNull ( proveedorFacturas . getId ( ) )
assertEquals ( "True has to be returned in this case" , preferredBlockSize , inf . getPreferredBlockSize ( ) )
Assert . assertEquals ( ImmutableSet . of ( "keyToInclude" , "anotherKeyToInclude" ) , filteredPhotonRequest . keys ( ) )
assertEquals ( 6 , actualExpectedWorkerLinkCount )
Truth . assertThat ( HttpJsonCallContext . createDefault ( ) . withTimeout ( Duration . ofSeconds ( - 1L ) ) . getTimeout ( ) )
Assert . assertEquals ( 1 , a . rank ( ) )
assertEquals ( 3 , list . size ( ) )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "No such service demo" , result )
assertTrue ( ! outputEntity . hasKey ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertNotNull ( job . toString ( ) )
assertEquals ( "&lt;b&gt;芦test禄&lt;&#x2F;b&gt;" , multiLineText . toDisplay ( ) )
Assert . assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( url . getFile ( ) , endsWith ( "stepdefs.json" ) )
assertTrue ( result . size ( ) == 1 )
assertTrue ( response . getEntry ( ) . size ( ) > 0 )
Assert . assertTrue ( result . equals ( "10 minutes" ) )
assertSseResponse ( sseResponse , "event:eventName" , "data:payload1" , "event:eventName" , "data:payload2" )
assertTrue ( this . validator . validate ( c ) . isEmpty ( ) )
mojos . assertBuildOutputs ( new File ( basedir , "target/classes" ) , "apache-plugin-annotations.jar" , "maven-plugin-api.jar" )
Assert . assertEquals ( "The house where I played poker has been abandoned since 1986." , realised . getRealisation ( ) )
assertFalse ( authorizer . isAuthorized ( MockWebContext . create ( ) . setProfileType ( FakeProfile1 . class . getName ( ) ) , profiles ) )
assertThat ( map . price ( ) , is ( ( Map < String , Integer > ) ImmutableMap . of ( "red" , 17 ) ) )
assertTrue ( close . await ( 10 , SECONDS ) )
Assert . assertEquals ( orderMap . get ( id ) , i )
assertThat ( "Kein Ergebnis geliefert" , target , notNullValue ( ) )
assertEquals ( NS , testSubject . getShortForm ( ) )
Assert . assertEquals ( "anta怒 40 minutoj" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
Assert . fail ( type [ j ] + ", " + b + ", " + a )
Assert . assertEquals ( 3.5d , StatUtils . getMean ( numbers ) , TOL )
Assert . assertEquals ( "88132-020" , retornoConsultaCadastroEndereco . getCep ( ) )
assertTrue ( serviceSet . isEmpty ( ) )
assertThat ( IDN . toUnicode ( result . toString ( ) ) , equalTo ( robots ) )
assertNull ( query . offset ( 10 ) . fetchOne ( ) )
Assert . assertFalse ( ZipCompletionScanner . isCompleteZip ( file ) )
assertEquals ( asList ( new LogoutRequest ( ) ) , serverEvents . collect ( ) )
Assert . assertThat ( values , Matchers . contains ( "value 0.5;p=v  ;  q =0.5  ,  value 1.0 " ) )
assertEquals ( newModified , Files . getLastModifiedTime ( path ) . toMillis ( ) )
assertPolygons ( expected , polys )
assertNotNull ( accessToken )
assertLocation ( "Rome" , "Italy" )
Assert . assertEquals ( "Sheet1!$B$2:$D$6" , "#N/A" , value , 0d )
ModelTestBase . assertIsoModels ( expected , m )
assertThat ( violations . size ( ) , is ( 0 ) )
assertTrue ( "expected oval but got " + count , count == ERROR_LIMIT )
assertEquals ( Float . class , handler . apply ( rs , 1 ) . getClass ( ) )
assertCleanedUpState ( 1 )
assertNotNull ( edm )
assertThat ( timePeriod . with ( Duration . STD_CLOCK_PERIOD ) , is ( Duration . ofClockUnits ( 2 , 61 , 120 ) ) )
assertTrue ( true )
assertEquals ( IOTester . VALUE_IN_PAYLOAD , buf . getPayload ( ) )
Assert . assertEquals ( 3 , table . getRowCount ( ) )
assertEquals ( value , v . getProperty ( id , "v" ) )
assertEquals ( 0 , result . size ( ) )
assertValidSelector ( result )
assertThat ( result , is ( sameInstance ( primaryKeysResponse ) ) )
Assert . assertNotNull ( result )
Assert . assertTrue ( getException )
assertEquals ( expected , dotFileFormat . format ( node . clone ( ) ) )
assertThat ( state . getRowIndex ( ) , is ( 10 ) )
assertThat ( underTest . createToken ( FORMAT , principalCollection ) , is ( equalTo ( TOKEN ) ) )
assertEquals ( 10 , instance . getFrequency ( ) )
given ( ) . get ( "zips/notfound.zip/test/path/resource/gateleen.png" ) . then ( ) . assertThat ( )
assertThat ( renewer . getCurrentlyHeldLeases ( ) . size ( ) , equalTo ( 0 ) )
Assert . assertEquals ( "The rule does not match the built one" , testRule , builtRule )
assertEquals ( "arguments should match" , defaultBuilder . compress ( eOutputCompressionMode . name ) . build ( ) , controller . getFromUI ( false ) )
assertEquals ( "dubbo://127.0.0.1:20887" , result )
Assert . assertTrue ( "wrong topic was not removed" , topic . getTopicMap ( ) == null )
assertEquals ( PropUtil . getIntSessionProperty ( sess , "test" , 1 ) , 2 )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertFalse ( "check different component" , _update . hasUpdate ( NEW_STRING_PATH , newComponent2 ) )
assertEquals ( FOUR_LINES_REMOVED_SCORE , playerScores . getScore ( ) )
assertEquals ( "array type" , 1 , parsed . params . get ( 0 ) . first . arrayDepth )
Assert . assertTrue ( check . equals ( o ) )
assertTrue ( usl instanceof UniqueSymbolArea )
assertTrue ( 5.0f == d . asFloat4 ( ) )
Assert . assertTrue ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertTrue ( easyCTO . getClass ( ) . isAssignableFrom ( Manufacturer . class ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
Assert . assertEquals ( 404 , response . getStatus ( ) )
assertTrue ( NativeCodeLoader . isNativeCodeLoaded ( ) )
assertEquals ( value , out . getSizeT ( ) )
assertThat ( wrapperFilename , is ( expected ) )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertEquals ( 0 , version . getMajor ( ) )
assertThatSliderValueIs ( maximumOf ( slider ) )
assertThat ( resourceIds , equalTo ( expectedResourceIds ) )
Assert . assertEquals ( EMPTY , result )
assertEquals ( o1 , o2 )
assertEquals ( "foo" , store . getRemoteConnector ( REMOTE_CONNECTOR_ADDRESS ) . getName ( ) )
assertNotNull ( logServiceState )
assertEquals ( response . getStatusCode ( ) , 201 )
assertEquals ( expected , actual )
assertThat ( parameter , is ( "bar" ) )
Assert . assertEquals ( 6 , buf . remaining ( ) )
assertEquals ( "dois sextilh玫es de inteiros" , actual )
assertEquals ( 1 , detections . length )
Assert . assertEquals ( "Failure - expected validatorList size to be 2" , 2 , str . size ( ) )
assertEquals ( anchor , workbenchMenuStandardNavBarView . getMenuItemContextWidgetMap ( ) . get ( menuId ) )
assertTrue ( zoomUI . canZoomOut ( ) )
assertOut ( "function foo(bar:*):int {\\n\\treturn -1;\\n}" )
assertTrue ( vrpBuilder . getLocationMap ( ) . containsKey ( "end" ) )
assertEquals ( contentExpected , contentReturned )
Assert . assertTrue ( rep . containsKey ( "name" ) )
Assert . assertEquals ( 300 , li . getValue ( 50 ) , 1e-5 )
Assert . assertEquals ( 1 , newestVersion . getIndex ( ) )
Assert . assertEquals ( 0 , services . size ( ) )
assertThat ( TestI18n . testMessage . text ( ) , is ( "Test Message" ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( result , expecting )
assertEquals ( "5:::{\\"name\\":\\"edwald\\",\\"args\\":[{\\"a\\":\\"b\\"},2,\\"3\\"]}" , result )
assertThrown ( val , promise )
assertPaths ( asList ( "com" , "sonatype" , "example" , "metadata.xml" ) , paths )
Assert . assertEquals ( Integer . valueOf ( 3 ) , object )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
assertEquals ( "a b\\n" , found )
assertEquals ( cal . getTime ( ) , w . getEnd ( ) )
Assert . assertTrue ( entities . size ( ) > 0 )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "jranalyst" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertRecord ( record )
assertEquals ( "field.toLowerCase()" , p . toString ( ) )
AssertAnnotations . assertCoreference ( ref , select ( jcas , CoreferenceChain . class ) )
assertTrue ( hasLock )
assertThat ( hello . helloTestNG ( ) , is ( "Hello TestNG!" ) )
Assert . assertFalse ( this . entityAccess . isOwner ( ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "2.1" , PomIdsHelper . getJobVersion ( property ) )
assertTrue ( outContent . toString ( ) . equals ( "Job1 is in progress.\\n" ) )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( ) )
Assert . assertEquals ( 1 , mapping . size ( ) )
assertThat ( comments , hasSize ( 2 ) )
assertSame ( row , serde . capturedRow )
this . assertResponse ( faultResponse , this . defaultMessage , this . exceptionClass . getName ( ) , message , this . parameters )
Assert . assertEquals ( result . getResultSize ( ) , 8 )
assertTrue ( nicHandle . equals ( nicHandle ) )
assertEquals ( true , victim . getConfiguration ( ) . isDebug ( ) )
assertFalse ( b )
Assert . assertEquals ( 1 , timer . getCount ( ) )
assertEquals ( "Failed to convert empty String to BigInteger" , null , model . getAmountInt ( ) )
Assert . assertNotNull ( "File value is missing" , atFields . get ( "file" ) )
assertSame ( solution , selection . execute ( population ) )
assertEquals ( newValue , presenter . getValue ( ) )
Assert . assertNull ( resource )
assertEquals ( 2 , rules . size ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error test error" ) . getValue ( ) )
assertTrue ( rootMapper . mySynchronizer . getSelectedItems ( ) . isEmpty ( ) )
assertConstruct ( tq , ttl )
Assert . assertEquals ( "{\\"status\\":200,\\"data\\":[{\\"name\\":\\"testType\\",\\"values\\":[{\\"name\\":\\"testValue\\"}]},{\\"status\\":\\"OK\\"}]}" , writer . toString ( ) )
assertEquals ( 1 , ret_val )
assertEquals ( "Attemped updating a TabGroup after adding a Tab to his first " + "TabGroup, then clearing the EntityManager.  Expected to see the new tab after re-loading the TabGroup." , "Foo" , tabGroup . getTabs ( ) . get ( 0 )
assertEquals ( "2 << 3" , expr . getParameterValue ( ) )
assertEquals ( "<foo:bar id=\\"1\\" /><abc:def id=\\"2\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>" , TextUtil . stripNewlines ( doc . body ( ) . html (
assertFalse ( like1 . equals ( like2 ) )
assertEquals ( Util . list ( "" ) , attribsSet . iterator ( ) . next ( ) . getAttributes ( ) . get ( "email" ) )
assertEquals ( "Reference value not set" , MAGIC , ref . getValue ( ) )
assertArrayEquals ( expected , result . toArray ( ) , 0.01 )
assertEquals ( "Answer returning " + value , r . toString ( ) )
Assert . assertEquals ( expectedSignature , signature )
assertEquals ( "Hello World!" , config . helloWorld ( ) )
Assert . assertEquals ( "Should return exactly one variable" , 1 , response . jsonPath ( ) . getMap ( "" ) . size ( ) )
assertions . doesNotContain ( 'd' , index )
assertThat ( validatedConfig . getSlaveName ( ) , is ( "xx-aa" ) )
assertEquals ( a . getDstContextAlias ( ) , "dst" )
RouteUtils . assertSatisfied ( result )
assertThat ( query . count ( ) , is ( 0L ) )
assertTrue ( executor instanceof FatGammaTxnExecutor )
assertThat ( log . getEvents ( ) . size ( ) , equalTo ( 4 ) )
Assert . assertEquals ( "The received ID in non force delete case is different than expected VALID_ID_FOR_DELETION." , VALID_ID_FOR_DELETION , da . getId ( ) )
assertTrue ( Deencapsulation . getField ( jobResult , "jobTag" ) != null )
Assert . assertEquals ( getResultMatrix ( ) , resultMatrix )
assertTrue ( systemRule . getLog ( ) . contains ( "Working directory" ) )
assertEquals ( "sample-1.txt" , parseEvtx . getFileName ( "sample-1.txt" ) )
Assert . assertNotEquals ( Board . Cell . CELLS [ 7 ] [ 0 ] , move . start )
assertEquals ( LINK_TEXT , convertedEvent . getText ( ) )
assertEquals ( expectedMethods , calledMethods )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LENGTH(nodes.property) < 'literal'" ) )
Assert . assertTrue ( getLog ( ) , Pattern . compile ( "\\\\[([0-9]{3})\\\\.([0-9]{3})\\\\]" ) . matcher ( getLog ( ) ) . find ( ) )
assertEquals ( ORDER_XML , orderXML )
assertNotNull ( instruction )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertTrue ( ind . contains ( v ) == false )
Assert . assertArrayEquals ( message , expecteds , actuals )
assertTrue ( htmlToDisplay . contains ( "<span id=\\"obs-id\\">" ) )
Assert . assertNull ( MVEL . eval ( "parent.?lastName.length()" , person ) )
assertEquals ( "http://java.example.com:8080/foo/bar/buz/qux" , got . toString ( ) )
assertEquals ( expectedAddMonths ( ) , result )
assertThat ( delegate . getRight ( ) , equalTo ( multiplier ) )
assertEquals ( lineString , dump ( ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "wkt" ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
context . assertSentrySemanticException ( statement , "drop database " + DB1 , semanticException )
assertTrue ( getNoErrorMsg ( ) , result )
assertCustomerWithLinksSample ( )
assertFalse ( result )
assertEquals ( - 1 , adapter . getColumnIndex ( id ) )
assertTrue ( true )
assertSame ( "Cloned instance" , EmptyState . INSTANCE , cloned )
assertEquals ( DataTypeManager . DefaultDataClasses . STRING , f . getType ( ) )
assertEquals ( "jdbc/DS" , propertyLoader . getUniqueName ( ) )
Assert . assertEquals ( getProperty ( "sample.updateProfileJobTitle" ) , json . getString ( "updateProfileJobTitle" ) )
assertEquals ( "\\t" , mojo . getSchemas ( ) . get ( 0 ) . getLineSeparator ( ) )
assertEquals ( 1 , routingTable . getRoutingList ( ) . length )
assertEquals ( "Wrong number of child builders" , 3 , childBuilders . size ( ) )
assertEquals ( "2008/DT Sichuan/JJ earthquake/NN From/IN Wikipedia/NN ,/, the/DT free/NN encyclopedia/NN" , firstLine )
assertEquals ( 2 , query ( ) . from ( account ) . where ( account . firstname . eq ( "a" ) ) . fetchCount ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) != $literal" ) )
assertThat ( one , is ( equalTo ( "1" ) ) )
Assert . assertEquals ( pool . getConfig ( ) . getWeight ( ) , source . getConfig ( ) . getWeight ( ) )
assertEquals ( Status . STOPPED , obj . getStatus ( ) )
context . assertEquals ( SUCCESS , replyBody . getString ( STATUS ) )
Assert . assertTrue ( versionMatchFilter . check ( makeAssociationDescriptor ( null ) , makeServiceItem ( ) ) )
Assert . assertNull ( value )
assertInvocations ( client . getBusinessActivityInvocations ( ) )
Assert . assertEquals ( "x=" + x , sig . value ( x ) , sigL . value ( x ) , EPS )
Truth . assertThat ( stream )
assertResultSet ( res )
Assert . assertSame ( e , this . mocker . getComponentUnderTest ( ) . process ( e ) )
BeanAssert . assertBeanEquals ( bean , parsed )
assertThat ( actual , is ( sameInstance ( this . facesContext ) ) )
assertEquals ( allFiles , MultipartFileUtil . getSingleFiles ( allFiles ) )
assertThat ( graph . run ( executorService ) . get ( ) , equalTo ( 0 ) )
assertNotNull ( reporter )
Assert . assertFalse ( orPredicate . test ( null ) )
assertThat ( taxFactorForPerson , equalTo ( TAX_FACTOR ) )
assertTrue ( CorbaLoc . parseKey ( pior . get_object_key ( ) ) . indexOf ( orbProps . getProperty ( "jacorb.implname" ) ) != - 1 )
assertQuery ( testId , result , tdr . getTestData ( testId ) )
assertEquals ( "OK" , r )
MatcherAssert . assertThat ( new BasicVocabulary ( ImmutableMap . of ( lexeme , lexeme ) ) . pickLexeme ( Mockito . mock ( ActualArguments . class ) ) , CoreMatchers . is ( lexeme ) )
assertEntityHasValue ( mappedKey , value )
assertConfig ( cfg , "permessage-compress" , expectedParams )
assertEquals ( 1 , value . getPartition ( ) )
assertEquals ( InternetServiceLifecycleMeta . States . InService . class . getSimpleName ( ) , service . getState ( ) )
assertEquals ( days , testResult )
assertEquals ( "filename.middle.jpg" , filename )
TestUtils . assertEquals ( interesadoDTO , interesadoVO )
assertEquals ( "fresh" , html )
assertEquals ( 12345678910L , tiffLong . getValue ( ) )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertResponse ( response , 200 , "{\\"errors\\":[\\"query.bogus is not a valid date, must be one of MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS,WEEKS,MONTHS,YEARS\\"]}" )
assertEquals ( actual . size ( ) , all . size ( ) )
assertEquals ( "appName1" , config . getAppName ( ) )
assertNotNull ( Sim . reader ( ) . read ( ) )
assertThat ( xoManager , notNullValue ( ) )
assertThat ( ont . containsAxiom ( otherAnnoAssertion ) , is ( false ) )
assertTrue ( cell . getTerrain ( ) instanceof Sand )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertTrue ( null == obj )
Assert . assertEquals ( StatusCodes . OK , result . getStatusLine ( ) . getStatusCode ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ORCID_BIO_UPDATE , ScopePathType . ORCID_BIO_EXTERNAL_IDENTIFIERS_CREATE )
Assert . assertTrue ( sum . longValue ( ) == 255 )
assertEquals ( 0.86 , ss . getPValue ( ) , 0.01 )
assertEquals ( prefix_and_search_result , result )
Assert . assertEquals ( 2 , terms . size ( ) )
Assert . assertEquals ( 0 , count )
assertThat ( connectionsAfterReporting , is ( greaterThanOrEqualTo ( connectionsBeforeReporting ) ) )
assertThat ( anyTS . getMinimum ( MINUTE_OF_DAY ) , is ( 0 ) )
assertNotEquals ( with , without )
assertTrue ( injectionTargetInformation . verify ( ) )
assertTrue ( table . isSelectable ( ) )
arrays . assertDoesNotContain ( description , actual , value , index )
assertEquals ( connection , recoveredConnection )
Assert . assertEquals ( "mysql => { '/toto-3306' => { port => '172.16.20.12' }, ip => '172.16.20.12' }, something => { '/oops' => { port => 'oops' , ip => '
assertThat ( Duration . in ( units ) . between ( t1 , t2 ) , is ( Duration . ofPositive ( ) . months ( 0 ) . days ( 1 ) . hours ( 9 ) . minutes ( 15 ) . build ( ) ) )
assertEquals ( "a.c at" , found )
assertTrue ( ! result )
assertEquals ( "<table> <colgroup> <col> <colgroup><col> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </
Assert . assertEquals ( 3 , ops . size ( ) )
assertArrayEquals ( new String [ ] { "abc" , "123" } , a )
Assert . assertTrue ( rose . containsRemote ( endp ) )
assertTrue ( glass . isEmpty ( ) )
assertEquals ( OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "http://localhost:8080/download/file/{path:.+}" , result )
assertThat ( expected , equalTo ( actual ) )
mockAggregated . assertIsSatisfied ( )
Assert . assertEquals ( 5 , micc . getData ( ) . size ( ) )
assertEquals ( 0 , connection . executeQuery ( "select count(*) from " + GEONAMES2 ) . size ( ) )
assertEquals ( 123L , deserialize . readLong ( ) )
assertEquals ( 10 , all . size ( ) )
assertEquals ( "- 34, channel=0\\n" , found )
assertEquals ( cause , sut . getCause ( ) )
Assert . assertNotNull ( "null free tag service" , freeTaggingService )
assertEquals ( sandboxName , System . getProperty ( PROPERTY_NAME_SANDBOX_NAME ) )
assertEquals ( expectedScript , observedScript )
Assert . assertEquals ( Integer . class , clazz )
assertEquals ( "<p>### title</p>\\n" , normalize ( html ) )
assertFalse ( ex . isPrime ( - 231 ) )
Assert . assertEquals ( "Test" , out )
assertEquals ( "The list from the detailed history, was not the same as returned from checkout" , list , actualList )
Assert . assertFalse ( this . component . equals ( new DefaultMatchCountImpl ( this . feature2 , HP01_GENES ) ) )
Assert . assertEquals ( "did not get expected data length" , 100 , result . length ( ) )
assertEquals ( Base64 . getEncoder ( ) . encodeToString ( baos . toByteArray ( ) ) , iterators )
assertTrue ( r1 . contains ( d ) )
assertTrue ( result )
Assert . assertEquals ( 1 , p )
assertEquals ( "Should return HTTP 201 (Created)" , HttpStatus . CREATED , adapterResponse . getResponseStatus ( ) )
assertEquals ( "{f:1}" , o )
assertNotNull ( result )
assertEquals ( "Abies|v眉lg氓r卯s|忙bi茅帽t酶|忙bi茅帽t酶" , pn . canonicalName ( ) )
assertEquals ( "<" , writer . toString ( ) )
assertThat ( target . matchExactly ( action ) , is ( false ) )
assertEquals ( TextUtil . readUTF8 ( path ) , generator . getResult ( ) )
Assert . assertNotEquals ( "Test that getLocationY returned an int value" , - 1 , val )
Assert . assertEquals ( ECHO_STRING , outMessage )
Assert . assertEquals ( "2013/09/03" , result . getText ( ) )
assertEquals ( "Incorrect Short Reason" , "Platform Down leela.local CustomProperty" , alertManager . getShortReason ( testPlatformAlert ) )
assertEquals ( qf1 , qf2 )
assertTrue ( ret . size ( ) == 0 )
Assert . assertNotNull ( raised )
assertEquals ( this . dataservice , thatDataservice )
assertThat ( selectedCell , is ( "B2" ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "EADH" )
assertThat ( range . normalize ( 10.0 ) , equalTo ( 0.5 ) )
Assert . assertEquals ( A_PASCAL_22 , outMatrix )
assertEquals ( "Number of topics" , 2 , topics . size ( ) )
assertEquals ( typeId1 , typeId2 )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertEquals ( "SELECT 1 XOR 1 XOR 1;" , text )
assertEquals ( Sets . newHashSet ( ) , g . getStart ( ) . getFirst ( ) )
assertEquals ( "<foo:bar id=\\"1\\" /><abc:def id=\\"2\\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>" , TextUtil . stripNewlines ( doc . body ( ) . html (
assertNotFired ( watch )
assertEquals ( 2 , wlsClusterConfig . getClusterSize ( ) )
assertThat ( latch . await ( 1 , TimeUnit . SECONDS ) , is ( true ) )
assertTrue ( correct . get ( namedEntity . getLabel ( ) ) . equals ( disambiguatedURL ) )
assertNoOrders ( )
Assert . assertEquals ( now , value )
assertEquals ( 5 , annotationProxy . differentImplementationCount ( ) )
assertFalse ( "Property still found" , conf . containsKey ( key ) )
assertEquals ( 1 , x . size ( ) )
assertEquals ( "success" , value . asIs ( ) )
assertThat ( harry . getFriends ( ) , hasItems ( sally , steve ) )
assertEquals ( "Failed to generate foreach loop using an array" , FOREACH_STRING_IN_ARRAY , foreachWithStringArray )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertThat ( converter . toJavaObject ( javaList ) , is ( ( Object ) writableList ) )
Assert . assertTrue ( mqttV5Receiver . validateReceipt ( topic , messagePayload . getBytes ( ) ) )
assertTrue ( actual )
assertEquals ( "" , caller . getResponseBody ( ) )
assertThat ( result , is ( Arrays . asList ( a , b , c ) ) )
assertThat ( Text . toString ( text ) , is ( text ) )
assertArrayEquals ( new String [ ] { "A" , "B" , "C" } , r . readAtomStringList ( ) )
Assert . assertEquals ( "Value is incorrect" , map ( DATE_TIME_2_STRING , "test" ) , value )
Assert . assertEquals ( IrodsRuleInvocationTypeEnum . PYTHON , actual )
assertSame ( argument , service . call ( context , args ) )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertNotNull ( "Could not find workflow " + WF_APICONSUMER , wfResource )
Assert . assertEquals ( 1 , result . doubleValue ( ) , 0 )
assertTrue ( value instanceof NullWritable )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_maxheight_03_" ) )
assertThat ( writer . get ( ) , is ( nullValue ( ) ) )
assertThat ( event , is ( nullValue ( ) ) )
assertEquals ( Integer . valueOf ( 0x42 ) , event . getMessageId ( ) )
assertTrue ( 5.0f == d . asFloat4 ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( flag , result )
assertEquals ( 0 , rep . getNonZeroSize ( ) )
assertArrayEquals ( "Reconstruction failed" , reconstructed . list ( ) . toArray ( new File [ 0 ] ) , fTempDir . list ( ) . toArray ( new File [ fTempDir . size ( ) ] ) )
assertEquals ( "12" , ids )
Assert . assertTrue ( result )
assertFalse ( filter . shouldDeliverNotification ( eventContext ) )
assertSingleNotificationType ( EventType . FAILED_AUTHENTICATION )
assertEquals ( "oobauthority" , oobChannel . getInstrumentedName ( ) )
Assert . assertNotNull ( smartsheet )
Assert . assertEquals ( 2 , result . getHistoryEvents ( ) . size ( ) )
assertTrue ( "This roles should have the privilege" , role . hasPrivilege ( "priv1" ) )
assertTrue ( plugin . getPlayerBanStorage ( ) . getBan ( player . getUUID ( ) ) . isSilent ( ) )
Truth . assertThat ( name . toString ( ) )
assertEquals ( 2 , numberOfOccurences )
assertEquals ( "TestValue" , context . lookup ( "test" ) )
assertEquals ( "<p>Hello</p>" , doc . getElementsByTag ( "div" ) . get ( 0 ) . html ( ) )
assertServletHasHandlerForRequest ( )
assertEquals ( tag , Tagger . getMetadataTag ( o ) )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertTrue ( requestParameter . isFloat ( ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertThat ( conf , containsString ( "<interaction><code value=\\"" + SystemRestfulInteraction . HISTORYSYSTEM . toCode ( ) + "\\"/></interaction>" ) )
assertEquals ( "Old Jon" , firstName )
assertEquals ( "ix" , suffix )
assertThat ( entry , is ( instanceOf ( CreateVertexLogEntry . class ) ) )
Assert . assertTrue ( iSun != iMine )
assertEquals ( src . get ( ) , dest . get ( ) )
assertEquals ( 0 , result )
assertions . isNotEmpty ( )
assertThat ( actual , containsString ( "failing-host:host" ) )
Assert . assertEquals ( 0 , irodsTaggingService . getTagsOnCollection ( targetIrodsCollection ) . size ( ) )
assertEquals ( expected , x )
Assert . assertEquals ( HttpStatus . SC_OK , result . getCode ( ) )
assertEquals ( "S\\\\(S\\\\)\\n" + "    (NP-SBJ\\\\)\\n" + "      (NP (NNP Robert) (NNP Stovall)\\n" + "      (DT a) (JJ veteran)
assertFeatureValues ( a , "document" , "document" , new DocSizeFeatureExtractor ( ) )
assertIsConnectedAs ( "test1" )
assertThat ( dog . names . length , is ( equalTo ( 2 ) ) )
assertTrue ( serialized instanceof Serializable )
assertTrue ( out . equals ( "M6 T2" ) )
assertEquals ( SampleLocations . UNKNOWN , cargo . getDelivery ( ) . getLastKnownLocation ( ) )
assertThat ( nsp . getZeroDigit ( new Locale ( "fa" ) ) , is ( '0' ) )
Assert . assertEquals ( 10 , analyser . getLoadDelivered ( route ) . get ( 0 ) , 0.01 )
assertThat ( other , DateMatchers . sameSecond ( date ) )
assertMockEndpointsSatisfied ( )
assertEquals ( TimeValue . ofSeconds ( 20 ) , impl . getCorrectedReceivedAge ( entry ) )
Assert . assertEquals ( 1 , size )
assertEquals ( "Certificate can be parsed" , ValidationMessage . getMessage ( validationCheck , Locale . FRENCH ) )
assertEquals ( streamName , sn . getName ( ) )
assertThat ( parameters , equalTo ( Arrays . asList ( ( Object ) "foo" ) ) )
assertSeen ( results , s1 )
assertEquals ( expected , cassandraRowMapper . map ( resultSet ) . next ( ) )
assertEquals ( query , result )
assertTrue ( response . getStatusCode ( ) == 422 )
assertEquals ( null , queryResult . getResult ( ) . get ( 0 ) . getGenomeSequenceFeature ( ) . getChromosome ( ) )
checker . assertEquals ( "[" + s + "][" + r + "][" + c + "]" , exp , act )
Assert . assertEquals ( ( Integer ) 11 , res )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<rebel-remote xmlns=\\"http://www.zeroturnaround.com/rebel/remote\\">\\n" + "    <id>org.zer
assertTrue ( ( "" + kieModuleMetaData . getPackages ( ) ) . contains ( "junit" ) )
assertEquals ( "db17" , rec . get ( "SUM" ) )
assertSame ( cmd . returnValue , cmd . await ( ) )
assertEquals ( "(a 3 4)\\n" , found )
Assert . assertEquals ( moneyStr , intStr )
Assert . assertFalse ( success )
assertNoErrorNotifications ( )
assertEquals ( extractedFile . getName ( ) , line )
Assert . assertEquals ( num , count )
Assert . assertNotNull ( factory )
assertTrue ( result . registration_ids . size ( ) == 1 )
Assert . assertFalse ( evaluator . hasPermission ( authentication , targetId , targetType , permission ) )
assertEquals ( expected , actual )
assertEquals ( 3 , springBeansConfig . getTargets ( ) . size ( ) )
assertEquals ( "TestGetValues 0" , valueList , concatenate . getValues ( context , item ) )
Assert . assertFalse ( canUse )
assertEquals ( 3 , log . getTable ( ) . getConstraints ( ) . size ( ) )
assertNotNull ( Framework )
Assert . assertEquals ( new Long ( 0 ) , RequestObjectHelper . getStartOffset ( requestObject ) )
assertThat ( snippetFor ( "I have:" ) , is ( equalTo ( expected ) ) )
assertEquals ( keyExpected , keyBuilt )
assertEquals ( "DEFAULT" , vars . get ( "architect" ) )
assertTrue ( testFailed . isEmpty ( ) )
assertEquals ( "<html><head></head><body>pre <script>inner</script> aft</body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
MutableMessageFactoryTest . assertExpiryDateEquals ( expiryDateValue , message )
Assert . assertEquals ( uuid , result )
assertNull ( c . next ( ) )
assertEquals ( SignUpResponse . Status . OK , response . getStatus ( ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertEquals ( KarmaCalculator . UPVOTED_QUESTION_OR_ANSWER , votedAtSomething . reward ( ) )
assertThat ( tags . size ( ) , is ( 2 ) )
assertEquals ( "battle" , getClass ( ) . getSimpleName ( ) , getBattleModel ( ) . getName ( ) )
assertTrue ( filter . matches ( record ) )
assertListTEquals ( listT , 24 , 42 )
assertEquals ( expectedYaml , exportedYaml )
assertEquals ( arr , resultArr )
assertArrayEquals ( e , a )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( Arrays . asList ( buffer ) , equalTo ( buffer ) )
assertions . isNotEqualTo ( "some value" )
Assert . assertTrue ( enabledSections . isEmpty ( ) )
assertEquals ( "formats diff: " + value , value , picker . getEditor ( ) . getValue ( ) )
assertEquals ( buf . toString ( ) , "[\\"a\\", \\"b\\", \\"c\\"]" )
assertThat ( TimestampInterval . parseISO ( "2012-04-01T14:15/P4DT1H45M" ) , is ( expected ) )
assertEquals ( "123456" , result )
assertEquals ( 2 , constraints . size ( ) )
assertEquals ( response . getStatus ( ) , JsonResponseStatus . FAIL )
assertEquals ( "There should be 0 errors" , 0 , chain . getChildren ( ) . size ( ) )
assertNotNull ( newTd . getToDo ( ) )
assertEquals ( JodaBeanUtils . collectionType ( test , Person . class ) , List . class )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertEquals ( "Absolute RequestURI is wrong" , "http://localhost:" + PORT + "/two/bookstore/request" , path )
assertEquals ( expectedHtml , removeTextRange ( result ) )
assertEquals ( 100_000_000 , counter . get ( ) )
Assert . assertEquals ( "OK" , nsObjStr )
assertThat ( feature . getId ( ) , is ( nullValue ( ) ) )
assertEquals ( featureService , service )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertThat ( list . size ( ) , is ( 0 ) )
assertThat ( pipeline . invoke ( true , null , upstreamCtx0 ) , equalTo ( upstreamInput1 ) )
assertEquals ( "test" , m2 . getHeader ( "Subject" , null ) )
assertSame ( System . getenv ( "java.home" ) , value . getValue ( ) )
assertTrue ( history . size ( ) >= 1536743099591 )
assertEquals ( original , restored )
assertIsAborted ( tx )
assertCharacterCut ( input , expectedOutput , 2 )
assertThat ( target . containsLink ( link . getId ( ) ) , is ( true ) )
Assert . assertEquals ( "hi!" , sampleType . element )
assertTrue ( dps . size ( ) < LIMIT )
assertOut ( "foo : goog.array.forEach(obj, function (i) {\\n\\tbreak foo;\\n})" )
assertEquals ( "Checking subseq as expected" , expectedDna , subSeq . getSequenceAsString ( ) )
assertFalse ( differentiator . isNew ( fileInputStream ) )
assertEquals ( 1 , constraints . size ( ) )
assertEquals ( "Unexpected value for toString()" , expexted , actual )
assertThat ( stripHeader ( response ) , is ( equalTo ( queryResult ) ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertEquals ( expResult , result )
assertNull ( myTestInstance . delete ( doc , Durability . ACK ) )
assertTrue ( comparator . isDifferent ( lhs , rhs ) )
assertEquals ( 3 , t . splitUnquoted ( str ) . length )
assertEquals ( toolTip , tree . getToolTipText ( ) )
assertEquals ( expResult , result )
assertEquals ( EdmSimpleTypeKind . TemporalNull , edmDateType )
assertThat ( inputSchema , equalTo ( properties . main . schema . getValue ( ) ) )
assertEquals ( 12 , results . size ( ) )
assertThat ( new SomeClass ( ) , is ( sut ) )
assertThat ( error , containsString ( "Config file " + file . getAbsolutePath ( ) + " does not exist." ) )
assertArrayEquals ( new double [ ] { 1 / 3 + 1 / 3 } , airMass , 1e-4 )
assertEquals ( ace , parsed )
assertPersonDataIntegrity ( person )
assertNull ( msg . remove ( key ) )
assertEquals ( val , app . getTest ( ) )
assertEquals ( expectedFormKey , actualFormKey )
assertEquals ( NOT_FOUND , response . getStatus ( ) )
Assert . assertEquals ( CurrentUser . getUser ( ) , "testUser" )
Assert . assertEquals ( expectedString , resultBootstrapString )
Assert . assertEquals ( "�注�� 3 ���� 15 砖注�转 38 �拽�转" ,
assertTrue ( s . contains ( "SampleTree-1" ) )
assertThat ( description . toString ( ) , is ( "is \\"x\\"" ) )
Assert . assertTrue ( patientService . isIdentifierInUseByAnotherPatient ( patientIdentifier ) )
Assert . assertArrayEquals ( SOL_22_EXPECTED , SOL_22_ACTUAL , DELTA )
Assert . assertEquals ( newCfg , ctx . getConfiguration ( ) )
assertEquals ( "Date not equal to itself ISO formatted and parsed" , d . getTime ( ) , d2 . getTime ( ) + d . getTime ( ) % 1000 )
assertEquals ( exp , TokenProvider . DEFAULT_EXPIRATION )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . fail ( "Cannot marshall a complex map" )
assertEquals ( this . expectedResult , this . actualResult )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) , 0 )
Assert . assertEquals ( before - 1 , after )
assertEquals ( expected , result )
Assert . assertEquals ( "/1;ver=2.2" , link . toString ( ) )
assertEquals ( "IP address should be set to the IP address that was specified" , IP_ADDRESS , ipAddress )
assertNotNull ( jsonAllUserJobSummary )
assertEquals ( 15 , sumXValues )
assertThat ( actual , containsString ( "<h1>Name</h1><div class=\\"nameElement\\">given <b>FAM1 </b></div><h1>Address</h1><div><span>line1 </span><br/><span>line2 </span
assertThat ( response . getStatus ( ) , is ( Response . Status . OK . getStatusCode ( ) ) )
assertEquals ( resizer , receivedResizer )
assertEquals ( "USD" , test . getCode ( ) )
assertEquals ( DummyDrawHandler . drawTextToString ( "Das ist \\" dfs " , 10 , 20 , left , ColorOwn . forString ( "red" , Transparency . FOREGROUND ) ) , ColorOwn . forString ( "red" , Transparency . BACKGROUND ) )
assertThat ( myBigDecimal , describedAs ( "0" ) )
assertEquals ( 5094000000L , y . getFirstMillisecond ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertThat ( envs . size ( ) , is ( 1 ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( "2.1e2" , FmtUtils . stringForLiteral ( nl , getContext ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( files , hasSize ( 1 ) )
assertEquals ( 1 , null1Dao . create ( nullThing ) )
assertThat ( multiSupplier . authForBuild ( ) , is ( nullValue ( ) ) )
assertThat ( string , is ( nullValue ( ) ) )
assertThat ( end . isAfter ( start ) , is ( true ) )
assertFalse ( "Did not create DatagramSocket" , socket == null || socket instanceof MulticastSocket )
assertTrue ( checker . isDetected ( ) )
assertEquals ( 2 , result . getLength ( ) )
assertTrue ( checker . isAuthorized ( context , profiles , null , "null" ) )
assertThat ( labels , equalTo ( Arrays . asList ( "2013/03/12 01:30:00" , "01:30:10" , "01:30:20" ) ) )
assertEquals ( 1 , result . size ( ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertEquals ( input , output )
assertEquals ( NUM_WRITERS * ENTRIES , countHLog ( logfile , fs , conf ) )
assertTriggered ( fieldValueAlertCondition , result )
assertResultSet ( res )
assertEquals ( "No rules are set" , 0 , ss . size ( ) )
assertEquals ( expecting , result )
Assert . assertNotNull ( dummy )
assertEquals ( 0 , maleFriends . size ( ) )
assertEquals ( "�械�械蟹 3 �邪�邪" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
assertThat ( result , is ( nullValue ( ) ) )
assertNotNull ( polygon )
assertThat ( testOutcome . getStoryClassName ( ) , is ( MyApp . MyUserStory . class . getCanonicalName ( ) ) )
assertTrue ( subUsers . stream ( ) . anyMatch ( v -> u . equals ( v ) ) )
assertThat ( ( Integer ) cache . getInternal ( "aaa" ) , is ( 1 ) )
assertEquals ( 1 , rules )
Assert . assertTrue ( count > 0 )
arrays . assertHasSize ( description , null , 8 )
assertEquals ( 1234 , executeTestMethod ( test , Integer . class , null , 1234 ) . intValue ( ) )
Assert . assertEquals ( 2 , uniqueIssueIds . size ( ) )
assertNotEquals ( optimize1 , optimize2 )
assertEquals ( 1 , sql . insertInto ( table ( "post" ) ) . columns ( field ( "id" ) , field ( "title" ) ) . values ( 1L , "High-Performance Java Persistence" ) . execute ( ) )
paths . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertions . isNull ( )
Assert . assertEquals ( 0 , buffer . length ( ) )
assertArrayEquals ( y , x )
assertTrue ( signatureValue . length > 0 )
Assert . assertEquals ( expected , dataStr . trim ( ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoISSQNTotal ( ) . toString ( ) )
Assert . assertEquals ( resultEntity , entity )
assertEquals ( result , timespi ( 1 ) * Math . PI , 0.0 )
assertThat ( jmc . convert ( makeEvent ( quotedMsg , NO_ARGS ) ) , is ( quotedMsg ) )
assertArrayEquals ( new Integer [ ] { 1 , 2 , 3 , 4 } , a )
Assert . assertEquals ( new BigDecimal ( value ) , got . getpBigDecimal ( ) )
assertEquals ( "<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>" , doc . body ( ) . html ( ) )
assertEquals ( key . getPublicKeyAsHex ( ) , recoveryECKey . getPublicKeyAsHex ( ) )
assertEquals ( null , result )
Assert . assertEquals ( "Running action \\"foo\\" in background locally: Map = " + NL + "{" + NL + "    key1 = val1 java.lang.String" + NL + "    key2 = val2 " + "java.lang.String" + NL + "}"
Assert . assertEquals ( "Incorrect PersonMergeLog retrieved" , personMergeLog , retrieved )
assertThat ( sampleTestClass . pages , is ( not ( nullValue ( ) ) ) )
assertEquals ( expectedProfile . getSid ( ) , resultantProfile . getSid ( ) )
assertThat ( route , canHandle ( GetAnnotatedController . class , "withRelativePath" ) )
assertSame ( t . toLocalTime ( ) , LocalTime . NOON )
assertAnnotations ( 1 , CallPhil . class , new TestCallPhil ( 0 , "1981 634528" , "+44" ) , new TestCallBob ( 1 , "0800-123-456" , "+44" ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><ValidityPeriod/>" , serializedData )
assertEquals ( "a,b" + recordSeparator , sw . toString ( ) )
Assert . assertTrue ( result . isValid ( ) )
assertTrue ( rec_cnt == 1 )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
assertNull ( hd . getHeaderText ( ) )
Assert . assertEquals ( 2 , cpu . getRegister ( ) , 0 )
assertThat ( peek . getPeriodicAverageLatencyInMs ( two ) , is ( ( 105d + 34d + 97d ) / 3 ) )
assertEquals ( "Select script should match expected" , expectedSelectWithUnionStatements ( ) , result )
assertEquals ( expected , roundTrip . getResults ( ) )
Assert . assertEquals ( expectedNames , names )
Assert . assertTrue ( violations . isEmpty ( ) )
assertEquals ( mapped , mapped )
Assert . assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( "{" + "\\"@context\\":\\"../$metadata#ESCollAllPrim(1)/CollPropertyDecimal\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":[\\"12\\",\\"-2
assertTrue ( SUCCESS_MSG , monitor . setAsync ( key , value ) . get ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertThat ( entity . awakeFromInsertionCount ( ) , is ( 1 ) )
assertNotNull ( m )
assertThrows ( VolumeChooserException . class , ( ) -> getTableDelegate ( ) )
assertTrue ( result . getIndexUpdates ( ) > 0 )
assertEquals ( 14 , classUnderTest . getNumRankFileSquaresAvailable ( Position . h8 ) )
assertFalse ( victim . accept ( request ) )
assertEquals ( sb . toString ( ) , qb . prepareStatementString ( ) )
assertEquals ( "calendarColumn at absolute column " + column , calendarColumn , dayGridPosition . x )
assertEquals ( Integer . valueOf ( 2 ) , parseResults . get ( FILE_PATH ) . getMeasureKeys ( ) . get ( "class" ) )
assertSame ( "Wrong conversion" , p , PropertyConverter . toPattern ( p ) )
assertTrue ( uri . endsWith ( "D.ttl" ) )
assertThatSelectedValueIs ( "a21" )
assertEquals ( new ModelNode ( ) . add ( new ModelNode ( ) ) , executeForResult ( operation ) )
assertEquals ( config . getWriteTimeoutInMillis ( ) , acceptedConfig . getWriteTimeoutInMillis ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
assertFalse ( "Expected ListSchema integer validation failure did not succeed" , schema . validate ( integerEntity ) )
assertEquals ( networkActivationFunction . getType ( ) , activationFunction . getType ( ) )
Assert . assertEquals ( 3 , activityNodes . size ( ) )
assertEquals ( t1 , t2 )
assertThat ( log , is ( Files . readAllLines ( Paths . get ( "src/test/resources/data/expected/DumpResultSqlFilter" , "testExecuteQueryFilter.txt" ) , StandardCharsets . UTF_8 ) ) )
assertEquals ( key . getDefaultValue ( ) , this . impl . getString ( key ) )
assertTrue ( logging . getLog ( ) . contains ( "RuleSet description is missing." ) )
assertTrue ( e instanceof RuntimeException )
Assert . assertNull ( job )
assertEquals ( 0.1f , mutNum . floatValue ( ) , 0.01f )
assertThat ( actual , sameInstance ( KEY_VALUE ) )
assertEquals ( 0 , graph . getCommunications ( ) . size ( ) )
assertThat ( pickupTruck , hasProperty ( "model" , equalTo ( "Dodge" ) ) )
assertEquals ( true , options . verbose ( ) )
Assert . assertEquals ( IsolationLevels . READ_COMMITTED , connection . getIsolationLevel ( ) )
assertOut ( "/**\\n * @export\\n * @const\\n * @type {number}\\n */\\nRoyaleTest_A.prototype.foo = 420" )
arrays . assertContains ( description , actual , 'a' , null )
assertEquals ( IOUtil . getLocalHost ( ) . getHostName ( ) , IOUtil . getTargetHost ( ) )
assertEquals ( new SchemaAndValue ( schema , null ) , schemaAndValue )
assertNotNull ( "Returned input stream is null" , is )
Assert . assertEquals ( "moduleA" , foundModule )
assertThat ( result , is ( not ( nullValue ( ) ) ) )
assertEquals ( TARGET + DOCNAME , docName ( ) )
assertTrue ( true )
assertThat ( unlocked . getSuperField ( ) , nullValue ( ) )
Assert . assertSame ( MissingNode . getInstance ( ) , result )
assertMethodCall ( "clinicRepo.firstName(String,String)" , "clinicRepo.lastName(String)" , firstNameParameter , lastNameParameter )
assertNotNull ( in )
assertEquals ( buf . toString ( ) , "EXISTINGZ" )
assertEquals ( d . format ( DateTimeFormatter . ofPattern ( "yyyy-MM-dd HH:mm" ) ) , f )
assertTrue ( "Expected:\\n" + new String ( expected_res ) + ". \\nGot:\\n" + transRes , StreamUtils . compareCharStreams ( new ByteArrayInputStream ( expected_res ) , new ByteArrayInputStream ( transRes . getBytes ( ) ) ) )
assertNull ( result . getContainedItemSchema ( ) )
assertEquals ( "string" , shortForm )
assertTrue ( violated )
Assert . assertArrayEquals ( constructedTag . getBytes ( ) , bytes )
assertTokens ( integer ( 1 ) , new CommentToken ( "#" , " + 2 # + 3" ) )
assertEquals ( "clone=true&clonePermissions=true" , getLastRequestQuery ( ) )
assertTrue ( mismatches . size ( ) == 0 )
context . assertTrue ( config . succeeded ( ) )
Assert . assertEquals ( expResult , result )
JSONAssert . assertNotEquals ( "Message" , "{id:1234}" , actual , LENIENT )
validator . verifyTextInLog ( "loaded class javax.xml.ws.Holder" ) . verifyTextInLog ( "loaded class javax.xml.bind.JAXBException" )
Assert . assertEquals ( "joe" , HadoOPUtil . getHadoopHttpStaticUser ( conf ) )
Assert . assertEquals ( "LEFT JOIN (FSK_ALERT AS A MAKEDEP INNER JOIN Core.FSC_PARTY_DIM AS C ON A.primary_entity_key = C.PARTY_KEY) " + "LEFT OUTER JOIN FSK_SCENAR
assertEquals ( 123L , b . getId ( ) )
assertEquals ( occs . getNames ( ) . get ( 1 ) , occs . getNames ( ) . get ( 2 ) )
assertThat ( getServerStartupInfo ( "cluster1" ) . getClusterName ( ) , equalTo ( "cluster2" ) )
assertThat ( hiveConf . get ( "waggledance-fed1" ) , is ( "fed1" ) )
assertEquals ( 0 , executions . get ( ) )
assertEquals ( END_EVENT_NUMBER , sub . getNumEvents ( ) )
assertEquals ( 2.71f , array2 . getFloat ( 0 ) , 0.01 )
assertEquals ( VisitStatus . BYPASS , getVisitStatus ( text ) )
assertThat ( replication . getEventId ( ) , is ( EVENT_ID ) )
assertEquals ( "" , OAuthUtils . attemptEncodeQueryParam ( o ) )
Assert . assertEquals ( 2 , reactorHandlerRegistry . getEntrypoints ( ) . size ( ) )
Assert . assertNotNull ( "checksum missing" , actual )
Assert . assertEquals ( "what does a wolf eat" , this . realiser . realise ( p ) . getRealisation ( ) )
assertEquals ( "34\\n" , found )
Assert . assertEquals ( expected , BitBufferHelper . toNumber ( array , i ) )
assertEquals ( prefix , Prefixes . getURI ( uri ) )
assertEquals ( "12234565hello4512689" , res )
assertEquals ( 160 , rrs . size ( ) )
assertEquals ( 64 , program . getMemSize ( ) )
assertEquals ( origin , resourceEditProperty . getOrigin ( ) )
assertEquals ( 0 , actual . size ( ) )
assertThat ( "getValue" , node . getValue ( ) , is ( - 0X80000000 ) )
assertEquals ( "http://example.org/123" , view . getHref ( ) )
Assert . assertEquals ( "Fail count record of room" , i , cr )
assertTrue ( getClient ( ) . updateItem ( update ) . isComplete ( ) )
assertThat ( target . getConvPortIdByMatches ( nwId , matches ) , is ( "port01" ) )
assertEquals ( 1 , res )
assertAllExchangesAreCompleted ( config , client . getExchangeStore ( ) , time )
assertEquals ( 1000.0 , testResult , 0.0 )
result . assertIsSatisfied ( )
assertThat ( is . hasMoreCommands ( ) , is ( false ) )
assertThat ( issue . getTitle ( ) , is ( title ) )
assertEquals ( z1 , z2 )
assertNotNull ( t )
assertTrue ( Arrays . equals ( pktSerialized , actual ) )
Assert . assertEquals ( "3.10" , retornoConsultaCadastro . getVersao ( ) )
assertEquals ( "�驻�� 3 ���转" , t . format ( new Date ( 0 ) ) )
Assert . assertTrue ( true )
assertNotNull ( tiposBecas . getId ( ) )
Assert . assertEquals ( "Top" , driver ( ) . getCurrentUrl ( ) )
Assert . assertTrue ( impl . canCachedResponseBeUsed ( host , request , entry , now ) )
Assert . assertNotNull ( inputField )
assertTrue ( c1 instanceof PublicCloneable )
AssertUtil . assertNoJAVAError ( )
assertNotNull ( service )
Helpers . assertJson ( jsonElement . toString ( ) , expectedJson )
Assert . fail ( "Exception expected." )
TestUtil . assertFuzzyContains ( "<input type=\\"text\\" id=\\"w1\\" value=\\"1\\" />" , session . getHtmlToDisplay ( ) )
assertSame ( f , b . getFactory ( ) )
assertEquals ( "update EMPLOYEE\\n" + "set ID = (select emp2.ID\\n" + "from EMPLOYEE emp2\\n" + "where emp2.ID = emp1.ID)" , sql . getSQL
assertTrue ( ex . getMessage ( ) . equals ( "Fail all retrials!" ) )
Assert . assertEquals ( "Stan" , server . getManagedBeanValue ( "#{foo.text}" ) )
assertEquals ( 1000 , executor . getMaxTotalTimeMillis ( ) )
assertThat ( ruleManager . listGlobals ( ) . get ( "bla" ) , is ( "java.util.Random" ) )
assertEquals ( "Should get a 200 response" , HttpStatus . OK , postgresFeedSource . getFeed ( getFeedRequest ) . getResponseStatus ( ) )
assertEquals ( 8 , bs . capacity ( ) )
assertEquals ( 10L , read )
assertEquals ( expectedTransportCosts + expectedActivityCosts , iCosts , 0.01 )
assertTrue ( "pool size should be DEFAULT_MAX_IDLE, despite the wrong configuration" , poolConfig . getMaxIdle ( ) == PoolConfiguration . DEFAULT_MAX_IDLE )
assertMultilinesEquals ( "Number of values:       6     5      4\\n" + "Minimum value:       3.00 -9.00 -12.00\\n" + "Maximum value:      22.00  7.00  2.00\\n" + "
assertEquals ( false , passedSessionWaitCall . await ( 2 , TimeUnit . SECONDS ) )
assertThat ( "Expceted principal not found" , rmap , hasItem ( new GidPrincipal ( 1001 , true ) ) )
assertEquals ( str , new String ( result . getBytes ( "GBK" ) , "UTF-8" ) )
assertTokenStreamContents ( tokenizer , stringArray ( "example.com" ) )
Assert . assertSame ( o , ts . create ( o ) )
Assert . assertNull ( executeOperation ( op , true ) )
assertEquals ( "Recycle" , policy )
Assert . assertEquals ( 3 , map . size ( ) )
Assert . assertNull ( caixa )
assertEquals ( expecting , result )
Assert . assertEquals ( "Wrong  Port No" , new PortNumber ( 0x000100 ) , deserializedMessage . getPort ( ) )
context . assertIsSatisfied ( )
assertUnderflow ( ( long ) x * ( long ) y , result )
assertTrue ( fileSizeAfter < fileSizeBefore )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertThat ( appMetadataResource . getFilename ( ) , is ( "foo-source" ) )
assertThat ( score , is ( 3900 ) )
assertEquals ( new Year ( 2000 ) , editor . getValue ( ) )
assertEquals ( "rownum < 5" , toString ( query ) )
assertEquals ( new File ( dir , "fedora/rest/foo" + ext ) , fileForURI ( uri , "/rest" , "/rest" , dir , ext ) )
Assert . assertEquals ( codigoDeBarras , produto . getCodigoDeBarras ( ) )
assertEquals ( sampledDataSourceList , dataSourceChartGroup )
assertEquals ( "http://localhost:8080/test" , builder . buildFromArray ( new String [ ] { } ) . toString ( ) )
assertEquals ( "a" , generated . getMethod ( "getState" ) . invoke ( null ) )
assertEquals ( 1 , hits . totalHits )
assertNull ( "No arg constructor" , realm . getRealmId ( ) )
assertEquals ( 0 , tasks . size ( ) )
DataMockery . assertREQMODWithGetRequestResponse ( response )
assertEquals ( "Wikibot" , output . get ( id ) )
assertEquals ( 200 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertThat ( encoded , stringContainsInOrder ( "{" , "\\"resourceType\\": \\"Patient\\"," , "\\"contained\\": [" , "{" , "\\"resourceType\\": \\"Condition\\"," , "\\"id\\": \\"1\\"" , "}" , "]," , "\\"extension
assertThat ( String . valueOf ( iter . next ( ) ) , is ( "33" ) )
assertEquals ( err , result )
assertEquals ( expectedLogMessage , actualLogMessage )
assertSame ( obj2 , resolver . resolve ( ) )
assertEquals ( 5 , count )
Assert . assertEquals ( demoService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) , helloService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) )
assertEquals ( getName ( out ) , name )
assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertThat ( or . isSatisfied ( ) , is ( false ) )
Assert . assertNull ( connectionManager . createConnectionDetails ( null ) )
assertThat ( getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Product].[All
assertEquals ( user . getUserID ( ) , serializedUser . getUserID ( ) )
assertLines ( lines )
assertThat ( disque . bgrewriteaof ( ) , containsString ( msg ) )
Assert . assertEquals ( 0 , dfsadmin . run ( args1 ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( textFileSaver )
Assert . assertEquals ( errorCode , locationValidator . validate ( location ) . getCode ( ) )
assertEquals ( 2 , countHomeStates )
assertEquals ( "token 2\\n" , found )
Assert . assertEquals ( "IN([CAT.COL];\\"value\\")" , formatted )
assertNotNull ( metadata . get ( "foo-bin" ) )
assertTrue ( e instanceof SocketTimeoutException )
assertEquals ( expected , resultVal )
assertEquals ( date , fileTime . getTime ( ) )
assertEquals ( entity , response . readEntity ( String . class ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Receive>" + "Hey no tags!" + "</Receive>" , elem . toXml ( ) )
Assert . assertEquals ( "Incorrect label returned" , lbl , item . getDecoratedLabel ( ) )
Assert . assertNotNull ( routes )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertThat ( result , is ( equalTo ( defaultPlugins ) ) )
assertThat ( record . get ( ) . getTimestamp ( ) , is ( timestamp ) )
assertEquals ( p , fromDenseRecursiveForm ( recForm , MonomialOrder . DEFAULT ) )
assertEquals ( 1 , sol . getUnassignedJobs ( ) . size ( ) )
assertEquals ( "{\\"date1\\":\\"1970-01-01T00:00:00Z\\"}" , processor . generate ( object ) )
Assert . assertEquals ( expected_1 . equals ( v ) || expected_2 . equals ( v ) , true )
assertEquals ( 10 * Constants . PB , mConfiguration . getBytes ( PropertyKey . WEB_THREADS ) )
assertEquals ( "Test" , profile . getFirstName ( ) )
assertNull ( ruleCat )
assertEquals ( expected , result )
Assert . assertEquals ( 1 , cancelledRequests . size ( ) )
assertEquals ( expected , actual )
assertEquals ( 1 , posts . size ( ) )
assertOut ( "/**\\n * @export\\n * @param {string} bar\\n * @param {number=} baz\\n * @return {number}\\n */\\nRoyaleTest_A.prototype.foo = function(bar, baz) {\\n
assertThat ( webapp . getBuildImage ( ) , is ( notNullValue ( ) ) )
assertResults ( o , results )
assertThat ( command . accept ( state ) , is ( true ) )
assertThat ( query . count ( ) , is ( 3L ) )
assertNotNull ( xml )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( SSH_BASE ) ) )
assertEquals ( "IdentifierLabel" , resource . getIdentifier ( ) . get ( 0 ) . getLabel ( ) )
assertThat ( networkId , is ( "NewNetworkID" ) )
assertTrue ( "IntegerStateValue \\"" + intVal + "\\": " + testVal . toString ( ) , testVal . toString ( ) . equals ( intVal ) )
Assert . assertTrue ( inactivityTimeAfterRefresh > inactivityTime )
Assert . assertEquals ( expected , actuals )
assertMockEndpointsSatisfied ( )
assertThat ( output . toString ( ) , is ( "my good little bad son" ) )
assertEquals ( ls1 . size ( ) , ls2 . size ( ) )
assertEquals ( 1 , testListener . count )
assertSame ( secondTry , st )
Assert . assertNull ( "School year should be null" , result )
assertions . doesNotContain ( 'a' , 'b' )
assertEquals ( 123 , this . model . getPosition ( ) )
assertEquals ( expectedQuery , actualQuery )
assertGreater ( "Grid should scroll vertically while editing in unbuffered mode" , getGridVerticalScrollPos ( ) , originalScrollPos )
assertEquals ( exp , res )
assertEquals ( SecurityGroupEntityMgr . findById ( this . em , NEW_SECURITY_GROUP_SAME_SFC_BINDED_UPDATE_ELEMENT_ID . getId ( ) ) . getId ( ) , this . securityGroup . getId ( ) )
assertEquals ( 32.8125 , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
TestUtils . assertEquals ( "m3*m4=m5" , m3 . multiply ( m4 ) , m5 , entryTolerance )
FeedChecker . assertQ ( "The XML error is not correct" , result , "//error[.='" + errorMessage + "']" )
Assert . assertEquals ( 1 , response . getTotalHits ( ) . value )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff28_" ) )
Assert . assertTrue ( out . contains ( "car 1999" ) )
assertTrue ( convertedValue instanceof Integer )
assertEquals ( " ::  took 0 ms." , result )
assertEquals ( "file://dev/null" , mods . get ( 0 ) . getFolder ( ) )
assertTrue ( timestamp . matches ( regex , SystemTime . asDate ( ) . toString ( ) ) )
Assert . assertTrue ( extraInfo . has ( "remoteUsername" ) )
Assert . assertArrayEquals ( new int [ ] { 0 } , filter . getBits ( ) . toArray ( ) )
assertTrue ( message . startsWith ( "Testing" ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertTrue ( output , output . matches ( "(?s).*> java.version \\\\d+.*" ) )
assertEquals ( true , classUnderTest . getInitSessionTimezone ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertNotNull ( "null execOut" , execOut )
assertTrue ( sql , sql . startsWith ( "SELECT #result('MAX(t0.ESTIMATED_PRICE)' 'java.math.BigDecimal' 'sc0') " + "FROM PAINTING t0" ) )
assertEquals ( "Can't come back" , ShadowToast . getTextOfLatestToast ( ) )
Assert . assertEquals ( namespace , event . getNamespaces ( ) . next ( ) )
assertThat ( CryptoUtils . encryptMD5File ( fileMd5 ) , is ( "7f138a09169b250e9dcb378140907378" ) )
assertEquals ( "A,B,C,D" , strList )
assertEquals ( unused , h . getUnused ( ) )
assertTrue ( measures . toString ( ) , measures . isEmpty ( ) )
assertTrue ( BasicModel . isMember ( relationshipManager , john , operator ) )
assertParsingIsCorrect ( nativeQuery , expectedCacheName )
Assert . assertEquals ( "Error downloading private file" , file . getTotalMediaSize ( ) . longValue ( ) , bytes )
Assert . assertEquals ( data , handler . processMessage ( null , null ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
Assert . assertEquals ( "1 files were tagged with tag1,tag2,tag3." , text )
Assert . assertEquals ( "%20" , urlEncodedValueReturned )
assertTrue ( connectLatch . await ( 5 , TimeUnit . SECONDS ) )
assertEquals ( "ResourceType" , "Patient" , resourceType . getName ( ) )
assertEquals ( expectedScript , observedScript )
assertEquals ( "Design docs should match" , designDocs . size ( ) , 3 )
assertEquals ( 50 , p . getAge ( ) )
assertThat ( results . get ( 0 ) . getTestSteps ( ) . size ( ) , is ( 3 ) )
Assert . assertEquals ( AuthenticationToken . ANONYMOUS , token )
assertEquals ( ApiStatus . SUCCESS , response . getMeta ( ) . getStatus ( ) )
paths . assertHasParentRaw ( info , actual , expectedParent )
Assert . assertEquals ( 200 , response . getStatus ( ) )
Assert . assertEquals ( INSTALL_SDK_PATH , sdk . getPath ( ) )
assertNotNull ( list )
assertFalse ( isServiceReady )
assertGenres ( results )
Assert . assertEquals ( 0 , bucket . count ( ) . intValue ( ) )
assertMandatoryElements ( targetProduct , true )
assertTrue ( "Reader Should Be Ready After Setting ByteBuffer" , _utf8ByteBufferReader . ready ( ) )
assertTrue ( orderKey . prefixOf ( key ) )
assertEquals ( "repro20030207 test" , diffsToString ( Diff . diffText ( a , b , false , false , false ) ) , "F*" )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertThat ( cancellationListener . isCancelled ( ) , is ( false ) )
Assert . assertTrue ( "file should still exist" , irodsFile . exists ( ) )
assertEquals ( "ID = userId" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
Assert . assertEquals ( 2 , warningHeaders . length )
assertEquals ( "" , res )
assertEquals ( pattern , patterns . getPattern ( entityId ) )
Assert . assertEquals ( expectedLanguage , actualLanguage )
assertEquals ( expected , actual )
assertThat ( this . adapter . getSortColumn ( ) , is ( equalTo ( sortColumn ) ) )
Assert . assertTrue ( success )
assertEquals ( newTags . getTags ( ) . size ( ) , 2 )
assertTrue ( ! result )
assertEquals ( Hive2DatabaseMeta . TRUNCATE_TABLE , hive2DatabaseMeta . getTruncateTableStatement ( "testTableName" ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<features xmlns=\\"http://karaf.apache.org/xmlns/features/v1.0.0\\" name=\\"test-dependencies\\">\\
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertTrue ( w . getStatus ( ) == HttpServletResponse . SC_PROXY_AUTHENTICATION_REQUIRED )
assertEquals ( Timestamp . valueOf ( "2013-03-27T23:18:40Z" ) , jstOi . getPrimitiveJavaObject ( result . get ( "five" ) ) )
assertThat ( route , canHandle ( PathAnnotatedController . class , "withRelativePath" ) )
assertThat ( matcher . matches ( response ) , is ( true ) )
assertArrayEquals ( new String [ ] { "Id" , "\\"Delimited Field Name\\"" , "Default_Case" } , cols )
assertEquals ( false , OptimizerUtils . isIndexingRangeBlockAligned ( 2500 , 3001 , 7001 , 9000 , BRLEN , BCLEN ) )
Assert . assertTrue ( authorizableHierarchy . toString ( ) , authzProvider . hasAccess ( user1 , authorizableHierarchy , actions , ActiveRoleSet . ALL ) )
assertEquals ( "\\"x\\".\\"dup\\"" , t . getNameInSource ( ) )
assertTrue ( req . getHeaders ( ) . isEmpty ( ) )
assertEquals ( expected , cls )
assertThat ( token . getType ( ) , is ( PCRELexer . ResetStartMatch ) )
assertEquals ( expResult , result )
Assert . assertArrayEquals ( "The computed solution for Bleichenbacher attack must be equal to the original message" , message , solution . toByteArray ( ) )
assertThat ( testExecutor . invokeTest ( 1000L , ImmutableMultimap . of ( "force" , "whatever" ) ) , is ( false ) )
assertThat ( a . hashCode ( ) , is ( b . hashCode ( ) ) )
assertNotNull ( defaultRule . defaultQueueName )
assertEquals ( 2 , links . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
FunctionTestUtil . assertResult ( codeFunction . invoke ( offsetTime ) , "time( \\"" + TimeFunction . FEEL_TIME . format ( offsetTime ) + "\\" )" )
assertEquals ( "Unexpected widgetset configuration option value" , widgetset , config . getWidgetset ( ) )
assertThat ( out , isEmptyString ( ) )
assertEquals ( expResult , stringBuilder . toString ( ) )
Assert . assertEquals ( "{\\"alice\\":{\\"@xmlns:p\\":\\"http://test\\",\\"p:bob\\":[\\"charlie\\"]}}" , result . toString ( ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertTrue ( "The getChanges() method did not report a change" , hasChange )
assertEquals ( expected , actual )
assertNotNull ( testObj )
Assert . assertTrue ( validator . isValid ( 10 , context ) )
assertTrue ( d . distance ( new Rectangle2D . Double ( 1 , 1 , 1 ) ) == 0 )
assertThat ( element . getText ( ) , is ( "value with appended text" ) )
assertEquals ( "Incorrect length" , Bytes . BufferHelper . SIZEOF_LONG , bytes . length ( ) )
assertNull ( daoService . get ( userWrapper , "PKEY" , "Config" ) )
assertThat ( schedCapture . getValue ( ) , is ( getScheduler ) )
Assert . assertEquals ( 0 , distance . compute ( a , a ) , 0d )
assertEquals ( result , expectedUser , "Username is incorrect." )
assertSame ( map0 , mdcAdapter . getPropertyMap ( ) )
assertTrue ( StoreParams . sameValues ( p , pDft ) )
assertEquals ( 1 , fixture . mark ( ) )
Assert . assertTrue ( providerAInvoked )
Assert . assertEquals ( nodeToKey ( queryA ) , nodeToKey ( queryB ) )
assertThat ( result , equalTo ( "hey, 1, hey, ho, hum, h盲pp, 2" ) )
Assert . assertEquals ( new URI ( "http://localhost:80/some stuff#param=stuff#fragment" ) , result )
_PmAssert . assertVisible ( pm . pmBeanImpl )
assertThat ( axioms , hasItem ( axiom ) )
assertThat ( intOrString1 , not ( equalTo ( intOrString2 ) ) )
Assert . assertEquals ( "Incorrect number of PersonMergeLog retrieved" , 2 , lst . size ( ) )
assertEquals ( "Mismatched root path" , upDir , rootLocation . resolve ( upDir ) . toString ( ) )
Assert . assertEquals ( expectedLanguage , actualLanguage )
Assert . assertEquals ( 0 , results . size ( ) )
Assert . assertNull ( comp . getHtmlClass ( ) )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "05-FEB-2013" )
assertTrue ( basePermission . isAllowed ( auth , Sets . newHashSet ( ) ) )
assertFalse ( validator . isValid ( new MyCustomStringImpl ( "A79927398712" ) , null ) )
assertEquals ( secToken , mapper . readValue ( mapper . writeValueAsString ( secToken ) , X509FederationClient . SecurityToken . class ) )
assertEquals ( expected , uri . getRawPath ( ) )
assertions . contains ( value , index )
assertMappedFieldValueIsEmptyCollection ( )
assertTrue ( v8TypedArray instanceof V8Array )
assertEquals ( "{\\"instance\\":-1.0}" , json )
Assert . assertTrue ( Files . size ( tmfile . toPath ( ) ) > 0 )
assertThat ( e . getMessage ( ) , containsString ( expectedExceptionMessage ) )
assertEquals ( exp , x )
assertEquals ( expecetedTableName , builtTableName )
assertEquals ( DATA , storage . loadPerson ( ID ) )
assertEquals ( new ArrayList < Category > ( ) , mockResult . included ( "categories" ) )
Assert . assertEquals ( fullName , metric . getFullName ( ) )
assertEquals ( 23 , instance . evaluations )
assertEquals ( "Select with a where clause" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertTrue ( isElementPresent ( By . className ( "v-Notification-success" ) ) )
assertions . isNotEqualTo ( actual )
Assert . assertEquals ( record . get ( "name" ) . toString ( ) , decoded . get ( "name" ) . toString ( ) )
assertThat ( capturePackage . getValue ( ) . name ( ) , is ( "com.example.package" ) )
assertEquals ( expected , actual )
Assert . assertEquals ( files * 10 , infos . size ( ) )
assertNull ( joystick )
assertEquals ( 42.0 , out . value , 0 )
Assert . assertEquals ( "s3n://123:456/some/path" , HiveAuthzBindingHookBase . parseURI ( "/some/path" ) . getName ( ) )
Assert . assertEquals ( assinatura , eventoInutilizacao . getAssinatura ( ) )
Assert . assertEquals ( expectedResult , result )
Assertions . assertEquals ( Collections . singletonMap ( "color" , "orange" ) , response )
assertPermanentCount ( playerA , "Forest" , 1 )
assertEquals ( NASTY , actual )
assertThat ( PropertiesUtil . createPrefixMap ( properties , "abc" ) , is ( answer ) )
assertNull ( datastore )
assertThat ( value , nullValue ( ) )
assertTarget ( "[['a']]" )
assertCompletions ( "server:\\n" + "  address: <*>" , "server:\\n" + "  address: <*>" , "server:\\n" + "  address: <*>" )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertThat ( resolver . resolve ( CamelCase . class ) , equalTo ( "org/jbehave/core/io/CamelCase.story" ) )
assertEquals ( txtFile . getAbsoluteFile ( ) , source . getLocation ( ) )
assertEquals ( dataflow , edit . getSubject ( ) )
assertEquals ( "  1 ABCD\\n  3 XYZ\\n" , b . asString ( ) )
assertFalse ( jee . evaluate ( event ) )
assertFalse ( applicationDirectory . existsApplication ( testAppId , dummyKey , testNdefTrailerBlock ) )
assertThat ( aDouble , equalTo ( bDouble ) )
assertProcessInstanceCompleted ( processInstance )
assertThat ( new File ( current , "a.txt" ) , is ( file ( ) ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( "The entity text is correctly transported" , entityText , new String ( out . toByteArray ( ) , "UTF-8" ) )
assertEquals ( r1 . get ( 0 ) , r1 )
assertThat ( "unencoded setter has return type String" , setter . getReturnType ( ) , equalToType ( String . class ) )
assertEquals ( ImmutableMap . of ( CallOptionsUtil . REQUEST_PARAMS_HEADER_KEY , encodedRequestParams ) , headers )
assertThat ( aggregateMapper . getCapped ( ) . getSize ( ) , is ( 50 ) )
assertNull ( field . getColourExpression ( ) )
testHelper . assertExecutionTreeAfterMigration ( )
assertThat ( event , is ( expected ) )
assertThat ( s , is ( "a value greater than <1> xor a value less than <5>" ) )
Assert . assertEquals ( "KeywordInPackage" , name )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( originalSize - 1 , getNumberOfAllVisitsIncludingVoided ( ) )
assertArrayEquals ( sortedValues , values )
strings . assertStartsWith ( mock ( Description . class ) , null , "Yoda" )
Assert . assertEquals ( "Unformatted service listing not correct" , "/services" , result )
assertEquals ( 3.1415926536 , p , 1e-6 )
assertEquals ( AuthorizationResult . ACCESS_DENIED , permission . getResult ( ) )
Assert . assertEquals ( "The quick brown fox jumped over the lazy dog." , resolvedString )
assertFalse ( result )
Assert . assertEquals ( expected , actual )
assertTrue ( str . contains ( format . format ( date ) ) )
assertThat ( t . getMessage ( ) , is ( "Exception" ) )
BrowserAgentTestUtils . assertBrowserAgent ( HTMLUNIT_CHROME_AGENT_STRING )
Assert . assertEquals ( 1 , countingNotifier . getNotificationCount ( ) )
assertEquals ( "Expected response not seen." , "ONE" , response )
assertEquals ( "anything but true or false" , testedString )
assertNotNull ( oracleEngine )
Assert . assertEquals ( runNo , memorySnapshot . getRunNo ( ) )
assertEquals ( "#00ff00" , getColorpickerValue ( ) )
assertEquals ( PostStatus . PENDING , post . getStatus ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( this . family1 , this . component . resolveEntity ( FAMILY_1_ID ) )
assertTrue ( validationHelper . hasErrors ( ) )
strings . assertStartsWith ( mock ( Description . class ) , null , "Yoda" )
assertThat ( sut . isMatch ( real , expected ) , is ( false ) )
assertTrue ( failedAsExpected )
assertEquals ( "ABC" , result . trim ( ) )
assertThat ( "Locations created with different paths and different property must not be equal" , locationA1 , is ( locationA2 ) )
Assert . assertFalse ( result )
assertTrue ( result . containsAll ( expectedResult ) )
assertions . isNotNull ( )
assertEquals ( "minutia" , HtmlFormEntryUtil . getDetailsParameter ( request ) )
assertTrue ( resources . getPackages ( ) . length == 0 )
assertTrue ( "Rule Delegation Bo fetched " , ruleDelegationBos != null && ruleDelegationBos . size ( ) == 2 )
assertThat ( actual , is ( equalTo ( "/ab/CD" ) ) )
assertThat ( keyValueType . getValue ( ) , equalTo ( aString ) )
Assert . assertEquals ( "SELECT TO_DAYS('2007-10-07');" , text )
assertThat ( engine , notNullValue ( ) )
Assert . assertEquals ( query , interpretedQuery )
Assert . assertEquals ( "remark" , result . getReturnMsg ( ) )
assertThat ( context , value , is ( RESULT_MSG + "-" + RESULT_INT ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertFalse ( value . isReplaceableBy ( 99L , 9 , ComparableComparator . INSTANCE ) )
assertTrue ( response . isPresent ( ) )
assertEquals ( "OLD2Z4-L4C7H-MKH5BW" , orderId )
assertEquals ( - 631123200000L , q . getLastMillisecond ( calendar ) )
assertNull ( testClass )
assertEquals ( tstName , ent . getCatalog ( ) )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"
assertEquals ( 42.1 , result , 0.000001 )
assertThat ( notification , containsString ( "\\"caption\\":\\"foobar\\"" ) )
assertEquals ( "/_nodes/_all/_shutdown?delay=5s" , action . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( "document/literal" , encodingStyle )
assertNotNull ( graph . variables ( ) )
assertEquals ( JobConfigHistoryConsts . ICONFILENAME , sut . getIconFileName ( ) )
assertEquals ( 'd' , ex . charAt ( s , 3 ) )
assertEquals ( qb , qa )
Assert . assertEquals ( true , errors . hasFieldErrors ( "encounterDatetime" ) )
assertThat ( hasNativeSupportForPseudo , is ( false ) )
assertEquals ( exp , TYPING_MAPPER . readValue ( json , ZoneId . class ) )
Assert . assertTrue ( this . commandFacade . exists ( SwitchFullScreenCommand . class , key ) )
assertTrue ( e . getMessage ( ) . contains ( "Template dir" ) )
assertNull ( gd )
Assert . assertNotNull ( streams )
assertThat ( MODEL . findNextTransition ( utc ) . get ( ) , is ( AUTUMN_1996 ) )
assertEquals ( "Failed on [" + i + "] iteration" , expected , merged )
assertThat ( jvm . shouldEnableRemoteDebugging ( ) , is ( false ) )
assertThat ( pages . getAt ( 0 ) . getUrl ( ) , is ( "http://www.apache.org" ) )
assertTrue ( "Add and get relation" , relation . getKeyid1 ( ) . equals ( testRelation . getKeyid1 ( ) ) )
Assert . assertNotNull ( config )
Assert . assertNotNull ( "description should be present" , value )
assertArrayEquals ( expectedOutput1 , output1 )
assertEquals ( "Hello {name}" , ResponseBodyInterpolator . interpolate ( "Hello ^name" , req ) )
assertNull ( response . getHeaders ( ) . get ( "links" ) )
assertEquals ( "catch" , getValue ( ) )
Assert . assertEquals ( tokenList . size ( ) , 3 )
assertEquals ( 4.0 , distance . compute ( point1 , point2 ) , EPSILON )
assertFalse ( fs . unlink ( "foo" ) )
assertEquals ( "1,2,3" , getInorderForm ( tree ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertThat ( tracker . getAll ( ) . length , is ( 1 ) )
Assert . assertEquals ( expectedSlot , slot )
assertEquals ( val . apply ( m ) , m . with ( val ) )
context . assertIsSatisfied ( )
assertEquals ( value , actualValue )
Assert . assertTrue ( true )
assertEquals ( 0.7306356862792885 , r , 0.000000000001 )
assertNotNull ( encodingDetector )
assertNotNull ( path )
assertTrue ( specification . stats ( ) . hasFailed ( ) )
assertEquals ( expected , actual )
assertEquals ( scIdentifier , result )
Assert . assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( expectedUri , uri )
assertEquals ( expResult , result )
assertEquals ( 1 , count . get ( ) )
assertTrue ( "Authentication Context should be created" , ops . exists ( TEST_AUTHENTICATION_CONTEXT_ADDRESS ) )
assertEquals ( 0 , collection . getSize ( ) )
Assert . assertTrue ( filter . accept ( good ) )
assertTrue ( ! cs . isLast ( ) )
Assert . assertTrue ( redisd . isRunning ( ) )
assertTrue ( FileUtils . contentEqualsIgnoreEOL ( new File ( "src/test/resources/reference/test-normalized.dump" ) , outputFile , "UTF-8" ) )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�尖�
Assert . assertEquals ( "hello,world" , result . getName ( ) )
assertTrue ( hasResourceProvidableType )
assertEquals ( consumed , ResourceRelationType . VALID . name ( ) )
Assert . assertEquals ( "Class should not be considered: " , false , new DifferenceAccumulatingHandler ( inclusionSet , exclusionSet ) . isClassConsidered ( "de/test/java/regex/code" ) )
assertEquals ( tmap , readValue )
assertSidebarContainsClass ( "open" )
assertNotNull ( as )
assertEquals ( 3 , postCommentScores . size ( ) )
assertTrue ( wasEmpty . get ( ) )
assertArrayEquals ( new String [ ] { "singleton" } , treeContent )
Assert . assertTrue ( matcher instanceof UriPatternMatcher )
assertEquals ( Sets . newHashSet ( 1 , 2 ) , tree . createSet ( Arrays . asList ( 1 , 2 ) ) )
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\\"$or\\":[{\\"age\\":{\\"$gte\\":5,\\"$lte\\":10}}]}" )
assertTrue ( Arrays . equals ( expectedPrivs , privs ) )
assertTrue ( suspendables . contains ( method ) )
assertEquals ( 1 , searchService . search ( "admin" ) . size ( ) )
Assert . assertEquals ( "cissy" , el . getAsString ( ) )
assertEquals ( 2 , result . size ( ) )
Assert . assertEquals ( 5 , analyser . getLoadRightAfterActivity ( route . getEnd ( ) , route ) . get ( 0 ) )
assertThat ( sampleEntity , is ( notNullValue ( ) ) )
assertEquals ( content , IOUtils . toString ( ungzippedStream , Charset . defaultCharset ( ) ) )
assertEquals ( "incorrect result" , result , aNumber . compareTo ( bNumber ) )
assertEquals ( constraintViolations . size ( ) , 1 )
assertEquals ( 50 , port . doubleIt ( 25 ) )
assertThat ( classes . size ( ) , is ( 4 ) )
assertObjectEquals ( "{type:'number'}" , x . getSchema ( ) )
assertJsonEquals ( "{'int':3, 'double':2.7, 'bool':true, 'map':{hello:'world', foo:'bar'}}" , JsonSerializer . serialize ( map ) )
assertEquals ( 0 , violations . size ( ) )
assertStates ( "existing" , NOT_SUPPORTED , LINKED_BUT_NOT_SYNCED , EXISTING , null , null )
assertEquals ( "Black" , dto . getColors ( ) [ 0 ] )
assertArrayEquals ( expected , fixture . getServerAddresses ( ) )
assertEquals ( document , mapper . readValue ( JSON_MEDIA_INFO_LABEL , MediaInfoDocumentImpl . class ) )
assertEquals ( "hi" , hello . sayHello ( ) )
assertInState ( STATE . STARTED , STATE . STARTED )
assertSame ( sessionFactory , sessionFactoryBean . getObject ( ) )
assertTrue ( shouldAnalyze )
assertEqualsSet ( "Person.rdf" , Declaration ( cls ) , Declaration ( propP ) , Declaration ( propQ ) )
assertions . isNotLessThan ( expected )
assertEquals ( "names do not match!" , "myComponent" , component . getName ( ) )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertEquals ( "" , result )
assertEquals ( "Recursion detected" , 1 , events . size ( ) )
assertTrue ( csv . equals ( "" ) )
assertNotNull ( config )
assertEquals ( "Unexpected primary style name" , "v-tree" , state . primaryStyleName )
assertJson ( json )
assertEquals ( "coap://50.0.0.1:5683" , server . getUri ( ) )
Assert . assertEquals ( journalTable . getListOfKeys ( ) , ImmutableList . of ( "def1" , "def2" ) )
assertTrue ( "Got parameters" , provider . getParameters ( ) . isEmpty ( ) )
Assert . fail ( "RuntimeException expected" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff14_" ) )
assertTrue ( "Found " + numResults + " files instead of " + test [ 1 ] + " for " + test [ 0 ] , numResults == test [ 1 ] )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( properties . getData ( testDataKey ) , room . getProperties ( ) . getData ( ) )
Assert . assertEquals ( expected . replace ( '\\'' , '"' ) , result )
assertMatches ( written , resolved )
assertEquals ( "hello" , result )
assertEquals ( "" , result )
assertTrue ( strategy instanceof TestShardStrategy )
assertThat ( domain . getValidationFailures ( resourceLookup ) , contains ( stringContainsInOrder ( "log home" , "/private/log/mydomain" , "sharedlogs" ) ) )
assertThat ( statistics . getDistinctEdgePropertyValuesByLabel ( ) . get ( "edgeCount" ) , is ( 24L ) )
assertEquals ( expectedData , actualData )
assertEquals ( "Mismatched canonical path for " + remotePath , expected , actual )
assertEquals ( ManipulationScope . FIELD , manipulation . getManipulationScope ( ) )
Assert . assertEquals ( 1 , term . getIndexedValue ( ) )
assertEquals ( "SELECT id FROM Person WHERE sex = ?" , args . get ( 0 ) )
Assert . assertEquals ( 100 , ( Integer ) proxy )
assertThat ( servletResponse , allOf ( startsWith ( "java.io.IOException" ) , containsString ( "403" ) ) )
assertTrue ( "suitable class " + GrandTask . class . getName ( ) + " does not exist" , suitable )
assertEquals ( true , classUnderTest . isShowConstraintNames ( ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertSame ( stsClient , i . getStsClient ( ) )
Assert . assertEquals ( prefixes . getNsPrefixURI ( "ex" ) , query . getNsPrefixURI ( "ex" ) )
assertFalse ( subject . getDelay ( ) . isPresent ( ) )
assertTrue ( version . startsWith ( "MODULE " ) )
assertBeanValidation ( json , "query.metric[0].group_by[0].group_count may not be null" )
assertNotNull ( "Returned console reader cannot be null" , reader )
assertEquals ( "Expected another type of analyzer" , StopAnalyzer . class , analyzer . getClass ( ) )
assertMandatoryElements ( targetProduct , false )
assertSame ( t . toLocalTime ( ) , TEST_2007_07_15_12_30_40_987654321 . toLocalTime ( ) )
assertThat ( traversal . toList ( ) , containsInAnyOrder ( likeVertex ( ) . withTimId ( "id1" ) , likeVertex ( ) . withTimId ( "id2" ) , likeVertex ( ) . withTimId ( "id3" ) ) )
assertEquals ( expected , getString ( TestExistsCriteriaImpl . example ( ) ) )
assertThat ( result . getIssues ( ) , empty ( ) )
assertTrue ( user . hasRole ( "SuperUser" , true ) )
assertEquals ( o1 , o2 )
assertThat ( result . hasErrors ( ) , is ( false ) )
assertTrue ( set . isEmpty ( ) )
assertEquals ( "fight" , result . getName ( ) )
assertEquals ( 1 , violations . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "9208675309" , parsedTelephoneNumber )
assertArrayEquals ( "3" . getBytes ( ) , jedisCluster . get ( byteKey ) )
assertEquals ( 0 , array . length )
assertFocusModificationSanity ( context )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( "Mismatched data" , expected , res )
assertEquals ( response . getStatus ( ) , STATUS200 )
Assert . assertEquals ( button . getTagName ( ) , "input" )
assertEquals ( "matches(\\"\\\\\\\\s+\\")" , buffer . toString ( ) )
assertEquals ( "{\\"a\\":[1]}" , n )
assertEquals ( "Test message ab c" , result )
assertEquals ( "SELECT mat FROM SOHeader soh JOIN soh.soItem soi JOIN soi.material mat WHERE soh.createdBy = 'Peter' AND soh.shId = soh.soId AND mat.id = 'abc'" , jpqlStatement . toString
assertEquals ( "0000001207113000900020618" , this . banco . geraCodigoDeBarrasPara ( this . boleto ) . substring ( 19 , 44 ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( BIG_DATA , result )
Assert . assertEquals ( "!!bitset [\\n" + "  1024,\\n" + "  # 00000000000000000000000000000000000000000000010000000000\\n" + "\\n" + "]" , wire . toString ( ) )
Assert . assertEquals ( new Double ( 65535.65535d ) , _c . convert ( "65535.65535" ) )
assertTrue ( exceptionReport . getHTTPStatusCode ( ) == HttpServletResponse . SC_INTERNAL_SERVER_ERROR )
assertEquals ( TestFiles . uniqueProperties , ontology . getPropertyNames ( ) . size ( ) )
Assert . assertEquals ( Constants . HEADER_SIGNIN_PATH , actualSignInPath )
assertTrue ( entity . getSex ( ) == null )
assertEquals ( expected , loops )
assertTrue ( retDocumentOrganizations == documentOrganizations )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertThat ( response . getStatus ( ) , is ( NOT_FOUND . getStatusCode ( ) ) )
assertTrue ( value >= 0 && value <= 1 )
assertDeclarationValueRecovery ( ss )
assertThat ( actual , containsInAnyOrder ( "DR" , "Patient/P" ) )
assertEquals ( "OK" , new String ( sha1 ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
objects . assertIsOfAnyClassIn ( someInfo ( ) , actual , types )
assertNoCause ( "value of    : myObject.child.grandchild\\nmessage" )
assertThat ( i , greaterThan ( 1 ) )
assertNotNull ( image )
AssertResults . assertResults ( scanner , expectedResults )
assertThat ( markdown , containsString ( String . join ( "\\n" , "### An Int" , "" , tableHeader ( ) , tableEntry ( "`anInt`" , linkTo ( "Type" , "integer" ) , "" ) ) )
assertEquals ( p , Period . of ( 0 , 0 , 0 ) )
assertEquals ( 10000 , accumulated )
assertEquals ( TEAM_CITY_URL + "/app/rest/projects/id:project54" , projectUrl )
assertNotNull ( "Country is null" , entity )
Assert . fail ( e . getMessage ( ) )
assertThat ( values , contains ( beginYear ) )
assertOut ( "\\n/**\\n * @const\\n * @type {*}\\n */\\nvar a = 42" )
assertEquals ( false , result )
assertTrue ( pattern . matches ( "-1.0" ) )
assertResultSet ( res )
assertNotNull ( responseContent )
assertEquals ( 1 , kieSession . fireAllRules ( ) )
assertEquals ( expected , actual )
assertTrue ( contains ( url , "?key=123.5" ) )
assertEquals ( Tuple3 . of ( 17.29f , 14.5 , - 0.98 ) , Iterables . getOnlyElement ( applyAggregator ( a , input ) ) )
assertTrue ( s . getRequiredSkills ( ) . containsSkill ( "skill1" ) )
assertThat ( responseObject , is ( nullValue ( ) ) )
Assert . assertEquals ( protocoloInfo , protocolo . getProtocoloInfo ( ) )
assertFalse ( "Attribute should be false" , msg1 . getEdimap ( ) . isIgnoreUnmappedSegments ( ) )
Assert . assertNull ( WebUtil . normalizeLocale ( s ) )
Assert . assertNull ( "user group returned" , actual )
Truth . assert_ ( )
assertEquals ( "Jersey/2.0-m09 (HttpUrlConnection 1.7.0_04) from the server" , response )
assertThat ( date . getMinimum ( CommonElements . RELATED_GREGORIAN_YEAR ) , is ( - 1000020533 ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertThat ( transferSuccessful , is ( true ) )
assertTwoProcessesDifferentDefinition ( manager )
assertNoDummyAccount ( USER_JACK_USERNAME )
assertEquals ( 10376 , ftpFiles [ 0 ] . getSize ( ) )
assertNull ( value )
Assert . assertEquals ( 1 , ( int ) conceptName . getConceptNameId ( ) )
assertTrue ( str . contains ( "1003" ) )
Assert . assertEquals ( units , deserialize ( tmpDir ) )
assertThat ( node , notNullValue ( ) )
assertTrue ( "hotmail contacts are empty" , contacts . size ( ) > 0 )
Assert . assertEquals ( 0l , ( long ) RequestObjectHelper . getEndOffset ( requestObject ) )
assertFailureLogPresent ( instance , "failingTask" )
assertThat ( parsers , is ( DdlParsers . BUILTIN_PARSERS ) )
assertThat ( spec . getImagePullPolicy ( ) , notNullValue ( ) )
assertFalse ( authenticator . isAuthenticated ( "username" , "password" ) )
assertEquals ( expectedGhostTable , ghostTable )
assertThat ( records . isEmpty ( ) , is ( true ) )
assertThat ( root , hasType ( Type . COMPLETELY_SCHEDULED_SUPERELEMENT ) )
assertEquals ( previous + 2 , list . size ( ) )
assertTrue ( filter . shouldInclude ( source , "some.property" ) )
Assert . assertArrayEquals ( cplxData_ovsmp_EXPECTED . toDoubleArray ( ) , cplxData_ovsmp_ACTUAL . toDoubleArray ( ) , DELTA_08 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
assertTrue ( properties . shouldCreateNewChat ( ) )
assertThat ( builder . build ( ) . getException ( ) , sameInstance ( failure ) )
assertTrue ( "Not EBV false: " + v , XSDFuncOp . booleanEffectiveValue ( v ) )
Assert . assertEquals ( "Invalid AND of " + operands , row . expected , expr . evaluate ( ) . booleanValue ( ) )
assertEquals ( expected , actual )
assertThat ( processor . getTables ( ) , is ( nullValue ( ) ) )
assertEquals ( label + " serialize-normal failed" , e1 , r )
assertEquals ( wpDocument , read )
assertEquals ( expectedSource , instrumentedSource )
assertThat ( ( String ) getter . invoke ( instance ) , is ( equalTo ( "someValue" ) ) )
Assert . assertEquals ( element . getText ( ) , "click me" )
assertThat ( pool . size ( ) , is ( 0 ) )
assertThat ( reading . getQuery ( ) , is ( "offset=10" ) )
assertEquals ( 200 , tagCache . size ( ) )
assertNotNull ( p )
assertEquals ( expected , output . trim ( ) )
assertThat ( manager . getPartitionSubPath ( new Path ( partition1 . getSd ( ) . getLocation ( ) ) ) , is ( new Path ( "partition1" ) ) )
Assert . assertEquals ( 0 , person . getAttributes ( 3 ) . size ( ) )
assertDegenerate ( scan )
assertEquals ( "9 3\\n" , found )
assertEquals ( "Expected 1 result!" , 1 , n )
assertFalse ( JPackage . isForcePackageNameLowercase ( ) )
assertThat ( cursor . hasNext ( ) , equalTo ( false ) )
assertEquals ( "irida workflow is invalid" , iridaWorkflowFromFile , iridaWorkflow )
assertEquals ( - 1 , Iter . lastIndex ( data , filter ) )
assertEquals ( expectedResult , result )
Assert . assertTrue ( is . available ( ) == 0 )
assertEquals ( date , containerRequest . getDate ( ) )
Assert . assertNotNull ( "XML formatter not null" , tba1 )
assertEquals ( "immediateResume" , str )
Assert . assertEquals ( 0 , this . outputDir . listFiles ( ) . length )
assertThat ( javaDocComment , containsString ( "A description for this type" ) )
assertEquals ( - 1 , askLevel1 . compareTo ( askLevel2 ) )
assertEquals ( expected , actual )
assertEquals ( original . getValue ( ) , newone . getValue ( ) )
assertThat ( ts . toMillis ( ) , is ( currentTimeMillis ) )
assertTrue ( selectedCells . isEmpty ( ) )
Assert . assertEquals ( "var simulation gave the wrong answer" , - 3.0 , ( Float ) r , 0.001 )
assertEquals ( new Double ( val1 ) , point . getValue ( ) )
Assert . assertTrue ( row . matches ( new Guess ( colors ) ) )
assertEquals ( 3 , position )
assertThat ( pathElement . getCompletePath ( ) , is ( "/a/b/c/d/e" ) )
assertEquals ( 1 , acc . get ( ) )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
Assert . assertEquals ( "Nodes should be considered free since run is considered new at this point " , 10 , freeThreads )
assertEquals ( "Test Group" , currentGroup . getName ( ) )
Assert . fail ( "Failed to get command lines for " + errorCode )
assertThat ( queryContext . get ( ) , is ( expected ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFInfoCupomFiscalReferenciado ( ) . toString ( ) )
assertThat ( resolve ( "http://example.org/" ) , is ( "./example/http://example.xsd" ) )
assertEquals ( witness , map )
assertThat ( results . size ( ) , is ( 1 ) )
assertScoreAndParse ( content , null , 1 )
assertArrayEquals ( EXPECTED_SIGN_SIGNED_BYTES , encodedBytes )
assertTrue ( kieBuilder . getResults ( ) . hasMessages ( Message . Level . ERROR ) )
assertThat ( decoderEncoder . decodeToArray ( ecodedSuffix ) , equalTo ( qa [ 1 ] ) )
mockOutput . assertIsSatisfied ( )
assertSearch ( "1" , query , null , 1 , 3 )
assertEquals ( testString , cv . getValue ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedRemoteCallReturn , remoteCallReturn )
assertThat ( driver . findElements ( By . tagName ( "body" ) ) . size ( ) , is ( 1 ) )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertTrue ( doc . isSameNode ( doc2 ) )
assertTrue ( concurrency > 1 )
assertEquals ( "123" , converter . getAsString ( facesContext , new UIPanel ( ) , Short . valueOf ( 123 ) ) )
Assert . assertEquals ( "http://example.com/events/Wiesbaden?eventName=Revo+Tour&location=Schlachthof#description" , expanded . toString ( ) )
assertFalse ( session . getNode ( path ) . isLocked ( ) )
assertArrayEquals ( expected , actual , EPS )
assertEquals ( "string" , array . getString ( 0 ) )
assertEquals ( "0000001476147541" , nossoNumeroCompleto )
assertThat ( result , contains ( new Interval ( RangeBoundary . CLOSED , 0 , 4 , RangeBoundary . CLOSED , 0 , 0 ) ) )
assertNotNull ( Fleet . fetcher ( "FLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( 0 , time . getTime ( ) )
assertTrue ( "Expected HostCapacityReport" , obj instanceof HostCapacityReport )
assertFalse ( workReportTypeDAO . exists ( workReportType . getId ( ) ) )
assertTrue ( true )
assertEquals ( result . getUuid ( ) , newUuid )
assertEquals ( true , getLoadLayerDefinitionAction ( ) . isEnabled ( ) )
assertEquals ( resp . getCode ( ) , 204 )
assertEquals ( expected , answer )
assertTrue ( roles . size ( ) == 2 )
assertTrue ( "Tx 2 write should've completed" , write2Complete . await ( 5 , TimeUnit . SECONDS ) )
assertTrue ( notifier . wasPerformed ( ) )
assertEquals ( map1 , map2 )
helper . assertAttributeValue ( country1 . getCountryCode ( ) , orderLine . getM_AttributeSetInstance ( ) , attr_Country )
Assert . assertEquals ( expected , actual . toString ( ) )
assertEquals ( expected [ i ] , diversifier . getDiversifier ( len1 , len2 ) )
Assert . assertFalse ( principal1 . equals ( principal2 ) )
assertThat ( result , is ( true ) )
assertEquals ( topic . getPostCount ( ) , before )
Assert . assertEquals ( "Compiling the Vocab failed" , 0 , result )
assertTrue ( e instanceof E_Version )
assertEquals ( "candidate took 1 millis to execute\\n" + "control took 1 millis to execute\\n" + "example: candidate and control both executed successfully, but the responses don't match\\n" , s )
Assert . assertEquals ( 1 , inter . size ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
Assert . assertTrue ( service . isProviderIdentifierUnique ( provider ) )
assertEquals ( getExplain ( delete , table . getSchemaName ( ) ) , "\\n  Delete_Returning()\\n    GroupLookup_Default(Index(c.PRIMARY) -> c)\\n      IndexScan_Default(Index(c.PRIMARY), cid = 1)" )
assertSame ( comp , table . getColumnRenderer ( 0 ) )
assertEquals ( "func code() {}" , element . getValueAsString ( ) )
assertArrayEquals ( new String [ ] [ ] { { "A" , "B" , "C" } , { "1" , "2" , "3" } } , event . getMatrix ( ) )
assertEquals ( 0 , songList . getTotalElements ( ) )
assertEquals ( "abaac\\n" , found )
assertEquals ( numCalls + 1 , newNumCalls )
Assert . assertEquals ( SslMode . MIXED , mode )
assertEditPostFormMavIsCorrect ( mav )
assertThat ( "unencoded field has type String" , field . getType ( ) , equalToType ( String . class ) )
assertEquals ( numberOfOperations , returnedNumber )
Assert . assertTrue ( rPr . getSz ( ) . getVal ( ) . intValue ( ) == 24 )
assertEquals ( Type . PRIVACY_PREFERENCE_FILE , Type . get ( preference ) )
assertOut ( "delete a" )
Assert . fail ( "Expected SQL exception" )
assertFailureValue ( "value of" , "objectArray.length" )
assertNotNull ( host )
assertEquals ( "Expected ratcheting to have been updated" , 15 , config . getTypeConfigs ( ) . get ( CHECKSTYLE ) . getMax ( ) . intValue ( ) )
assertEquals ( 0xff , keyInfo . getMaxSubKeyLen ( ) )
Assert . assertEquals ( 6 , metrics . size ( ) )
assertThat ( mapOfProperties . keySet ( ) . size ( ) , is ( 3 ) )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
assertEquals ( testNewUrl , jobEntryHadoopCopyFiles . loadURL ( testUrl , testNcName , metaStore , mappings ) )
assertThat ( localization . getLocale ( ) , equalTo ( PT_BR ) )
assertEquals ( 4 , booleans . size ( ) )
AssertJUnit . assertTrue ( "filter does not match object" , match )
assertTrue ( source . isSnapshotsDisabled ( ) )
assertThat ( noOfSolutions , is ( 81 ) )
assertEquals ( 2 , actual . getReportletConf ( ) . size ( ) )
assertThat ( fileContent , is ( "This is a test.\\n\\n" ) )
assertEquals ( TEST_CONTENT , CharStreams . toString ( result ) )
assertObjectEquals ( "{'in':'header',name:'H',type:'object',schema:{properties:{f1:{type:'string'}}}}" , x )
Assert . assertFalse ( PublisherSoapServerUtils . gpPublisherClient . publishStyle ( "STYLE_MOCK_SOAP" , "STYLE_NAME_MOCK_SOAP" , Boolean . FALSE ) )
assertEquals ( "Hello {name}" , ResponseBodyInterpolator . interpolate ( "Hello ^{name}" , req ) )
assertThat ( diffs . toString ( ) , equalTo ( "[Diff(EQUAL,\\"[a, b]\\"), Diff(DELETE,\\"[c, d]\\")]" ) )
Assert . assertFalse ( pf . passesFilter ( p1 ) )
assertThat ( assocTypeDAO . getTypes ( TENANT_ID , false ) , is ( expectedTypes ) )
assertEquals ( HELLO_URI + "processor/Hello/iterationstrategy/stack" , uri . toASCIIString ( ) )
assertEquals ( 1 , patient . getPatient ( ) . getHistory ( ) . size ( ) )
assertMismatchDetected ( success )
assertTrue ( result . get ( ) )
assertEquals ( new File ( toResolve ) , DockerPathUtil . resolveAbsolutely ( toResolve , ABS_BASE_DIR ) )
Assert . notNull ( department )
assertEquals ( false , result )
assertThat ( driver . findElement ( By . id ( "halfwidth" ) ) . getAttribute ( "value" ) , is ( "����笺���笺��
assertEquals ( null , min )
Assert . assertEquals ( 3 , resultList . size ( ) )
Assert . assertTrue ( out . size ( ) == 0 )
assertThat ( classesToParse , is ( empty ( ) ) )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( Boolean . FALSE , e . getEnableCounting ( ) )
assertEquals ( expResult , result )
assertFalse ( Asciidoclet . includeBaseDirOptionLength ( null ) )
assertEquals ( "" , result )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
Assert . assertEquals ( 1 , mockService . getMessages ( ) . size ( ) )
Assert . assertTrue ( "Failure expected true" , r . getLeft ( ) )
assertRowCount ( results , 2 )
assertNotNull ( Member . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
this . assertAnalyzesTo ( _a , "true" , new String [ ] { "foo" , "bar" } , new String [ ] { TypeAttribute . DEFAULT_TYPE , "boolean" } )
assertEquals ( renderJarTypeOnlyResult ( ) , result )
assertEquals ( Pair . of ( 1 , 3.0 ) , it . iterator ( ) . next ( ) . getFirst ( ) )
Assert . assertEquals ( 2 , analyser . getLoadRightAfterActivity ( route . getActivities ( ) . get ( 2 ) , route ) . get ( 0 ) )
Assert . assertEquals ( ")" , model . getUnit ( 0 , PlainText . class ) . getText ( ) )
assertEquals ( body . toString ( ) , "1test final" )
Assert . assertEquals ( 2 , violations . size ( ) )
assertions . contains ( value , index )
Assert . assertEquals ( "/test?field=a%2Cb%2Cc&user=1%2C2%2C3" , result )
assertThat ( count , is ( 1L ) )
assertTrue ( Iterables . elementsEqual ( result . getSteps ( ) , Lists . newArrayList ( new Step ( 0L , 1L , 1L , false ) , new Step ( 1L , 2L , 2L , false ) , new Step ( 1L , 0L , 0L , false
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>" , result )
assertEquals ( "value" , exp . asDynamic ( ) . asNavigationPropertyPath ( ) . getValue ( ) )
Assert . assertNull ( caixa )
classes . assertIsPackagePrivate ( someInfo ( ) , clazz )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertThat ( selectionModel . getSelectedClass ( ) , is ( Optional . empty ( ) ) )
assertTrue ( filter . matches ( "resilient_pool-0" , poolOperation ) )
assertEquals ( expectedNewCookie , parsedNewCookie )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
Assert . assertTrue ( isReferenced )
assertSeven ( result , testContext , async )
assertEquals ( FileSinkFactory . class , sinkFactory . getClass ( ) )
assertThat ( ( String ) registrationProperties . getValue ( ) . get ( "configuration" ) , equalTo ( "configadmin" ) )
assertEquals ( "OK" , r )
assertEquals ( 3 , new NQueens ( solution ) . attackedQueens ( ) )
Assert . assertNull ( ev . get ( "a" ) )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
Assert . fail ( "Should have thrown exception" )
Assert . assertEquals ( expectedOutputValues , RheemCollections . asSet ( outputValues ) )
assertEquals ( 123 , row . getValue ( ) )
assertEquals ( expected , b )
assertEquals ( path , uri )
assertThat ( reader , is ( notNullValue ( ) ) )
assertSame ( MockChooser1 . class , delegate . getClass ( ) )
assertEquals ( formatedValue , "26637142000158" )
assertTrue ( FileUtil . findPatternInFile ( new File ( resultFilename ) , "Avoid empty if" ) )
assertFalse ( executor . shouldExecute ( action , javax . faces . event . PhaseId . APPLY_REQUEST_VALUES , true ) )
assertTrue ( str . contains ( "public class QGroup {\\n" + "  public String toString() {\\n" + "    return \\"com/querydsl/codegen/QGroup.java\\n" + "    }\\n" + "}" ) )
assertEquals ( "Homer" , exp . evaluate ( person ) )
assertOut ( "this.b = this.b + 1" )
Assert . assertEquals ( "PersonAddressName" , result )
assertEquals ( - 1 , in . peekByte ( ) )
assertNull ( result )
Assert . assertNull ( gran )
assertThat ( response , containsString ( "81.80.117.237 - 81.80.117.237" ) )
assertNotNull ( result )
assertThat ( givenStories . getPaths ( ) , equalTo ( Arrays . asList ( GIVEN_STORY_PATH1 , GIVEN_STORY_PATH2 ) ) )
assertFalse ( isEditable )
assertTrue ( response . contains ( "me" ) )
assertEquals ( "Failed at " + i , reduced . getDouble ( i ) , res , 0.001 )
Assert . assertEquals ( state . IDLE , state )
Assert . isTrue ( getUser . getGroups ( ) . size ( ) == 0 )
assertLinkWithSameUnitsOk ( LinkInfo . UNIT_TYPE . NET , units )
assertEquals ( DEFAULT_POPULATION_SIZE , algorithm . getEvaluations ( ) )
assertEquals ( "Period of time time % Milliseconds in a second < 10000L" , "00:00:00 (hh:mm:ss)" , DateTimeUtils . millisecondsToHumanTime ( period ) )
assertEquals ( "V1 Track" , wrapper . getTrack ( ) )
assertEquals ( "BuildInfo" , buildInfo . getAction ( ) )
assertTrue ( "Handshake timed out" , closed . await ( 10 , SECONDS ) )
assertEquals ( "3 kuukautta sitten" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( "1 futureday from now" , p . format ( new Date ( 1000 * 60 * 60 * 24 ) ) )
assertEquals ( "+2" , expr . getParameterValue ( ) )
assertEquals ( "pmTitleCfgTooltipUsesTitleTest.ContainerPm" , container . getPmTitle ( ) )
Assert . assertEquals ( config , result )
assertEquals ( "http://proxyhost:1234" , client . getHeader ( "Proxy-Authorization" ) )
assertEquals ( r1 , r2 )
assertNotNull ( rs )
assertEquals ( component . getStyleName ( ) , "style1" )
Assert . fail ( "IllegalArgumentException should occur but didn't!" )
assertNotNull ( CoverallsFileHelper . getCoverallsFile ( job . getConfiguration ( ) ) )
assertEquals ( expectedUrl , url )
assertTrue ( sqlgGraph . getTopology ( ) . equals ( configuration . getTopology ( ) ) )
assertEquals ( coder . parse ( "(2 * s2)^2 + 1 / (2 * s3)^2" ) , coder . parse ( "(2 * s2)^2 + 1 / (2 * s3)^2 + 1 / (2 * s
assertEqualsIgnoreLineEnding ( output , "{ }" )
Assert . assertEquals ( first . hashCode ( ) , bc . hashCode ( ) )
assertEquals ( "{test;param" , result )
assertThat ( main . getResourceNames ( ) , containsInAnyOrder ( "abc" , "bcd" , "cde" ) )
assertEnvelopeEquals ( expected , actual , STRICT )
assertFalse ( "Optional is empty" , optional . isPresent ( ) )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertThat ( actual , notNullValue ( ) )
assertEquals ( "/foo/bar/baz" , output )
Assert . assertFalse ( conceptService . hasAnyConceptAttribute ( conceptAttributeType ) )
assertTrue ( selector . evaluate ( source ) )
assertFalse ( "Created MulticastSocket" , context . datagramSocket instanceof MulticastSocket )
Assert . assertEquals ( 5.1f , value , 0 )
assertCard ( expectedCard , "http://magiccards.info/dgm/en/3.html" , "Common" , "Sorcery" )
assertEquals ( 3 , request . getOauthParameters ( ) . size ( ) )
assertEquals ( "SELECT\\n" + "c.id, c.name, c.tags, c.category, c.description, \\n" + "c.division, c.experience_level as \\"experienceLevel\\", \\n" + "c
Assert . fail ( "Should not be able to generate a negative length String" )
context . assertIsSatisfied ( )
assertNull ( retry )
Assert . assertFalse ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredVersion ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( renderLayers . size ( ) , IsEqual . equalTo ( 0 ) )
Assert . assertNull ( job )
Assert . assertTrue ( repo . getEventById ( eqd2 . getId ( ) ) . isPresent ( ) )
assertEquals ( expResult , result )
assertEquals ( a1 , a2 )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS_UNSCALED )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { PATH , FORMAT , "group_repo" } , null ) , is ( false ) )
assertTrue ( Pattern . matches ( "(?s).*<head>\\\\s*<style\\\\s*type=\\"text/css\\"\\\\s*media=\\"screen\\">.*\\\\.errors.*</style>\\\\s*</head>\\\\s*<body>\\\\s*<
mockery . assertIsSatisfied ( )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertOut ( "a['removeAt'](2)" )
Assert . assertNull ( foundPid )
assertEquals ( asList ( Segment . SIZE , Segment . SIZE , 1 , Segment . SIZE , Segment . SIZE , Segment . SIZE , Segment . SIZE , Segment . SIZE , 1 ) , segmentSizes )
assertEquals ( "theSubStart" , hpi . getStartActivityId ( ) )
assertDocument ( session . getSessionFactory ( ) , "Enterprise" , "{ '_id' : '" + timberTradingInc . getId ( ) + "' }" , "{ " + "'_id' : '" + timberTradingInc . getId ( ) + "', " + "'departments'
Assert . assertEquals ( strExpected , strActual )
assertEquals ( calendar . getTime ( ) , toml . getDate ( "a_date" ) )
assertEquals ( src . getDst ( ) . getId ( ) , doc . getId ( ) )
Assert . assertTrue ( status . toString ( ) . contains ( "ForceSwitchableDataSourceStatus" ) )
assertNotNull ( annotation )
AssertJUnit . assertEquals ( InferenceGraphEdge . nullGraphEdge , actualEdge )
runner . assertNotValid ( credentialsService )
Assert . assertTrue ( "output does not contain version" , listOutput . contains ( "version" ) )
assertTrue ( "Russian alphabet not correctly reverse sorted" , result )
assertNotNull ( result )
assertEquals ( "a b\\n" , found )
assertEquals ( 7 , vrp . getJobs ( ) . get ( "1" ) . getSize ( ) . get ( 0 ) )
assertEquals ( "abca" , res )
assertEquals ( JobStatus . ENQUEUED , job . status )
assertEquals ( expected , content )
assertEquals ( expResult , result )
assertEquals ( XML_BOOKS , writer . toString ( ) )
assertEquals ( "Source is wrong" , source , select . getSource ( ) )
assertThat ( proxy . getIndex ( key ) , equalTo ( INDEX_COL_VALUE ) )
Assert . assertFalse ( p1 . isSameAs ( p2 ) )
assertRoundtrip ( input )
assertSame ( ctrlC , accelerator )
assertThat ( domain . getServer ( "server1" , "cluster" ) . getServerStartState ( ) , is ( "server" ) )
assertEquals ( before , after )
Assert . assertEquals ( b , a )
assertEquals ( asList ( foo2 ) , results )
assertFormat ( number , String . valueOf ( number ) )
assertThat ( converter . convert ( "10/06/2008" , Date . class , bundle ) , is ( equalTo ( new SimpleDateFormat ( "dd/MM/yyyy" ) . parse ( "10/06/2008" ) ) ) )
Assert . assertEquals ( "choob-plugin" , getClass ( ) . getResource ( url ) . toString ( ) )
assertEquals ( map . keySet ( ) . size ( ) , 5 )
assertEquals ( defaults , config . getDefaults ( ) )
assertThat ( version1 . compareTo ( version2 ) , equalTo ( 1 ) )
Assert . fail ( "Should throw FileNotFoundException" )
assertThat ( uri . getPath ( ) , endsWith ( "testing" ) )
assertNotNull ( result )
Assert . assertEquals ( siteFinder . hasResults ( ) , true )
assertEquals ( "Expected 400 but got " + response . getStatus ( ) , 400 , response . getStatus ( ) )
Assert . assertEquals ( 2 , endpoint . getFollowings ( ) . size ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertThat ( time . with ( PlainTime . COMPONENT . setToNextFullHour ( ) ) , is ( PlainTime . midnightAtEndOfDay ( ) ) )
Assert . assertEquals ( "John Doe" , customer )
assertMockEndpointsSatisfied ( )
assertThat ( parsed , is ( equalTo ( original ) ) )
assertNotNull ( modelFamilyDTOs )
Assert . assertEquals ( ERROR_MESSAGE + input + '"' , expected , filter ( input ) )
Assert . assertTrue ( pss . toString ( ) . contains ( Integer . toString ( c . get ( Calendar . HOUR_OF_DAY ) ) ) )
assertEquals ( "Did not match expected URIs" , expected , lookups )
assertEquals ( new Short ( ( short ) 3 ) , t )
assertEquals ( "icmp-rule-desc-update" , policyRule . getDescription ( ) )
assertEquals ( 0 , to . getData ( ) )
assertEquals ( "," , testDelimiter )
Assert . assertEquals ( decompressFlag , methodCalled . get ( 0 ) )
assertThat ( channel . isLongString ( ) , equalTo ( true ) )
assertEquals ( HttpStatusCode . OK_200 , response . getStatus ( ) )
assertEquals ( "/parent/dir/a/b/c" , path . toString ( ) )
assertTrue ( output . isIsomorphicWith ( source ) )
assertArrayEquals ( message , serializer . serialize ( ) )
Assert . assertEquals ( "(aa_change_substitution (aa_point_location (aa_char Cys) 123) (aa_char Arg))" , aa_change_substitution . toStringTree ( parser ) )
assertTrue ( Property . buildAll . getValue ( new Properties ( ) ) )
assertions . hasSize ( 5 )
assertThat ( description . toString ( ) , is ( "an Optional that's empty" ) )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "xLabel" , Literal . class ) ) . and ( binds ( "x" , URI . class ) ) )
assertEquals ( "requests size" , 4 , requests . size ( ) )
assertSame ( source , builder . getPropertyState ( ) )
Assert . assertEquals ( json . toString ( ) , fromJson . toString ( ) )
assertThat ( error . getCode ( ) , is ( WriteException . CONFLICT_TYPE ) )
assertEquals ( 0 , stk . size ( ) )
assertEquals ( 1 , get ( url ) . intHeader ( "malformed" , 1 ) )
assertEquals ( profilePage . getUsername ( ) , "test-admin" )
assertTrue ( cal instanceof Calendar )
assertNotNull ( output . list ( ) )
assertEquals ( "foo.war" , result . get ( "path" ) . asString ( ) )
assertThat ( "testSetPrimaryBitstreamID 0" , b . getPrimaryBitstream ( ) , equalTo ( bs ) )
assertThat ( columnCombination . getContainedOneColumnCombinations ( ) , IsIterableContainingInAnyOrder . containsInAnyOrder ( fixture . getExpectedContainedOneColumnCombinations1 ( ) ) )
assertEquals ( Optional . empty ( ) , nextExecution )
Assert . assertFalse ( rw . isValidUtf8 ( buf ) )
Assert . assertEquals ( jdkHand , acHand )
assertEquals ( expectedHome , config . getSystemPropertyHome ( ) )
assertEquals ( AuthenticationTypeParser . SAS , parserSAS . getAuthenticationParser ( ) . getType ( ) )
assertThat ( true , equalTo ( result ) )
assertTrue ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
assertTrue ( worker . getAssignments ( ) . get ( 0 ) == another )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertThat ( props . getProperty ( COLA_REPORT_METHOD ) , is ( GET_METHOD ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( instanceConstraintViolationsList . size ( ) , equalTo ( 0 ) )
assertEquals ( 0 , getMessageQueueSize ( ) )
assertTrue ( jiffle . isCompiled ( ) )
assertEquals ( CurrentInstance . get ( String . class ) , "Original value" )
assertThat ( response , not ( containsString ( "Unreferenced" ) ) )
assertFalse ( objJPAEdmProperty . isConsistent ( ) )
Assert . assertEquals ( "10003" , index )
assertNotNull ( factoryBean . createKeyManagerFactory ( ) )
Assert . assertEquals ( 0 , actual , 1e-10 )
assertEquals ( dn , dnExpected )
assertEquals ( a1 . getName ( ) , a2 . getName ( ) )
assertTrue ( ex . getCause ( ) instanceof MutationsRejectedException )
Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) )
assertEquals ( auth1 . hashCode ( ) , auth2 . hashCode ( ) )
Assert . assertEquals ( "Verify that the default registered container is returned as default" , name , container . getName ( ) )
Assert . assertTrue ( true )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( o . equals ( obj ) )
assertEquals ( "Unexpected URL address" , con . getURL ( ) . toString ( ) , ei . getAddress ( ) )
Assert . assertEquals ( driver ( ) . manage ( ) . getCookies ( ) . containsNamedCookie ( "name" ) , false )
assertEquals ( 1 , handlerContainer . onBindMethodCalled )
assertEquals ( list , deserializedList )
assertEquals ( 10.0 , aiResponse . getResultScore ( ) )
assertHelpLines ( "Option                                       Description" , "------                                       -----------" , "--date [MM/dd/yy: your basic date pattern]   a date     " , EMPTY )
assertThat ( anyTS . contains ( CLOCK_HOUR_OF_AMPM ) , is ( true ) )
assertEqualHash ( bytes , murmur3a )
assertThat ( action . hashCode ( ) , is ( other . hashCode ( ) ) )
assertEquals ( "Connection per hosts" , 70 , ioConfig . getMaxConnPerHost ( 100 ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( 2L , actual )
Assert . assertSame ( COLLABORATOR , c . getAccessLevel ( ) )
assertEquals ( "{\\"str\\":\\"strval\\",\\"int\\":22333,\\"double\\":22333.0,\\"null\\":null}" , jsonb . toJson ( data ) )
Assert . assertNotNull ( options . getSubOptions ( ConverterRegistry . class ) )
assertEquals ( "scheme://:123/path" , uri . toString ( ) )
assertEquals ( dbUrl , ref . toString ( ) )
assertTrue ( cf1 . hasChildren ( ) )
Assert . assertTrue ( getException )
assertEquals ( "A\\nB\\nC" , output )
assertions . doesNotContainNull ( )
assertEquals ( 0 , ret . size ( ) )
assertEquals ( result , subject . unmodifiableSet ( ) )
assertArrayEquals ( msg1 , deserializedComm . getCommitmentValue ( ) )
assertTrue ( extension . isUpdateContainerAllowed ( CONTAINER_ID , new KieContainerInstanceImpl ( CONTAINER_ID , KieContainerStatus . STARTED , kieContainer ) , new HashMap < > ( ) ) )
assertThat ( profile . getState ( ) , is ( ProfileInstance . State . STOPPED ) )
assertThat ( highlander . getProperty ( "uuid" ) , is ( nullValue ( ) ) )
assertTrue ( cache . getResourceTypeManagerCache ( ) . getResourceActivities ( ) . size ( ) == 1 )
Assert . assertEquals ( "�注�� 12 �拽�转" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
assertOut ( "RoyaleTest_A.prototype.royaleTest_a = function() {\\n  var /** @type {number} */ a = NaN;\\n  var /** @type {number} */ b = NaN;\\n  var /** @type {number}
assertEquals ( 1 , interceptAnnotations . size ( ) )
assertEquals ( "�驻�� 3 ���转" , t . format ( new Date ( 0 ) ) )
assertEquals ( "esting" , removeSentenceDecorator . toDisplay ( ) )
assertBeanBinding ( camelctx )
assertEquals ( "the notification handler did not receive the " + RESOURCE_ADDED_NOTIFICATION , 1 , handler . getNotifications ( ) . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 10" ) )
assertTrue ( Bean81V3BindMap . class . getName ( ) != null )
assertAccessorsCorrect ( multi , "maxSelect" , 3 , 5 , 6 )
assertTrue ( count1 . equals ( count2 ) )
assertEquals ( config . getOozieWorkflowConfig ( ) , event . getValue ( ) . getNewValue ( ) )
assertEquals ( "ISA01" , s . getElement ( "ISA01" ) )
assertTrue ( fileSystem . isClosed ( ) )
assertEquals ( "123涓���浜烘��卞����" , deserialize . readUTF ( ) )
assertTrue ( "Expected ComplexSchema hierarchy validation failure did not succeed" , hierarchySchema . validate ( hierarchyEntity ) )
assertEquals ( "Chemical structure search failed." , "Buthane" , foundName )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\\\\\t" } } ) ) )
assertThat ( mojo . flattenResources ( file ) , is ( false ) )
assertNotNull ( tm )
assertEqualsIgnoreWhitespace ( result , KnowledgeHelperFixerTest . fixer . fix ( raw ) )
assertThat ( result , is ( data ) )
assertEquals ( "id" , item . getId ( ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertNotNull ( cat )
assertEquals ( expectedPanel , actualPanel )
assertTrue ( "testSnappyBlockCompression error !!!" , out . toByteArray ( ) . length > 0 )
Assert . assertEquals ( "0" , sut . objectToString ( activity ) )
Assert . assertEquals ( rawInput , text )
assertEquals ( expected , elements )
Assert . isTrue ( organizations . size ( ) > 0 )
assertEquals ( "the_string" , obj )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : from the rule link" ) )
assertEquals ( "涓���" , value )
assertEquals ( 1 , Evaluator . evaluate ( ex ) . getDimension ( ) )
assertThat ( result , equalTo ( "setDValue" ) )
assertEquals ( expected , model )
assertEquals ( "setter password expected" , "PaZZwor6" , user . getPassword ( ) )
assertEquals ( "root.parentq" , policy . assignAppToQueue ( "root.default" , "user1" ) )
assertOut ( "id=\\"myBtn\\"" )
Assert . assertEquals ( expectedIp , AgentUtils . findIpAddress ( NIOUtils . DEFAULT_NETWORK_NAME ) )
assertNullOrEquals ( "remark" , "Pulkovo 1995��" , crs . getRemarks ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( biography , dbAbba . getBioSummary ( ) )
Assert . assertEquals ( "<a-b-a>" , eval ( ) )
assertThat ( jdbcSource , nullValue ( ) )
assertFalse ( "Wrong result" , handler . containsMessageSubstring ( 0 , message . substring ( 1 ) ) )
assertThat ( result , is ( equalTo ( ( List < String > ) of ( "AA" , "BB" ) ) ) )
assertEquals ( world , result )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( false ) ) )
assertNotNull ( result )
Assert . assertEquals ( string , table . getFilterVar ( ) )
assertEquals ( error , "UUID passed in is not a valid UUID" )
assertEquals ( states . size ( ) , 2 )
assertTrue ( res instanceof AliasType )
assertEquals ( ExpressionFactory . inExp ( "path" , Arrays . asList ( artist1 , artist2 ) ) , exp )
assertEquals ( jsonFromObject , jsonFromString )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
Assert . fail ( "Exception expected" )
assertFalse ( isValid )
assertThat ( unix ( instance , strategy ) , equalTo ( "ec2-0-0-0-0.compute-1.amazonaws.com" ) )
assertEquals ( false , result )
assertThat ( employee . getSalary ( ) , is ( 100.50D ) )
assertThat ( request . getTimestamp ( ) , equalTo ( now ) )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertThat ( advisor . getAdvice ( ) , instanceOf ( TpicPreAdvice . class ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemProdutoCombustivel ( ) . toString ( ) )
assertNull ( _poolDeviceMap . getOrCreateDS ( name , 0 , ip ) )
assertTrue ( "exp(" + arg + ") is " + vFM + " instead of " + vM , Precision . equalsIncludingNaN ( vM , vFM ) )
assertEquals ( 20 , digits . size ( ) )
Assert . assertEquals ( "Hello World!" , result )
assertTrue ( resultComparator . compare ( od1 , od2 ) < 0 )
assertEquals ( 2 , nuOfType1Vehicles )
assertEquals ( "two undecillion" , actual )
assertThat ( model2 . getMyBytes ( ) , is ( value ) )
assertEquals ( "Block size" , 16 , ecipher . getBlockSize ( ) )
assertEquals ( "Compression/Decompression error" , inputLine , readLine )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( actionsTriggered . get ( ) )
assertEquals ( objectId , transMeta . getObjectId ( ) )
assertThat ( underTest . buildWhere ( queryOptions ) , is ( equalTo ( CONTENT_AUTH_WHERE ) ) )
assertThat ( ramlResponse . getBody ( ) . getBytes ( ) , equalTo ( values . asBytes ( ) ) )
assertions . isSorted ( )
assertEquals ( htmlDoc , new String ( output ) )
arrays . assertDoesNotContain ( description , actual , null )
assertEquals ( "Unexpected status code in HTTP response." , SC_UNAUTHORIZED , statusCode )
assertFalse ( validatorLoadbalancer . validate ( meta , POST ) . passedValidation ( ) )
assertEquals ( 20 , result )
Assert . assertThat ( instance . getId ( ) , Matchers . is ( "natural key" ) )
assertEquals ( "value" , entry . getValue ( ) )
assertNull ( cut . getJobResource ( resource . getID ( ) ) )
assertNotNull ( WorkerChannel . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "{\\"@context\\":\\"../../$metadata#ESMixPrimCollComp(32767)/" + "PropertyComp/olingo.odata.test1.CTBase\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\
assertEquals ( "<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>" , doc . body ( ) . html ( ) )
assertTrue ( usl . getWidth ( ) == 2.5 )
assertEquals ( "user1" , decoded . getUid ( ) )
assertEquals ( expectedOutput , timeConversion . getFormattedTime ( input . split ( ":" ) ) )
assertTrue ( container . getItemIds ( ) . contains ( id ) )
assertEquals ( expResult , result )
Assert . assertTrue ( newSql . equals ( "SELECT * FROM cpcplan" + suffix + "@dblink WHERE name = '12'" ) )
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\\"$or\\":[{\\"username\\":{\\"$regex\\":\\"Mistic$\\"}}]}" )
assertEquals ( LibUsb . SUCCESS , LibUsb . init ( context ) )
assertNotNull ( "Empty command must not be thrown" , e )
assertEquals ( "Null should be compatibilized to 0" , 0 , val )
assertEquals ( "city" , city . toString ( ) )
assertThat ( result , equalTo ( false ) )
assertEquals ( new ArrayList < > ( Arrays . asList ( new Tag ( "myInvalidTag" , "" ) ) ) , tagsList )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( renderer . getClass ( ) , is ( typeCompatibleWith ( JXComboBox . class ) ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . resolveVisibility ( "unknown" ) )
assertEquals ( "Table should be populated by 3 announcements" , 3 , controlPage . announcementsTableSize ( ) )
assertNull ( subject . preProcess ( "sql" , mock ( Statement . class ) , mock ( ResultSetInternalMethods . class ) , mock ( Connection . class ) , 0 , true , true , null ) )
assertEquals ( "b7" , r )
org . junit . Assert . assertEquals ( expected , actual )
assertFalse ( rootNode . isAuthenticationEnabled ( ) )
assertEquals ( PERSON_COUNT , personCount )
assertEquals ( 2 , branch_conditions . size ( ) )
assertEquals ( TEST_MD5 , computedDigest )
Assert . assertEquals ( expected , actual )
context . assertSentrySemanticException ( statement , "create view view1 as select a from " + DB1 + ".tb1" , semanticException )
assertThat ( result , is ( Collections . singletonList ( "isMyField" ) ) )
assertThat ( specification . getUnits ( ) , is ( BYTE . multiply ( 1L << 50 ) ) )
Assert . assertEquals ( password , expected , computed , 0.000000000000001 )
assertEquals ( 2 , jobsToSubmit . size ( ) )
assertThat ( studies . size ( ) , is ( 0 ) )
assertThat ( score > 0.0f , is ( true ) )
assertEquals ( ServiceState . DISABLED , svc . getState ( ) )
assertEquals ( "SELECT f1, f2 FROM Class" , q . toString ( ) )
assertNotNull ( "Failed to create spacer" , hGrowSpace . createSpacer ( hFixedSpace , vGrowSpace ) )
Assert . assertTrue ( filter . filterInvalidEntities ( ) )
assertTrue ( dnsCache1 . equals ( dnsCache2 ) )
assertEquals ( SchemaFromSubfield2 . class , field . getDefinition ( ) . getFieldIndexer ( ) . getClass ( ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 1000 ) , parsed )
assertTrue ( "Checkout method did not return true." , action . checkout ( launcher , workspace , "viewname" ) )
assertThat ( estimator . getCardinality ( ) , is ( 0L ) )
Assert . assertTrue ( JexlASTHelper . equals ( one , two ) )
assertThat ( connection , is ( notNullValue ( ) ) )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 1E-1 )
assertTrue ( rem . equals ( new LineParameters ( new Color ( 51 , 85 , 102 ) , 1.0 , .5 , "" ) ) )
assertEquals ( 12 , clock . get ( ) )
Assert . assertTrue ( "We should get 2 documents filtered for /module2" , count == 2 )
assertThat ( getWindowHeaderMarginRight ( ) , is ( "37px" ) )
assertThat ( elasticSearchDownloader . createQuery ( ) . toString ( ) , containsString ( QUERY ) )
assertThat ( source . getRetryLimit ( ) , is ( i ) )
assertAnnotations ( 1 , Location . class , new TestEntity < > ( 0 , "Sam" ) )
Assert . assertEquals ( expectedResult , result )
assertHasFooMethod ( dst , dstClass )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
assertEquals ( 6 , count )
assertEquals ( "SetArgs{langs=en,fr}" , setArgs . toString ( ) )
assertTrue ( printError ( report ) , report . hasItems ( ) )
assertEquals ( 0 , pairs . size ( ) )
assertNotNull ( builder )
assertNotNull ( result )
assertNoGerritEventListeners ( PluginImpl . getInstance ( ) . getServer ( PluginImpl . DEFAULT_SERVER_NAME ) )
Assert . assertEquals ( Integer . valueOf ( 9 ) , f . getLowestRanked ( ) . getValue ( ) )
assertEquals ( 3 , result )
assertTrue ( serviceWadl . length ( ) > 0 )
Assert . assertNotNull ( users )
assertEquals ( expectedRegister , newRegister )
assertEquals ( expResult , result )
assertEquals ( "um milh茫o e cento e cinquenta inteiros e novecentos e noventa mil茅simos" , actual )
assertNotNull ( getStdOut ( ) )
Assert . assertEquals ( "<Times><CreationTime>2016-01-15T00:00:00</CreationTime><ExpiryTime>2016-01-16T00:00:00</ExpiryTime><LastModificationTime>2016-01-18T00:00:00</LastModification
assertThat ( prefixDeclarations . size ( ) , is ( 2 ) )
assertTrue ( ret )
assertEquals ( "Mr. Horatio Test Hornblower" , providerAttribute . getProvider ( ) . getName ( ) )
assertThat ( queen , is ( board . getChessBoard ( ) [ startRow - 1 ] [ startCol - 1 ] . getFigure ( ) ) )
assertArrayEquals ( new int [ ] { 12345 , 54321 , 678768 } , factory . createDummy ( new ClassBindings ( ) ) )
assertEquals ( expected , Util . underscoredToJava ( "propNameIdentifier123" , false ) )
assertEquals ( expectedResult , result )
Assert . assertTrue ( "Capacity did not shrink!" , ( ( CapacityBalancingEvictor < Integer > ) evictor ) . getCapacity ( ) < 10 )
assertEquals ( map . size ( ) , n * nThreads )
Assert . assertEquals ( xml , FabricaDeObjetosFake . getNFEnvEvento ( ) . toString ( ) )
assertEquals ( 5 , sum )
assertEquals ( expResult , result )
assertThat ( connection , instanceOf ( NoopConnection . class ) )
assertTrue ( AuthzResolver . authorizedInternal ( session , "test_security_admin" , Arrays . asList ( createdTeam ) ) )
assertThat ( formatter . format ( PlainDate . of ( 1752 , 9 , 13 ) ) , is ( "Jetzt" ) )
assertTrue ( "Failed to match with compatible IPv6 subnet with hexadecimal notation." , match )
Assert . assertNotNull ( "no result row created" , resultRow )
Assert . assertTrue ( _c . canConvertTo ( Long . class ) )
assertNotNull ( service . prepare ( query ) . asSingleEntity ( ) )
assertEquals ( "foobar" , s )
assertTrue ( intercepted . get ( ) )
assertThat ( status , is ( 201 ) )
assertFalse ( result )
Assert . assertNotNull ( migrationPlan )
N4CliHelper . assertExpectedOutput ( "express properties: application, request, response, Route, Router, query, static" , out )
assertEquals ( 3 , cheeses . size ( ) )
Assert . assertEquals ( expected , actual , TOl )
assertEquals ( registerList . getRegisterList ( ) , set )
assertThat ( MomentInterval . parseISO ( "P4DT1H45M/2012-04-05T16:00Z" ) , is ( expected ) )
assertTrue ( entities . size ( ) == 1 )
assertThat ( crownStreetAddress . equalsContent ( rileyStreetAddress ) , is ( false ) )
assertEquals ( "Number of history entries are incorrect" , 0 , changes . size ( ) )
assertTrue ( RangeDefinition . docSpecific ( docSpecificRange ) )
assertTrue ( jobConfig . exists ( ) )
assertRollupBeanValidation ( json , "rangeAggregator must be set" )
assertTrue ( reader . isLost ( ) )
assertTrue ( set . isEmpty ( ) )
assertThat ( document , notNullValue ( ) )
Assert . assertNull ( session , "No session should have been created when proxy set is empty" )
Assert . assertEquals ( expected , actual )
assertEquals ( s , r . toString ( ) )
assertThat ( innstillinger . hasNoErrors ( ) , is ( false ) )
assertEquals ( captureStackTrace ( original ) , captureStackTrace ( imposter ) )
assertEquals ( actual , expected , "Wrong substitution" )
Assert . assertEquals ( 1 , statistics . size ( ) )
assertNull ( customPanelDef . getParent ( ) )
assertions . isNotEmpty ( )
assertEquals ( "Response HTTP status code should be 200 (OK)" , clientResponse . getStatus ( ) , 200 )
assertTrue ( CollectionUtils . diff ( correctResults , results ) . isEmpty ( ) )
Assert . assertEquals ( "G9JYBOMPUXHYHKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVVOGKPJBVBM9TDPULSFUNMTVXRKFIDO
assertEquals ( "om 3 uger" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertSame ( shouldFind , selection . textInput ( By . id ( "test" ) ) )
XMLAssert . assertXMLEqual ( "Invalid content received" , content , result . toString ( ) )
assertEquals ( "" , p01 . getContent ( ) )
assertNull ( "The searched node should be null" , searchedNode )
assertEquals ( pkgId , cache . getPkgId ( orgName , pkgName ) )
assertThat ( value , isOneOf ( "55/44" , "45/54" ) )
assertEquals ( 1 , dao . findByDemographicNo ( 1 ) . size ( ) )
assertThat ( bufferedEvents . size ( ) , equalTo ( 1 ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( "error message not equal" , "type value is not a valid job type" , message )
assertEquals ( DummyModel . where ( new Object [ ] { "column1" , "test123" , "column2" , "test1234" } ) , Arrays . asList ( model ) )
assertEquals ( actual1 , actual2 )
assertArrayEquals ( plaintext , result )
assertSeen ( visible )
assertNotEquals ( r1 , r2 )
Assert . assertEquals ( clickMe . getText ( ) , buttonText )
assertEquals ( docs . getResults ( ) . size ( ) , 2 )
assertEquals ( keyExpected , keyBuilt )
testRunner . assertAllFlowFilesTransferred ( EncodeContent . REL_FAILURE , 1 )
assertSame ( "control" , choice . get ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( postResponse . getStatus ( ) , is ( 400 ) )
assertFalse ( checker . isFormat ( stream ) )
assertUndeployed ( COMPONENT_NAME )
assertThat ( description . toString ( ) , is ( "an Optional that's empty" ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , target . request ( MediaType . TEXT_PLAIN ) . get ( ) . getStatus ( ) )
Assert . isTrue ( grade . getEmployments ( ) . size ( ) > 0 )
assertSame ( initialProperties , contextParameterResolver . resolve ( parameter , applicationContext ) )
assertEquals ( 0.0 , rmsd , 0.0001 )
assertTrue ( Modifier . isPrivate ( c . getModifiers ( ) ) )
assertEquals ( 1 , commandDocument . getCommands ( ) . size ( ) )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == 0 )
assertThat ( matcher . matches ( mockResponse ) , is ( false ) )
assertEquals ( "d 42\\n" , found )
assertThat ( count , is ( 6 ) )
Assert . assertEquals ( "12345" , defaultJobIdPartitioner . getPartition ( "12345" ) )
assertHeader ( TENANT_POLL_HEADER , TENANT_POLL_SUCCESS )
assertEquals ( adminServletPath , HystrixPlugins . getInstance ( ) . getAdminPath ( ) )
assertEquals ( "1\\n2\\n3\\n4\\n5\\n" , drl )
assertEquals ( 0 , counter )
Assert . assertEquals ( expectedList , customerDAO . getAll ( ) )
assertEquals ( "<a href=\\"" + BASE_URL + "#dest1?a=b&amp;c=d\\">Link&amp;1</a>" + "<a href=\\"http://xyz/abc?x=y&z=w\\">Link&amp;
Assert . assertNotNull ( json . getString ( "startFollowingResource" ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertEquals ( "aTestString" , classUnderTest . getSchemaName ( ) )
assertCompletionsDisplayString ( "my.background=<*>" , "color:" , "default" , "background:" )
assertThatCellReaderWasCalled ( )
assertEquals ( "璁＄����璇�" , 1 , rs )
assertArrayEquals ( new String [ ] { "1.2.40.0.13.1.1.99.27.1.1" } , matches ( query , Tag . SOPInstanceUID ) )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertEquals ( "/db/a/" , xmldbURI . resolveCollectionPath ( uri ) . toString ( ) )
assertEquals ( "Failed on i = " + i , x , ret )
Assert . assertNotNull ( out . getD15 ( ) )
Assert . assertFalse ( "Get Profile  returned no results" , json . isEmpty ( ) )
Assert . assertEquals ( decryptedStringExpected , decryptedStringActual )
Assert . assertEquals ( "亘毓丿 �丨馗丕鬲" , t . format ( new Date ( 0 ) ) )
assertEquals ( expected , service . getTimestampInSeconds ( ) )
Assert . assertTrue ( response . getStatus ( ) == OK . getStatusCode ( ) )
assertEquals ( expected , result )
assertFalse ( "empty data source contains records" , it . hasNext ( ) )
assertThat ( serializeWith ( dateTime , formatter ) , containsString ( dateTime . format ( formatter ) ) )
assertEquals ( "1,9223372036854775807,-9223372036854775808" , s . serialize ( ( HttpPartSchema ) null , new Short [ ] { new Short ( ( short ) 1 ) , Short . MAX_VALUE
assertEquals ( "parameterValue" , cli . parameter . some_changelog_parameter )
Assert . assertEquals ( 0 , ret )
assertEqualsIgnoreLineEnding ( xmlString , "<?xml version='1.1' encoding='UTF-8'?><string>" )
assertFalse ( "Configuration is empty" , plist . isEmpty ( ) )
assertEquals ( VALID_DIR , mockPrefHandler . getPref ( PREF_KEY_LAST_TRACE_DIR ) )
assertThat ( subtree . isEmpty ( ) , is ( true ) )
assertThat ( entity . awakeFromInsertionCount ( ) , is ( 1 ) )
assertNotNull ( result )
assertTrue ( isCorrectEnqLinkRequest )
assertTrue ( payload . needsBuild ( getProject ( ) ) )
runner . assertAllFlowFilesTransferred ( TailFile . REL_SUCCESS , 1 )
Assert . fail ( "exception expected" )
assertSelected ( get ( 0 ) , get ( 1 ) )
assertEquals ( - 1 , aNumber . compareTo ( bNumber ) )
assertEquals ( scale ( value ) , ra . get ( ) . get ( ) )
assertEquals ( p1 . getPaintingId ( ) , p1 . getPaintingId ( ) )
assertNotNull ( ds . getAvailableDataStoreList ( ) )
assertEquals ( "...lead <td> a </td> tail..." , example . toString ( ) )
assertEquals ( Result . FAIL , name . apply ( item , - 1 ) )
assertEquals ( 1 , result . size ( ) )
Assert . assertEquals ( "Stylesheet contains two rules" , 2 , ss . size ( ) )
assertTrue ( isContainerPrincipalTypeInResponse ( resp , true ) )
assertNull ( "Required profiles is not null" , new KnopflerfishPlatformBuilderF300 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertEquals ( NaCl . Sodium . CRYPTO_PWHASH_SCRYPTSALSA208SHA256 , result )
assertNull ( song . getName ( ) )
assertThat ( result , is ( Boolean . valueOf ( true ) ) )
assertThat ( encryptedPasswordPass1 , not ( equalTo ( encryptedPasswordPass2 ) ) )
assertThat ( readFile ( pom1 ) , equalTo ( readFile ( settings ) ) )
assertEquals ( "en" , metadata . getLanguage ( ) )
assertAnnotations ( 1 , Coordinate . class , new TestCoordinate ( 0 , "GR SU 02194 45374" , "s" , "{\\"type\\": \\"Point\\", \\"coordinates\\": [-5.071352,56.808457]}" ) )
assertEquals ( true , results . contains ( "[INSERT], Return=OK, 1" ) )
assertDepth ( "addSubTree" , callTree , expectResult )
assertArrayEquals ( expected , actual , DELTA )
Assert . assertNotNull ( dataSourceFactory )
assertEquals ( "urn:collab:group:test.surfteams.nl:surfnet:diensten:hallo" , group20Entry . getUrn ( ) )
assertEquals ( s , bs . getSheep ( ) )
assertEquals ( "Hello, Earth!" , config . getString ( DEFAULT_CONTAINER , "expression" ) )
assertThat ( response . getStatus ( ) , is ( 200 ) )
assertDownLoadAndInstallMessage ( distributionSet . getModules ( ) , controllerId )
assertThat ( r . hasUnrestrictedChild ( LIST , FsPath . ROOT ) , is ( equalTo ( false ) ) )
assertEquals ( Unpooled . buffer ( ) , actual )
assertEquals ( expected , test )
assertTrue ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , STARTING_BYTE_OF_2_BYTE_CHAR ) )
assertSqlCanBeParsedAndDeparsed ( statement )
Assert . assertEquals ( "Hello NAR World!" , app . sayHello ( ) )
assertEquals ( expResult , result )
assertEquals ( 1 , dataset . getDefaultModel ( ) . size ( ) )
assertEquals ( expected , cacheManager . resolveDefaultMaxSize ( ) , 1e-9 )
assertEquals ( "$metadata#ESAllPrim(*)" , ContextURLBuilder . create ( contextURL ) . toASCIIString ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( actualEnums , is ( expectedEnums ) )
assertNull ( object )
assertEquals ( 0 , deployments . size ( ) )
assertEquals ( doc1 , io . getDocument ( q1 ) )
assertEquals ( LocalDate . now ( zone ) . getDayOfYear ( ) , test . getValue ( ) )
assertEquals ( expected [ i ] [ y ] [ x ] , ra . get ( ) . get ( ) , 0 )
assertErrorEventDefinition ( "end" , "myErrorCode" )
assertEquals ( expected , resource . getAllIds ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "foo" , result )
assertTrue ( ic . imageEqualToReference ( screenshotImage , referenceImage , "google1-masked.png" , 0.16 ) )
mini . assertReadFile ( mini . getLocalFs ( ) , fileSpec , "1;one" , "2;two" )
Assert . assertTrue ( billingService instanceof BillingPreCalculation )
assertEquals ( expected , actual )
assertArgumentParserException ( args )
assertTrue ( true )
assertEquals ( tmap , readValue )
assertOut ( "var a:String = unescape('%25')" )
assertThat ( ( TraceeBackend ) FieldAccessUtil . getFieldVal ( interceptor , "backend" ) , is ( Tracee . getBackend ( ) ) )
assertTrue ( page . asXml ( ) . contains ( "Current component should be a text" ) )
assertEquals ( 1 , groupsToBeProxied . size ( ) )
assertEquals ( layerId , result )
assertEquals ( 1 , saved . getUpdatesCount ( ) )
assertEquals ( session . getRootNode ( ) . getNodes ( ) . getSize ( ) , 2 )
assertThat ( isTransactionRelated , is ( false ) )
assertThat ( subject . isShortHand ( ) , is ( true ) )
assertTrue ( ( Boolean ) result )
assertThat ( ClockInterval . parse ( "0720/24" ) , is ( interval ) )
assertEquals ( "public static void main(String[] args) {}" , actualContent )
assertThat ( injector . getInstance ( Key . get ( TestConfiguration . class ) ) , is ( expectedConfiguration ) )
assertEquals ( "Hello there^^^^" , ResponseBodyInterpolator . interpolate ( "Hello there^^^^" , req ) )
assertTrue ( CCJSqlParserUtil . parse ( sql ) instanceof Select )
assertTrue ( xml . matches ( "(?i)<\\\\?xml.*?version=\\"10.17\\">.*" ) )
assertDeepEquals ( copy , map )
result . assertErrorFreeLog ( )
assertThat ( actual , is ( equalTo ( "/ab/CD" ) ) )
Assert . assertFalse ( "Failure expected true" , r . getLeft ( ) )
assertThat ( target , is ( notNullValue ( ) ) )
assertEquals ( "master" , job . getBranch ( ) )
assertEquals ( 1 , result . getTotalHits ( ) )
assertThat ( CollectionUtil . join ( list , ", " ) , is ( "\\"Aaa\\", \\"Bbb\\", \\"Ccc\\"" ) )
assertFailureValue ( "value of" , "array.length" )
assertEquals ( "endLoc" , v . getEndLocation ( ) . getId ( ) )
Assert . assertEquals ( "Hallo 'Test'" , I18N . gettext ( "'Test'" ) )
assertEquals ( "[1,2,3]" , returnResult . get ( RETURN_RESULT ) )
assertTrue ( val . isPresent ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( "gzip" , decorator . name ( ) )
Assert . assertTrue ( true )
assertEquals ( "TEST." , result )
assertLife ( playerB , 2 )
Assert . assertThat ( control , is ( - 7 ) )
assertNotNull ( connection )
assertTrue ( ( boolean ) AviatorEvaluator . execute ( "100000000000000000000.0/3.0" ) )
assertTrue ( latch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "library.xqm" , mainSource . getFilename ( ) )
assertNull ( request . getVisitorRegion ( ) )
assertTrue ( road . equals ( road2 ) )
Assert . assertEquals ( 0 , stats . getNumEvents ( ) )
assertEquals ( "unsortable column must be unsorted" , SortOrder . UNSORTED , table . getSortOrder ( 0 ) )
assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd'T'HH" ) . format ( dt ) , new SimpleDateFormat ( "yyyy-MM-dd'T'HH" ) . format ( dueDate ) )
assertThat ( actual , is ( expected ) )
Assert . assertTrue ( lrsRes . getSuccess ( ) )
Assert . fail ( "Exception should have been thrown" )
assertEquals ( expected , actual )
Assert . assertEquals ( expected , actual )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"author\\":\\"Nigel Rees\\",\\"title\\":\\"Sayings of the Century\\"," + "\\"price\\":8.95},{\\"category\\":\\"fiction\\",\\"author
assertEquals ( "JOHN + SUPERCLASS HOOK" , object . getName ( ) )
arrays . assertContainsSequence ( description , actual , sequence )
assertTrue ( result . getBounds ( ) . equals ( nonEmpty . getBounds ( ) ) )
assertSame ( expected , result )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( out . exists ( ) , is ( false ) )
assertTrue ( FileUtil . compare ( destDir , f1 . getFileSystem ( ) . getPath ( ) , f2 . getFileSystem ( ) . getPath ( ) ) )
assertEquals ( Arrays . asList ( "a" ) , results )
assertEquals ( 1_8_000 , version )
assertTrue ( "truth should be empty" , truth . isEmpty ( ) )
assertNull ( song . getName ( ) )
assertEquals ( TestClass . class . getName ( ) , service . logger . getName ( ) )
assertFalse ( sut . execute ( request ) )
assertEquals ( "This is a value spread out across two adjacentnatural lines " + "by escaping the line terminator with a backslash character." , parseProperty ( property ) )
assertEquals ( response . getStateToken ( ) , getSiteAdminShortName ( ) )
Assert . assertEquals ( false , retval )
assertEquals ( topicsPage . getTotalPages ( ) , pageCount , "Incorrect page count." )
assertEquals ( expectedPolicy , builtPolicy )
assertTrue ( true )
assertEquals ( obj . toString ( ) , "LP_QUERY_SERVICE_CONFIG_W{DwServiceType:1,DwStartType:2,DwErrorControl:3,DwLoadOrderGroup:4,DwTagId:4,LpDependencies:[S
Assert . assertEquals ( ipvo . getIp ( ) , ip . getIp ( ) )
assertNotNull ( entity . getId ( ) )
assertNotNull ( field )
assertTrue ( conn . prepareBooleanQuery ( QueryLanguage . SPARQL , "ask { ?s xxx:name \\"Alice\\" } " ) . evaluate ( ) )
assertFalse ( permissionService . hasPermission ( 0 , AclClassName . BRANCH , GeneralPermission . READ ) )
Assert . assertEquals ( "API ID" , spanEvent . getApiId ( ) , API_ID )
assertEquals ( 4 , bs . capacity ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertTrue ( "selected lower bound" , model . isSelected ( today ) )
assertEquals ( null , emptySerializable . asOptional ( ) )
assertEquals ( Double . valueOf ( 2.5 ) , day . inverse ( ) . getValue ( ) )
Assert . assertEquals ( "" , json , winphone . toJSON ( ) )
assertTrue ( connection ( ) . exists ( RDFS . Resource , RDF . type , ex2 , null , false ) )
assertEquals ( numWatchersToStart - 2 , consumersListOfActiveWatchers . size ( ) )
Assert . assertEquals ( IsolationLevels . SERIALIZABLE , connection . getIsolationLevel ( ) )
assertSame ( first , f . apply ( first , second ) )
assertEquals ( "longitude" , variableName )
Assert . assertTrue ( in . verifyDigest ( digestPos , handshakeBytes , RTMPHandshake . GENUINE_FMS_KEY , 36 ) )
files . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( "[" + OPERATION + "]" , EndpointUtil . decodeEndpointURIWithOp ( result ) )
assertTrue ( validator . isValid ( "79927398713" , null ) )
assertEquals ( "Wrong list property" , list , conf2 . getProperty ( prop ) )
assertEquals ( "0 0 5 *" , result )
assertEquals ( functionImportList . size ( ) , 0 )
assertEquals ( expected , cronExpr . nextTimeAfter ( after ) )
assertThat ( logger1 . getName ( ) , is ( logger2 . getName ( ) ) )
Assert . assertFalse ( s . containsPrivateIdentifiableInformation ( ) )
assertArrayEquals ( result , authed )
assertEquals ( "geo shape condition serialization is wrong" , expected , actual )
assertEquals ( "a b\\n" , found )
assertTrue ( new File ( "target/export11" ) . exists ( ) )
Assert . assertEquals ( 0 , analyser . getTimeWindowViolationAtActivity ( route . getStart ( ) , route ) , 0.01 )
assertThat ( accessor . isMutable ( ) , is ( false ) )
assertThat ( results , is ( new String [ ] { "%Hello, world!" } ) )
assertNotNull ( metadata )
assertThat ( read ( format , written ) , contains ( 1.25f ) )
assertEquals ( p1 . element0 ( ) . payload ( ) . array ( ) . length , m2 . payload ( ) . array ( ) . length )
assertNotNull ( deviceRegistration . getAttestationCert ( ) )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( ( a , b ) -> x + a + b ) . intValue ( ) )
assertEquals ( expected , actual )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( labels [ i ] , rlg . nextLabel ( ) )
Assert . assertEquals ( "dog" , result . get ( "dog" ) )
assertThat ( cut . getNumberOfFields ( ) , is ( 2 ) )
assertEquals ( "case when (cat.toes = ?1) then ?2 when (cat.toes = ?2) then ?3 else ?4 end" , serializer . toString ( ) )
context . assertEquals ( patternStr . hashCode ( ) , pH . hashCode ( ) )
assertEquals ( 0 , content . refCnt ( ) )
assertEquals ( asList ( trace ( mdcValues , marker , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "The value is not correct." , date , value )
assertEquals ( times , result )
assertEquals ( 0 , project . getBuildConfigurations ( ) . size ( ) )
assertEquals ( "Revoke on " + change . getObjectName ( ) + " have been given to " + change . getRecipientList ( ) , change . getConfirmationMessage ( ) )
Assert . assertEquals ( expectedJsonTree , actualJsonTree )
assertEquals ( "TEXT" , sb . toString ( ) )
Assert . assertEquals ( expectedResult , result . getValue ( ) )
AssertEx . assertDoubleEquals ( 10.5 , dist )
Assert . assertEquals ( 10 , properties . getUpdatesCount ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
Assert . assertTrue ( length <= id . length ( ) )
assertEquals ( 2 , context . getTableCount ( ) )
assertEquals ( 0 , weakMap . size ( ) )
Assert . assertThat ( bs . getMassive ( ) , is ( control ) )
assertEquals ( stateless , stateful )
assertEquals ( expectedClientConfig , actualClientConfig )
assertEquals ( "null" , sb . toString ( ) )
assertEquals ( false , result )
assertEquals ( "fooValue" , entity . getValue ( ) )
assertEquals ( 0 , result )
assertEquals ( expResult , result )
assertSerializeDeserialize ( ext )
context . assertEquals ( 1 , types . size ( ) )
assertDecimalEquals ( dup . getValue ( 1 ) , 16 )
assertTrue ( denormalizer . denormalization ( "studentSectionAssociation" ) . create ( entity ) )
assertFalse ( rpcException . hasErrorCode ( ) )
assertThat ( ClockInterval . parse ( "0720/24" , ChronoFormatter . ofTimePattern ( "HHMM" , PatternType . CLDR , Locale . US ) , plog ) , is ( interval ) )
assertEquals ( "#foo" , fStep . generateHtml ( ) )
assertFalse ( pgql . parse ( query ) . isQueryValid ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertContains ( e . getMessage ( ) , "'name'" )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 } , event . getValues ( ) )
Assert . assertEquals ( HiveRunnerConfig . TIMEOUT_SECONDS_DEFAULT , config . getTimeoutSeconds ( ) )
assertEquals ( expected , chunks . next ( ) )
assertTrue ( "Checking hasChildChanged returns true for updated child" , _scs . hasChildChanged ( METRIC_NAME ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( copyBuilder . build ( ) . getParams ( ) , request . getParams ( ) )
assertEquals ( expResult , result )
assertNotNull ( user . getError ( ) )
assertTrue ( ic . imageEqualToReference ( screenshotImage , referenceImage , "google1-masked.png" , 0.16 ) )
Assert . assertEquals ( String . format ( "some %s" , this . html ( bb , "10" , "sized" ) ) , formatter . format ( "some [size=10]sized[/size]" , defaultOptions ( ) ) )
Assert . assertEquals ( activity , resolved )
assertTrue ( requestResult )
Assert . assertEquals ( "should be second string" , string2 , actual )
assertTrue ( filter . shouldInclude ( source , "config" ) )
Assert . assertEquals ( config . getTheClazz ( ) , Object . class )
Assert . assertEquals ( "getShardName" , TestModel . TEST_SHARD_NAME , reg1 . getShardName ( ) )
functions . as ( extractor )
assertFalse ( row . equals ( otherRow ) )
iterablesWithCaseInsensitiveComparisonStrategy . assertContainsAnyOf ( someInfo ( ) , actual , array ( "luke" ) )
assertEquals ( "_cat/allocation?h=shards%2Cdisk%2Cindices%2Cdisk%2Cused" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertThat ( lines , hasSize ( 1 ) )
assertEquals ( 100 , keyCount . get ( ) )
assertEquals ( "Result" , dt . getDatatypeURI ( ) , RDFS . xsddouble )
assertEquals ( "%level - %m%n" , layout . getConversionPattern ( ) )
assertTrue ( analysis . isTestPassing ( ) )
assertEquals ( "recoveredResult must be Success(84)" , recoveredResult , new Try . Success < > ( 0 ) )
assertThat ( gpxEntries . size ( ) , equalTo ( 3 ) )
assertTrue ( drugs . isEmpty ( ) )
assertThat ( result , contains ( likeTriple ( ANY , uri ( "http://www.example.org/1" ) , uri ( "http://www.example.org/2" ) ) ) )
assertTrue ( true )
assertSame ( Code . ERROR , res . code ( ) )
assertLine ( "dogfishhead \\ngreat lakes brewery" , b , true )
assertNull ( schemaRegistry . getHostnameVerifier ( ) . verify ( null , null ) )
assertEquals ( msg , myMessage )
assertEquals ( model , RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "ItemDocument.rdf" ) ) )
assertNull ( "Certificate should be null" , cert )
assertEquals ( expectedMessage . toString ( ) , rawTranslation )
assertSame ( MockChooser1 . class , delegate . getClass ( ) )
assertThat ( new JcrValue ( factories , PropertyType . DATE , date ) . getDouble ( ) , is ( ( double ) date . getTime ( ) ) )
Assert . assertEquals ( "START TRANSACTION WITH CONSISTENT SNAPSHOT;" , text )
assertEquals ( expected , statement . toString ( ) )
assertEquals ( "{\\"thetag\\":{\\"group\\":\\"b\\",\\"name\\":\\"a\\"}}" , s )
assertEquals ( "Boolean" , result )
assertThat ( generated , is ( "{ ?P <eh:/P> ?v1 . }" ) )
Assert . assertFalse ( isOk )
assertEquals ( path , "/module/motechmodule/addfacility" )
assertEquals ( "We are testing..." , out )
assertThat ( beanClass , typeCompatibleWith ( ApplicationDecorator . class ) )
assertTrue ( true )
assertThat ( lines . size ( ) , is ( 4 ) )
assertNotNull ( method )
assertEquals ( expected , passwordEncoder . encode ( plainText ) )
assertEquals ( 0.5d , response , 0.0001d )
Assert . assertEquals ( ServerParse . REPLACE , sqlType )
assertEquals ( sparseRep , rep1 . toSparseFormat ( 11 ) )
assertEquals ( subThing , newThing )
assertEquals ( newEntry3 , res )
Assert . assertEquals ( "input and output must match" , expected , found )
assertSame ( descriptor , content )
assertEquals ( "UsernamePasswordToken [successfulUser1] successfulHost1" , TokenUtils . generateSuccessfulAuthenticationMessage ( successfulToken ) )
Assert . assertEquals ( 2 , s . getPriority ( ) )
assertEquals ( 0 , count ( graph . vertices ( ) ) )
assertEquals ( "7::" , result )
assertNotNull ( result )
assertEquals ( Bytes . asList ( new byte [ ] { 3 } ) , bytes ( producer . getValue ( ) . next ( ) ) )
assertEquals ( expectatedMessage . trim ( ) , e . getMessage ( ) . trim ( ) )
assertEquals ( false , context . isResult ( ) )
assertTrue ( this . filter instanceof BasicCyXmlFileFilter )
assertEquals ( "1" , getValue ( ) )
assertEquals ( 5. , Solutions . bestOf ( solutions ) . getCost ( ) , 0.01 )
assertEquals ( null , result )
assertTrue ( "Http authentication factory should be created" , ops . exists ( TEST_AUTHENTICATION_FACTORY_ADDRESS ) )
assertFalse ( id1 . equals ( null ) )
assertEquals ( 6 , tokens . size ( ) )
aggregatedExpectations . receiptSchedule ( receiptSchedule ) . aggregatedExpectation ( ) . uom ( uomRecord ) . aggregatedExpectation ( ) . uom ( uomRecord ) . qualityDiscountPercent ( "0.125" ) . aggregatedExpectation ( ) . uom ( uom
Assert . assertEquals ( obj . getDate ( ) . getTime ( ) , obj2 . getDate ( ) . getTime ( ) )
switchyard . assertModelValid ( )
assertThat ( nonSerializableResult , not ( nullValue ( ) ) )
assertions . isNull ( )
Assert . assertTrue ( ( byte ) 0 == _c . convert ( "" ) )
assertEquals ( "<table> <colgroup> <col> <colgroup><col> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </
Assert . assertEquals ( "Hello! World" , result )
Assert . assertEquals ( json , writer . toString ( ) )
assertEquals ( "Options should be equal to itself" , options , options )
assertTrue ( objAssociation . getConsistentEdmAssociationList ( ) . size ( ) > 0 )
assertColumnAfter ( statement , "column_after" )
assertFailureCatalogContains ( AsyncSuspendWithoutForgetBean . class , "should use complementary annotation.*(forget)" )
Assert . assertNotNull ( "ThreadName value is missing" , jsonObject . get ( "threadName" ) )
Assert . assertEquals ( new URI ( url + "/" + suffix ) , UriUtils . buildNewURI ( new URI ( url ) , suffix ) )
assertThat ( result . isPresent ( ) , is ( false ) )
assertTrue ( check )
Assert . assertEquals ( percolateQueryBuilder . getQuery ( ) , query )
assertEquals ( 0 , app . executeApplication ( args ) )
assertEquals ( "<soapenv:Envelope xmlns:soapenv=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:sns=\\"http://www.w3.org/2003/05/soap-envelope\\" xmlns:sns=\\"http://www.
Assert . assertEquals ( "should have found own permissions" , FilePermissionEnum . OWN , permissionEnum )
assertEquals ( "group:artifact:1.0.0:classifier" , model . toString ( ) )
assertThat ( expectedTextFound , is ( true ) )
Assert . assertEquals ( "eins zwei\\ndrei\\nvier\\nfuenf" , result )
Assert . assertEquals ( 2 , scenario . run ( ) . size ( ) )
Assert . notNull ( wschu )
assertTrue ( display . getText ( ) . toString ( ) . contains ( "0" ) )
assertEquals ( DummyLayout . DUMMY , encoder . toString ( ) )
assertFalse ( validator . validate ( certificateMapping , POST ) . passedValidation ( ) )
Assert . assertFalse ( "The filter should not have been initialized" , TestFilter . INITIALIZED )
assertEquals ( "1388538000000" , partition )
assertEquals ( "<csv-set><csv-record number=\\"1\\"><name>Erika Mustermann</name><email>e.m@ex.org</email></csv-record><csv-record number=\\"2\\"><name>Max \\"The Man\\" Must
assertEquals ( expectedDateString , actualDateString )
assertEquals ( 2 , violations . size ( ) )
assertEquals ( URI . create ( "http://localhost:8080/a/b/c?a=x&b=y#hi#hel lo" ) , u )
assertOut ( "<Button label=\\"Click me\\"></Button>" )
assertEquals ( "Hello" , ( ( BizException ) read ) . getMessage ( ) )
Assert . assertEquals ( "hello" , result . hello ( ) )
assertThat ( entityFromElasticSearch , is ( notNullValue ( ) ) )
assertThat ( actualAlgorithms , is ( expectedAlgorithms ) )
assertEquals ( 1 , issueTrackerService . getIssueTrackerTasks ( foundProject . getIssueId ( ) ) . size ( ) )
Assert . assertEquals ( bd , value )
assertTrue ( wallet . sendRequest ( req ) )
assertThat ( cut . apply ( pageObject ) , is ( true ) )
assertEquals ( "updatedName" , list . get ( 0 ) . getName ( ) )
assertTrue ( "yahoocn contacts are empty" , contacts . size ( ) > 0 )
assertFalse ( new NopolExample ( ) . isEmpty ( list ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( object . getClass ( ) . getName ( ) . replace ( '$' , '.' ) , is ( "com.example.WithOutFactory.Output" ) )
assertDefaultCategories ( categories )
assertEquals ( output , processed )
Assert . assertEquals ( vector , new Vector ( - 10 , - 10 , - 10 ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( "Message in conversation 1" , message2 . getContent ( ) , checkMessage . getContent ( ) )
assertEquals ( - 1L , nodeId . getId ( ) )
assertEquals ( OK_200 , testResponse . getStatus ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( 10 , result . getTotalCount ( ) )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( ) )
assertTrue ( violation )
assertEquals ( expResult , result )
assertTrue ( Arrays . equals ( array , t . split ( "-" ) ) )
assertEquals ( 3 , types . size ( ) )
assertTrue ( uri1 . equals ( uri2 ) )
assertThat ( t1 . atom ( 0 ) . name ( ) , is ( "tetrahedral" ) )
Assert . assertEquals ( expected , pluginForREST . getTypeName ( "test" , false ) )
assertEquals ( deleteReason , hpi . getDeleteReason ( ) )
assertTrue ( logger . isWarnEnabled ( ) )
assertNotNull ( amqpsConnection )
assertEquals ( expected , actual )
assertFalse ( filter . isActive ( ) )
assertSame ( testSubject , moved )
Assert . assertFalse ( consumeInfoList . isEmpty ( ) )
assertEquals ( "name" , name )
assertNotNull ( logStream1 )
assertTrue ( set2 . contains ( new Date2 ( 0 ) ) )
assertFalse ( syncOpt . isDbVersionPresent ( ) )
assertThat ( read ( tmp ) , is ( equalTo ( "Helles酶y" ) ) )
assertEquals ( resourceActivities . get ( "1" ) . getName ( ) , resource )
Assert . assertEquals ( "hello" , myBean . myMethod ( ) )
assertEquals ( expectedResult , result , 0.00001 )
assertNotEquals ( "Style has changed after button was toggled" , oldStyle , newStyle )
assertEquals ( HELLO_URI , uri . toASCIIString ( ) )
assertEquals ( "Should return maxInactiveInterval from HttpSession" , 100 , session . maxInactiveInterval ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 3 , warnings . size ( ) )
assertArrayEquals ( new String [ ] { "input" , "output" } , remaining )
Assert . assertTrue ( edOrgContextRights . isEmpty ( ) )
Assert . assertTrue ( "Number of entities: " + count , count == 2 )
assertEquals ( VALID , credentials . getStatus ( ) )
bytes . assertLessThan ( description , actual , expected )
assertEquals ( testPlaylist , playlist )
Assert . assertEquals ( expr , "Hello \\nDimitri" , value )
assertUnselectableDatesSelectedWhileHasValidSelection ( model )
assertNull ( person )
assertEquals ( "John Doe" , actual )
Assert . assertEquals ( null , actualValue )
assertTrue ( vs . getSpaceId ( ) > 0 )
assertEquals ( "bar" , indexSpec . getName ( ) )
assertNotEquals ( reindex1 , reindex2 )
assertEquals ( "Concrete Action" , value . asIs ( ) )
Assert . assertTrue ( "The re-generated and the read record do not match." , k1 . equals ( k2 ) && v1 . equals ( v2 ) )
assertTrue ( scrollUI instanceof GridLienzoScrollUI )
assertEquals ( s , r )
assertEquals ( "1.407" , version )
assertEquals ( file , VirtualDirTgz . getFilenameFromPath ( file ) )
assertEvidence ( evidence , 1 , 1 , 0 , 13 )
assertEquals ( "A,B" , f . toString ( ) )
assertThat ( text , equalTo ( "log.get_damage(Attacker, action, aim) {" + "\\n    // �械写胁械写� 泻��
assertThat ( validator . isValid ( ) , is ( true ) )
assertThat ( arguments . resolve ( null , null ) , contains ( "foo" , "bar" ) )
assertTrue ( Misc . containsNulls ( collection ) )
assertEquals ( Arrays . asList ( "1970-01-01" , "count" ) , getOutputStrings ( ) )
assertTrue ( method . getReturnType ( ) == Priority . class )
assertions . containsOnly ( values )
rule . assertScenarioEnded ( )
assertEquals ( Integer . valueOf ( 5 ) , reference . getRetries ( ) )
assertNull ( dao )
assertThat ( content , is ( equalTo ( numberOfElements ) ) )
assertThat ( getValues ( query ( "bla" , "mntner" ) , "key" ) , contains ( "bla-bla-mnt" ) )
assertTrue ( closed . await ( 5 , SECONDS ) )
Assert . assertNull ( req )
assertEquals ( expectedTimestamp , actualTimestamp )
Assert . assertEquals ( "org.phenotips.patientSheet.section.patient-info:Patient information,name,enabled,2" , s . toString ( ) )
assertEquals ( 400 , response . statusCode ( ) )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) , 0 )
assertEquals ( proxy . echoBack ( "hello" ) , "hello" )
assertEquals ( i1 , i2 )
assertArrayEquals ( new Object [ ] { 0 , 1 , 2 , 3 } , e . toList ( ) . toArray ( ) )
assertEquals ( infoDocumentoVO , infoDocumentoCSV )
assertEquals ( 0 , report . getItems ( ) . size ( ) )
assertTrue ( constraint . fulfilled ( iContext ) )
assertCoordinates ( 9 , TOP_Y - 1 )
Assert . assertEquals ( "Node{edge=FOO, value=null, edges=[]}" , node . toString ( ) )
org . junit . Assert . assertEquals ( expected , actual )
assertEquals ( 200 , clazz . getResponseCode ( ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertTrue ( children . isEmpty ( ) )
assertions . isNotLessThan ( new Double ( 10d ) )
assertTrue ( vosManagerEntry . getDirectAdmins ( sess , createdVo ) . contains ( user ) )
Assert . assertArrayEquals ( bytes , result )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isErrorEnabled ( ) )
assertEquals ( USER_VALUE , StringEscapeUtils . escapeHtml ( prefs . getPref ( USER_NAME ) ) )
assertMockEndpointsSatisfied ( )
assertEquals ( 1 , fit . getDiffusionCoefficient ( ) , 0.01 )
Assert . assertNull ( loadedFile )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
assertFalse ( list . contains ( null ) )
Assert . assertEquals ( "_ANYFIELD_ == 'email' && ANOTHER_FIELD == 'blah' && filter:includeRegex(FIELDA, '.*all_.*')" , JexlStringBuildingVisitor . buildQuery ( result ) )
assertEquals ( result , "2007_12_03" )
assertSame ( injectable , injectionTarget . injectable )
assertMockEndpointsSatisfied ( )
assertNull ( loggedInUser )
assertEquals ( asList ( foo4 ) , results )
assertEquals ( v1 , v2 )
assertEquals ( 3 , result . get ( ) . getList ( ) . size ( ) )
assertNotNull ( dialectConverterForEveryoneElse . get ( "brat" ) )
assertThat ( type , is ( String . class ) )
assertTrue ( validator . validate ( certificateMapping , POST ) . passedValidation ( ) )
assertThat ( bar , is ( 2 ) )
assertThat ( hasJsonPath . matchesSafely ( json ) , is ( false ) )
assertEquals ( CompressionType . Zip , compressionType )
assertModelEqualsFile ( HIT_POLICY_DMN )
assertEquals ( IP_10_123_1_54_80 , StringUtils . formatLocalSocket ( socket ) )
Assert . assertEquals ( registry1 , registry2 )
assertTrue ( inactiveQuestion . isInactiveForTwoMonths ( ) )
assertNotNull ( counterManager . getCounterManage ( ) )
assertThat ( registry . order ( ) , equalTo ( Arrays . asList ( firstPlugin , secondPlugin ) ) )
assertTrue ( valid )
assertEquals ( expResult , result )
assertTrue ( request . getTableSchema ( ) != null )
assertEquals ( "name" , name )
assertEquals ( "" , result )
Assert . assertNotNull ( rb )
assertEquals ( player . getMinions ( ) . size ( ) , 0 )
assertThat ( changes . get ( 0 ) . getOntology ( ) , is ( ontology ) )
assertEquals ( expected , dotfileWriter . formatPCollectionNodeDeclaration ( inputCollection , jobPrototype ) )
assertAxisEquals ( 0.9 , 1.3 , new double [ ] { 0.9 , 0.5 , 1.5 , 1.5 , 10 } , new String [ ] { "0.9" , "1.5" , "10" } , axis )
assertEquals ( "okay" , runtimeService . getVariable ( pi . getId ( ) , "result" ) )
assertEquals ( "1f8ac10f23c5b5bc1167bda84b833e5c057a77d2" , new String ( Hex . encodeHex ( message ) ) )
assertEquals ( 19 , maximum )
assertTrue ( myMessage . toString ( ) . contains ( "93=3\\00189=FOO\\00196=3" ) )
assertThat ( response , is ( resource ) )
assertThat ( getResponseStatus ( DOMAIN1_CLUSTERS_HREF + "/cluster3" ) , equalTo ( HTTP_BAD_REQUEST ) )
assertEquals ( 7 , events . size ( ) )
assertResultSet ( res )
assertThat ( result , is ( principalCollection ) )
Assert . assertEquals ( operator . getJobExecution ( id ) . getBatchStatus ( ) , BatchStatus . ABANDONED )
assertNull ( actualNativeClient . getHeader ( OkHttpClient . HEADER_PROXY ) )
assertBasicSongData ( songs )
assertions . containsSequence ( 6 , 6 , 8 , 10 , 10 )
assertEquals ( expected , actual )
assertThat ( actual , is ( expected ) )
assertTrue ( lt . checkClientWithHTTPS ( ) )
assertEquals ( expResult , result )
assertEquals ( "ABBA, the world loves but not a sore loser." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertEquals ( icms10 , icms . getIcms10 ( ) )
assertThat ( unlocked . newLockedObjectWithPrivateConstructor ( ) . getMyField ( ) , equalTo ( "initialized" ) )
assertEquals ( 99 , result )
assertThat ( context , body . size ( ) , is ( 3 ) )
assertEquals ( 1 , i )
assertEquals ( expResult , result )
assertFalse ( "Two violations with different begin column should result in not equal nodes" , node1 . equalsNode ( node2 ) )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( "/genPath/deploy" , path )
assertFalse ( job1 . addDependingJob ( new ControlledJob ( conf ) ) )
assertThat ( results , containsInAnyOrder ( "Hello, world!" ) )
assertThat ( options . isHelp ( ) , is ( true ) )
assertFalse ( annotations . isEmpty ( ) )
Assert . assertEquals ( "This is my rule name" , result )
assertThat ( story . getTimeout ( ) , equalTo ( story . getDefaultTimeout ( ) ) )
assertThat ( hasJsonValue . matchesSafely ( json ) , is ( false ) )
assertTrue ( drl . indexOf ( "freeform line" ) == - 1 )
assertFalse ( result )
Assert . assertEquals ( 13L , value )
Assert . assertNotNull ( browser . findElement ( By . id ( "form" ) ) )
assertEquals ( KnightScorer . targetScores [ 2 ] , scorer . scorePosition ( board , context ) )
service . callCounter . assertCalls ( "{getItems=2}" )
assertEquals ( args , ImmutableList . of ( "-y" , "-v" , "error" , "-i" , "input" , "-an" , "-title" , "Movie Title" , "-author" , "Bob" , "-comment" , "Awesome" , "-
assertThat ( DateInterval . between ( d1 , d2 ) , is ( DateInterval . ofCalendarUnits ( 0 , 59 , 2 ) ) )
assertQuery ( true , "deep-equal(/test/*[1], /test/*[2])" )
Assert . assertTrue ( Math . abs ( valueMonteCarlo - valueAnalytic ) < 1E-02 )
assertEquals ( Arrays . asList ( "A" ) , list )
Assert . assertEquals ( parseDateTime ( node . path ( "last_publication_date" ) . asText ( ) ) , doc . getLastPublicationDate ( ) )
assertThat ( ct . getMeridiems ( TextWidth . WIDE , OutputContext . FORMAT ) . print ( Meridiem . PM ) , is ( "PM" ) )
Assert . assertEquals ( expected , actual )
assertArrayEquals ( new byte [ ] { 1 , 2 , 3 , 4 } , argb . randomAccess ( ) . get ( ) . get ( ) )
assertEquals ( "b" , r . get ( "name" ) )
assertEquals ( originalByteStrings , sortedByteStrings )
assertTrue ( CsrfProtectionRefererFilter . isAllowedUri ( uris , uuid + ".com" , isGetRequest ) )
assertThat ( translatedStatement , is ( expectedTranslatedStatement ) )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
assertResultSet ( res )
assertThat ( resourcePermission . toString ( ) , is ( systemPermissionName ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
assertEquals ( result1 , result2 )
Assert . assertEquals ( "[3, 2, 6, 4, 7, 1, 5]" , result . toString ( ) )
assertNotNull ( transaction )
Assert . assertEquals ( expectedNormalized , actualNormalized . toUriString ( ) )
assertTrue ( pojo . testService . interrupted . get ( ) )
assertFalse ( g1 . equals ( g2 ) )
Assert . assertEquals ( 3 , books . size ( ) )
Assert . assertTrue ( "should not have returned tags" , irodsTagValues . isEmpty ( ) )
Assert . fail ( "Expected a handler exception due to incompatible policy" )
objects . assertIsEqualToComparingFieldByFieldRecursively ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) )
assertThat ( lines . size ( ) , is ( 4 ) )
Assert . assertTrue ( exists )
assertFalse ( "Handler was run" , ran . get ( ) )
assertThat ( uut . isColaInjected ( ) , is ( true ) )
assertTrue ( zero . exec ( input ) )
assertTrue ( theSelectedPoolsWere ( pools ( ) ) )
assertCapturedMessage ( eventMessage ( "sess1" , "/topic" , "eventMessage" ) , eventMessage ( "sess2" , "/topic" , "eventMessage" ) )
assertThat ( longProperty , is ( equalTo ( 42L ) ) )
Assert . assertEquals ( ServerParse . SELECT , sqlType )
assertFalse ( "Workflow should not be in add mode when workflowstate is selected" , actual )
assertTrue ( b . isTrue ( ) )
assertThat ( a . overlaps ( b ) , is ( true ) )
Assert . assertNull ( dataModelLoadBalancer . getSessionPersistence ( ) )
assertEquals ( "{\\"ds.test.fromHome\\":\\"withLove\\",\\"deltaspike_ordinal\\":123}" , ConfigResolver . getConfigProperties ( dsHomeConfig ) . toString ( ) )
Assert . assertNotNull ( "Wallets not null" , wallets )
assertNull ( client . getJob ( id ) )
assertEquals ( "65" , result . toString ( ) )
assertThat ( shrinks , containsInAnyOrder ( newArrayList ( 1 , 2 , 3 , 4 , 5 ) ) )
assertThat ( tokens . matches ( BasicTokenizer . WORD , BasicTokenizer . WORD ) , is ( true ) )
assertEquals ( TEST_STRING , actual )
assertFalse ( b )
assertEquals ( expectedFont [ i ] , foInline . getAttribute ( "font-family" ) )
assertThat ( domainCreatePermissions_post , is ( domainCreatePermissions_pre ) )
Assert . assertTrue ( Precision . equals ( 5.0 , MathArrays . distanceInf ( p1 , p2 ) , 1 ) )
assertEquals ( e . getFreeVars ( ) , "b" )
assertEquals ( HttpStatusCodes . TEMPORARY_REDIRECT . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( TestConstants . TABLE_NAME , proxy . getTableName ( ) )
VertxAssert . assertEquals ( "The retrieval of the specified document resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
Assert . assertNotNull ( cumulates )
assertEqualTokenFeatureLengths ( "ahgsfdajhgsfd���涓������������
assertEquals ( "find by created date not returning any events" , 1 , eventRepos . findByCreatedBetween ( now - 86400000 , now + 86400000 ) . size ( ) )
assertEquals ( e . getFreeVars ( ) , "x" , "y" , "z" )
TestCase . assertTrue ( attribute . match ( t ) )
assertEquals ( 200 , response . statusCode ( ) )
assertOut ( "var /** @type {*} */ a = undefined" )
assertEquals ( 255 , fixture . readInt ( ) )
assertEquals ( "foo" , d . toString ( ) )
assertTrue ( BufferedImageComparer . isRGBSimilar ( sourceImage , img ) )
assertEquals ( "a\\r\\n.\\r\\n" , out . toString ( "US-ASCII" ) )
Assert . assertEquals ( 18 , i )
assertEquals ( "c\\n" , found )
assertThat ( a . getValue ( ) , equalTo ( "A1" ) )
assertThat ( endpoints , empty ( ) )
assertEquals ( new BigDecimal ( 12345 ) , result )
assertTrue ( allOf . matches ( "Yoda" ) )
assertEquals ( seconds + ( minutes * DateUtils . MILLIS_PER_MINUTE / DateUtils . MILLIS_PER_SECOND ) , testResult )
assertThat ( resourcePermissions . isEmpty ( ) , is ( true ) )
assertEquals ( "Expected 2 results!" , 2 , n )
Assert . assertEquals ( expected , seq . getSpans ( ) )
Assert . assertTrue ( car . getCarId ( ) > 0 )
assertSame ( toBeThrown , ex . getCause ( ) )
assertEquals ( "Bob123" , query ( ) . from ( cat ) . where ( cat . name . eq ( name ) ) . set ( name , "Bob123" ) . select ( cat . name ) . fetchFirst ( ) )
assertTrue ( path . getType ( ) . isAssignableFrom ( Path . class ) )
assertTrue ( applications . size ( ) > 0 )
Assert . assertTrue ( query . getArguments ( ) . length == 0 )
response . then ( ) . assertThat ( )
Assert . assertEquals ( false , retval )
assertTrue ( "objectClass should still be in the registry after move failure" , getObjectClassRegistry ( ) . contains ( OID ) )
test . assertResponse ( )
assertNotNull ( configuration )
Assert . assertTrue ( "Expected session lifetime to be up, but was " + timePassed , timePassed < k3po . getSessionLifetime ( ) )
assertEquals ( "public enum Company {; private Company(String name,Integer count){\\n  this.name = name;\\n  this.count = count;\\n}\\n}\\n" , cu . toString ( ) )
assertEquals ( in . readObject ( ) . getClass ( ) , Bean . class )
assertThat ( new File ( dbPath ) . list ( ) . length , equalTo ( 0 ) )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-l" , "1" } ) )
assertNotNull ( projects )
assertEquals ( "p.setSomething($param);" , builder . getResult ( ) )
assertEquals ( "A Session with an HTTPSession from the Request should have been created because create parameter " + "was set to false" , httpSession , request . session ( false ) . raw ( ) )
assertEquals ( 1 , rm . getResultsList ( ) . size ( ) )
assertEquals ( "void f(void* target) {\\n" + "    ((void (*)(void)) target)();\\n" + "}\\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType
assertThat ( userPermissions , hasItem ( "ROLE_ADMIN" ) )
Assert . assertTrue ( bnet . getConditionalDistributionTime0 ( var ) . equalDist ( dynamicNB . getConditionalDistributionTime0 ( var ) , 0.05 ) )
assertEquals ( "www.leveluplunch.com/java/examples/?test=a&test=b" , uri . toString ( ) )
assertTrue ( services . size ( ) > 0 )
Assert . assertEquals ( getElement ( "OBR.16" ) , handler . getFillerOrderNumber ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
assertEquals ( false , result )
assertFalse ( validator . validate ( EntityNames . STUDENT_COHORT_ASSOCIATION , cohortIds ) . equals ( cohortIds ) )
Assert . assertNotNull ( result )
assertNotEquals ( e1 , e2 )
assertEquals ( 1 , repository . findAll ( scan ) . size ( ) )
assertThat ( sampleEntities . size ( ) , is ( equalTo ( 30 ) ) )
assertEquals ( ( long ) 8 , result . getLongValue ( ) )
assertMockEndpointsSatisfied ( 1 , TimeUnit . MINUTES )
assertEquals ( i , 44 )
assertNull ( lookup )
assertEquals ( 0 , rule . match ( langTool . getAnalyzedSentence ( "Of zo." ) ) . length )
assertNotNull ( connector )
assertEquals ( "<csv-set><csv-record number=\\"1\\"><firstname>Tom</firstname><lastname>Fennelly</lastname><gender>Male</gender><age>4</age><country>Ireland</country></csv-record><csv-record number
assertEquals ( "basicTest" , dataXException . getMessage ( ) )
assertNotNull ( Channel . fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( "Got children" , node . getChildren ( ) . isEmpty ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertResultSet ( res )
Assert . assertEquals ( 0 , activityListAdapter . getHeaderPositionForItem ( 0 ) )
assertTrue ( ! failed )
assertNull ( "No response received" , response )
assertEquals ( 200 , delete . getStatus ( ) )
assertArrayEquals ( arr , sort . toArray ( ) )
assertTrue ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( 1 , SnowcastSequenceUtils . compareTimestamp ( sequence1 , sequence2 ) )
Assert . assertEquals ( "Query1" , queryName . getImage ( ) )
assertEquals ( expected , uri )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "connectionNameList" , MULTIPLE_IBM_MQ_BROKERS ) )
assertions . isNotLessThan ( new Double ( 10d ) )
assertThat ( drbdXml . getPossibleChoices ( option ) , is ( new Value [ ] { new StringValue ( ) , new StringValue ( "true" ) } ) )
assertFalse ( n . exists ( ) )
assertNull ( next )
assertThat ( inSignature , is ( true ) )
Assert . assertArrayEquals ( bytes , result )
assertEquals ( expectedResults , actualResults )
assertNotNull ( result )
assertTrue ( collection . containsAll ( input ) )
Assert . assertNotNull ( refNodeId )
assertNotNull ( EntityProvider . readServiceDocument ( in , "application/atom+xml" ) )
assertEquals ( "this is" , source . getValue ( "Book/name" ) )
assertOutWithMetadata ( "/**\\n" + " * foo.bar.baz.A\\n" + " *\\n" + " * @fileoverview\\n" + " *\\n" + " * @suppress {checkTypes|accessControls}\\n" + "
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.
assertEquals ( expected , exts )
assertThat ( restored , is ( p ) )
assertNull ( result )
assertEquals ( currSize , fct . getSize ( ) )
Assert . assertEquals ( source , dist )
assertNotEquals ( oldid , id )
Assert . assertEquals ( "�驻�� 3 砖注�转" , t . format ( new Date ( 0 ) ) )
assertTrue ( StringUtils . isNotBlank ( content ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( individual ) )
BaseTest . assertEqualsUnordered ( "find(po)" , quads1 , quads2 )
assertThat ( list . get ( 1 ) , is ( 1 ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertRequestWithCookie ( endpoint , HttpMethod . GET , name , value )
assertEquals ( 1 , tagInode . stat ( ) . getUid ( ) )
assertEquals ( 307 , cr . getStatus ( ) )
assertThat ( PlainTimestamp . of ( date , time ) . getCalendarDate ( ) , is ( date ) )
assertEquals ( 0 , loaded . size ( ) )
assertNotNull ( facility )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertNotNull ( plasmapheresis . getId ( ) )
assertTrue ( page . getBody ( ) . asText ( ) . indexOf ( "Inserting children" ) != - 1 )
Assert . assertTrue ( "duplicate variant was not removed" , bn . getVariants ( ) . size ( ) == 1 )
assertFalse ( validator . validate ( EntityNames . TEACHER_SCHOOL_ASSOCIATION , teacherSchoolAssociations ) . equals ( teacherSchoolAssociations ) )
Assert . assertEquals ( 0 , points . size ( ) )
assertEquals ( "" , result )
org . assertj . core . api . Assertions . assertThat ( indexCreationDate )
Assert . assertEquals ( "http://example.com/fallback" , uri . getFallbackUrl ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "谩茅锚玫盲农���玫�" , slug )
assertThat ( archetypeElementVO , is ( ArchetypeElementVO . builder ( ) . idArchetype ( TEST_ARCHETYPE_ID ) . build ( ) ) )
assertEquals ( registerBrokerBody . getTopicConfigSerializeWrapper ( ) , decodeRegisterBrokerBody . getTopicConfigSerializeWrapper ( ) )
assertNotNull ( service . changeSetResponse ( expectedResItem ) )
assertThat ( command . accept ( state ) , is ( true ) )
assertEquals ( 2 , taskService . deleteOldFormsProtectionIds ( SCHEDULED_FORMS_SCHEDULED_TASK_ID ) . size ( ) )
Assert . assertEquals ( factory . getRuleParsers ( ) . get ( factory . getRuleParsers ( ) . size ( ) - 1 ) , testParser )
Assert . assertEquals ( dateTime . toDate ( ) , esTimestampFormatted )
assertEquals ( "Hello World" , s )
assertEvents ( context , "QuartzService not stopped or StoreReference not restarted." , true )
assertEquals ( expectedActivityCosts + expectedTransportCosts , iCosts , 0.01 )
assertEquals ( TEST_IOS_APP_METADATA , iosApp . getMetadata ( ) )
assertThat ( entityId , is ( nullValue ( ) ) )
assertEquals ( ChannelzProtoUtil . extractChannelData ( stats ) , protoStats )
assertNull ( entity )
assertEquals ( false , CatalogTreeUtils . isDapNode ( noDapNode ) )
assertEquals ( "1.234" , doublePrecisionFloat . toString ( ) )
assertNotNull ( Conversation . fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( Arrays . asList ( 1 , 2 , 3 ) , query ( ) . from ( employee ) . where ( employee . firstname . eq ( "Mike" ) ) . select ( employee . firstname . add ( 1 ) ) . fetch ( ) )
assertEquals ( 1 , fixture . mark ( ) )
assertEquals ( NOT_DECODED , PASSWORD , object . getPassword ( ) )
Assert . assertEquals ( "duke" , model . getName ( ) )
assertEquals ( "test" , article . getEditSummary ( ) )
assertEquals ( "Incoming request" , reply , replyCapture . getValue ( ) . getContent ( ) )
assertEquals ( expected , result )
assertEquals ( 41 , p . getAge ( ) )
assertEquals ( "[null,{\\"a\\":99999999,\\"b\\":123,\\"c\\":-4444444444,\\"d\\":-123}]" , new String ( baos . toByteArray ( ) ) )
assertEquals ( true , result )
assertEquals ( expected , response . getValue ( ) )
assertEquals ( expectedBounds , actualBounds )
assertThat ( sentDeleteCall , is ( nullValue ( ) ) )
assertSame ( tileSize , renderingHints . get ( GPF . KEY_TILE_SIZE ) )
assertEquals ( LATIN1_STRING , response . getResponseAsString ( ) )
assertEquals ( 0.011 , gst . getLongitudeError ( ) , 0.001 )
assertNotEquals ( item40Location , item40Location2 )
assertEquals ( "[{\\"a\\":123.123,\\"b\\":true,\\"c\\":3312,\\"d\\":\\"Mystring\\"}]" , new String ( baos . toByteArray ( ) ) )
Assert . assertEquals ( 10000 , getRowCount ( ) )
Assert . assertTrue ( thriftTransportConfig . isTcpDataSenderCommandAcceptEnable ( ) )
assertThat ( value , is ( valueOfDesc2 ) )
assertEquals ( data , data2 )
Assert . assertEquals ( false , b )
Assert . assertNotNull ( asientoRecibido )
assertEquals ( "Hello " + name , greeter . getMessage ( ) )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) > 0 )
assertEquals ( 82 , new AcceptsLambda < Integer > ( ) . accept ( l ) . intValue ( ) )
arrays . assertDoesNotContain ( description , actual , emptyArray ( ) )
assertEquals ( "test" , output . toString ( Charset . defaultCharset ( ) ) )
assertEquals ( "OK" , r )
assertOut ( "var /** @type {boolean} */ a = new Boolean(1)" )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
Assert . assertTrue ( "ULR      should be not null" , ! sigfw . unitTestingFlags_sendSccpMessage )
assertEquals ( period , start . until ( end ) )
Assert . assertEquals ( Arrays . asList ( post ) , postList )
assertJsonEquals ( ImmutableMap . of ( "topic" , "test-topic" , "android" ) , message )
assertNull ( expression . evaluate ( record ) )
assertEquals ( m1 , m2 )
assertEquals ( result . size ( ) , 2 )
assertEquals ( false , result )
assertEquals ( 0 , table . getHeight ( ) )
assertEquals ( parseJson ( "{ \\"one\\" : 2, \\"b\\" : 2.2 }" ) , element . getStableChildren ( ) . toString ( ) )
assertTrue ( log . debugEnabled ( ) )
editor . assertProblems ( "my-repo|Unused" , "other-repo|Unused" )
assertFalse ( tokenizer . hasHeader ( ) )
assertFalse ( ucd . getChild ( 0 ) instanceof ASTImplementsList )
assertNotNull ( classUnderTest . getPluginStatuses ( ) )
assertEquals ( rep [ i ] , StringUtils . revertBrackets ( org [ i ] ) )
Assert . assertEquals ( null , result . get ( "user" ) )
assertEquals ( "Result" , 123 , supervisorActorRef1 . result ( ) . result ( ) )
assertEquals ( "com.zeroturnaround/jrebel.commons/target/classes" , actualObj )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( cypherQuery , json )
assertFalse ( filter . isSimplePnfsMatch ( ) )
Assert . assertEquals ( EventType . UNSUSPEND , eventType )
assertNotNull ( createdBreaker )
runner . assertNotValid ( )
assertSame ( newUrl , url )
Assert . assertEquals ( value , anotherValue )
assertTrue ( endpointRef . toString ( ) . equals ( expectedRef . toString ( ) ) )
assertEquals ( dbName , itemName . getSPARQLName ( ) )
Assert . assertNotNull ( trazas )
assertTrue ( Precision . equals ( binomial , jacobi . value ( 1.0 ) , 1 ) )
assertEquals ( 0 , putCounter )
assertThat ( tester . count ( Lock . KIND ) , is ( 0 ) )
assertEquals ( "a_comparison_of_associated_dsd_sd" , KeyFactory . generateKey ( doc ) )
assertTrue ( ! result )
assertEquals ( 10.81 , fontSize , 0.1 )
Assert . assertEquals ( "A:1,B:1,C:1" , networks )
assertEquals ( "Wrong result" , defaultValue , config . get ( Integer . class , KEY_PREFIX , defaultValue ) )
assertOut ( expected )
assertEquals ( "rev150930" , keyID . getValue ( ) . getName ( ) )
assertEquals ( rc . request ( ) . host ( ) , host )
Assert . fail ( "Should throw an exception here" )
assertTrue ( ml . length == 1 )
assertThat ( subject . getMessages ( preparedUpdate ) . size ( ) , is ( 1 ) )
assertEquals ( 2 , fooDao . queryForAll ( ) . size ( ) )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
assertTrue ( result . isEmpty ( ) )
Assert . assertNull ( actual )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff22_" ) )
assertEquals ( 0 , latch . getCount ( ) )
assertThat ( json , is ( "{ foo : { foo : \\"bar\\"}}" ) )
Assert . assertEquals ( offset , myTask . getMessageIdFromSource ( envelope ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( rd . getRd ( ) , RD )
assertTrue ( site . login ( "email@example.com" , "password" , http ) )
assertThat ( givenProgram . getChildPrograms ( ) , contains ( stringProgram ( "0123" ) , stringProgram ( "X" ) , stringProgram ( "0123" ) ) )
assertThat ( provider . getValue ( context ) , is ( "I'm a string." ) )
Assert . assertEquals ( 4 , response . getTotalHits ( ) . value )
assertTrue ( page . asXml ( ) . matches ( "(?s).*com.sun.faces.test.servlet30.faceletsResolver.*" ) )
Assert . assertEquals ( 7 , result . length )
assertFieldValues ( new String [ ] { } , showView . getFieldValuesExcludingId ( ) )
maps . assertHasEntrySatisfying ( info , actual , key , isNotDigits )
assertNotNull ( Insire . fetcher ( "BXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expected , query . export ( ) )
assertEquals ( "POST /controllink HTTP/1.1\\r\\n" + "Host: fake\\r\\n" + "Content-Type: text/xml\\r\\n" + "SOAPAction: service:type#AddPortMapping\\r\\n" + "Connection
assertTrue ( query . toString ( ) . contains ( "FROM <foo>" ) )
assertEquals ( - ONE_HOUR_IN_MILLIS , time . getTime ( ) )
assertTrue ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertThat ( userObject . getPassword ( ) , is ( equalTo ( password ) ) )
Assert . assertEquals ( msg , handler . getRcv ( ) . toString ( ) )
assertOut ( "var /** @type {string} */ a = String(100)" )
assertEquals ( "wkt" , dump ( ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "geomencoder_config" ) )
assertEquals ( "dois decilh玫es" , actual )
assertThat ( combined , returnsSameItems ( expectedNodes ) )
Assert . assertTrue ( conf . get ( UfsJournal . MASTER_JOURNAL_UFS_OPTION ) == null )
assertContains ( expect , rs . getMergedModel ( ) )
assertTrue ( resourcesManager . getAdminGroups ( sess , resource ) . contains ( group ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "foo" , sb . toString ( ) )
assertThat ( ranking . intValue ( ) , is ( 1 ) )
assertThat ( list , is ( simples ( "Hello, world!" ) ) )
Assert . assertEquals ( "col" , intersect . getPath ( ) )
assertTrue ( pojo . testService . interrupted . get ( ) )
assertEquals ( "[\\"foo\\",2]" , TextUtils . joinJSON ( list . toArray ( ) ) )
assertEquals ( "[Cookie{name='name', value='test1', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.local], httpOnly=true, secure=false, maxAge=Optional[-1]}]" , httpRequest . getEffectiveCookies ( ) .
assertTrue ( getBody ( response ) . length ( ) > 100 )
assertTrue ( cleanExit )
assertEquals ( "my title" , configuration . getTitle ( ) . getText ( ) )
assertEquals ( "user1,user1" , result )
Assert . assertEquals ( "did not set resource redirect" , true , transferOptions . isAllowPutGetResourceRedirects ( ) )
assertEquals ( describe , n . toJSONString ( false ) )
assertEquals ( readFile ( "src/test/resources/graal3" ) , out )
Assert . assertEquals ( "my good little bad son" , new String ( output . toByteArray ( ) ) )
assertTrue ( QueryUtil . getExplainPlan ( rs ) . contains ( "    SERVER ARRAY ELEMENT PROJECTION" ) )
assertTrue ( FstUtils . fstEquals ( fstB , fstReversed , FstUtils . LOG_REPORTER ) )
Assert . assertEquals ( result , collector . emitted )
assertNull ( result )
Assert . assertEquals ( "a {}" , br . readLine ( ) )
Assert . assertTrue ( output . contains ( "class" ) && output . contains ( "method" ) )
Assert . assertEquals ( expectedFileName , actualFileName )
Assert . assertEquals ( configNew , configOld )
context . assertIsSatisfied ( )
assertEquals ( ChatStatus . ready , chat . getStatus ( ) )
assertEquals ( expected , actual )
assertTrue ( videos . contains ( video ) )
Assert . assertEquals ( expected , getString ( writer ) )
assertTrue ( connectFuture . isConnected ( ) )
assertEquals ( JSON . serialize ( result ) , "[ { \\"field1\\" : \\"value1\\"} , { \\"field2\\" : 12}]" )
Assert . assertTrue ( "Body validation failed" , isValid )
assertSame ( testTable , column . getTable ( ) )
assertValidationFailures ( deriver , config )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
assertEquals ( "Fusco" , lambdaList . get ( 0 ) . getLastName ( ) )
assertTrue ( response . getStatusCode ( ) == 404 )
assertTrue ( "Task retries lower than specified via withTaskRetryLimit()" , actualAttempts == expectedAttempts || actualAttempts == expectedAttempts - 1 )
assertFalse ( ret2 . equals ( t1 ) )
assertEquals ( "Hello [request?name1] [request?name2] Doe" , ResponseBodyInterpolator . interpolate ( "Hello ^[request?name1] [request?name2]" , req ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "1 test case should fail" , 1 , runTestsResults . getFailedTests ( ) . size ( ) )
assertThat ( proc . context ( ) . contextAttrs ( ) . get ( "__retryCount" ) , is ( retryCount ) )
Assert . assertEquals ( 2 , failures . size ( ) )
Assert . assertEquals ( "�注�� 3 ���� 15 砖注�转 38 �拽�转" ,
assertEquals ( "" , FieldParser . parse ( EMPTY_STRING , schema ) )
assertEquals ( Result . FAIL , user . apply ( item ) )
assertEquals ( createCompoundId ( "ARTIST" , key ) . eq ( id ) , true )
assertNotNull ( Settings . fetcher ( ) . fetch ( ) )
assertNotNull ( result )
assertTrue ( discretionary )
Assert . assertFalse ( itemsResult . accept ( element ) )
assertEquals ( Collections . singleton ( 1 ) , myTestInstance . groupBy ( builder ) . toList ( ) )
assertEquals ( "" , DirectoryMonitoringRequestImpl . getAsText ( mockMonitoringRequest , null ) )
assertFalse ( result . isPresent ( ) )
assertEquals ( "text/csv; charset=UTF-8" , layout . getContentType ( ) )
assertNotSame ( newUnion , testSubject )
Assert . assertEquals ( getNumberOfBuckets ( ) , buckets . size ( ) )
assertFalse ( meta1 . equals ( meta2 ) )
Assert . assertEquals ( config , result )
assertNotNull ( InstalledAddOnExtension . reader ( "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( DateInterval . between ( start , end ) . getEnd ( ) , is ( Boundary . of ( IntervalEdge . OPEN , end ) ) )
assertEquals ( true , MapUtils . isEmpty ( map ) )
assertThat ( result . size ( ) , equalTo ( jedis . size ( ) ) )
assertEquals ( LockMode . WRITE , mLockList . getLockMode ( ) )
assertTrue ( "No categories returned!" , categories != null && categories . size ( ) > 0 )
assertThat ( books . getContent ( ) . size ( ) , is ( 2 ) )
assertEquals ( 2451545.0 , julDate . getJulianDate ( ) , TOLERANCE )
assertThat ( "getChildCount" , node . getChildCount ( ) , is ( 0 ) )
assertThat ( testOutcome . getResult ( ) , is ( ERROR ) )
assertSimpleTerm ( result , "term1" , false , false )
Assert . assertTrue ( String . format ( "failed to force bad pass phrase verification error. expected message '%s ...', actual message: '%s'" , Application . VERIFY_ERROR , message ) , isErrorMessage )
Assert . assertTrue ( epsgDescription . contains ( "CRS" ) )
assertEquals ( 0 , alternative . size ( ) )
Assert . assertEquals ( "a%2Aa=b%2Ab" , getLine ( QUERY_LINE , canonicalRequest ) )
Assert . assertThat ( table . toString ( ) , is ( "Hello\\nWorld" ) )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
assertTrue ( c . isValidForSqlQuery ( ) )
runner . assertTransferCount ( PutHiveStreaming . REL_FAILURE , 1 )
assertEquals ( "{\\"schema\\":\\"string\\",\\"schemaType\\":\\"AVRO\\"}" , request . toJson ( ) )
Assert . assertTrue ( bos . toString ( ) . contains ( filterUnderTest . toXML ( ) ) )
org . junit . Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "SELECT " + fixedColumns + ",COUNT(`foo.bar`) FROM v WHERE _user_ = 'me' ORDER BY `foo.bar` DESC" , sql )
assertEquals ( Status . FAIL , jxm . getStatus ( ) )
assertEquals ( "weeks of year column in LToR" , BasicMonthViewUI . WEEK_HEADER_COLUMN , dayGridPosition . x )
assertXMLEqual ( new StringReader ( "<body><outer>text</outer></body>" ) , new StringReader ( html ( processed ) ) )
assertEquals ( expected , actual )
assertThat ( predicate . getPartitionPredicate ( ) , is ( "(p1='value11' AND p2='value22') OR (p1='value1' AND p2='value2')" ) )
Assert . assertTrue ( exceptionThrown )
assertThat ( actual , is ( 0L ) )
assertEquals ( "$5$abc$HbF3RRc15OwNKB/RZZ5F.1I6zsLcKXHQoSdB9Owx/Q8" , Sha2Crypt . sha256Crypt ( buffer , "$5$abc" )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
Assert . assertEquals ( "Session Application-Id should be the same as indicated." , SH_APPID , sessionAppId )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertTrue ( m . getComponent ( "jmsTest" ) instanceof JMSComponent )
assertEquals ( "Testing for correct handling of syslog " , true , ls5424pb . parseLine ( example5424Syslog ) )
assertThat ( editor . getValue ( ) , is ( getExistingObject ( ) ) )
assertEquals ( "wrong message" , "Test message" , dut . getMessage ( ) )
assertTrue ( ex . isPrime ( s . length ( ) - 2 ) )
Assert . assertEquals ( "Invalid result" , true , predicate . test ( new Object ( ) ) )
assertEquals ( ( Integer ) 10 , lookup . getProperty ( testVariable ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertEquals ( expResult , result )
assertEquals ( employees . size ( ) , 4 )
assertEquals ( test . getStrings ( ) , ImmutableList . of ( "A" , "B" ) )
assertEquals ( "^(a 3)b 5\\n" , found )
assertEquals ( response . getStatus ( ) , Status . SUCCESS . getValue ( ) )
Assert . assertEquals ( 0 , os . getObservationCount ( names , true ) . intValue ( ) )
assertNull ( shouldBeNull )
assertTrue ( context . getClientNamedGroupsList ( ) . isEmpty ( ) )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
assertEquals ( "Testing Course" , courses . get ( 0 ) . getName ( ) )
assertFalse ( arr . every ( callbackfn ) )
assertEquals ( edit , deleteAction . edit )
assertTrue ( syn instanceof JavassistMethodSynthesizer )
assertSame ( fieldVar , result )
Assert . assertEquals ( message , actualMessage )
assertEquals ( URI . create ( "http://localhost:8080/base/resource" ) , u )
assertEquals ( "Option value" , true , commandLine . hasOption ( "simpleOption" ) )
assertFalse ( validator . isValid ( resource , MetadataSection . COLLECTIONS_SECTION ) )
assertEquals ( "foo/bar" , ref . toString ( ) )
Assert . fail ( e . getMessage ( ) )
assertTrue ( "There should be errors" , countErrors ( chain ) > 0 )
assertEquals ( Arrays . asList ( "staff1" , "staff2" , "staff3" ) , underTest . filterConnectedViaProgram ( new HashSet < String > ( staffIds ) , e ) )
assertEquals ( LocalDate . of ( 2012 , 7 , 6 , 0 ) , test )
Assert . assertTrue ( activeLedgers . containsKey ( lh . getId ( ) ) )
assertEventEqualAfterSerializeDeserialize ( event )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
assertThat ( results , samePaths ( new File ( root , "b.txt" ) ) )
assertThat ( result , is ( "2.5.0" ) )
assertSame ( de , reg . build ( e ) )
assertNotNull ( leaseType )
assertEquals ( expectedQuery , actualQuery )
Assert . fail ( "Every deployment should have defined its own logging profile. But found this line in logs: " + line )
assertEquals ( result , range . exclude ( other ) )
assertEquals ( "aMethod" , response )
Assert . assertTrue ( result . isMatch ( ) )
assertTokenSurfacesEquals ( Arrays . asList ( ) , tokenizer . tokenize ( input ) )
assertEquals ( false , check . isRequired ( ) )
assertFalse ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
this . assertOneMatcher ( is ( instanceOf ( HeaderRequestMatcher . class ) ) )
assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
Assert . assertEquals ( 0 , shexc . getExitCode ( ) )
assertEquals ( 2 , i )
assertEquals ( Sets . newHashSet ( "table2" , "table3" ) , service . getTablesToRepair ( cluster , unit ) )
assertEquals ( Integer . valueOf ( 1 ) , i )
Assert . assertEquals ( projectorForward . getTranscriptStartingAtCDS ( ) , resultTranscript )
assertTrue ( globalDomainAccessControlListEditorSubject . updateOwnerRegistrationControlEntry ( orce ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( 0 , cacheStorage . size ( ) )
assertEquals ( ContainerTop . QNAME , bindingII . toString ( ) )
assertEquals ( expected , elements )
assertTrue ( "Workflow is not in an error state" , workflowStatus . errorOccurred ( ) )
assertEquals ( 0 , response . size ( ) )
assertEquals ( expResult , result )
assertTrue ( "Identity realm should be created" , ops . exists ( TEST_IDENTITY_REALM_ADDRESS ) )
assertEquals ( expect , cpcClass . textNormalized ( ) )
assertEquals ( p1 . getPaintingId ( ) , ( Integer ) 2 )
assertSimpleTerm ( result , "term% term_ %term_" , false , true )
Assert . assertFalse ( skipResult )
assertThat ( errors , not ( hasFieldErrors ( "degree" ) ) )
Assert . assertTrue ( intersect instanceof EmptyRange )
assertFalse ( isEmoji )
assertArrayEquals ( expectedResults , actualResults , 1e-4 )
assertTrue ( ex . isPrime ( 97 ) )
assertEquals ( jointPointArgs [ 0 ] , actualReturnValue )
assertEquals ( qn , qnExpected )
assertTrue ( value . getBundles ( ) . size ( ) > 0 )
assertEquals ( this . unpacked , unpacked )
Assert . assertEquals ( setProperties , subscription . getSubscriptionProperties ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 ; ?_c4 ?user_gender }" )
assertPorts ( "specific-ports" , 1 + offset , 5 + offset , 6 + offset )
assertEquals ( 2 , filteredMatches . size ( ) )
Assert . assertEquals ( expected , new String ( encoded ) )
assertTrue ( "Something wrong. Returned wadl length is not > 0" , applicationWadl . length ( ) > 0 )
assertEquals ( 1. , end . getTheoreticalEarliestOperationStartTime ( ) , 0.01 )
Assert . assertNull ( a0 . optionalInteger ( ) )
assertThat ( confirmation . getStatus ( ) , equalTo ( remoteStartStopStatus ) )
assertEquals ( 5 , tool . heapCaculation ( ) )
assertEquals ( setOfStrings ( "silver" ) , all )
assertTrue ( tc . isValid ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertTrue ( checker . isZipInputStream ( bufferedInputStream ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPrivileges ( set ( "producer_group1" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertNull ( array )
assertEquals ( resp , ack )
assertEquals ( "Testing" , txtRes )
assertEquals ( true , ( ( DropDownImageListEditor ) presenter ) . isEditMode )
Assert . assertEquals ( demoService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) , helloService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertTrue ( doc . getLabels ( ) . isEmpty ( ) )
this . assertIndices ( im ( 0 , 0 ) , im ( 1 , - 1 ) , im ( 2 , 1 ) , im ( 3 , 2 ) )
assertThat ( codePoints . containsAll ( "��" ) , is ( false ) )
assertTrue ( ref == null )
assertEquals ( UNSUPPORTED_MEDIA_TYPE , argumentCaptor . getValue ( ) . getStatusInfo ( ) )
assertNull ( found )
assertNotFound ( client . executePost ( "/foo" , "{}" , ContentType . TEXT_PLAIN ) )
Assert . assertEquals ( false , obs . getValueAsBoolean ( ) )
Assert . assertEquals ( new DocIdSetCardinality ( 0.3 , 0.3 ) , c )
assertEquals ( constantKeywordComponent , sut . objectToString ( activity ) )
assertThat ( schemaName , is ( parseSchemaName ( inputStream ) ) )
Assert . assertTrue ( true )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "p" , URI . class ) ) . and ( binds ( "pLabel" , Literal . class ) ) )
Assert . assertEquals ( true , fr . isSuccess ( ) )
assertEquals ( "x" , new Experiment ( ) . doIt ( "x" ) . join ( ) )
assertEquals ( "helloworld2" , FileUtils . readFileToString ( testFile , Charset . forName ( "UTF-8" ) ) . trim ( ) )
assertEquals ( expected , formatted )
Assert . assertThat ( ExceptionCodeMapping . INVALID_FILE_ID . getExceptionIdentifier ( ) , is ( Integer . valueOf ( fromJson . getValue ( ) ) ) )
Assert . assertEquals ( 2147483647 , res )
assertTrue ( problem )
assertEquals ( 5 , map . getConceptActivators ( ) . size ( ) )
assertEquals ( BYTE_FIELD_VALUE , storedValue )
assertThat ( nonInfo , hasSize ( 2 ) )
assertTrue ( sba instanceof ThickSBA )
assertEquals ( "OK" , response . getTitle ( ) )
Assert . assertNull ( deployment )
assertNotNull ( validator )
Assert . assertTrue ( fail )
assertEquals ( 3 , obj . foo )
assertArrayEquals ( Arrays . copyOf ( os . toByteArray ( ) , 4 ) , MAGIC_LITTLE_ENDIAN )
assertEquals ( "Please input method name, eg: \\r\\ninvoke xxxMethod(1234, \\"abcd\\", {\\"prop\\" : \\"value\\"})\\r\\ninvoke XxxService.xxxMethod(1234, \\"abcd\\", {\\"prop\\" :
Assert . assertFalse ( itemsResult . accept ( element ) )
assertThat ( instance . getValue ( ) , equalTo ( TEST_VALUE ) )
assertArrayEquals ( packet , Proto . arraylist_to_array ( payload ) )
Assert . assertEquals ( row . length , length )
assertTrue ( Configurator . compareFs ( fs1 , fs2 ) )
assertEquals ( insertNum , results . size ( ) )
assertEquals ( "Common exception" , ms . getText ( ) )
assertEquals ( 1 , destroyed . get ( ) )
assertEquals ( Character . valueOf ( '|' ) , CsvBulkImportUtil . getCharacter ( conf , "conf.key" ) )
Assert . assertEquals ( in , outStream2 . toString ( "UTF-8" ) )
assertEquals ( 2 , context . getTableCount ( ) )
assertTrue ( validator . validate ( EntityNames . STAFF , ids ) . equals ( ids ) )
assertEquals ( field . getName ( ) , NameUtils . canonicalizeForEnumTypes ( region . getId ( ) ) )
AssertUtil . assertNoJSError ( )
assertThat ( reader . is . isClosed ( ) , IsEqual . equalTo ( true ) )
Assert . assertEquals ( 2 , pis . size ( ) )
assertEquals ( 80 , sumOfType1Cap )
assertDirectories ( "directories" , "hello" )
Assert . assertEquals ( expected , super . parse ( " good.path.here" ) )
assertEquals ( 10. , newVrp . getInitialVehicleRoutes ( ) . iterator ( ) . next ( ) . getDepartureTime ( ) , 0.01 )
assertE ( "       " + "       " + "    == " + "��      " + "====   " + "       " + "#######" )
assertEquals ( "instance.test(1, 2, 3)" , callTest . toJavaSrc ( ) )
assertNotNull ( jobService . getJobServerStatus ( namespace , jobName ) )
assertNotNull ( Conference . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "Configuration 'notExist' is applied to the cache" , "notExist" , configuration )
assertThat ( errors . toString ( ) , containsString ( "No response found for required item with id = 'link0'" ) )
assertAccessorsCorrect ( table , "expandedRows" , rows1 , rows2 )
assertTrue ( cmp . getRecords ( ) . isEmpty ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( expResult , result )
MatcherAssert . assertThat ( "Database should be created." , instances . dbExists ( ) , Is . is ( true ) )
Assert . assertEquals ( "[5]" , a . getStrings ( ) . toString ( ) )
Assert . assertEquals ( "QQ=10001" , url )
assertThat ( maxSide . getPointsLength ( ) , is ( 75 ) )
assertFalse ( integer2 == integer3 )
assertEquals ( expResult , result )
Assert . assertEquals ( "KeePass" , header . getCipher ( ) )
assertTrue ( conn != null )
assertElementsOfIterator ( new LocalDateTimeRange ( ) . createRandomIterator ( workingRandom ) , fromTime , toTime )
assertNotNull ( injector )
assertEquals ( 0.0 , instance . inclusiveHypervolume ( ind ) , 0.0 )
Assert . assertEquals ( "world" , simpleMapPOJO . getStringMap ( ) . get ( "hello" ) )
assertTrue ( currTime > 0 )
Assert . assertNotNull ( str )
Assert . assertEquals ( configuration , result )
assertEquals ( "lid.176" , checker . detectLanguage ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( "[10, 8, 6, 4, 2]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertFalse ( "Should produce different random bytes" , Arrays . equals ( new Random ( ) . randomBytes ( ) , new Random ( ) . randomBytes ( size ) ) )
Assert . assertEquals ( "SELECT next_one FROM t_pet pet  WHERE pet.pet_id = ?" , sql )
assertTrue ( result > 0 )
assertTrue ( "Wrong info: " + result . info , result . info . startsWith ( "2 document" ) )
assertThat ( studies . size ( ) , is ( 1 ) )
assertEquals ( field . getName ( ) , formField . getField ( ) . getName ( ) )
assertThat ( getMatchingContainerEnv ( domainPresenceInfo , jobSpec ) , allOf ( hasEnvVar ( "item1" , "value1" ) , hasEnvVar ( "item2" , "value2" ) , hasEnvVar ( "WL_HOME" , "/u
FixtureAsserts . assertStringMatchesJsonFixture ( "Customer retrieve their User as HAL+JSON" , actualResponse , "/fixtures/hal/user/expected-customer-retrieve-user.json" )
assertEquals ( cliLoadJob . getJobSpec ( ) , createLoadSpec ( ) )
assertNotNull ( "Previous step failed" , uri_conferenceInstance )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( "{\\"a\\":null,\\"b\\":1}" , n )
assertEquals ( "Parsing of long option does not match expected result." , PROPERTY_LONG_EXPECTED , parseResult )
Assert . assertEquals ( expected , returned )
assertEquals ( "no-cache" , wrapper . getFirstHeader ( "Cache-Control" ) . getValue ( ) )
runner . assertValid ( service )
assertEquals ( "{\\"data\\":[[80,80],[20,20]]}" , toJSON ( containerSeries ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( expected , actual )
assertThat ( node , isBrowseNodeWith ( contentRepository , null , "foo" , "foo" , null , asset ) )
assertFalse ( fieldAccessor . fieldIsPrimitive ( ) )
assertEquals ( false , out . firstElement ( ) . get ( ) )
Assert . assertEquals ( expectedBytes , actualBytes )
assertEquals ( pSquare . evaluate ( percentile , aggregates ) , randomMaster . reduce ( percentile , aggregates ) , 1e-13 )
Assert . assertEquals ( NUM_SHIRT_THREADS , collector . size ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertFalse ( secretMap . isEmpty ( ) )
assertEquals ( expected , getStringWithContext ( TestSelectWithCustomCommentImpl . example ( ) ) )
assertParseTree ( rootNode ( "hello world" , stringNode ( "greeting" , "hello world" , stringNode ( "hi you" , "hello world" ) ) ) , tree )
assertThat ( res . get ( "username" ) , is ( USERNAME ) )
Assert . assertEquals ( ans [ i ] , count )
assertEquals ( "" , contactEditText . getText ( ) . toString ( ) )
assertEquals ( before , after )
Assert . fail ( "Missing required input" )
assertThat ( relevant , is ( true ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertThat ( DateInterval . parseISO ( "2012W011/W054" ) , is ( expected ) )
assertEquals ( expectedJson , json )
assertThat ( actual , is ( expected ) )
assertFalse ( retryPolicy . getRetryCondition ( ) . shouldRetry ( null , e , 1 ) )
assertEquals ( 0.945f , result , 0.001f )
assertEquals ( result . getEndTime ( ) , now . toDate ( ) )
assertTrue ( masterCommits . hasNext ( ) )
assertEquals ( title , testObj . getObjectTitle ( mem , createURI ( "a/b/c" ) ) )
assertNotEquals ( options1 , options2 )
assertEquals ( message3 , sets . iterator ( ) . next ( ) )
assertTrue ( meta . isNullable ( 0 ) )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertTrue ( instantiator instanceof ObjenesisClassInstantiator )
Assert . assertNotNull ( userDTO )
assertEquals ( 2 , objects . size ( ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "putValue" , region . get ( "putKey" ) )
Assert . assertEquals ( msg , n )
Assert . assertEquals ( 1 , handler . convertIdentifier ( v ) )
assertEquals ( "Should get feed with METHOD_NOT_ALLOWED" , HttpStatus . METHOD_NOT_ALLOWED , response . getResponseStatus ( ) )
Assert . assertEquals ( BatchStatus . COMPLETED , exec . getStatus ( ) )
Assert . assertArrayEquals ( bytes , result )
assertTrue ( p . getStatusSimple ( ) . toString ( ) . equals ( "active" ) )
assertEquals ( list , list2 )
assertThat ( result , equalTo ( "Hello" ) )
files . assertSameBinaryContentAs ( someInfo ( ) , actual , notAFile )
Assert . assertFalse ( itemsResult . accept ( element ) )
assertEquals ( NetPlan . getAttributesCollectionOfQextendsNetworkElementString ( Arrays . asList ( n1 , n2 , n3 ) , "att" ) , Arrays . asList ( "1" , "2" ) )
assertArrayEquals ( new int [ ] { 1 , 1 } , counts )
assertTrue ( videos . contains ( video ) )
assertEquals ( check . getValue ( ) , actual )
assertEquals ( "class CompanyException {\\n" + "  public CompanyException(  String message){\\n" + "    super(message,cause);\\n" + "  }\\n" + "}\\n" , td . toString ( ) )
Assert . assertNotNull ( addressResultsDto )
assertThat ( context . statement ( ) , is ( "'b c'" ) )
assertFalse ( str . endsWith ( "\\0" ) )
Assert . assertTrue ( "Group item should have been added to sub menu" , subMenu . getMenuItems ( ) . contains ( group ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertThat ( underTest . getLabel ( ) , is ( TYPE_LABEL ) )
assertTrue ( "proposition not found" , propositionFound )
PicOutAssert . assertDocIdPicOutsEquals ( expectedOutputDocIdPicOuts , actualOutputDocIdPicOuts )
assertSingleResult ( op , Statistic . SDEV , expSD )
assertEquals ( value2 , updatedConfigState . value )
assertTrue ( result )
assertThat ( stats . getName ( ) , is ( "loopPerformances" ) )
Assert . assertEquals ( Long . valueOf ( 0l ) , jumlah )
assertThat ( base . thenSupplyCancelledCancelled ( supplier ) , is ( new ImmediateFailed < > ( caller , cause ) ) )
Assert . assertEquals ( 40. , solution . getCost ( ) )
Assert . assertFalse ( result )
assertEquals ( expected . build ( ) , doc )
assertEquals ( expected , actual )
assertTrue ( tasks . size ( ) == 10 && tasks . get ( 0 ) . getId ( ) == 5 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
assertParse ( editor , "---\\n" + "hello:\\n" + "  world:\\n" + "      message\\n" )
assertLoadBalanced ( restTemplate )
Assert . assertNotNull ( "null data object, was not found" , dataObject )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( "�芯泄薪芯" , t . format ( new Date ( 0 ) ) )
assertArrayEquals ( shorts , decoded )
Assert . assertEquals ( expected , rows . next ( ) . toString ( ) )
assertTrue ( list . toString ( ) . contains ( Integer . toString ( size ) ) )
assertNull ( w )
assertNotSame ( 0 , count )
context . assertFalse ( handled , "PUT Request to not registered resource should not be handled" )
assertThat ( response . getStatus ( ) , is ( Response . Status . OK . getStatusCode ( ) ) )
assertThat ( uut . getIdeEnabledMethods ( ) . isEmpty ( ) , is ( true ) )
Assert . assertThat ( count , is ( 1 ) )
assertThat ( subject . getCleanValue ( ) . toString ( ) , is ( "foo       bar" ) )
assertEquals ( 0 , result . size ( ) )
Assert . assertEquals ( "{\\"" + entityType . getPropertyNames ( ) . get ( 0 ) + "\\":{" + "\\"type\\":\\"MultiLineString\\",\\"coordinates\\":[" + "[[1.0,1.0],[2.0,2.0],[3.
assertTrue ( "queued.push() blocks" , ( time2 - time1 ) < delay )
assertThat ( response . getCode ( ) , is ( "http://zazz.bg/?code=a+test+23" ) )
Assert . assertEquals ( "Error while getting Thesaurus Type Title !" , expectedThesaurusTypeTitle , actualThesaurusTypeTitle )
assertPostEdgeProducesJson ( response , false , true )
Assert . assertEquals ( "123,456,789.00 " , result . getText ( ) )
assertProcessVarValue ( processInstance , "x" , "Book" )
assertMockEndpointsSatisfied ( )
assertEquals ( "foobar" , result )
assertEquals ( "Include pattern" , Arrays . asList ( ".*" , ".*ha" , ".*hb" ) , ruleSet2 . getIncludePatterns ( ) )
assertEquals ( foo . getUsername ( ) , a . getUsername ( ) )
assertTrue ( inventory . contains ( mat , amount ) )
Assert . assertTrue ( ( ( Person ) result [ 0 ] ) . equals ( ( Person ) array [ 0 ] ) )
Assert . assertEquals ( "[1, 2, 3, 4]" , equals )
assertTrue ( page . getBody ( ) . getTextContent ( ) . contains ( "Username or email" ) )
assertEquals ( map , map2 )
assertEquals ( 1 , testList . size ( ) )
assertEquals ( "should be the same age in days" , expected . intValue ( ) , result . intValue ( ) )
Assert . assertNull ( nullValue )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertThat ( repository . getDescriptor ( "property" ) , is ( "value" ) )
assertThat ( MockI18n . passthrough . text ( str ) , is ( str ) )
assertTrue ( actual . entrySet ( ) . containsAll ( expected . entrySet ( ) ) )
assertEquals ( 0 , FileChunkUtil . getNumberOfChunks ( file , 0 * TestFileConfiguration . CHUNK_SIZE ) )
assertThat ( strategy , is ( instanceOf ( ActiveOntologyLocationStrategy . class ) ) )
Assert . assertEquals ( ValidationResult . Result . ERROR , snowflakeSourceOrSink . validate ( null ) . getStatus ( ) )
assertEquals ( "" , result )
Assert . assertTrue ( true )
Assert . assertEquals ( expResult , result )
Assert . assertEquals ( 2 , result . length ( ) )
assertEquals ( null , output )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
assertEquals ( true , testPr . result )
assertFalse ( param . isRequired ( ) )
assertEquals ( "milestone" , activityType )
assertEquals ( "浠������" , t . format ( date ) )
assertEquals ( builder . buildResponse ( ) . getErrors ( ) . size ( ) , 0 )
assertSame ( reply , myTestInstance . runCommand ( "command" , "name" ) )
assertNotNull ( result )
assertEquals ( 1 , slice . events . size ( ) )
assertEquals ( result , result2 )
assertEquals ( "ABCDEF" , new String ( tis . toByteArray ( ) ) )
assertEquals ( "expect bookie idx 1 first" , expectedSet , reorderSet )
assertThat ( archetypeCatalog , not ( nullValue ( ) ) )
Assert . assertTrue ( returnT . getCode ( ) == ReturnT . SUCCESS_CODE )
assertFalse ( "Testing ModuleNotFoundException" , everything . contains ( "ERROR" ) )
assertEquals ( "0FFFFF212" , Evaluator . evaluate ( ex ) )
assertTrue ( action . isFailed ( ) )
assertEquals ( builder . type . toString ( ) , ExperimentType . SAVE_MODEL . toString ( ) )
assertEquals ( 3 , encounter . getOrders ( ) . size ( ) )
assertTrue ( asyncTask . isCompleted ( ) )
assertThat ( userId , is ( Optional . of ( USER_ID ) ) )
assertTrue ( downloader . waitForReportReady ( ) )
assertEquals ( "" , s )
assertEquals ( 5 , pendingPosts . size ( ) )
assertEquals ( Permissions . UPDATE , testProcessEngineCfg . getDefaultUserPermissionForTask ( ) )
assertFalse ( "The getChanges() method reported a change" , hasChange )
assertEquals ( 0 , result . length )
assertThat ( families , arrayContaining ( "Processing" ) )
assertTrue ( aa2 . getModifiedOn ( ) . getTime ( ) == aaModifiedOn )
assertEquals ( "3 aastat tagasi" , t . format ( new Date ( 0 ) ) )
assertNotNull ( EndUser . fetcher ( "ITXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( 1 , packetIn . getCount ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertEquals ( 5l , d . asInt8 ( ) )
assertEquals ( expected , actualQuery )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertEquals ( NumberConverter . class , numberTypeConverter . getClass ( ) )
assertThat ( list . strList , hasSize ( 1 ) )
assertEquals ( 1 , peopleIds . size ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( 2 , numberOfUsers )
Assert . assertEquals ( Arrays . asList ( "a" , "b" , "c" , "d" , "e" ) , collected )
assertOut ( "b = b + 1" )
Assert . assertTrue ( ds . count == 1 )
assertEquals ( "Expected to get 1 event" , 1 , eh . size ( ) )
assertEquals ( maxEventId , result . getEventId ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( url ) )
Assert . assertTrue ( "Bad cost - expected " + 12.0 + " but was " + cost , cost == 12.0d )
assertEquals ( Atom . of ( "recv" ) , result )
assertArrayEquals ( TEObjectUtil . TE_LSP_FAST_REROUTE1 , ByteArray . getAllBytes ( output ) )
assertEquals ( "" , json , ios . toJSON ( ) )
assertDeleteMessage ( sendMessage )
assertEquals ( expected , MD5Utils . computeMd5String ( s ) )
assertFalse ( hasPermission )
assertEquals ( expected , actual )
Assert . assertEquals ( "w" , ret )
assertTrue ( url . equals ( newUrl ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" + "<app:document xmlns:atom=\\"http://www.w3.org/2005/Atom\\" " + "xmlns:app=\\"http://www.
Assert . assertEquals ( "{\\"alice\\":[\\"bob\\"]}" , writer . toString ( ) )
assertClientException ( ( ) -> userTaskAdminClient . reassignWhenNotCompleted ( CONTAINER_ID_V2 , task . getId ( ) , "" , reassign ) , 400 , "Invalid time expression" , "Invalid time expression" )
assertArrayEquals ( "replace and replace is repl" . getBytes ( ) , actuals )
assertThat ( markedWord , is ( "louper" ) )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . GTE , v , TERM_FACTORY . getConstantLiteral ( "3" , XSD . LONG ) ) , translation . get ( 0 ) )
assertThat ( path , is ( "../foo-1.0-SNAPSHOT.woa/Contents/test" ) )
assertEquals ( BuilderFactory . start ( ) . add ( "a" , 12345678901L ) . build ( ) , doc )
assertEquals ( gcd1 . monic ( ) , intrp . monic ( ) )
assertThat ( command . accept ( state ) , is ( false ) )
assertThat ( PlainTimestamp . of ( 2014 , 4 , 21 , 9 , 15 ) . with ( MICRO_OF_SECOND , 999999999 ) , is ( PlainTimestamp . of ( date , time ) ) )
assertContentType ( actual )
assertEquals ( testGenre , song . getGenre ( ) )
assertTrue ( components . isEmpty ( ) )
assertThat ( getter . invoke ( instance ) , is ( equalTo ( false ) ) )
assertEquals ( "XX" , b . asString ( ) )
assertThat ( imageInfo . version ( ) , is ( "1.22" ) )
assertTypeListsEqual ( params , expectedParams )
assertArrayEquals ( expected , actual )
assertThat ( comparator . compare ( axiom3 , axiom1 ) , is ( lessThan ( 0 ) ) )
assertTrue ( actual )
assertTrue ( contentAsString . indexOf ( fieldFontSetting ) == 0 )
Assert . assertTrue ( contains )
assertEquals ( "From is not properly parsed" , lsdf . parse ( "2015/02/28 01:02:03.004 GMT" ) , mapper . readFrom ( columns ) )
assertTrue ( instance . createTestElement ( ) instanceof HTTPRawSampler )
assertEquals ( 0 , tasks . size ( ) )
assertEquals ( reservationName , "res_1" )
assertTrue ( "no exception was thrown" , exception )
assertThat ( database . isClean ( ) , is ( false ) )
Assert . assertNull ( "Distinct name was expected to be null" , jBossWebMetaData . getDistinctName ( ) )
assertTrue ( Files . isRegularFile ( target ) )
assertEquals ( query1 , query2 )
Assert . assertNull ( person . getAttribute ( "name2" ) )
Assert . assertEquals ( "Test template val1 and val2" , output )
Assert . assertEquals ( "hey,bye" , searchRequestBuilder . request ( ) . routing ( ) )
assertNotNull ( res )
Assert . assertEquals ( obj , target )
assertThat ( parseArguments . size ( ) , is ( 1 ) )
assertNull ( item . getList ( ) )
assertTrue ( descriptor . hasConstrainedParameters ( ) , "Setting given for cross-parameter should take precedence" )
assertEquals ( "getPortalHome failed" , expected , europeanaUrlService . getPortalHome ( "localhost" ) )
assertEquals ( Integer . valueOf ( 3 ) , Integer . valueOf ( list . size ( ) ) )
assertThat ( rendering , is ( "1st September 2011" ) )
assertFalse ( d1 . equals ( d2 ) )
assertTrue ( payload . contains ( "compressionMode" ) )
assertThat ( output , containsString ( "\\"name\\":[{\\"family\\":\\"Smith\\",\\"given\\":\\"John\\"}]" ) )
Assert . assertTrue ( window1 != window2 )
Assert . assertEquals ( 0 , total )
assertEquals ( ClassWithPrivateAndProtectedMethodInSeparatePackage . RESULT , invokeResult )
assertFalse ( "our group shouldn't have set our attribute" , retAttr . contains ( attributes . get ( 0 ) ) )
assertNull ( doc )
assertTrue ( results . size ( ) > 1 )
assertEquals ( joinFileDescriptorBo , JoinFileDescriptorBo . EMPTY_JOIN_FILE_DESCRIPTOR_BO )
assertTrue ( plugin . getNameBanStorage ( ) . getBan ( player . getName ( ) ) . isSilent ( ) )
assertNotEquals ( insertAction , retractAction )
assertEquals ( NodeValue . FALSE , r )
assertEquals ( 2 , numberOfElephants )
assertThat ( def . isSingleValue ( ) , is ( true ) )
assertNotNull ( bindingDOMDataTreeProducerAdapter . createProducer ( ImmutableSet . of ( ) ) )
assertTrue ( elapsed >= numberLongEvents * 1000 )
Assert . assertEquals ( getCssFileContents ( cmpFile ) , styleSheet . toString ( ) )
assertEquals ( Version . valueOf ( "1.0.0-alpha+build" ) , builder . build ( ) )
assertEquals ( publicationDate . toString ( ) , mods . get ( 0 ) . getRevisionDate ( ) )
context . assertIsSatisfied ( )
assertNotNull ( result )
assertEquals ( "service" , s . getType ( ) )
assertEquals ( "T:12" , x . toString ( ) )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertThat ( result . getPersonIdItems ( ) . size ( ) , is ( 1 ) )
assertEquals ( LifecycleState . CONNECTED , node . connect ( ) . toBlocking ( ) . single ( ) )
assertCompletionsDisplayString ( "spring:\\n" + "  http:\\n" + "    converters:\\n" + "      preferred-json-mapper: <*>\\n" , "gson" , "jackson" )
Assert . assertNull ( queryResult . getExplanations ( ) )
Assert . assertEquals ( "/prefix1:root/prefix2:otherchild" , expression . toString ( ) )
assertOutWithMetadata ( "/**\\n * @fileoverview\\n *\\n * @suppress {checkTypes|accessControls}\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( asList ( Segment . SIZE , Segment . SIZE , Segment . SIZE , Segment . SIZE , Segment . SIZE , 1 ) , segmentSizes )
assertThat ( fe , notNullValue ( ) )
assertEquals ( 1 , response . getEntry ( ) . size ( ) )
assertThat ( itr . hasNext ( ) , is ( false ) )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
Assert . assertNotNull ( addressResultsDto )
assertTrue ( tasks . size ( ) == 5 && tasks . get ( 0 ) . getId ( ) == 10 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
assertEquals ( ScanResult . Status . ERROR , scanResult . getStatus ( ) )
assertThat ( wrapper . get ( 1 ) , is ( ( short ) 0x24 ) )
assertThat ( output , containsString ( "\\"name\\":[{\\"family\\":\\"Smith\\"," ) )
assertThat ( renderer . getShortForm ( entity ) , is ( "xsd:negativeInteger" ) )
assertThat ( versionedIdsOf ( units ) , bagEquals ( versionedIdList ( LAUNCHER_FEATURE , LAUNCHER_FEATURE_JAR , LAUNCHER_BUNDLE ) ) )
assertEquals ( "select cat\\nfrom Cat cat fetch all properties\\nfrom Cat cat1 fetch all properties" , query2 . toString ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) >= 'literal'" ) )
assertEquals ( 0 , SnowcastSequenceUtils . compareTimestamp ( sequence1 , sequence2 ) )
assertEquals ( 2 , testSet . size ( ) )
assertFalse ( appender . getConsoleOutput ( ) . isEmpty ( ) )
assertEquals ( vNum , pdfNum )
assertTrue ( equals ( statEntity , nativeEntity ) )
Assert . assertEquals ( queue , testQueue )
assertEquals ( "UPDATE EntityWithRelations SET EntityWithRelations.name = ? WHERE EntityWithRelations.id = ?" , Utils . singleLine ( sql ) )
assertFailureValue ( "missing (1)" , "array" )
assertEquals ( Arrays . asList ( "http://somelink" , "" , "" ) , new JsonLinkConsumer ( ) . readLinks ( reader , null ) )
Assert . assertEquals ( "base_bla.ssdump2" , fileName )
Assert . assertEquals ( 6 , elements . size ( ) )
assertEquals ( "getRuntimeVersion timeout" , latch . getCount ( ) , 0 )
assertEquals ( true , result )
assertEquals ( 0 , suggestedConfigUpdates . size ( ) )
assertThat ( tableNames . size ( ) , is ( 0 ) )
Assert . assertTrue ( out . size ( ) > 0 )
assertThat ( returned . getX ( ) , is ( 2l ) )
assertEquals ( ( new SparseSet ( "-a +a/b" ) ) . getPattern ( ) , set . getPattern ( ) )
assertEquals ( "Failed on rows: [" + rows + "], columns: [" + columns + "], iteration: [" + i + "]" , 1.0f , res , 0.01f )
assertSame ( faultUnMarshaller , factory . getFaultUnMarshaller ( ) )
CheckstyleTestUtils . assertSimilarXmlWithResource ( "/org/sonar/plugins/checkstyle/CheckstyleProfileExporterTest/" + "noCheckstyleRulesToExport.xml" , sanitizeForTests ( writer . toString ( ) ) )
service . callCounter . assertCalls ( "{findIds=2, getItemCount=2, getItems=6}" )
Assert . assertNotNull ( irodsTaggingService )
assertEquals ( 4 , timers . size ( ) )
assertThat ( newUser . getViewedBooks ( ) . size ( ) , is ( 3 ) )
Assert . assertEquals ( TimeValue . NEG_ONE_MILLISECOND , d )
assertThat ( CompositeBlobStore . getStoreSuitabilityCheck ( ) , equalTo ( CompositeBlobStore . StoreSuitabilityCheck . EMPTY ) )
assertInEqualsOut ( )
assertEquals ( "groupId:artifactId" , softwareProjectId . getProjectId ( ) )
assertThat ( methodCall , equalTo ( "flush()" ) )
assertEquals ( expected [ counter ++ ] , actual )
assertEquals ( "" + "************\\n" + "************\\n" + "************\\n" + "************\\n" + "************\\n" + "************\\n" + "************\\n" + "************\\n" , raster
assertTrue ( "Failed to retrieve DOI metadata" , result )
assertTrue ( target . isModify ( newSettings ) )
assertTrue ( gl . size ( ) > 0 )
assertEquals ( "EXEC \\"DIAL\\"" , execCommand . buildCommand ( ) )
assertEquals ( "utf-8" , mediaType . charset ( ) . name ( ) )
assertUserSettingsCount ( "invalid" )
Assert . assertEquals ( STANDART , decoded )
assertEquals ( expectedResult , resultString )
Assert . assertTrue ( expect ( o , true ) )
assertMakeImageCanReadImage ( imageData )
Assert . assertNull ( character . getData ( ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertNotNull ( action )
assertThat ( request . getConnectorId ( ) , is ( someInteger ) )
Assert . assertEquals ( "Wrong order found for " + name , orderMap . get ( name ) . intValue ( ) , order )
assertNull ( avroField . convertToKettleValue ( array , schema , mock ( Schema . class ) , mock ( Schema . class ) , false ) )
Assert . assertEquals ( i , o )
arrays . assertStartsWith ( someInfo ( ) , actual , emptyArray ( ) )
assertIsAborted ( tx )
Assert . fail ( "identifier accepted as qname" )
assertEquals ( 2 , props . size ( ) )
assertEquals ( Type . ACCOUNT , Type . get ( account ) )
assertTrue ( true )
assertEight ( result , testContext , async )
assertEquals ( "{\\"id\\":1,\\"label\\":\\"MyButton\\",\\"x\\":2,\\"y\\":2,\\"color\\":0,\\"width\\":2,\\"height\\":2,\\"pushMode\\":false}" , result )
assertEquals ( exp , arrayX )
assertEquals ( "some return path" , mockResult . included ( "returnPath" ) )
assertE ( "----------" + "|        |" + "|        |" + "|        |" + "|    o   |" + "|        |" + "|        |" + "|        |" + "|        |" + "|        |" + "|        |" + "|        |
Assert . assertEquals ( NUM_ITERATIONS , list . size ( ) )
Assert . assertTrue ( intersect instanceof EmptyRange )
assertTrue ( result . isEmpty ( ) )
assertEquals ( "{key:value}" , target . toString ( ) )
assertEquals ( expected , result )
assertEquals ( "Address" , hospitalModel . getAddress ( "CORESample" ) . get ( 0 ) . getName ( ) )
assertEquals ( "hello, world!" , out )
assertNotEquals ( token0 , token1 )
assertEquals ( Arrays . asList ( "y=1" ) , results )
assertTrue ( Bytes . equals ( opened , data ) )
Assert . assertEquals ( 1234 , multicastSocket . getLocalPort ( ) )
assertEquals ( "<table> ... <tr><td>a</td> ... </tr></td></table>" , example . toString ( ) )
assertEquals ( result , expected )
assertEquals ( expected , result )
Assert . assertEquals ( 0 , udf . getKey ( embedding ) . compareTo ( embedding ) )
Assert . assertEquals ( 76.875 , tdCosts . getBackwardTransportTime ( loc ( "from" ) , loc ( "to" ) , 100. , null , null ) , 0.01 )
assertEquals ( Lists . newArrayList ( 1 ) , listBad )
assertThat ( result . getBins ( ) . size ( ) , equalTo ( 2 ) )
Assert . assertTrue ( "Optimal coverage: " + best . getCoverage ( ) , best . getCoverage ( ) < 1.0 )
assertTrue ( "Host patterns " + patterns . get ( index ) + " overrides all" , HostPatternsHolder . isHostMatch ( patterns . get ( index ) , 0 , null ) )
assertTrue ( results . size ( ) > 1 )
assertTrue ( Files . exists ( list ) )
assertArrayEquals ( sentBytes , new byte [ ] { 0x17 , 0x03 , 0x03 , 0x00 } )
assertNotNull ( result )
assertions . containsSequence ( 6 , 6 , 8 , 10 , 10 )
assertEquals ( "void dest5(int, @B int)" , toString ( dest ) )
Assert . assertTrue ( "Expected file types not modified" , CollectionUtils . isEqualCollection ( expected , widget . getFileTypes ( ) ) )
Assert . assertThat ( job . sendCommandStr ( "test command" ) , is ( "OK" ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( summed ) , equalTo ( new double [ ] { - 1.0 , 0.0 , 1.0 , 2.0 , 3.0 , 4.0 , 5 } ) )
assertThat ( options . isIgnoreFailures ( ) , is ( true ) )
assertEquals ( column , fromProto )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
Assert . assertTrue ( "There should be no GREService if no gre service is configured" , greServices . isEmpty ( ) )
assertThat ( g . toSmiles ( ) , is ( "CC=[C@@]=CC" ) )
assertThat ( f . format ( time ) , is ( "17:45 PDT" ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
Assert . assertEquals ( "SELECT USER();" , text )
assertTrue ( filteredEvidenceItemMap . isEmpty ( ) )
assertEquals ( 0 , errors . size ( ) )
Assert . assertEquals ( id2 - id , ( id2 - id ) , ( long ) MIN_BLK_SIZE )
assertTrue ( ! plan1 . equals ( plan2 ) )
assertTrue ( size < BUFFER_SIZE )
assertTrue ( Futures . getUnchecked ( collector ) )
assertThat ( propertyVariable , is ( "alex" ) )
assertNotNull ( test . m1 )
assertNull ( study )
assertNotNull ( bean )
assertTrue ( retCode == 0 )
assertFalse ( rolesPrivileges . isEmpty ( ) )
assertEquals ( 2 , branches . size ( ) )
assertThat ( supplier . authForImage ( image ) , is ( notNullValue ( ) ) )
assertEquals ( 1234 , unprocessed . getExpected ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatus ( ) )
assertFalse ( kbuilder . getErrors ( ) . toString ( ) , kbuilder . hasErrors ( ) )
assertionHelper . assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile , ( File ) destFile )
assertTrue ( clas . getClass ( ) . getName ( ) , ( Boolean ) clas )
runner . assertAllFlowFilesTransferred ( PublishKafka_1_0 . REL_SUCCESS , 3 )
Assert . assertNull ( tags )
assertEquals ( "Max Mustermann" , result )
assertTrue ( result . length ( ) > 0 )
assertEquals ( map1 , map2 )
Assert . assertEquals ( "org.jboss.as:jboss-as-arquillian-container-domain-remote:7.1.1.Final" , adapter . dependencies ( ) [ 0 ] )
assertThat ( zonedDateTime , is ( ZonedDateTime . parse ( "1969-07-21T12:56:00+10:00[Australia/Brisbane]" ) ) )
assertEquals ( "<b>1</b>\\n<p><b>2</b>3</p>" , doc . body ( ) . html ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 1 , res . getInt ( "nbHits" ) )
Assert . assertEquals ( "2011-11-01 00:00:00" , formater . format ( date . getTime ( ) ) )
Assert . assertFalse ( "server shouldnt supoort case-insensitive" , isSupport )
assertEquals ( Arrays . asList ( new CalculatedDatum < String > ( "assessments" , "HighestEver" , "ACT" , null , highestEver ) ) , data . getCalculatedValues ( ) )
assertThat ( Foo . class . getDeclaredField ( "f" ) . getModifiers ( ) , is ( Modifier . PUBLIC ) )
Assert . assertTrue ( newSql . equals ( "SELECT * FROM cpcplan" + suffix + " WHERE name = :name" ) )
assertThat ( getRecordedDomain ( ) , hasCondition ( Available ) . withStatus ( "True" ) )
assertNotNull ( text )
assertThat ( problems . size ( ) , is ( 0 ) )
assertEquals ( - 150 , scorer . scorePosition ( board , context ) )
Assert . assertEquals ( 0 , importHandler . cachedImports . size ( ) )
assertTrue ( mapper . getOntologyIRIs ( ) . contains ( df . getIRI ( "http://owlapitestontologies.com/thesubont" ) ) )
Assert . assertEquals ( resp . getStatus ( ) , HttpServletResponse . SC_UNAUTHORIZED )
assertTrue ( loc . contains ( "nameid-format=emailAddress" ) )
assertEquals ( "image" , os . toString ( "UTF-8" ) )
assertEquals ( "宄ㄧ��娲�" , elValue )
assertSame ( out , result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( latch . await ( WAIT_SEC , TimeUnit . SECONDS ) )
Assert . assertTrue ( result . toString ( ) , result . isSuccessful ( ) )
assertNull ( factory . newNameResolver ( new URI ( "bbb://foo" ) , Attributes . EMPTY ) )
assertEquals ( expected , got )
assertNull ( "Therapy object wasn't null" , therapy )
AssertiveInstance . init ( )
Assert . assertNull ( userService . getUser ( 502 ) )
ctx . assertTrue ( res . size ( ) >= 2 )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertEquals ( inc . get ( ) . get ( ) , outRA . get ( ) . get ( ) )
assertFalse ( parameter . isNamed ( ) )
assertEquals ( 0 , out . size ( ) )
assertEquals ( 1 , livePostManager . getAll ( ) . size ( ) )
Assert . assertTrue ( this . manager . connectAll ( this . family1 , Arrays . asList ( null , this . person1 , null , this . person2 ) ) )
assertArrayEquals ( new byte [ ] { 1 , 2 , 3 , 4 } , sink . toByteArray ( ) )
assertThat ( axioms , hasItem ( annotationAssertion ) )
assertEquals ( result , MessageFormat . format ( "{7,date,short} {7,time}" , min ) )
assertEquals ( value , returned )
assertEquals ( "onetwo" , sb . toString ( ) )
assertThat ( unmarshal ( sb ) , hasEntry ( "mdc key" , "mdc" + HACK_ATTEMPT ) )
assertEquals ( "NOT (x = 5 OR y = 5)" , c . toString ( ) )
assertNotNull ( jobProperties )
Assert . assertEquals ( 4 , fields . size ( ) )
assertThat ( estimator . getCardinality ( ) , is ( crossNode . getCardinality ( ) ) )
Assert . assertEquals ( "Application name" , "MyApplication" , dag . getAttributes ( ) . get ( com . datatorrent . api . Context . DAGContext . APPLICATION_NAME ) )
assertEquals ( IP_10_123_1_54_80 , StringUtils . formatSocket ( socket ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertTrue ( vret . isPassed ( ) )
assertSelect ( tq , binding ( vars , "\\"Alice\\"" , "\\"Smith\\"" ) )
assertEquals ( expected , location )
assertFalse ( Strings . isNullOrEmpty ( column . toString ( ) ) )
assertThat ( taskLogsFilter . decide ( event ) , equalTo ( NEUTRAL ) )
assertThat ( c . getResponseCode ( ) , is ( 201 ) )
assertEquals ( "tpc/incoming/2014/02/01/03" , path )
Asn1UtilTest . assertEncoded ( ENCODED_IPV4_FAMILY , subject . ipAddressFamily ( resources ) )
assertThat ( p1 , is ( p2 . inverse ( ) ) )
assertTrue ( lineOffsetExpected . equals ( lineOffset ) )
assertEquals ( m1 , m2 )
assertEquals ( "http://example.org/{X}/{Y}/{/" , URITemplates . getUriTemplateString ( f1 ) )
assertEquals ( 1 , result )
assertEquals ( 0 , new PatternComparator ( true ) . compare ( recognizedPattern1 , recognizedPattern2 ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( url ) )
assertEquals ( expected , cls )
Assert . assertEquals ( "True" , obs . getValueAsString ( Locale . ITALIAN ) )
assertEquals ( end - start , 100 , 50 )
assertTrue ( element . getElements ( ) . isEmpty ( ) )
Assert . assertEquals ( 42 , result )
Assert . assertEquals ( 2 , result . intValue ( ) )
assertEquals ( HttpStatus . CREATED , statusCode )
assertThat ( renderer . getShortForm ( entity ) , is ( "owl:backward-compatibility-with" ) )
assertEquals ( "auditOperationType must not be null." , e . getMessage ( ) )
assertTrue ( reindeerHeight <= valoHeight )
HeadlessTestUtils . assertHeadlessYes ( $ . driver ( ) . get ( ) )
assertNull ( result )
Assert . assertTrue ( expected . similar ( actual ) )
assertThat ( id , is ( expectedId ) )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "adm2Name" ) )
Assert . assertEquals ( "123\\n--\\n[0:1,1:2,2:3]" , html )
assertEquals ( geojsonRDD . rawSpatialRDD . count ( ) , 3 )
Assert . assertEquals ( ScoreLangConstants . EVENT_EXECUTION_FINISHED , runtimeInformation . getEventType ( ) )
assertEquals ( "1111" , response . getString ( "alerts" ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
assertEquals ( new URL ( appbase . toString ( ) ) , app . getRemoteURL ( "" ) )
assertSorted ( map )
assertEquals ( numAttributes , relatedResult . getAttributeGroups ( ) . size ( ) )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertTrue ( actual . isEmpty ( ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getNodeName ( ) , is ( "kube-01" ) )
assertEquals ( "Hostname was not parsed correctly " , true , lslp . parseLine ( pattern , 1 , 2 , 2 , 2 , 2 , "HOSTNAME:.COMMAND=localhost" ) )
Assert . assertTrue ( "Help for " + cmd + " should have been invoked." , help . contains ( cmd ) )
assertTrue ( encoded . indexOf ( "\\r\\n" ) == encoded . lastIndexOf ( "\\r\\n" ) )
assertEquals ( "[(AppNode:test:0>4)>(file:8>11)]" , sn . stringify ( true ) )
assertEquals ( flavour , flavour2 )
assertEquals ( mav . getViewName ( ) , "redirect:/topics/" + TOPIC_ID )
assertEquals ( 1 , map . size ( ) )
assertThat ( result , is ( false ) )
Assert . assertEquals ( 3 , queue . size ( ) )
Assert . assertEquals ( 2 , violations . size ( ) )
assertEquals ( "Find by UOM label not returning a list with one value descriptor" , 1 , valueDescriptors . size ( ) )
assertThat ( results , is ( Arrays . asList ( "A-" , "B-" , "C" ) ) )
Assert . assertNull ( this . component . resolveEntity ( NONEXISTENT_ID ) )
assertTrue ( bout . toString ( ) . contains ( "Table:" + tableId ) )
assertThat ( cut . apply ( pageObject ) , is ( true ) )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT * FROM A UNION ALL SELECT * FROM B" ) )
assertThat ( renderingComparator . compare ( axiom1 , axiom2 ) , is ( 1 ) )
assertEquals ( "a<V>\\n" , found )
assertThat ( event . isStarted ( ) , is ( true ) )
Assert . assertTrue ( Models . isomorphic ( expected , actual ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . EDIT , this . doc ) )
assertEquals ( 0.5 , dataSet . collect ( ) . get ( 0 ) , 0.001 )
assertThat ( output . toString ( ) , is ( "RUNNING" ) )
Assert . assertEquals ( 3 , a . getNumberOfMethods ( ) )
Assert . assertEquals ( vars . size ( ) - 1 , vars . size ( ) )
Assert . assertEquals ( 1 , events . size ( ) )
assertThat ( c1 . call ( 1 , 2 ) , returns ( 98123 ) )
assertEquals ( 5.25D , toml . getDouble ( "double" ) . doubleValue ( ) , 0.0 )
Assert . assertEquals ( State . END , _state )
assertSame ( d1 , d2 )
assertThat ( ListNumbers . toListNumber ( array ) , equalTo ( ( ListNumber ) new ArrayShort ( array ) ) )
assertArrayEquals ( data , stream . toByteArray ( ) )
Assert . assertNotNull ( addressResultsDto )
assertArrayEquals ( params , instance . getParams ( ) )
Assert . assertEquals ( xmlEsperado , icms51 . toString ( ) )
assertNotNull ( Query . fetcher ( "UAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "UHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 01" ) )
authRule . assertScenario ( scenario )
assertThat ( result , is ( false ) )
assertFalse ( "isLoaded should return false if only element actually displayed is not required when " + "RequireAll annotation is used." , testView . isLoaded ( ) )
Assert . assertEquals ( MedianOf3PivotingStrategy . class , getUnivariateStatistic ( ) . getPivotingStrategy ( ) . getClass ( ) )
assertEquals ( DecodeQualification . UNABLE , readerPlugIn . getDecodeQualification ( stReader ) )
Assert . assertEquals ( result . trim ( ) , propertyFileString )
Assert . assertEquals ( "Hi ejbthree1852" , result )
AsserterWithLazyInitialisationAlgorithm . ASSERTER . assertImmutable ( klasse )
assertTrue ( ! branch_conditions . isEmpty ( ) )
assertTrue ( "Expected ClusterVirtualIps object" , obj instanceof ClusterVirtualIps )
assertNotNull ( factory . createContext ( file ) )
assertThat ( underTest . isValid ( "nx-repository-admin-maven2-maven-public-*" , context ) , is ( true ) )
assertThat ( channelDTO , nullValue ( ) )
assertEquals ( expResult , result )
assertEquals ( "MyService1" , service . name ( ) )
assertTrue ( factoryReference . creator ( ) instanceof IObjectCreator < ? > )
Assert . assertSame ( mockManagerFactory , AbstractDecorator . getOriginalDecoratedObject ( victim . getWroManagerFactory ( ) ) )
assertTitleEquals ( "resourceReference" , "WMS specification" , getSingleton ( resource . getResourceReferences ( ) ) )
assertEquals ( "{\\"d\\":{\\"uri\\":\\"" + BASE_URI + "Rooms?deltatoken=1234\\"}}" , json )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEquals ( "Bear And Steady Gen" , bearAndSteadyGene . print ( "Bear And Steady" ) )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
Assert . fail ( )
assertEquals ( v , v1 )
assertEquals ( "Generator should have been called once" , 1 , generator . callCount )
assertThat ( infos . length , is ( 0 ) )
Assert . assertEquals ( "Title incorrect" , TITLE_TEXT , fieldSet . getTitle ( ) . getText ( ) )
assertEquals ( new EntityTuple ( entity ) . getNrCols ( ) , 2 )
Assert . assertEquals ( "8080" , result )
assertOperation ( ( ) -> roleClient . getSpace ( this . spaceName ) )
assertFalse ( credentials . isPresent ( ) )
Assert . assertEquals ( 2 , list . size ( ) )
assertFalse ( tokenizer . next ( testString ) )
assertUrl ( url , "http" , "localhost" , 80 , "/" )
Assert . fail ( )
Assert . assertNull ( loadedModule )
assertEquals ( tagList1 , tagList2 )
assertTick ( 2 )
assertEquals ( m1 , m2 )
assertNotNull ( stream )
assertEquals ( "encoded/decoded long do not match" , value , decoded )
when ( ) . get ( "tests/gateleen/cors/TestResource" ) . then ( ) . assertThat ( )
Assert . assertEquals ( builtSrCollection , srCollection )
assertEqualsIgnoreWhitespace ( drl , RuleModelDRLPersistenceImpl . getInstance ( ) . marshal ( model ) )
Assert . assertTrue ( baggage . equals ( tchannel . getListeningHost ( ) ) || baggage . equals ( tchannel . getListeningHost ( ) + ":" + tchannel . getPort ( ) ) )
assertThat ( result . endsWith ( "[inNode=node01 inPort=port01]" ) , is ( true ) )
assertEquals ( 1 , convertResult . size ( ) )
assertOut ( expected )
assertEquals ( ints , ints2 )
assertEquals ( timezone , "GMT+3" )
assertThat ( arguments . getResources ( ) , hasSize ( 2 ) )
assertEquals ( 2 , query ( ) . from ( cat ) . where ( path . eq ( QCat . cat . bodyWeight . max ( ) ) ) . fetchCount ( ) )
assertEquals ( Arrays . asList ( "/dest/test1.txt" , "/dest/woo/test2.txt" ) , walker . paths )
assertNotNull ( provider . getConstituents ( ) )
assertEquals ( ProductData . TYPE_INT32 , tiffIFD . getBandDataType ( ) )
assertEquals ( db , southboundProvider . getDb ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertNull ( instance . getBackground ( ) )
assertThat ( RpslObjectFilter . diff ( original , updated ) , is ( "@@ -1,4 +1,2 @@\\n" + " mntner:         UPD-MNT\\n" + "-description:    descr\\n" + "-mnt-by:
assertEquals ( expResult , result )
assertTrue ( Initialize . checkInit ( fs , sconf , conf ) )
assertEquals ( defaultExtension0 . hashCode ( ) , defaultExtension1 . hashCode ( ) )
assertEquals ( 0 , elements . size ( ) )
assertEquals ( 3 , a . getComponentId ( ) )
assertEquals ( JodaBeanUtils . collectionTypeTypes ( test , Person . class ) , expected )
Assert . assertEquals ( "1:2.5" , ret . toString ( ) )
assertTrue ( result . contains ( "CURRENT LOG APPENDER" ) )
assertThat ( this . testTarget . cutValue ( null ) , is ( "MDCValue" ) )
Assert . assertFalse ( dictionary . containsWord ( "a" ) )
assertTrue ( unwrapClass . isAssignableFrom ( unwrappedCacheEntry . getClass ( ) ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( 2 , connection . getReplyCount ( ) )
Assert . assertEquals ( resourceContent , writer . toString ( ) )
assertNotNull ( SyncListPermission . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( buf . toString ( ) , "{\\"a\\":\\"aa\\",\\"b\\":{},\\"c\\":\\"cc\\"}" )
assertTrue ( SpriteUtils . isAliasSprite ( sprite1 , sprite1 ) )
assertEquals ( object , cache . get ( url , clazz ) )
assertEquals ( TEST_CUSTOM_PAYLOAD , testResult . getProvisioningPayload ( ) )
assertUnderflow ( ( long ) x + ( long ) y , result )
assertEquals ( "hello world" , result )
assertEquals ( "user2" , result )
assertEquals ( "updateAllComponentTreeUIs" , 3 , window . getComponents ( ) . size ( ) )
assertNull ( parsedArg )
assertEquals ( "testValue" , value )
assertEquals ( 2 , all . size ( ) )
assertEquals ( Seconds . of ( - 4 ) , test12 . dividedBy ( - 3 ) )
assertThat ( results , hasSize ( 0 ) )
Assert . assertEquals ( polygon , result . getValue ( ) )
assertTrue ( sut . writeList ( val . getBytes ( ) ) )
assertNotSame ( reply1 , reply2 )
assertEquals ( "\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\
Assert . assertEquals ( expected , outValue )
Assert . assertEquals ( "S" + System . getProperty ( "line.separator" ) + "an" + System . getProperty ( "line.separator" ) + "D" + System . getProperty ( "i" ) + System . getProperty ( "e" ) + System . getProperty ( "
arrays . assertContains ( description , new byte [ 1 ] , null )
assertTrue ( node . getStatusCode ( ) == 200 )
assertEquals ( 0L , runtimeService . createProcessInstanceQuery ( ) . or ( ) . processInstanceId ( "undefinedId" ) . involvedGroups ( Collections . singleton ( "nonInvolvedGroup" ) ) . endOr ( ) . count ( ) )
assertThat ( rendered , is ( test [ 1 ] ) )
Assert . assertEquals ( rtpPacket . getTimestamp ( ) , 0 , "Timestamp should be 0." )
assertMockEndpointsSatisfied ( 1 , TimeUnit . MINUTES )
assertEquals ( arr , resultArr )
assertEquals ( input . acceptObjectKey ( JsonEvent . STRING ) , expected )
assertEquals ( expected , roads )
Assert . assertEquals ( String . class , t . getType ( ) )
assertThat ( TYPE_HANDLER . getResult ( rs , 1 ) , nullValue ( ) )
assertEquals ( first , test )
assertNotNull ( user )
assertThat ( e . getId ( ) , is ( 3 ) )
Assert . assertNotNull ( pong )
assertEquals ( expectedJson , rp . toJson ( ) )
assertTrue ( call ( dao -> dao . unlinkAsset ( asset ) ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertNull ( computeTMTextUnitMD5 )
Assert . assertEquals ( "MultiRFileOutputFormatter#getCompressionType() did not return the expected compression type." , expected , MultiRFileOutputFormatter . getCompressionType ( ) )
assertEquals ( 1 , salaboyTasks . size ( ) )
assertFalse ( results . getAttribute ( ValidationActionTypeService . VALIDATIONS_ACTION_ATTRIBUTE ) == null )
assertThatListContainsOneElement ( "bar" )
assertEquals ( "mm" , s )
Assert . assertFalse ( InstanceValidationUtil . hasResourceAssigned ( mock . dataAccessor , TEST_CLUSTER , TEST_INSTANCE ) )
assertTrue ( "Failed to match with compatible IPv6 subnet." , match )
assertXMLEqual ( XmlUtils . toString ( actual ) , expected , actual )
assertTrue ( "Returned code is expected to be OK" , code == BKException . Code . OK )
assertTrue ( o . description ( ) . startsWith ( "(overridden) " + "<j_org_robovm_objc_CustomClassTest$SubClass1: 0x" ) )
assertTrue ( consumerFile . exists ( ) )
assertEquals ( "31.Jul.2014 13:58:14 UncaughtException in thread: main (id 1, priority 5)\\n" + "java.lang.RuntimeException: Second\\n" + "\\tat SecondClass.secondMethod(SecondClass.java:12)
assertNotNull ( object )
assertEquals ( expStr , valStr )
assertTrue ( jsonElement . isJsonNull ( ) )
datesWithCustomComparisonStrategy . assertIsInTheFuture ( someInfo ( ) , actual )
assertEquals ( 4 , record . size ( ) )
Assert . assertEquals ( "Region (RS Index)" , command . getLoad ( ) . getLevelClass ( ) . getLevelTypeString ( ) )
assertEquals ( 2 , adapter . getColumnIndex ( id ) )
assertThat ( ( Integer ) prop0 . getClass ( ) . getMethod ( "getSeedRatio" ) . invoke ( prop0 ) , is ( 1500 ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( results , is ( new String [ ] { "A,B" , "C,D" } ) )
Assert . assertEquals ( testName + testExtension , actual )
assertThat ( fe , notNullValue ( ) )
SetSpanReceiver . assertSpanNamesFound ( expectedSpanNames )
assertSame ( HttpResponse . SC_BAD_REQUEST , response . getHttpStatusCode ( ) )
Assert . assertNotNull ( connection . getWarnings ( ) )
assertNull ( ConfigUtils . newInstance ( this , "testProperty" , InnerClass . class ) )
assertThat ( formatterOutput , sameJSONAs ( expected ) )
Assert . assertEquals ( expected , result )
Assert . fail ( "Exception should be thrown" )
assertThat ( actualResult , equalTo ( expectedResponses ) )
assertNotNull ( presenter . listEditor )
Assert . assertEquals ( 2 , commands . getCommands ( ) . size ( ) )
assertEquals ( desc . name ( ) , "Linting sensor for TypeScript files" )
assertTrue ( outAny . equal ( inAny ) )
assertTrue ( "Current version exists" , versions . contains ( version ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
AssertiveInstance . init ( )
assertTrue ( str . contains ( "rdf:type rdfs:Resource ." ) )
assertTrue ( config . isAdvancedClusterConfigSet ( ) )
assertFalse ( newVrp . getJobs ( ) . containsKey ( "4" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( expected , actual )
Assert . assertNotNull ( ewd )
Assert . assertEquals ( Redirect . Status . USE_PROXY . intValue ( ) , response . status )
Assert . assertEquals ( 4 , records . size ( ) )
Assert . assertEquals ( 1 , list . size ( ) )
assertTrue ( "Returned xml length not > 0." , serviceXml . length ( ) > 0 )
assertEquals ( "foo" , res . get ( "foo" ) )
assertEquals ( "{\\"d\\":{\\"EntitySets\\":[" + "\\"Employees\\",\\"Teams\\",\\"Rooms\\",\\"Managers\\",\\"Buildings\\"," + "\\"Container2.Photos\\"]}}" , getBody ( response ) )
assertEquals ( expected , result )
assertEquals ( "https://java.example.com/foo/bar/buz/qux" , got . toString ( ) )
assertThat ( ChatColor . stripColor ( subject . toString ( ) ) , is ( expected . toString ( ) ) )
Assert . assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( "foobar" , ( String ) ext . getValue ( null , obj ) )
assertEquals ( "primitiveBoolean" , true , bean . getPrimitiveBoolean ( ) )
assertEquals ( "columnControl must have update action from ui" , UIManager . getColumnControlAction ( ColumnControlButton . COLUMN_CONTROL_BUTTON_UPDATE_ACTION_KEY ) , control . getUpdateAction ( ) )
assertTrue ( this . remotingClient . isConnected ( ) )
assertNotNull ( VirtualSchemaTO )
assertThat ( ruleManager . get ( id [ 0 ] ) , is ( code [ 0 ] ) )
assertEquals ( prev , propertiesConfigurationProperties . remove ( key ) )
Assert . assertEquals ( TimeZone . getTimeZone ( "America/New_York" ) , config . getTimeZone ( ) )
assertEquals ( TEST_2007_07_15_PONE , t )
assertSuccess ( services . executeOperation ( udpOperation ) )
Assert . assertFalse ( compatibilityResult . isCompatible ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 . FILTER(!bound(?user)) }" )
Assert . assertFalse ( testFailed )
assertNull ( "Expected null privacy policy, but it is not." , privacyPolicy )
assertNull ( transaction )
Assert . assertEquals ( "null" , writer . toString ( ) )
Assert . assertEquals ( new IntNode ( 1 ) . add ( new IntNode ( 2 ) , new IntNode ( 3 ) ) , node )
assertContains ( indels , 100 , "G" , "GGAT" )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertMockEndpointsSatisfied ( )
assertNotNull ( objJPAEdmProperty . getJPAEdmKeyView ( ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"record\\":{\\"url\\":\\"http://sendme.com/tropo\\",\\"beep\\":true,\\"interdigitTimeout\\":5.0,\\"maxTime\\
Assert . assertEquals ( new Partition ( "1-0" ) , partition )
assertBridJFaster ( bridJFaster , 20 )
assertSame ( error , failingStream . getError ( ) )
assertEquals ( expectedQuery , actualQuery )
tc . assertEquals ( thread , Thread . currentThread ( ) . getName ( ) )
assertThat ( result . getRequest ( ) . getSession ( true ) , not ( nullValue ( ) ) )
assertTrue ( ex . canBeDividedby3 ( "-15339" ) )
assertEquals ( "should return correct project page" , "project" , testResource . getSpecificProjectPage ( projectId , principal , model ) )
assertThat ( result , is ( prevComponent ) )
assertEquals ( 10 , total )
assertEquals ( "simpleList:\\n" + "  - Value1\\n" + "  - Value2\\n" + "  - Value3\\n" , list . toString ( ) )
connection . assertBufferEndsWith ( "Option: --reset-configuration is required for this command." + Config . getLineSeparator ( ) )
assertNull ( persistenceStructureService . listCollectionObjectTypes ( notAnOjbObject ) )
assertEquals ( slice1Assert , slice1Test )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
verifier . assertFileNotFound ( GENERATED_SCHEMA )
assertEquals ( "Expected default type of analyzer" , StandardAnalyzer . class , analyzer . getClass ( ) )
assertEquals ( "sub" , subTrans . getMessage ( ) )
assertTokenStreamContents ( ts , new String [ ] { "vitajt" , "wikip茅di" } , new int [ ] { 0 , 11 } , new int [ ] { 7 , 20 } , null , new int [ ] { 1 , 2 } , null
assertEquals ( actual , count )
Assert . assertEquals ( msg , result )
assertEquals ( expectedResult , verifyOscar . invoke ( audit ) )
assertScenario ( )
Assert . assertEquals ( "Java" , title )
assertEquals ( 2. , matrix . getTransportCost ( loc ( 1 ) , loc ( 2 ) , 0.0 , null , null ) , 0.1 )
assertEquals ( "012345" , r )
Assert . assertEquals ( list . size ( ) , actual . size ( ) )
assertThat ( replacedQuery , is ( "a = ? AND (`b.c` = ? OR d IN ?) ORDER BY x" ) )
assertEquals ( "Unchanged value" , ( Integer ) 10 , ref . deref ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "myValue" , store . get ( "test" , sessionId , String . class ) )
assertEquals ( c1 , c2 )
Assert . areEqual ( 1 , st . getInt ( 1 ) , "验证无数据" )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( baselineData . getHospital ( ) , "patient" )
Assert . assertNull ( actual )
assertThat ( response . getDomainSearchResults ( ) . get ( 0 ) . getHandle ( ) , equalTo ( "TEST1-TEST" ) )
assertObjectEquals ( "{type:'object',additionalProperties:{type:'object',properties:{f1:{type:'string'}}},description:'org.apache.juneau.jsonschema.JsonSchemaGeneratorTest$BeanMap<java.lang.String,java.lang.Object>:'}"
Assert . assertTrue ( signature . equals ( "Signature for test_kylin_cube without slr ready is incorrect" ) )
assertEquals ( sessionCount , SessionListener . getSessionCount ( ) )
assertThat ( TestI18n . testMessage . text ( ) , is ( "Test Message" ) )
assertTrue ( majorJavaVersion >= 1 )
assertTrue ( dd . isWildcardEnumValue ( SpecialEnum . FIELD ) )
assertSamples ( )
this . assertVerification ( )
assertProcessInstanceCompleted ( processInstance )
Assert . assertEquals ( "First option should be optionB" , optionB , SelectListUtil . getFirstOption ( options ) )
assertEquals ( 2 , tokens . size ( ) )
assertEquals ( 0.5 , FrontUtils . distanceToClosestPoint ( point2 , front ) , EPSILON )
assertTrue ( toml . getList ( "a" ) . isEmpty ( ) )
assertNull ( "Got a date" , conf . getDate ( DataConfiguration . DATE_FORMAT_KEY ) )
assertTrue ( Double . isNaN ( percentile . evaluate ( emptyArray ) ) )
assertEquals ( "description" , resources . getString ( "description" ) )
assertEquals ( expectedTextResult , new String ( result ) )
assertNotNull ( workflowService . startWorkflow ( workflowId ) )
assertEquals ( expected , transformed )
assertEquals ( first . not ( ) , builder . getValue ( ) )
assertThat ( bomb . state ( ) , is ( "kaboom!" ) )
assertNotNull ( colportor . getId ( ) )
Assert . assertEquals ( urlEsperada , nota . getInfoSuplementar ( ) . getQrCode ( ) )
assertTrue ( StoreParams . sameValues ( p , pDft ) )
assertEquals ( true , p . getActive ( ) )
assertTrue ( dbCon . contains ( "some_id" ) )
assertTrue ( "Successful permission check was not logged" , loggedSuccessfulPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertEquals ( 0 , userList . indexOf ( user ) )
assertTrue ( status . isClosed ( ) )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . NOT , TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . GTE , v , TERM_FACTORY . getConstantLiteral ( "1" , XSD . LONG ) ) ) , translation . get (
mockery . assertIsSatisfied ( )
Assert . assertNull ( new CompareTool ( ) . compareXmp ( destinationFolder + fileName , sourceFolder + "cmp_" + fileName , true ) )
assertEquals ( "ThinkTimeStep : " , result )
Assert . assertEquals ( "��瑁�|��|��瑁�" , words )
assertEquals ( cells . size ( ) , 2 )
assertEquals ( expResult , result )
assertEquals ( stat , fromJson )
assertEquals ( ConnAckMessage . UNNACEPTABLE_PROTOCOL_VERSION , m_returnCode )
assertTrue ( string , string . contains ( "foo" ) )
assertFalse ( validator . isValid ( resource , MetadataSection . GEOGRAPHIC_COVERAGE_SECTION ) )
assertTrue ( subject . getIssuer ( ) != null )
Assert . assertEquals ( src , URLDecoder . decode ( dest , "utf-8" ) )
assertThat ( Modifier . isPrivate ( constructor . getModifiers ( ) ) , is ( true ) )
Assert . assertTrue ( mesageReceivedByClient )
assertTrue ( page . asXml ( ) . indexOf ( "three" ) != - 1 )
assertFalse ( "Expected ListSchema integer validation failure did not succeed" , schema . validate ( integerEntity ) )
Assert . assertTrue ( color . equals ( new Color ( 204 , 204 , 0 ) ) )
assertThat ( "Locations created with identical paths and different properties must not be equal" , locationA1 , is ( locationA2 ) )
assertEquals ( "Failed injecting literal with invoke()" , "\\"foo\\".toString()" , result )
assertThat ( pactFoder . exists ( ) , is ( true ) )
assertEquals ( CubeEdge . i , edge )
assertEquals ( expecting , found )
assertEquals ( unitTestTablePojoRead . getPayload ( ) , null )
assertEquals ( expResult , result )
assertEquals ( p , p2 )
Assert . assertEquals ( entity . ttl , reloaded . ttl )
assertThat ( changes . size ( ) , is ( 1 ) )
Assert . assertTrue ( iterated )
assertTrue ( multiMap . remove ( key , value ) )
assertThat ( ValidatorUtil . formatMessages ( messages ) , messages . size ( ) , is ( 0 ) )
assertEquals ( true , testClass . isUnableToCreateMoreTransactions ( ) )
assertThat ( xray . getInterfaceMethods ( ) . keySet ( ) , hasSize ( UnlockedObject . class . getMethods ( ) . length ) )
assertEquals ( expResult , result )
Assert . assertTrue ( "User should be logged in!" , browser . findElements ( By . xpath ( "//li[contains(text(), 'Welcome')]" ) ) . size ( ) > 0 )
assertThat ( versionedIdsOf ( units ) , bagEquals ( versionedIdList ( REFERENCED_BUNDLE_V1 , OPTIONAL_BUNDLE ) ) )
assertThat ( response . getStatus ( ) , is ( 301 ) )
assertFalse ( testResults . getInvoked ( ) )
Assert . assertEquals ( 1 , term . getConceptReferenceTermMaps ( ) . iterator ( ) . next ( ) . getTermA ( ) )
assertNotNull ( resultMap )
assertTrue ( cv . supports ( Date . class ) )
assertEquals ( 0.0 , score , 0 )
Assert . assertEquals ( 0 , found )
assertEquals ( 10 , toTest . deserialize ( ) )
Assert . assertNull ( result )
assertEquals ( 10 , instrumentation . getData ( ) . size ( ) )
assertThat ( driver . findElement ( MobileBy . xpath ( "//UIAProgressIndicator[@name='default_progress_bar']" ) ) . isDisplayed ( ) , is ( true ) )
assertNotNull ( nestedAnnotation )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
assertEquals ( 654321 , ws . getReceiveBufferSize ( ) )
assertFalse ( outputGraphExecutor . equals ( nullOutput ) )
Assert . assertEquals ( 200 , ex . getContext ( ) . getProperty ( HttpContextMapper . HTTP_RESPONSE_STATUS ) . getValue ( ) )
assertEquals ( 1 , jobs . size ( ) )
assertTrue ( "isDisplayed should return true if at most a number of elements are displayed as" + " specified to be required, with any number of non-displayed elements." , element . isDisplayed ( ) )
assertEquals ( expected , getString ( TestElementImpl . example ( ) ) )
assertEquals ( Sets . newHashSet ( testWorkflow1v1 , testWorkflowPhylogenomics ) , workflows )
assertArrayEquals ( TEObjectUtil . TE_LSP_ASSOCIATION_2 , ByteArray . getAllBytes ( output ) )
assertArrayEquals ( Doubles . toArray ( huginProbabilities ) , Doubles . toArray ( amidstProbabilities ) , 0.01 )
assertEquals ( "Nigel Rees" , orgl . getOrg ( "Nigel Rees" ) )
assertTrue ( smsSettings . isConfigured ( ) )
assertThat ( currentPage . getCurrentUrl ( ) , is ( "http://www.apache.org" ) )
Assert . assertEquals ( 6 , result )
assertEquals ( Arrays . asList ( remainder1 , remainder2 ) , magic . divideAndRemainder ( ) )
assertFalse ( "Server: server-name" , listParser . nextRow ( ) )
assertEquals ( "aHR0cDovL2xldmVsdXBsdW5jaC5jb20vZXhhbXBsZXMvP3Bhcm09VGhpcyBwYXJhbWV0ZXI="
Assert . assertTrue ( infoList . isEmpty ( ) )
assertEquals ( createChildListing ( "child3" ) , future . get ( ) . getResult ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , expectedQuery ) )
Assert . assertTrue ( users . size ( ) >= 0 )
Assert . assertEquals ( "Unexpected coverage: " , 2d / 3d , best . getCoverage ( ) , 0.001 )
assertTrue ( permissionEvaluator . hasProjectPermission ( authentication , "project" , Permission . EDIT_PAGE ) )
assertEquals ( "{}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
context . assertEquals ( new JsonObject ( input ) , JoltTransformer . transform ( input , identityFunction ) . result ( ) , "the output is expected to be equal to the input" )
assertThat ( base . abs ( base ) , is ( base . abs ( base ) ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( result . size ( ) , 0 )
assertTrue ( userCanDeleteBranch )
assertTrue ( timeline . getFetchCount ( ) > 0 )
assertEquals ( "Merge scripts are not the same" , expectedMergeSimple ( ) , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( "1:xxxy;\\n" , found )
assertEquals ( expected , bos . toString ( ) )
org . junit . Assert . assertEquals ( expected , tHandler . getLastRecord ( ) . getThrown ( ) )
assertThat ( outputFile . length ( ) , is ( 6L ) )
assertNumEquals ( .9d , mdd . calculate ( series , tradingRecord ) )
Assert . assertEquals ( 0 , violations . size ( ) )
assertEquals ( "{ \\"hello\\" : [1,2]}" , writer . toString ( ) )
assertNotNull ( key )
assertRoundtrip ( input )
assertEquals ( 0. , violation , 0.01 )
assertEquals ( Boolean . valueOf ( true ) , result )
assertNotNull ( sKey , aCSS )
assertTrue ( "Should get valid parser" , parser != null )
assertFalse ( rule . shouldProceed ( userSession , request ) )
assertEquals ( displayer . isRefreshOn ( ) , false )
assertAnnotations ( 2 , Quantity . class , new TestQuantity ( 0 , "400 square millimetres" , 400 , "mm^2" , 400 * Area . MM2_TO_M2 , "m^2" , "area" ) , new TestQuantity ( 1 ,
assertTrue ( true )
Assert . assertTrue ( HttpTestUtils . semanticallyTransparent ( originResponse , result ) )
assertEquals ( "id" , id )
assertEquals ( 0 , manager . getAll ( ) . size ( ) )
assertFalse ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
assertNull ( lookUpManager . lookUpWorkingObjectOrReturnNull ( object ) )
assertEquals ( l1 , l2 )
approver . assertApproved ( data , Formatters . table ( ) )
assertEquals ( attributes , repositoryRecord . getCurrent ( ) . getAttributes ( ) )
assertEquals ( expected , sanitized )
assertTrue ( res . toString ( ) . contains ( "HEALTHY" ) )
assertEquals ( "Expected response not seen." , 404 , response . getStatus ( ) )
assertThat ( ( String ) Whitebox . invokeMethod ( target , "getDestinationCompId" , path ) , is ( "topology/nodes" ) )
assertThat ( sut . getName ( ) , is ( "SUT" ) )
assertTrue ( sink1 . getOutputs ( ) . size ( ) == 2 )
assertNull ( person2 )
assertNotNull ( "IDPSSODescriptor is not null" , sp )
context . assertIsSatisfied ( )
Assert . assertEquals ( 200 , response . status )
assertEquals ( "Java" , os )
assertTrue ( i + ", " + src . getAbsolutePath ( ) , src . delete ( ) )
assertEquals ( 10L , target . get ( ) . longValue ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "\\"test\\"" ) )
assertThat ( result , is ( "(((item.lastmodified:[" + escapedFromDate ( DATE ) + " TO " + escapedSetSpec ( SET ) + " TO " + escapedFromDate ( DATE ) + "])))" ) )
Assert . assertEquals ( "should have updated info" , "" , updatedUser . getInfo ( ) )
assertTrue ( AcceptanceTestUtil . isInterested ( peerComponent , remoteWorkerOID . getServiceID ( ) , remoteWorkerMonitorOD . getDeploymentID ( ) ) )
assertEquals ( 1.2e22 , ( ( DoubleValue ) ( ( SelectExpressionItem ) ( ( PlainSelect ) select . getSelectBody ( ) ) . getSelectItems ( ) . get ( 0 ) ) . getExpression ( ) ) . getValue ( ) , 0 )
assertTrue ( "Found nested declarations with reserved character" , nested . containsKey ( COMPLEX_ATTRIBUTES [ 0 ] ) )
assertEquals ( nonAdminTestingAccountEmail , answer . getReturnVal ( ) )
assertEquals ( true , ( allforums . size ( ) > 0 ) )
assertTrue ( startState )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response transactionId is: " ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + name + ".pdf" , destinationFolder , "diff_" ) )
assertEquals ( "" , result )
assertFalse ( iter . hasNext ( ) )
assertThat ( partitionKeyValue . toJson ( ) , equalTo ( mapper . writeValueAsString ( Collections . singletonList ( data . city ) ) ) )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertTrue ( "Didn't get a 200!" , page1 . getWebResponse ( ) . getStatusCode ( ) == 200 )
Assert . assertEquals ( "http://localhost/" + SonarNavigator . RESOURCE_PATH + "123" , url )
assertThat ( "missing owner shall be detected" , validation . hasErrorAbout ( "no" , "owner" ) )
assertEquals ( testSet , monitorNames )
assertThat ( findFeature ( features , "ChangeAvailability" ) , is ( instanceOf ( ChangeAvailabilityFeature . class ) ) )
assertEquals ( "twitter/tweet/_search/version" , search . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertReplacement ( input , regex , replacement , lookBehind , capacityCharBuf , expectedOutput , flags )
assertEquals ( V8Value . V8_OBJECT , type )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
Assert . assertTrue ( isValid , "Poll with empty title and empty items must be valid" )
assertEquals ( expected , toJSON ( series ) )
assertEquals ( "3 uker siden" , t . format ( new Date ( 0 ) ) )
assertEquals ( clazz , request . getTargetClass ( ) )
assertEquals ( null , params . getString ( new Parameter ( "a.k" ) , null ) )
assertThat ( o , nullValue ( ) )
Assert . assertEquals ( entity . publicValue , actualValue )
Assert . assertEquals ( true , result )
Assert . assertTrue ( "claims topics should not merge when they are empty" , MergeUtils . shouldMerge ( t1 , t2 ) )
Assert . assertNotNull ( cu )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_copyFields01.pdf" , destinationFolder , "diff_" ) )
assertThat ( averageTag . evaluate ( outputValues ) , equalTo ( 0.5 ) )
assertTrue ( Arrays . equals ( data , ( boolean [ ] ) deserialize . readObject ( boolean [ ] . class ) ) )
assertions . isNotEmpty ( )
assertEquals ( expected , actual )
assertEquals ( expResult , result )
assertNotNull ( myBean )
assertThat ( errors , hasFieldErrors ( "givenName" , "Patient.names.required.given.family" ) )
Assert . assertEquals ( 0 , stat )
Assert . assertEquals ( reconnectCohort . getShardId ( ) , shard )
Assert . assertEquals ( 1 , new QueryRunner ( this . em ( ) . unwrap ( DataSource . class ) ) . query ( "SELECT COUNT(*) FROM Foo" , new SingleValueHandler < Number > ( ) ) . intValue ( ) )
assertTrue ( ! result . exists ( ) )
assertEquals ( 2 , table . getColumnSpan ( ) )
assertLongArrayEquals ( expected , toLongArray ( splits ) )
assertEquals ( "Must be Equal" , interfaceTypeClass , InterfaceTypeOther . class )
Assert . assertEquals ( 2 , tables . size ( ) )
assertEquals ( 2 , rowCount )
assertEquals ( tp . equalsArtifacts ( key , location , asSet ( "a" ) ) , true )
assertEquals ( "non-object" , b . nonObject ( "non-object" ) )
assertGameOver ( )
assertThat ( getInst ( ) . findNode ( "master" ) , equalTo ( masterNode ) )
assertNoopTracer ( spanBuilder )
assertFalse ( isAuthenticated )
assertFalse ( voter . voteMatch ( affiliation , organization ) )
Assert . assertTrue ( queueResponse . isOk ( ) )
assertEquals ( 6.0 , instance . inclusiveHypervolume ( ind ) , 0.0 )
assertEquals ( "und" , metadata . getLanguage ( ) )
Assert . assertTrue ( comparator . compare ( cell2 , cell1 ) == 1 )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
assertThat ( list . size ( ) , is ( 2 ) )
assertEquals ( expectedResult , verifyTomcat . invoke ( audit ) )
Assert . assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \\"A multi\\\\nline string\\" . }" , query . toString ( ) )
Assert . assertEquals ( 2 , prefixes . size ( ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
assertEquals ( expectedIds , Ids )
assertFederatedServiceResource ( resource )
Assert . assertEquals ( icmsSetado , icms . getIcmssn102 ( ) )
assertContains ( e . getMessage ( ) , "'id'" )
assertEquals ( "a-z" , bitSet . toString ( ) )
Assert . assertEquals ( false , objectSet . isEmpty ( ) )
assertThat ( browsers . size ( ) , is ( 2 ) )
assertNotNull ( photoRepository )
Assert . isTrue ( true )
assertEquals ( 0 , ShadowToast . shownToastCount ( ) )
assertEquals ( expected , ListUtil . generateCommaSeparatedString ( actual ) )
assertEquals ( profile . getName ( ) , copy . getName ( ) )
assertEquals ( "Select with order by" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertEquals ( 0 , analyser . getWaitingTimeAtActivity ( route . getStart ( ) , route ) , 0.01 )
Assert . assertEquals ( "center" , cell . getHorizontalAlign ( ) )
assertThatSql ( query , is ( "SELECT nodes.col1,nodes.col2 FROM table AS nodes" ) )
assertEquals ( 5.3 , result , 0.00001 )
assertThat ( end , is ( PlainDate . of ( 2011 , Month . DECEMBER , 31 ) . at ( PlainTime . midnightAtStartOfDay ( ) ) . inTimezone ( ZonalOffset . ofHours ( AHEAD_OF_UTC , 14 ) ) ) )
repository . findByFirstnameAndLastname ( Single . just ( "Walter" ) , "White" ) . test ( ) . awaitCount ( 1 ) . assertNoErrors ( )
Assert . assertEquals ( h1 . hashCode ( ) , h2 . hashCode ( ) )
Assert . assertEquals ( createArrayNode ( 3 , 4 ) , result )
assertTrue ( "Path for added node is wrong: actual=" + listener . getEvents ( ) . get ( 0 ) . getPath ( ) + ", expected=" + addedNode . getPath ( ) , containsPath ( listener , addedNode . getPath ( ) ) )
assertTrue ( span . asText ( ) . contains ( "NullPointerException" ) )
assertFalse ( tocFile . exists ( ) )
assertTrue ( _receiver . validate ( ) )
assertEquals ( vr . getValidity ( ) , Validity . VALID )
assertEquals ( 1 , testResults . getDeliveries ( ) )
Assert . assertEquals ( 200 , statusTuples . size ( ) )
assertEquals ( expResult , result )
assertEquals ( expectedOutput , actualOutput )
Assert . assertEquals ( 0 , terms . size ( ) )
assertNull ( eventScanConfig )
assertTrue ( JAC182Helper . narrow ( localServer ) )
assertViolationsThat ( report . getValidationViolations ( ) , equalTo ( "Root definition has missing title" ) )
assertTrue ( nodes . split ( "\\n" ) . length > 0 )
assertEquals ( 1 , eventSubscriptions . size ( ) )
assertThat ( issues , is ( empty ( ) ) )
assertEquals ( 2.0 , tsne . mean ( X [ 3 ] ) , epsilon )
assertNotNull ( "Formatted message should not be null" , formattedMessage )
assertSomeDatas ( expected , actual )
assertEquals ( message , System . lineSeparator ( ) . trim ( ) , System . getProperty ( "line.separator" ) )
assertEqualsIgnoreWhitespace ( expectedDRL , RuleModelDRLPersistenceImpl . getInstance ( ) . marshal ( model ) )
assertEquals ( data , new HelloWorld ( data ) . sayHelloWorld ( ) )
assertNull ( data )
Assert . assertNotNull ( zipfile )
Assert . fail ( "Should have thrown exception" )
assertThat ( subject . getMaxSerial ( ) , is ( 1 ) )
Assert . assertEquals ( "95686bc0483262afe170b550dd4544d1" , result . toStringUtf8 ( ) )
assertEquals ( 7 , extension . getHandlersForExceptionType ( IllegalArgumentException . class , bm , qualifiers , TraversalMode . DEPTH_FIRST ) . size ( ) )
Assert . assertEquals ( newLastModificationTimeMs , inodeDirectory . getLastModificationTimeMs ( ) )
assertEquals ( expResult , result )
assertEquals ( "hello world" , extractedString )
assertTrue ( "testCanEditBooleanAuth2_useInheritance" , collectionService . canEditBoolean ( context , collection , true ) )
assertEquals ( 2 , cache . listPrivileges ( null , null , new Server ( "server1" ) ) . size ( ) )
assertEquals ( expected , actual )
assertNull ( cli . getUserInfo ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import java.util.Collection;\\n" + "import java.util.List;\\n" + "public abstract class ClazzName extends java.util.Collection {\\n"
assertThat ( localization . getLocale ( ) , equalTo ( PT_BR ) )
assertEquals ( false , attributes . isOtherFile ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( f1 , f2 )
assertEquals ( expecteds , actuals )
assertFalse ( "InetSocketAddress should be recreated" , inetSocketAddress1 == inetSocketAddress2 )
assertTrue ( conf . getClassLoader ( ) instanceof Fake_ClassLoader )
assertEquals ( packet , p )
assertEquals ( "25" , empty . getCommand ( ) )
assertEquals ( ForwardSecrecyBlackList . RSA_EXPORT_WITH_RC2_CBC_40_MD5 , cipher )
assertEquals ( "Hello there^^^^" , ResponseBodyInterpolator . interpolate ( "Hello there^^^^" , req ) )
assertArrayEquals ( expected , result )
assertEquals ( "file://localhost/etc/password" , one . absUrl ( "href" ) )
assertEquals ( address . getId ( ) , address2 . getId ( ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , empty ( ) )
Assert . assertEquals ( stop , receivedStop )
Assert . assertFalse ( "isSupported should return false" , TrayUtils . isSupported ( ) )
assertNotNull ( result )
assertNotNull ( "Previous step failed" , uri_userInstance )
assertEquals ( expected , actual )
assertEquals ( Proxy . NO_PROXY , result . get ( 0 ) )
assertNull ( result )
assertEquals ( expected , out )
assertEquals ( expected , actual )
assertThat ( mFileHelper . mImageFile , is ( nullValue ( ) ) )
assertNull ( store . pull ( key2 ) )
assertThat ( matcher . matches ( "{\\"number\\":1}" ) , is ( false ) )
assertEquals ( "127.0.0.1" , server . getNextServer ( ) )
assertThat ( ! duration . isNegative ( ) , equalTo ( true ) )
assertEquals ( "* :123: He's a jerk.\\nA complete kneebiter.\\n" , toWikiText ( note ) )
assertEquals ( expResult , result )
assertThat ( actualPort , is ( expectedPort ) )
Assert . assertTrue ( "expecting the false positive rate to be lower than 3%" , falsePositiveRate < 0.03d )
assertEquals ( "@#$%^&*()" , cfg . comment ( "@#$%^&*()" ) )
assertThat ( e . getCause ( ) , Matchers . instanceOf ( ArangoDBException . class ) )
assertNull ( start . getErrorResponseBody ( ) )
assertEquals ( content , "Line1\\nLine2" )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . UNKNOWN_SOURCE_QUEUE , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertEquals ( 0 , inclusionTerms . size ( ) )
assertEquals ( logs . get ( i ) , message )
Assert . assertEquals ( expectedResult , resultString )
assertThat ( DateInterval . parseISO ( "2012001/20140214" ) , is ( expected ) )
assertions . contains ( value , index )
assertEquals ( 1 , result . size ( ) )
assertThat ( tracker . find ( itemTask . getId ( ) ) . getName ( ) , is ( "test2" ) )
assertNotNull ( f . getRecordWriter ( c . getConfiguration ( ) ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertTrue ( unicodeString . equals ( unicodeString ) )
assertThat ( output , containsString ( "FHIR resource created:" ) )
assertEquals ( "5" , exec . getNumMapTasks ( ) )
assertTrue ( fixture . hasSubscriptionId ( ) )
assertParse ( editor , "ROOT(0): " , "  KEY(0): world:" , "      KEY(2): europe:" , "        KEY(4): france:" , "        RAW(6): cheese" , "        KEY(5): belgium" ,
Assert . assertArrayEquals ( "original array not equals compress/decompressed array" , result , bytes )
assertThat ( status , equalTo ( GGDataSource . Status . OK ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfWithFieldsWithValue.pdf" , sourceFolder + "cmp_xfdfWithFieldsWithValue.pdf" , destinationFolder , "diff_" ) )
assertEquals ( "true" , result . getResource ( 0 ) . getContent ( ) . toString ( ) )
assertThat ( count , is ( 1L ) )
assertEquals ( 3 , possibleOutcomes . size ( ) )
assertEquals ( expectedExperimentContents , testExperimentResults . getExperimentContents ( ) )
assertNotNull ( result )
assertForbiddenResponse ( response )
assertTrue ( true )
assertArray2dEquals ( expecteds , actuals )
assertEquals ( expected , uri . toString ( ) )
assertXMLIdentical ( new Diff ( result , combineWithIdKey ( recessive , dominant ) ) , true )
assertEquals ( lines - 1 , results )
assertTrue ( ndefMessage . getNdefRecords ( ) . length == 0 )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
assertEquals ( "Wrong result" , value , interpolator . interpolate ( TEST_NAME ) )
Assert . assertTrue ( all . size ( ) > 0 )
Assert . assertEquals ( 1 , dependences . size ( ) )
assertEquals ( "[[RED, BLACK, YELLOW]]]" , builder . toString ( ) )
assertMatch ( strategyConfiguration , strategy )
assertFalse ( node . equals ( "abc" ) )
assertThat ( testResponse , is ( expectedResponse ) )
assertTrue ( o . description ( ) . startsWith ( "(overridden) " + "<j_org_robovm_objc_CustomClassTest$SubClass1: 0x" ) )
assertReturnedWithStatusAndContainsContent ( 200 , escapedFilename , response )
assertEquals ( 0 , primitive . leadership . get ( ) )
assertEquals ( BAD_REQUEST_400 , response . getStatus ( ) )
assertEquals ( 5 , calculator . getResult ( ) )
assertSuccessOrCancelled ( response )
assertXMLIdentical ( new Diff ( result , combineWithIdKey ( recessive , dominant ) ) , true )
assertEquals ( "<result>test</result>" , res . asXML ( ) )
assertEquals ( "{key2:value2,key:value\\"}" , target . toString ( ) )
assertThat ( resultedQuery , is ( expectedQuery ) )
assertNotNull ( "Clinical data is null for 135" , clinicalData )
Assert . assertNull ( alertMessage )
assertEquals ( new Rectangle ( - 3 , 0 , 10 , 100 ) , pos )
assertTrue ( r1 instanceof PublicCloneable )
assertTrue ( raises )
assertEquals ( "cast('2003-12-31' AS date)" , helpGetString ( func ) )
assertEquals ( 400 , r . getStatus ( ) )
assertEquals ( "select a LIKE_REGEX" , result )
assertEquals ( 1 , in . getByteCount ( ) , 0L )
Assert . assertNotNull ( book . getId ( ) )
Assert . assertNotNull ( testSession )
assertArrayEquals ( new long [ ] { 7 } , result )
Assert . assertEquals ( 3 , vertices . size ( ) )
assertTrue ( map . containsKey ( JSR166TestCase . six ) )
assertEquals ( false , config . isCacheGzippedContent ( ) )
assertOut ( "/**\\n * @private\\n * @type {boolean}\\n */\\nRoyaleTest_A.prototype.foo = false" )
assertFalse ( buildIds . isEmpty ( ) )
Assert . assertEquals ( "There is no item here." , responseResult . getText ( ) )
assertEquals ( "a thousand" , mapValue . getValue ( ) . get ( 1000 ) )
assertThat ( "getValue" , node . getValue ( ) , is ( 2147483647 ) )
assertEquals ( relationship1 , lookedUpRelationship )
assertEquals ( "foo" , classifier . classify ( new Bar ( ) ) )
assertEquals ( expecting , found )
assertEquals ( Result . PASS , type . apply ( item ) )
assertEquals ( 1 , testList . size ( ) )
Assert . assertNotNull ( selfInjected )
assertEquals ( "3 hari yang lalu" , t . format ( new Date ( 0 ) ) )
assertEquals ( sampleIn . removeCastToSameType ( oi ) , sampleOut . removeCastToSameType ( oi ) )
assertThat ( ( String ) ebRec . getValue ( ) , is ( "encrypted:bar" ) )
Assert . assertEquals ( otfLength , reparsedFont . header . totalSfntSize )
assertMockEndpointsSatisfied ( )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaParameterTypeDefinition ( "" , "(.*)" , method , false , false , false , lookup ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertEquals ( expected , sb . toString ( ) )
assertTrue ( "Returned object should be a SynchronizedBag." , bag instanceof SynchronizedBag )
assertThat ( target . onConnectionChangedAddedPre ( msg ) , is ( false ) )
assertThat ( res . toString ( ) , is ( equalTo ( "My friend Rokko is 30 years old." ) ) )
Assert . assertEquals ( 1 , entities . size ( ) )
assertDepth ( "addLevel" , callTree , expectResult )
assertThat ( "UserId of event is not equal to userId of session" , listener . getEvents ( ) . get ( 0 ) . getUserID ( ) , is ( USER_ID ) )
assertThat ( child . isDirty ( ) , is ( true ) )
assertFalse ( validator . isValid ( resource , MetadataSection . TITLE_SECTION ) )
assertEquals ( expectedAst , ast . dump ( "" ) )
assertNotNull ( workflowSource )
assertThat ( condition . isSatisfied ( ) , is ( false ) )
assertEquals ( 2d , prediction )
assertEquals ( 1 , a1 . getValues ( ) [ 0 ] )
assertEquals ( 2 , targets . size ( ) )
assertNotNull ( result )
Assert . assertEquals ( sum . getTotal ( ) , new BigDecimal ( 5 ) )
assertTrue ( pregame . before ( superBowlXLV ) )
assertNotNull ( result )
assertEquals ( expResult , result )
assertTrue ( connectFuture . isConnected ( ) )
assertEquals ( "SS:12" , x . toString ( ) )
assertTrue ( uuid . length ( ) == urlToken . length ( ) )
assertEquals ( "test" , dataString )
assertEquals ( 3 , x )
assertChildIds ( key , child , allocateSize )
Assert . fail ( "testCreateSymlink - expected exception is not thrown" )
Assert . assertFalse ( translateService . isTranslated ( field ) )
assertEquals ( "a!,b!,c,xyz" , sw . toString ( ) )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertEquals ( 6L , s )
assertThat ( ontologyIds , contains ( ontologyId ) )
assertEquals ( "http://localhost:9990/" , httpEndpoint )
assertEquals ( new String ( result ) , "test parsed" )
assertTrue ( response . isSuccess ( ) )
assertFalse ( problem )
Assert . assertEquals ( Allergies . ALlergyStatus . NO_KNOWN_ALLERGIES , allergies . getAllergyStatus ( ) )
assertTrue ( text . contains ( "Seam Reports Rocks" ) )
assertEquals ( expectedValues , DurationsConverter . convertFromNanos ( input , MINUTES ) )
assertEquals ( "Method #toString is wrong" , "com.querydsl.codegen.ParametersTest$Entity" , parameters . get ( "entity" ) )
when ( ) . get ( "res" ) . then ( ) . assertThat ( )
Assert . assertTrue ( count == 0 || count == runs )
Assert . assertEquals ( "Invalid empty collection" , MicroPipelineValidationResult . NOT_EMPTY , new MicroPipelineValidator ( ) . validateNotEmpty ( os ) )
assertThat ( currentSessionManager . getMeasurementStreams ( ) , hasItem ( expected ) )
assertNull ( outbound ( writeTarget ) )
assertEquals ( "Donald Trump turn on the light" , target_ )
assertEquals ( domTreeEntry , domRpcEntry )
Assert . assertEquals ( expected , actual )
assertEquals ( "tR3+Ty81lMeYAr/Fid0kMTYa/WM=" , signer . sign ( request , params ) )
assertEquals ( "Incorrect string generated" , String . format ( "%n    - Set bar to foo from ExampleData and OtherTable, joined on x is y and z is 1" ) , HumanReadableStatementHelper . generateAliasedFieldAssignmentString ( field ) )
assertDateEquals ( new DateTime ( 2013 , 5 , 20 , 15 , 0 , 0 , 0 , 0 ) , date )
assertThat ( new String ( bytes ) , allOf ( containsString ( randomBoolean ) , containsString ( randomIntRange ) , containsString ( randomDouble ) , containsString ( randomGaussian ) ) )
assertEquals ( "SELECT @type as alias FROM C" , q . toString ( ) )
assertAllCommandsUsed ( )
assertThat ( allUsedBindings ( result ) , containsInAnyOrder ( "$p" ) )
assertEquals ( 1 , fileOperationMap . getOperationNames ( ) . size ( ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertTrue ( cnt > 0 )
assertEquals ( expectedQuery , query )
assertThat ( result , is ( true ) )
Assert . assertTrue ( pattern2 . matcher ( employee . getName ( ) ) . matches ( ) )
assertThat ( actual , is ( Key . create ( CounterData . class , TEST_COUNTER_NAME , 1 ) ) )
Assert . assertFalse ( rawClass . isArray ( ) )
assertNull ( query . singleResult ( ) )
Assert . assertEquals ( expected , tested . listRequestInit ( ) )
assertSame ( "requestsCount" , 1 , ejbCounter . getRequestsCount ( ) )
assertEquals ( msg , client2MessageReceived . get ( ) )
assertEquals ( null , backendAlarm . getGraphiteBaseUrl ( ) )
Assert . assertTrue ( Arrays . equals ( randomBytes ( size ) , bytes ) )
assertEquals ( expectedMimeType , actualMimeType )
assertEquals ( 3.0 , costs , 0.01 )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertThat ( changeList . size ( ) , is ( 0 ) )
Assert . assertTrue ( returnedVisibilities . isEmpty ( ) )
assertNotSupported ( result )
assertEquals ( "numhits is wrong" , 2160 , res . getNumhits ( ) . intValue ( ) )
assertThat ( actual , is ( equalTo ( "NO_ARGUMENTS" ) ) )
assertThat ( context . get ( "FOO" ) , equalTo ( "BAR" ) )
assertThat ( thrown , instanceOf ( MaximumTimeLimitExceededException . class ) )
assertEquals ( 2 , map . size ( ) )
assertThat ( result , is ( new String [ ] [ ] { { "Hello\\nworld!" } } ) )
assertEquals ( "col0=int, col1=bigint, col2=string, col3=decimal, col4=double, col5=double, col6=float, col7=boolean, col8=boolean, col9=date, col10=DATETIME, col8
assertTrue ( syn instanceof JavassistMethodSynthesizer )
Assert . assertNull ( "Response should be null" , argument . getValue ( ) )
Assert . assertEquals ( "SELECT 10 IS true;" , text )
assertEquals ( 0 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertTrue ( humanName . hasGiven ( "test" ) )
assertEquals ( 900 , subject . getMinimumDisplayTime ( ) . get ( ) . intValue ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "leading date grid position must return null date" , null , ui . getDayInMonth ( month , BasicMonthViewUI . SECOND_WEEK_ROW , BasicMonthViewUI . SECOND_DAY_COLUMN ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><alice>bob</alice>" , result . toString ( ) )
assertArrayEquals ( EXAMPLE_RESPONSE_TWO_ROWS , catResult . getResults ( ) )
assertEquals ( "" , result )
assertEqArgumentGeneratesXPath ( - 2 , eqNegative2XPathExpression )
assertEquals ( 0.0 , actual , DELTA )
assertEquals ( null , obj . field_pub )
assertEquals ( "(LIST<W> a<V> b<V> c<V>)\\n" , found )
assertEquals ( "DressageEquipment_Pony" , deploymentArtifact . getArtifactRef ( ) )
assertEquals ( "test" , controller . postFormBean ( text , model ) )
assertEquals ( "Test message" , writer . toString ( ) )
Assert . fail ( "Test encountered an unexpected exception." )
Assert . assertTrue ( received )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( individual ) )
assertSuccess ( taskAfter . getResult ( ) )
Assert . assertEquals ( "Created cluster" , clusterTbl . getClusterName ( ) , newCluster . getClusterName ( ) )
assertEquals ( 3 , x )
assertEquals ( expected , actual )
assertNotNull ( expectedRequester )
assertEquals ( "[message: hello0, message: hello1]" , broadcasts . toString ( ) )
assertResponse ( outputStream , expected )
assertFalse ( features . isPresent ( ) )
assertTrue ( received . length == 3 )
assertEquals ( getMessage ( MessageKeys . LABEL_TR_MENU_MENUMESSAGE ) , driver . findElement ( By . id ( "messagesArea" ) ) . getText ( ) )
assertThat ( uppercased . readValuesToList ( ) , equalTo ( expectedValues ) )
assertThat ( output , StringContains . containsString ( "<div class=\\"hapiHeaderText\\"> Untitled Diagnostic Report </div>" ) )
Assert . assertEquals ( "The remote MBean Remote Flag" , Boolean . TRUE , gmx . getProperty ( "remote" ) )
assertThat ( d . getScope ( ) , equalTo ( "s" ) )
Assert . fail ( "Expected exception" )
assertEquals ( AttributeType . DATE , attributeDesc . getDataType ( ) )
assertTrue ( features . noneMatch ( f -> f . getBlacklisted ( ) ) )
assertEquals ( "https://image.eveonline.com/TypeIcon/22436_32.png" , urlString )
assertThat ( uri , equalTo ( "/houses?query=Ask+something&test2=someting+else" ) )
Assert . assertNotNull ( ValidationUtils . notNull ( person ) )
assertEquals ( json . toString ( ) , sc . schemaConfAsJSON ( ) )
assertEquals ( BINARY_CONTENT , result )
assertEquals ( 1 , col . count ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( componentName , "replicate" )
assertMode ( 0100614 , mode )
assertDefaultAccept ( filter )
assertEquals ( "https://login.microsoftonline.com/" , config . getSite ( ) )
assertThat ( PlainTime . axis ( ) . getBaseUnit ( MILLI_OF_DAY ) , is ( unit ) )
assertTrue ( isVisibleForModerator )
assertEquals ( "" , result )
assertTrue ( true )
Assert . assertEquals ( "f1:2.5" , ret . toString ( ) )
assertEquals ( ClusterType . STAND_ALONE , myTestFactory . getClusterType ( ) )
assertThat ( "testGpName" , is ( functions . globalProperty ( "testGpName" , "default" ) ) )
assertEquals ( "<p>This is <strong>bold</strong>!</p>\\n" , html )
assertTrue ( Files . exists ( tmpFile ) )
assertTrue ( descriptor . isStarttlsEnabled ( ) )
assertTrue ( mConfiguration . getBoolean ( PropertyKey . WEB_THREADS ) )
assertFalse ( entity . isValid ( ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( "Mexican Rigatoni and Cheese" , microdata . getFirstType ( ) )
assertEquals ( expectedChildOrganizationProfile . getSid ( ) , resultantProfile . getSid ( ) )
assertEquals ( Long . class , h . getClass ( ) )
assertEquals ( "DoubleIt isn't working with negative numbers" , - 16 , response )
assertTrue ( "Stream contains data" , stream . size ( ) > 10 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( expectedRate , rate , 0.001 )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "jranalyst" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertArrayEquals ( new float [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 } , MathArrays . stretch ( array ) , STRICT )
assertExtractEquals ( Lists . newArrayList ( "AAC:value AAC" , "ABC:value ABC" , "ACC:value ACC" ) , extractor . extract ( result ) )
runner . assertNotValid ( )
assertEquals ( undefined1 , undefined2 )
Assert . assertEquals ( "Basic url not escaped correctly" , in , WebUtilities . percentEncodeUrl ( in ) )
assertThat ( result , is ( "foo" ) )
Assert . assertThat ( bufferCount , is ( 4L ) )
assertThat ( "Initator methionine wrong" , initMet . toString ( ) , is ( "M" ) )
assertEquals ( response . getContentAsString ( ) , "{\\"tropo\\":[{\\"say\\":[{\\"value\\":\\"1234\\"}]}]}" )
assertTrue ( msg , c1 . equals ( c2 ) )
assertThat ( customer , sameInstance ( anotherCustomer ) )
assertArrayEquals ( "The branch name array is incorrect" , new String [ ] { "stream@/vob/paths" } , scm . getBranchNames ( EMPTY_VARIABLE_RESOLVER ) )
assertEquals ( 1 , runnersAfter . size ( ) )
assertTrue ( found )
assertEquals ( 0 , annotatedTypes . size ( ) )
assertEquals ( "xsd:byte" , prefixedName )
assertTrue ( usl . getStrokeColor ( ) instanceof SolidFill )
assertEquals ( "47.5678" , csvValues . get ( "lat" ) )
assertSame ( 3 , result . getAppIds ( ) . size ( ) )
assertThat ( componentId , is ( "madeup" ) )
assertTrue ( learned . isEquivalentTo ( given , ba ) )
assertEquals ( 123 , ( int ) value )
assertEquals ( input , results . get ( 0 ) )
Assert . assertEquals ( "hux" , manipulation . getOldColumnName ( ) )
assertTrue ( integrationApp . isOnTerminate ( ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertEquals ( Json . pretty ( model ) , "{" + NEWLINE + "  \\"properties\\" : {" + NEWLINE + "    \\"byteArray\\" : {" + NEWLINE + "      \\"type\\" : \\"array\\"," + NEWLINE + "      \\"items\\" : {" + NEWLINE
assertEquals ( 10 , numberOfLines )
assertFalse ( Arrays . equals ( bytes , otherBytes ) )
editor . assertProblems ( "version|should define 'version'" , "test-it|does not exist" , "versi|does not exist" )
assertTrue ( t instanceof RuntimeException )
assertTrue ( numberFour . isBefore ( newYearsDay ) )
assertEquals ( cDate , eDate )
assertEquals ( "baz" , event . getTags ( ) . get ( "foo" ) )
assertEquals ( "currentContext fieldNoValueValidationError" , classNameForPropertyInputField )
assertions . isNotLessThan ( null )
Assert . assertTrue ( sdk . getAaptPath ( ) != null && ! sdk . getAaptPath ( ) . equals ( "" ) )
assertEquals ( HttpStatus . SC_BAD_REQUEST , response . getStatus ( ) )
assertTrue ( bundle . exists ( ) )
assertEquals ( Collections . emptyList ( ) , group . getValue ( ) )
assertTrue ( filter . shouldInclude ( source , "some.property" ) )
assertEquals ( FleetSize . FINITE , vrp . getFleetSize ( ) )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( expected , AuthorizationsUtil . mergeAuthorizations ( expected ) )
assertFalse ( actualResult )
assertCapturedMessage ( eventMessage ( "sess1" , "/foo/1" , "message1" ) , eventMessage ( "sess1" , "/foo/middle/1" , "message2" ) , eventMessage ( "sess2" , "/foo/middle/test/
assertDataframe ( frame , streamId , false , Unpooled . EMPTY_BUFFER )
assertEquals ( fileSize , fileSizeActual )
assertThat ( actual , is ( "�惧�ㄣ���ヤ����" ) )
assertEquals ( expected , result )
assertTrue ( bodyTypeAdapter instanceof JSONBodyTypeAdapter )
assertTrue ( foundMethods != null && foundMethods . size ( ) == 2 )
assertFalse ( credentials . isPresent ( ) )
assertEquals ( max , fs . getBootSector ( ) . getRootDirEntryCount ( ) )
Assert . assertEquals ( 2 , result . size ( ) )
assertNull ( request . getAttribute ( HTTP_SERVER_SPAN_ATTRIBUTE ) )
Assert . assertEquals ( 0. , analyser . getWaitingTimeAtActivity ( route . getEnd ( ) , route ) , 0.01 )
assertTrue ( closed . await ( 2 , SECONDS ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Prompt>" + "<Say language=\\"arb\\" loop=\\"1\\" voice=\\"man\\">message</Say>" + "<Pause length=\\"1\\"/>" +
assertEquals ( "{\\"from\\":1,\\"to\\":2}" , json )
assertThat ( result . statusCode , is ( Response . OK ) )
assertFalse ( matcher . match ( msg , rule ) )
Assert . assertEquals ( "OK" , result )
assertEquals ( "" , sw . toString ( ) )
assertTrue ( fp . equals ( fp ) )
assertThat ( indexPage . nameRadioButtons . getSelectedValue ( ) . get ( ) , is ( "2" ) )
Truth . assertThat ( protoBuf )
assertTrue ( wlsClusterConfig . checkUpdateDynamicClusterSizeJsonResult ( "{ xyz }" ) )
assertResponse ( DataMockery . createRESMODWithGetRequestNoBody ( ) , request )
assertTrue ( output . startsWith ( "<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD XHTML 1.0 Strict//EN\\" \\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\">" ) )
Assert . assertEquals ( expectedJsonObject , model . getJsonObject ( ) )
assertEquals ( expectedRandom ( ) , result )
assertThat ( userStoryClass . getName ( ) , is ( nullValue ( ) ) )
assertModulus ( nBits , modulusBits )
assertNotNull ( "Social Followers (JSON STRING)" , friends )
assertSuccess ( validationResult )
assertNotNull ( result )
Truth . assertThat ( callable . call ( 1 ) )
assertNull ( entry . getLinkName ( ) )
assertEquals ( 978307200000L , w . getFirstMillisecond ( calendar ) )
assertTrue ( sqlString . contains ( "asc" ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , defaultOutbound )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertEquals ( g1 , g2 )
Assert . assertNotNull ( signature )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "ADMIN_PORT_SECURE" , "true" ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertEquals ( 2 , branch_conditions . size ( ) )
arrays . assertHasSize ( description , null , 8 )
assertThat ( actual , not ( containsString ( "78ef6f64c2f2" ) ) )
assertEquals ( firefoxDriver , defaultDriver )
assertEquals ( EXPECTED_KEYS . get ( i ) , result . getKey ( ) )
assertEquals ( 9 , result . getProperties ( ) . size ( ) )
assertTrue ( "Empty job should work" , success )
assertNoTaint ( arrayData [ 2 ] )
assertTrue ( ranges . isEmpty ( ) )
Assert . assertEquals ( "�����宸ュぇ瀛�" , words )
assertNotNull ( "CorporationDepartment is null" , entity )
assertComparisonFailure ( "Fichier produit en erreur : " + toFilePath ( "FileAssertWithAlignmentStyle_expected.xls" ) )
assertTrue ( true )
assertEquals ( "Patch" , book . getName ( ) )
assertThat ( kick . getValidationIssues ( ) , hasItem ( stringContainsInOrder ( "angryCat.id" , "guilherme" ) ) )
assertEquals ( Arrays . asList ( "g" , "h" ) , namespaces )
assertion . satisfies ( "-wings" )
assertEquals ( notNull , presentSerializable . asOptional ( ) . get ( ) )
assertThat ( consoleStepListener . toString ( ) , is ( expectedSteps ) )
assertEquals ( expected , query . export ( ) )
assertValueEqualsResultSet ( rs , Arrays . < Object > asList ( ROW5 ) )
assertTrue ( url2 == url1 )
assertEquals ( 1 , bindings . size ( ) )
assertEquals ( "?a=b+c&d=e" , qs . toQueryString ( ) )
Assert . assertArrayEquals ( new byte [ ] { ( byte ) 0xa4 , ( byte ) 0xee , ( byte ) 0xba , ( byte ) 0x8e , 0x63 , 0x3d , 0x77 , ( byte ) 0x88 , 0x
assertNull ( o )
Assert . assertFalse ( this . manager . disconnect ( this . family1 , this . person1 ) )
assertEquals ( "<*>" , lt . parse ( ": <*>" ) . toString ( ) )
Assert . assertTrue ( facet1 . equals ( facet2 ) )
assertEquals ( propertyValue , p . getValue ( ) )
assertEquals ( EXPECTED_PLAN_DETAILS_PATH , path )
Assert . assertEquals ( "did not find the one metadata value" , 0 , collections . size ( ) )
Assert . assertEquals ( 1 , SimpleClass . class . getDeclaredFields ( ) . length )
assertThat ( result , equalTo ( false ) )
assertEquals ( "foo=le=2011-03-02" , ret )
assertEquals ( "certificate1" , auth . getCertificate ( ) )
Assert . assertThat ( dump , equalTo ( "UnionTypeExpressionNode: user | cat[] | hamster | fish (Start: 7 , End: 15, On: [artificial node])\\n" + "    UnionTypeExpressionNode: user | cat[] (Start:
assertTrue ( x . equals ( y ) )
assertEquals ( expected , query . export ( ) )
assertAnnotations ( 3 , Quantity . class , new TestEntity < > ( 0 , "123" , "123" ) , new TestEntity < > ( 1 , "TF4-56" , "TF4-56" ) , new TestEntity < > ( 2 , "TF000a"
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 2f ) )
assertEquals ( TEST_OUTPUT , convertedString )
assertThat ( revisions , contains ( revision ) )
assertDeviceInstance ( oInstance )
assertTrue ( true )
assertEquals ( expectedValue , result )
assertNotNull ( user )
Assert . assertThat ( result , is ( testResult ) )
assertSame ( tt2 , tt )
Assert . assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 't' , 'e' , 's' , 't' } , result )
assertPostFails ( "3" , role , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
Assert . assertEquals ( responseBean , userBean )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( whereClause , Deencapsulation . getField ( querySpecificationBuilder , "where" ) )
assertEquals ( expected , actual )
assertEquals ( "<h1>A Headline</h1>" , removeTextRange ( html ) )
assertSame ( connection , incrementPoolOnTimeoutConnectionAcquiringStrategy . getConnection ( connectionRequestContext ) )
assertTrue ( model instanceof DMNStrictModeModel )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertThat ( unmarshal ( sb ) , hasEntry ( "some key" , "some value" ) )
assertEquals ( expected , testVertex . getKey ( "forDefault" ) )
assertEquals ( "(34 55)\\n" , found )
assertEquals ( 3 , violations . size ( ) )
assertEquals ( "<body>&x;</body>" , result )
assertEquals ( 2 , ary . length )
assertEquals ( this , vRef )
assertNotNull ( exchangeAdapter )
Assert . assertEquals ( String . format ( "a %s text" , this . html ( bb , "10" , "sized" ) ) , formatter . format ( "a [size=\\"10]sized[/size] text" , defaultOptions ( ) ) )
assertEquals ( Base32 . decode ( s ) , secretBytes )
assertEquals ( "Hitpoints(99)" , screenshotPlugin . parseLevelUpWidget ( LEVEL_UP_LEVEL ) )
Assert . assertTrue ( testPackage . getPackage ( ) . contains ( "Workflow" ) )
assertThat ( getEntityBody , is ( "something" ) )
assertTrue ( result . length ( ) > 0 )
Helpers . assertJson ( twinCollection . toString ( ) , JSON_FULL_SAMPLE )
assertEquals ( expected , response . getValue ( ) )
assertEquals ( "United States" , result . get ( RETURN_RESULT ) )
assertEquals ( "Skipped I_S key_column_usage" , 0 , skipped )
assertPoint ( 40 , 0 , change )
Assert . assertEquals ( expected , actual )
assertEquals ( "" , toml . getString ( "a" ) )
Assert . assertEquals ( "SELECT * WHERE { <http://predicate> \\"with ? mark\\" <http://predicate> \\"test\\" . }" , query . toString ( ) )
assertTrue ( result > 0 )
Assert . assertEquals ( codigoEvento , infoEventoManifestacaoDestinatario . getCodigoEvento ( ) )
assertEquals ( expected , actual )
assertEquals ( - 1 , result )
assertTrue ( rec_cnt == 3 )
assertEquals ( sc , actualConfig . getSamplerConfiguration ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "geom" , ( dump ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "layer" ) )
Assert . assertTrue ( Arrays . equals ( entry . getBytes ( ) , fmt . toBytes ( e ) ) )
assertThat ( mimetype , is ( "application/octet-stream" ) )
assertEquals ( "Hello Camel in action" , reply )
assertEquals ( 0.5f , new TruncateDecimal ( ) . exec ( tuple ) )
assertEquals ( HttpStatusCodes . FOUND , response . getStatus ( ) )
assertions . isNotLessThan ( expected )
Assert . assertTrue ( "Incorrect suffix" , hdfsWriter . getOpenedFilePath ( ) . endsWith ( Long . toString ( testTime + 1 ) + ".tmp" ) )
Assert . assertEquals ( 200 , resp . getStatus ( ) )
assertEquals ( 1 , callable . call ( ) )
assertThat ( concat , is ( equalTo ( denyAll ) ) )
assertEquals ( expected , result )
assertEquals ( ReadConcern . DEFAULT , parsedReadConcern )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "jranalyst" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertToStringJoinEquals ( "" , "" , "" )
assertEquals ( "10.0.0.1" , address . getGlobal ( ) )
Assert . assertEquals ( 20 , result )
assertEquals ( "1984." , map . get ( "Date of publication, distribution, etc." ) . get ( 0 ) )
assertEquals ( "{ \\"foo\\": \\"bar\\" }" , event . getBodyAsJson ( ) )
assertThat ( result , contains ( "ABC" , "EDF" ) )
assertTrue ( itemClient . getItem ( createdAlbumId ) . getEntity ( ) . getId ( ) != null )
assertEquals ( Customer . class , exchange . getOut ( ) . getBody ( ) . getClass ( ) )
assertEquals ( newLat , config . get ( "locaiton.lat" ) )
Assert . assertTrue ( "Optimal coverage was not achieved " , best_fitness == 0.0 )
assertEquals ( 3 , MathUtil . max ( 2 , 3 ) )
assertTrue ( Arrays . equals ( message . toByteArray ( ) , message2 . toByteArray ( ) ) )
Assert . assertFalse ( channel . isOpen ( ) )
assertArrayEquals ( document . keySet ( ) . toArray ( ) , new Object [ ] { KEY1 } )
Assert . assertTrue ( "Item was stale" , item . isStale ( now ) )
assertNull ( preferences . getIntValue ( "1" ) )
assertBundleEvent ( BundleEvent . STARTED , "org.knowhowlab.osgi.testing.it.test.bundle" , 5 , TimeUnit . SECONDS )
assertEquals ( "value" , keyInfo . getKey ( ) )
assertTrue ( "Models are not isomorphic" , isomorphic ( model1 , m ) )
assertEquals ( "Hello World" . substring ( 2 , 7 ) , bytes . parseUtf8 ( CONTROL_STOP ) )
Assert . assertEquals ( "Application report id is different than expected" , app0 . getApplicationId ( ) , appReport . getApplicationId ( ) )
assertSame ( filter , derive ( filter , "g:a:1" ) )
assertEquals ( Collections . singleton ( TestEnum . ONE ) , select . getSelectedItems ( ) )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "testCustomizedSelector.json" , bookNames )
assertEquals ( expected , AuthorizationsUtil . downgradeAuthorizations ( authorizations ) )
assertException ( "FEEL-01015" , "''" , "< ''" , "'camunda'" , "< 'camunda'" , "false" , "< true" , "'12.2'" , "< '12.2'" , "\\"12.2\\"" , "< \\
assertThrows ( RuntimeException . class , ( ) -> t . getException ( ) )
Assert . assertEquals ( 2 , result . length ( ) )
assertThat ( referenceSet . getReferencingOntologyAnnotations ( ) , hasItem ( annotation ) )
assertThat ( target . onNodeDeletePre ( ORIGINAL_NW_ID , node1 ) , is ( false ) )
assertFalse ( accepted )
assertTrue ( versionFileApp . exists ( ) )
assertEquals ( expected , actual )
assertThat ( indexPage . checkbox . isSelected ( ) , is ( true ) )
assertEquals ( newx , result , 0.01 )
assertEquals ( "Rule Unit" , r . createRuleUnitDescription ( fooBar . getKnowledgePackage ( ) ) . getDescription ( ) )
Assert . assertEquals ( " INSERT INTO t_pet (pet_id, pet_name) VALUES (?, ?)" , sql )
assertFalse ( routeSpecification . isSatisfiedBy ( itinerary ) )
assertEquals ( asList ( 1 , 1 , 2 , 2 , 3 , 3 , 3 , 4 , 5 , 6 , 7 , 7 ) , Iterables . toList ( distinct ) )
assertThat ( existingName , is ( "camelcasefxml.fxml" ) )
assertThat ( response , containsString ( "source:TEST-NONAUTH" ) )
assertTrue ( result )
assertEquals ( createdVarNb , assignedVars . size ( ) )
assertEquals ( "foo" , s )
assertEquals ( 1 , resultComparator . compare ( ind1 , ind2 ) )
Assert . assertNotNull ( metadata )
Assert . assertFalse ( result . isValid ( ) )
Assert . assertTrue ( Files . exists ( path ) )
assertEquals ( "Hello World!" , result )
assertHierarchy ( hierarchies , hierarchy )
Assert . fail ( )
Assert . assertEquals ( string , parse ( string ) )
assertEquals ( "test" , constraint . getValue ( ) )
assertEquals ( 1 , CalendarUtils . daysAfterWithoutTimeZone ( Dec10th2015 , Dec11th2015 ) )
assertEquals ( 1 , resultComparator . compare ( fd1 , fd2 ) )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertTrue ( errorMessages . isEmpty ( ) )
assertThat ( matcher . matches ( value ) , is ( true ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertEquals ( author , transformer . fromEbXML ( classification ) )
Assert . fail ( "build listing failure" )
assertNotNull ( ExecutionTime . forCron ( parser . parse ( cronexpression ) ) )
assertEquals ( "" , json , ios . toJSON ( ) )
assertNull ( localRuntime . getDataDomain ( ) )
assertEquals ( ChangeLevel . NONE , parseAndRun ( "ALTER TABLE c DROP PRIMARY IF EXISTS x" ) )
assertTrue ( feature . isEnabled ( configuration ) )
Assert . assertEquals ( "xxxx" , result )
assertEquals ( 0.0 , response , 0.0 )
assertEquals ( "May" , MONTHS_OF_YEAR_BACKWARDS [ MONTHS_OF_YEAR_BACKWARDS . length - 1 ] )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
Assert . assertEquals ( "Parameter has different value than that specified" , tempFile , config . getLogging ( ) . getFile ( ) )
assertThat ( actualResult , is ( nullValue ( ) ) )
assertTrue ( userAuthorizedToAccess )
assertFalse ( validator . validate ( EntityNames . GRADE , grades ) . containsAll ( grades ) )
assertEquals ( new SimpleDateFormat ( "yyyy" ) . format ( dt ) , new SimpleDateFormat ( "yyyy" ) . format ( dueDate ) )
Assert . assertEquals ( 1 , liveUdis1 . size ( ) )
assertNotNull ( tomcatProcessorQuery )
assertEquals ( test . minMoves ( input ) , 2 )
assertEquals ( propertyClass , HadoopClusterConfigurationInputProperties . class )
assertAmount ( actual , expected )
assertThat ( widgetset , is ( Constants . DEFAULT_WIDGETSET ) )
assertEquals ( getExpectedSchemaAndValue ( OPTIONAL_LONG64_SCHEMA , message , UNSIGNED_RESULT ) , result )
assertNotEquals ( searchScroll1 , searchScroll2 )
assertEquals ( 2 , victim . tocNumberOfPages ( ) )
assertTrue ( result )
assertEquals ( SIGNED_PLAIN_JSON_DOCUMENT , producer . getJwsJsonSignedDocument ( ) )
assertEquals ( true , request . getPluginPDF ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( windowSize * windowSize * products . length * coordinates . length , measurementList . size ( ) )
assertEquals ( addedTriples , triplesAfter - triplesBefore )
assertArrayEquals ( bMessage , bEncrypted )
assertTrue ( latch . await ( 4 , SECONDS ) )
Assert . assertThat ( this . mojo . schemaCompatibility , IsEqual . equalTo ( expectedVersions ) )
Assert . assertEquals ( 3 , relationshipTypes . size ( ) )
assertEquals ( "SpringBeanLifecycleTracker" , "[setProperty, setMuleContext, springInitialize, start, stop, springDestroy]" , springLT . getTracker ( ) . toString ( ) )
assertThat ( collections , contains ( "test" ) )
Assert . assertEquals ( 2 , this . em ( ) . getMetamodel ( ) . getEntities ( ) . size ( ) )
assertThat ( fe , notNullValue ( ) )
assertThat ( result . isHealthy ( ) , is ( true ) )
assertThat ( hours , equalTo ( EffortDuration . zero ( ) ) )
assertNotNull ( result )
Assert . assertNull ( connection . getNetworkTimeout ( ) )
Assert . assertFalse ( result )
Assert . assertEquals ( "-P0DT2H30M59.0S" , EwsUtilities . getTimeSpanToXSDuration ( timeSpan ) )
assertFalse ( folder . isOpen ( ) )
assertEquals ( 2 , index . search ( "<html><body>hello</body></html>" ) . getResults ( ) . size ( ) )
assertThat ( statusCodeOf ( response ) , is ( HttpServletResponse . SC_FORBIDDEN ) )
Assert . assertEquals ( this . msg , entity1 )
assertThat ( fmt . parse ( "20141000" ) , is ( PlainDate . of ( 2014 , 10 , 4 ) ) )
Assert . assertEquals ( "the adjective dude" , this . realiser . realise ( ap ) . getRealisation ( ) )
assertThat ( "Wrong logger" , config . getLogger ( ) , instanceOf ( NoOpLog . class ) )
assertEquals ( f1 . hashCode ( ) , f2 . hashCode ( ) )
assertEquals ( response . asString ( ) , FAILED , response . get ( OUTCOME ) . asString ( ) )
assertThat ( "SessionId changed" , ! sessionId1 . equals ( sessionId2 ) )
assertEquals ( expectedAffiliations . collect ( ) , actualAffiliations )
assertEquals ( "/protected/res/documents/index.html?focus=contractId&caller=BLUE&fragment=/contractDetails/thing" , affordance . getFocus ( ) )
assertNotNull ( Trunk . reader ( ) . read ( ) )
assertSimpleTerm ( result , "term\\\\*" , false , false )
assertTrue ( getStdErr ( ) . indexOf ( "WSI-BP-1.0 R2203" ) > - 1 )
Assert . assertThat ( updatedLocation . getName ( ) , Matchers . is ( "New York" ) )
assertTrue ( kept . contains ( new ItemStack ( ItemID . SHADOW_SWORD , 1 ) ) )
assertTrue ( rendering . contains ( rightsString ) )
assertSame ( target , object )
assertThat ( copy . getMapProperty ( ) . get ( "ab" ) , is ( "abc" ) )
assertE ( "�尖�尖�尖�尖�尖�尖��" + "��  ��
Assert . assertEquals ( avulsa , notaInfo . getAvulsa ( ) )
assertMethod ( methodParser , null , null , null , testCase . status , testCase . payload , "payload" )
assertEquals ( "Failed on iteration " + x , z1 , z2 )
assertFalse ( OAuthUtils . validateScopes ( requestScopes , registeredScopes , true ) )
assertThat ( elementFacade . getTextValue ( ) , is ( "text" ) )
assertNull ( TYPE_HANDLER . getResult ( rs , 1 ) )
assertEquals ( buildValue ( i ) , new String ( value . getBytes ( ) , 0 , value . getLength ( ) ) )
Assert . assertEquals ( "�驻�� 2 砖注�转" , t . format ( new Date ( new Date ( ) . getTime ( ) - 6543990 ) ) )
Assert . assertEquals ( 2 , qr . getRank ( 1e-14 ) )
assertEquals ( 60 , integer . getInteger ( ) . intValue ( ) )
assertEquals ( mimeType , op . getMimeType ( ) )
assertNull ( client . lastBatch )
assertNotNull ( "No node model returned" , nodeModel )
assertEquals ( "wrapping renderer must use list's default on null" , renderer . getDelegateRenderer ( ) , list . getWrappedCellRenderer ( ) )
Assert . assertTrue ( isValid ( resp , FORMAT_JSON , true ) , "Response is not valid" )
assertEquals ( "msg" , sut . getMessage ( ) )
assertEquals ( "Should respond with 400" , 400 , responseContext . getStatus ( ) )
assertEquals ( varName1_ , varName2_ )
assertEquals ( "2002-03-07T10:00" , v1 . withoutTimezone ( ) . toString ( ) )
assertEquals ( p1 , p2 )
assertTrue ( out . toString ( ) . contains ( "Total size" ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0 } , value . asBytes ( ) )
assertNotNull ( obj . getDownloadURL ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertThat ( toUnqualifiedVersionlessIdValues ( myObservationDao . search ( map ) ) , containsInAnyOrder ( toValues ( id1 ) ) )
assertEquals ( true , result [ 0 ] )
Assert . assertEquals ( "simple" , new String ( baos . toByteArray ( ) ) )
assertEquals ( 418 , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( numDocs , results . size ( ) )
context . assertTrue ( event . succeeded ( ) )
assertTrue ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , true )
assertThat ( generatedReportText , isSimilarTo ( expectedReport , "timestamp" ) )
assertEquals ( reg . getSoftwareVersion ( ) , reg2 . getSoftwareVersion ( ) )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testTimestamp.json" ) ) )
assertTrue ( collection . isEmpty ( ) )
assertEquals ( PATH , asset . path ( ) )
arrays . assertContains ( description , new byte [ 1 ] , null )
assertEquals ( "(foo void ;)\\n" , found )
assertTrue ( validator . validate ( EntityNames . STAFF , staffId ) . equals ( staffId ) )
assertEquals ( LocalDate . of ( 2001 , 10 , 16 ) , test )
assertFootersJoined ( )
stringsWithCaseInsensitiveComparisonStrategy . assertDoesNotContain ( someInfo ( ) , "P1ractice makes perfect" , values )
assertTrue ( shootist . responses . size ( ) > 10 )
assertGetCredentialsFailsWithAuthRequired ( setupDirectKerberosClient ( ) , context , "Performing a 401 HTTP action" )
assertEquals ( description , activity . getProperty ( PROPERTY_ACTIVITY_DESCRIPTION ) )
assertEquals ( 1 , figures . size ( ) )
assertTrue ( veh1 . getSkills ( ) . containsSkill ( "skill2" ) )
assertTrue ( result )
assertThat ( url . toString ( ) , is ( "http://localhost?a=b&c/" ) )
Assert . assertEquals ( 720 , result )
assertNull ( lock )
assertTrue ( keysMap . isValidKey ( "a" , "b" , null ) )
assertSame ( "wrapping renderer must use combo's default on null" , renderer . getDelegateRenderer ( ) , combo . getWrappedRenderer ( ) )
assertEquals ( "WIFI:S:some weird SSID;T:WPA;P:aintNoSecret;H:true;" , wifi . toString ( ) )
assertions . endsWith ( sequence )
assertThat ( sulfuras . getQuality ( ) , is ( initialQuality + 3 ) )
assertEquals ( defaultCustomsInfo , shipment . getCustomsInfo ( ) )
assertEquals ( upload . getHeaderEncoding ( ) , encoding )
assertTrue ( output . contains ( Integer . toString ( 1 ) ) )
assertTrue ( pox . getErrorMessage ( ) == null )
assertNotNull ( this . commandFacade . exists ( SwitchFullScreenCommand . class ) )
assertEquals ( 1 , classFileDefinitions . size ( ) )
assertEquals ( "unsortable column must be unsorted" , SortOrder . UNSORTED , table . getSortOrder ( 0 ) )
assertThat ( set . size ( ) , is ( 3 ) )
assertEquals ( certSubject , certificateChain . get ( 0 ) . getSubject ( ) )
assertTrue ( change == null )
assertNotNull ( results )
assertTrue ( true )
Assert . assertEquals ( "Should retrieve value" , fieldValue , node . getValue ( ) )
assertTrue ( metricsFactory instanceof MetricsFactoryImpl )
assertEquals ( cache1 , cache2 )
assertTrue ( dbStarted )
assertContentSame ( rs , rc , columnParam1 )
assertThat ( loadedEntities . size ( ) , equalTo ( 2 ) )
assertTrue ( expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
assertEquals ( "The task id was not null" , ise . getMessage ( ) )
assertEquals ( child , instance . getChild ( ) )
assertEquals ( - 1 , Iter . lastIndex ( iter , filter ) )
assertThat ( result , equalTo ( "/path?query" ) )
assertEquals ( expected , statement . toString ( ) )
assertTrue ( comp . disposed )
AssertUtil . assertSucceeded ( serviceResponse )
assertEquals ( "millisekund tagasi" , t . format ( new Date ( 0 ) ) )
assertTrue ( out . equals ( "F12.987654321#Set feedrate" ) )
assertRequest ( "POST" , "Conference/%s/Member/%s/Deaf/" , confId , memberId )
assertTrue ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertEquals ( SortOrder . UNSORTED , controller . getSortOrder ( 0 ) )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
assertTrue ( textView . text ( ) . get ( ) == null )
assertThat ( searchResults . size ( ) , is ( 10 ) )
assertEquals ( "a=c" , m . getHeader ( "cookie" ) )
assertEquals ( rows - 1 , sorter . convertRowIndexToView ( rows - 1 ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pay action=\\"https://example.com\\" bankAccountType=\\" CONSUMER_CHECKING\\" statusCallback=\\"https://example.com\\" statusCallbackMethod=\\"GET
assertThat ( databaseGiven , instanceOf ( MongoDatabase . class ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( address , is ( not ( hasKey ( firstLine ) ) ) )
Assert . assertTrue ( "Expected AES256 cipher suites, got null" , resolved != null && resolved . size ( ) != 0 )
assertEquals ( origDatagrams [ testIdx ] , d )
assertNull ( retVxGroup )
assertTrue ( v1 . getSkills ( ) . containsSkill ( "skill2" ) )
assertEquals ( "starthere" , opts . getScans ( ) . get ( 0 ) . getStartRow ( ) )
assertTrue ( "The directory was created" , fs . exists ( file ) )
assertEquals ( "Hello world from a jsp" , html )
Assert . assertEquals ( 0 , ccs . size ( ) )
assertEquals ( rs2 , rs )
assertEquals ( "2\\n" , found )
assertEquals ( Sets . newHashSet ( a . group ( ) ) , groups )
assertPrehandle ( "methodFeatureTwo" , false , METHOD_FEATURE_TWO_RESPONSE_STATUS )
assertThat ( "getValue" , node . getValue ( ) , is ( true ) )
assertEquals ( "A string with one expression" , handler . expandExpressions ( "A string with one expression" , null ) )
Assert . assertFalse ( graphUtil . hasCycle ( graph ) )
assertEquals ( "The attribute value is not changed." , expectedNewValue , pm . stringAttr . getValue ( ) )
assertTrue ( err < .1 )
assertThat ( resolved , is ( notNullValue ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "freeTextAnnotation01.pdf" , sourceFolder + "cmp_freeTextAnnotation01.pdf" , destinationFolder , "diff_" ) )
assertEquals ( intList , r . get ( "list1" ) )
Assert . assertTrue ( aliceFoundFirst )
assertEquals ( "_cat/indices?v=true" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( 200 , templateCache . size ( ) )
Assert . assertTrue ( ra . run ( "abcdefghijklmnopqrstuvwxyz0123456789*" ) )
assertThat ( description . toString ( ) , is ( "y z" ) )
assertThat ( iData . getSelectedVehicle ( ) , is ( veh1 ) )
assertFalse ( view . needsLoading ( item ) )
assertThat ( inputStream , notNullValue ( ) )
assertThat ( taskService . createTaskQuery ( ) . taskCandidateGroup ( "demo" ) . count ( ) , is ( 1L ) )
assertEquals ( "val1" , result )
assertThat ( response . getPassword ( ) , is ( "testpassword" ) )
assertEquals ( "debug:My message with 3 parameters : 1, 2, 3" , output )
assertThat ( result , is ( true ) )
assertEquals ( 0L , result )
Assert . fail ( "expected IllegalArgumentException" )
Assert . assertNull ( entity2 )
assertThat ( result , isSuccessfulCommand ( expected ) )
assertEquals ( 1.0 , feasibilityRatio ( solutionList ) , 0.00000000001 )
Assert . assertNotNull ( victim . create ( ) )
assertRightOrder ( nodes , results )
Assert . assertEquals ( AccessValidator . DEVICE_WITH_REQUESTED_ID_NOT_FOUND , result )
assertThat ( scoreDocs . length , is ( 4 ) )
assertEquals ( new BigDecimal ( "29.959" ) , entity . getN73 ( ) )
Assert . assertEquals ( - 1 , trackable . read ( new byte [ 16 ] , 0 , 16 ) )
Assert . assertEquals ( weightsSum , filter . getWeightsSum ( ) )
assertDefaultHost ( "myHost" )
assertThat ( "getValue" , node . getValue ( ) , is ( "abc" ) )
Assert . assertArrayEquals ( expected , actual )
mockery . assertIsSatisfied ( )
assertEquals ( 24 , listPager . getPage ( ) . intValue ( ) )
Assert . assertEquals ( uri1 , uri2 )
assertNull ( newTransports . poll ( ) )
assertThat ( runtime ( ) . toString ( result ) , sameJSONAs ( runtime ( ) . toString ( "{}" ) ) )
assertions . isLessThan ( new Double ( 2d ) )
assertFalse ( d . isUsingStatisticsManager ( ) )
assertFalse ( violation )
assertEquals ( "register" , jsp )
assertEquals ( "Reset out failed" , result , test )
Assert . assertEquals ( expected , loc . getAccession ( ) )
assertThat ( dataSource . getContentType ( ) , Is . is ( "application/zip" ) )
Assert . assertEquals ( 0 , errors . size ( ) )
assertNotEquals ( first . getGenerator ( ) , second . getGenerator ( ) )
assertFalse ( "Edits dir exists already - it shouldn't" , fs . exists ( regionEdits ) )
assertThat ( result . iterator ( ) . next ( ) . getString ( "value" ) , is ( "myValue01" ) )
Assert . assertEquals ( 403 , response . getStatus ( ) )
assertNotNull ( driver )
Assert . assertFalse ( secure )
assertOut ( "var /** @type {boolean} */ a = new Boolean(1)" )
assertEquals ( expectedQuery , actualQuery )
assertThat ( cut . apply ( hasText ) , is ( true ) )
assertEquals ( EXPECTED_STOPWORDS , stopwords )
assertNotNull ( NonTerminal . IF_COMMAND . buildAbstractSyntaxTree ( tokenStream ) )
assertEqualsJFiglet ( asciiArt )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertTrue ( lines . contains ( "longest-mention:bill clinton" ) )
assertThat ( formatter . dimension ( 1 , 1 ) , is ( "1" ) )
arrays . assertDoesNotContain ( description , actual , null )
assertTrue ( param2 . getValue ( ) . get ( 0 ) instanceof QueryParam )
assertEquals ( "?p1=v1&p2=v2" , query . toString ( ) )
assertEquals ( nodeId , logicalNodeId )
assertEquals ( RPCTransport . DEFAULT_MAX_RECV_FRAG , transport . getMaxRecvFrag ( ) )
assertNotNull ( buildClientWithDefaults ( clientBuilder , "http://localhost" ) )
assertThat ( unit . filterDeniedParams ( unfiltered , null ) , equalTo ( unfiltered ) )
assertEquals ( testTxtContents , FileUtils . readFileToString ( entry ) )
assertThat ( baos . toString ( ) , startsWith ( String . format ( "6 Scenarios%n" + "6 Steps%n" + "6 PASSED%n" + "6 AMBIGUOUS%n" + "6 UNDEFINED%n" + "6 SKIPPED
assertEquals ( sourceFolderKeys1 , sourceFolderKeys2 )
assertThat ( "There should be no tray matching anymore" , trayMatchings . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( 2 , analyser . getLoadRightAfterActivity ( route . getActivities ( ) . get ( 0 ) , route ) . get ( 0 ) )
assertEquals ( expected , actual )
assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( "Base for floats is wrong" , Integer . valueOf ( 3 ) , parsed )
assertThat ( allUsedBindings ( result ) , containsInAnyOrder ( "$p" ) )
assertThat ( max . get ( ) , is ( "bb" ) )
assertEquals ( 0 , runtimeService . createJobQuery ( ) . count ( ) )
Assert . assertTrue ( data . length == 0 )
assertTrue ( result . length ( ) > 0 )
Assert . assertEquals ( "second" , res . getStringData ( ) )
assertThat ( options . getGlue ( ) , equalTo ( URI . create ( "classpath:/com/example" ) ) )
assertThat ( getStdOut ( ) , containsString ( ECHO_THIS_IS_HANDY ) )
assertFalse ( isAuthenticated )
assertThat ( connection . shouldProcessSynchronously ( request ) , is ( true ) )
Assert . assertNull ( caixa )
Assert . assertEquals ( expectedPortNoStrings [ i ] , portNoString )
assertThat ( result . getFederator ( ) , is ( notNullValue ( ) ) )
assertFalse ( noneExistingFile . exists ( ) )
assertEquals ( betweenness [ index2 ] , 2.0 )
assertEquals ( job . name , lastRecentJob . name )
assertNull ( result )
assertEquals ( String . valueOf ( '!' ) , formatWithRecordSeparator . getRecordSeparator ( ) )
assertEquals ( "windows" , PlatformDetector . OS . getName ( ) )
assertNull ( array )
assertTrue ( file . exists ( ) )
assertThat ( actual . size ( ) , is ( 6 ) )
assertEquals ( "Expected different formats, got " + result , expectedFormats , actualFormats )
assertEquals ( "3�� ��" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( "Testing  special . chars = also at the end =" , toString ( bos . toByteArray ( ) ) )
Assert . assertFalse ( MultiPathSupportUtil . isTableTypeSupported ( this . constraints , AFI_SAFI ) )
assertEquals ( "http://localhost:8080" , webApiClient . getWebApiUrl ( ) )
assertEquals ( expected , result )
assertTrue ( "All unread messages are marked as read." , unreadMessages . size ( ) == 1 )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( "High-Performance Java Persistence" , book . getTitle ( ) )
assertPaths ( finder . findAllPaths ( start , end ) , "a,h,f,e,d,c,b,a" )
assertElementPresent ( By . className ( "v-label" ) )
assertTrue ( urlWithPath . equals ( urlString ) || urlWithPath . equals ( urlString ) )
assertNotNull ( ferp . getAnnotation ( Form . class ) )
assertTrue ( WroUtil . matchesUrl ( request , "wroApi/test" ) )
assertThat ( getAllMessages ( ) , hasSize ( 3 ) )
assertEquals ( "CASE WHEN TRUE THEN null END" , expr . accept ( ToStringVisitor . DEFAULT , templates ) )
Assert . assertEquals ( 10 , result . getResultSize ( ) )
Assert . assertEquals ( null , actualValue )
assertEquals ( DefaultUIProvider . class , uiClass )
assertEquals ( iterations , cryptor . getIteration ( ) )
Assert . assertFalse ( this . manager . disconnectAll ( this . family1 , this . person1 ) )
MatcherAssert . assertThat ( PodHelper . isReady ( pod ) , is ( true ) )
assertEquals ( 2 , myPm . minLen2 . getMinLen ( ) )
assertThat ( lines , is ( Arrays . asList ( "This is a long line that cannot fit on a single line-" , "and could be wrapped" ) ) )
assertEquals ( Arrays . asList ( "setName" , "setValue" , "customAction" ) , events )
assertTrue ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertTrue ( true )
Assert . assertNotNull ( response )
assertEquals ( privilege . getName ( ) , p . getName ( ) )
assertEquals ( "Wrong URL" , file . getAbsoluteFile ( ) , FileLocatorUtils . fileFromURL ( url ) . getAbsoluteFile ( ) )
assertEquals ( p1 , p2 )
Assert . fail ( )
assertThat ( DateInterval . between ( date , date ) . isEmpty ( ) , is ( true ) )
assertEquals ( "All received messages are correct." , 0 , messageVerifier . getFailures ( ) )
assertEquals ( BPResultType . FAIL , testResult . getResultType ( ) )
assertThat ( result , is ( false ) )
assertEquals ( sessionInfo . getIdentity ( ) . getIdentifier ( ) , username )
assertEquals ( "VALUE_TO_TEST" , rsp . getHeaderField ( HEADER ) )
assertEquals ( "Expected another type of analyzer" , NorwegianAnalyzer . class , analyzer . getClass ( ) )
assertGalleries ( galleries )
assertResult ( session )
Assert . assertEquals ( "{\\"value\\":\\"test" , json )
Assert . assertFalse ( ContextClassLoaderBinder . isOjbLoadedClass ( ClassLoader . getSystemClassLoader ( ) . getParent ( ) ) )
assertEquals ( 0 , engineRule . getHistoryService ( ) . createUserOperationLogQuery ( ) . count ( ) )
assertNull ( statusFail )
assertOrder ( order , length , comparator )
assertEquals ( HttpStatusCodes . OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "function sample1 ()" , functionLibrary . getFunctionLibraryScript ( ) )
assertEquals ( "Count.getReplacementCommand" , expected , actual )
Assert . assertNotNull ( files )
assertTrue ( encoded . indexOf ( "\\n" ) == encoded . lastIndexOf ( "\\n" ) )
Assert . fail ( "Expecting NonSquareMatrixException" )
Assert . assertEquals ( 10 , KafkaConsumerUtils . INSTANCE . getNumRead ( ) )
assertFalse ( shouldVote )
assertEquals ( future , underTest . doEventuallyCollectEmpty ( consumer , supplier ) )
assertEquals ( "2\\n" , found )
Assert . assertEquals ( 11 , patients . size ( ) )
assertThat ( bic . toString ( ) , is ( VALID_BIC8_LOWERCASE ) )
Assert . assertNotNull ( dateTime )
files . assertHasDigest ( INFO , actual , digest , expected )
Assert . assertEquals ( FileUtils . readFileToString ( file0 , Charset . forName ( "UTF-8" ) ) , expected )
assertEquals ( "" , result )
assertEquals ( 10L , result )
Assert . assertEquals ( "Incorrect type" , WTabSet . TYPE_RIGHT , tabset . getType ( ) )
assertEquals ( ca , removeFirst )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( ITEM1 , END_VALUE_1 ) )
assertEquals ( "http://help.pentaho.com" , spyAppConfigProperties . getHelpUrl ( ) )
assertNull ( JavaLocator . findExecutableFromToolchain ( toolchain ) )
assertions . isNotLessThan ( expected )
assertStat ( result )
Assert . assertEquals ( "monkey" , mAuthenticator . getAuthToken ( ) )
assertEquals ( absolutePath . toString ( ) , result . toString ( ) )
assertEquals ( 0 , numbers . size ( ) )
Assert . assertTrue ( readCount > 1 )
assertEquals ( "" , this . taskExecutionService . getLog ( platformName , taskDeploymentId ) )
assertTypeEquals ( expected , actual )
assertFalse ( "Permission denied" , updateSamplesFromAnalysisSubmissionPermission . isAllowed ( authentication , analysisSubmission ) )
assertEquals ( expectedDatetime , strategy . getNextBusinessDay ( ldt ) )
assertThat ( issues . size ( ) , is ( 4 ) )
editor . assertProblems ( "fooBarZor|unknown property" )
assertEquals ( "https://server/articlepath/abc:%C3%84%C3%B6%C3%BC_%C3%9F%E3%83%A1%E3%82%A4%E3%83%B3%E3
assertNull ( user )
assertEquals ( 19 , maximum )
assertEquals ( 0 , expansion . getCodes ( ) . size ( ) )
assertNotNull ( Account . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertTrue ( first . compareTo ( second ) == 0 )
assertThat ( key . verify ( Algorithm . HMAC_SHA512 , "hello1" . getBytes ( UTF_8 ) , sig ) , is ( false ) )
assertEquals ( expectedIDs , s . getAllFeatureIds ( ) )
JSONAssert . assertEquals ( EXPECTED_STREAM_CONTENT , result , false )
assertEquals ( 1 , results . getWarnings ( ) . size ( ) )
assertTrue ( result )
Assert . assertEquals ( 1.0d , n , 0.0000001d )
Assert . assertEquals ( 3L , log . count ( ) )
assertNull ( links )
assertEquals ( "x=" + x , expectedResult , result )
Assert . assertEquals ( new Double ( - 65535.65535d ) , _c . convert ( "-65535.65535" ) )
assertEquals ( expected , elements )
assertEquals ( Result . ERROR , source . validate ( container ) . getStatus ( ) )
Assert . assertTrue ( nodeService . nodeExists ( lb2 , node ) )
assertNotNull ( rm )
assertTrue ( "Error config not empty" , setUpErrorConfig ( ) . isEmpty ( ) )
assertEquals ( "jdbc:hive2://testhost:21050/;principal=impala/user@password;auth=ldap" , connectionString )
assertEquals ( 0.0 , diff . getValue ( METERS ) , 500 )
Assert . assertEquals ( rtpPacket . getVersion ( ) , 2 , "Expect version = 2" )
Assert . assertEquals ( "Error updating public community file" , file . getVersion ( ) , version + 1 )
assertEquals ( 7 , reader . readFields ( ) . size ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "LocationSearchFeed [locationList=[]]" , result )
context . assertIsSatisfied ( )
Assert . assertNotNull ( lookup )
assertNull ( expression . evaluate ( record ) )
assertEquals ( 10 + 10 , pixel . get ( ) , 1 )
assertThat ( headlineOf ( view ) , is ( "1 build has failed since Ben, Connor and Daniel committed their changes" ) )
assertTrue ( "Expect mapping generated by CoveredbyMapper to be equal to reference mapping" , mapper . getMapping ( s , t , "?x" , "?y" , "top_within(x.asWKT, y.asWKT)" , 1.0d ) . equals (
assertEquals ( "baz" , config . getString ( "foo.bar" ) )
assertTrue ( spring . getSoftwareIdentifiers ( ) . isEmpty ( ) )
assertEquals ( "/" + ORCID + "/funding/123" , x . getFundingGroup ( ) . get ( 0 ) . getFundingSummary ( ) . get ( 0 ) . getPath ( ) )
assertNull ( apiForUrl )
assertEquals ( 4 , exceptions )
assertEquals ( 1 , logs . size ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertNotNull ( getStdOut ( ) )
assertThat ( output , is ( Bytes . toArray ( new byte [ ] { 0 , 1 } ) ) )
assertThat ( jexlSelector . getAttributes ( ) . get ( "value" ) , is ( "" ) )
assertFalse ( shouldVote )
assertFalse ( "hasFacet should return false" , hasFacet )
assertTrue ( setCookie . startsWith ( sessionCookieName + "=" ) )
Assert . assertTrue ( m . isVoiceConfig ( ) )
Assert . assertEquals ( 0 , chronicle . getNumEvents ( 0 , 2000 ) )
assertEquals ( Address . of ( "one" ) , fixture . removeSuffix ( 0 ) )
assertEquals ( "val1:val2" , result )
assertNotNull ( relapse . getId ( ) )
assertEquals ( 2 , classUnderTest . getCompatibilityLevel ( ) )
Assert . assertEquals ( 0 , b . length )
assertEquals ( "string1" , ObjectUtils . getValue ( object , "string1" ) )
assertEquals ( 3 , documentCount )
assertEquals ( result , expectedResult )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( expResult , result )
assertEquals ( "" , result )
assertThat ( node . getMetadata ( ) , is ( mockMeta ) )
assertEquals ( 3 , breakpointID )
assertEquals ( "10" , bigInteger . toString ( ) )
Assert . assertEquals ( EJB_INTERCEPTED , bean . test ( ) )
assertEquals ( 0 , executedActionCount . get ( ) )
assertEquals ( result , expecting )
assertEquals ( "[1]" , writer . toString ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "��匕 12 丿�丕卅�" , t . format ( new Date ( 0 ) ) )
assertNotNull ( "Expected a non-null response" , result1 )
assertThat ( argument . getValue ( ) . getName ( ) , is ( "step_with_array: <span class='step-parameter'>[1, 2, 3]</span>" ) )
assertions . isNotEqualTo ( actual )
assertTrue ( binlogEvent . equals ( EventFactory . dml ( 1 , 1 , "f.1" , 1 , "a" , "b" , false , false , DMLType . INSERT ) ) )
assertXMLEqual ( new StringReader ( "<body></body>" ) , new StringReader ( html ( processed ) ) )
assertNull ( gavSchema . group )
assertEquals ( behaviour . getAttack ( ) , highValueTarget . getAttack ( ) )
assertNull ( property )
Assert . assertNull ( author )
assertEquals ( in . toString ( ) , out . toString ( ) )
assertFalse ( HttpMessageUtils . isText ( message ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "Unexpected response: " + response , 200 , response . getStatus ( ) )
assertThat ( actual , is ( expected ) )
assertTrue ( "Login empty" , constraintViolations . size ( ) == 1 )
assertEquals ( collection . add ( new TestCollectionElement ( ) ) , collection . add ( new TestCollectionElement ( ) ) )
assertEquals ( doc1 , io . getDocumentById ( id1 , false ) )
assertThat ( traversal . toList ( ) , containsInAnyOrder ( likeVertex ( ) . withTimId ( "id1" ) , likeVertex ( ) . withTimId ( "id2" ) , likeVertex ( ) . withTimId ( "id3" ) ) )
assertEquals ( "response string" , dbCon . callUpdateHandler ( "designDocID/_update" , params ) . getBody ( String . class ) )
assertEquals ( 29 , fileSize )
assertEquals ( label , bs . getVolumeLabel ( ) )
assertTrue ( matches )
assertThat ( errorResponse1 , is ( errorResponse2 ) )
assertNotNull ( result )
editor . assertProblems ( "spring:\\n" + "  cloud:\\n" + "    stream:\\n" + "      rabbit:\\n" + "        bindings:\\n" + "      input:\\n" + "      consumer:\\n" + "      auto-bind
assertSettingsEquals ( expected , settings )
Assert . assertEquals ( 0.0 , a . transposeMultiply ( b ) . subtract ( a . transpose ( ) . multiply ( b ) ) . getNorm ( ) , 1.0e-15 )
Assert . assertTrue ( isPropsSupportedByDefault )
assertEquals ( 3 , count )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( expected , result )
assertTrue ( MatrixUtils . equals ( p , pinvRnk1 , 0.05 ) )
assertCompilationMessage ( diagnostics , Kind . ERROR , 12 , 3 , "Found more than one @WorkbenchPanel or part @Part." )
assertActionKey ( HttpVerb . POST , "root-collection-params" , true , keys . get ( 0 ) )
assertFalse ( hasPermission )
Assert . assertEquals ( true , retval )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 1500: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 1500 )
Assert . assertFalse ( "GetConnections returned no results" , jsonList . isEmpty ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( new File ( f , "src/myxcode" ) , FolderLayout . getSourceFolder ( project ) )
assertEquals ( 4L , count )
Assert . assertEquals ( this . ontologyLocation , location )
Assert . assertEquals ( "user.zone" , info . toString ( ) )
assertEquals ( b10 , ZipUtil . minTime ( b1 , b2 ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertTrue ( tagUC . getId ( ) > 0 )
assertTrue ( writeMethod . getReturnType ( ) == AwsProxyWriteSecurityContext . class )
assertEquals ( 1 , application . informAttributeReplace . get ( ) )
assertThat ( result , is ( sameInstance ( foreignKeysRequest ) ) )
assertEquals ( "Expected that after deleting a tab, it's still tied to the " + "tab, the tabIndex is null," + " and the tab is marked as deleted" , true , deletedFlag . booleanValue ( ) )
assertTrue ( page . asXml ( ) . indexOf ( "SUCCESS" ) != - 1 )
assertEquals ( list , parser ( "// comment\\n ( str)" ) . object ( "" ) )
assertEquals ( 3 , itemsets . size ( ) )
assertEquals ( - 1 , r . peekChar ( ) )
assertEquals ( "Hello World!" , metadata . get ( TikaCoreProperties . TITLE ) )
Assert . assertEquals ( "https://foo.com:8080/things/123/456?anchor1=value5&anchor2=value6" , result )
assertTrue ( like . passesFilter ( "id" , item ) )
assertThat ( schema , allOf ( containsString ( "input TypeUnion {\\n" + "  short_multiValueList: [PropertyInput!]\\n" + "}\\n\\n" ) , containsString ( "input TypeUnion {\\n" + "  short_multiValueList
assertVisitorSatisfied ( )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( 1 , inverses . size ( ) )
assertNull ( result . getItem ( COSName . R ) )
Assert . assertEquals ( CLOUD_SDK_HOME , sdk . getPath ( ) )
assertNotNull ( user )
Assert . assertNull ( session . getClassLoader ( NAME1 ) )
Assert . assertEquals ( admin . getLogin ( ) , TestConfig . LOGIN )
Assert . assertEquals ( 2 , output )
Assert . assertFalse ( beanDescriptor . isConstrained ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( "foo" , metrics . baseName ( ) )
assertTrue ( rowStandalone . connection . keyAlias . getValue ( ) . equals ( KEY_ALIAS ) )
assertEquals ( 0 , serverStatus . getVolume ( ) )
assertTrue ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , true )
Assert . assertEquals ( "{" + "\\"@context\\":\\"../$metadata#ESAllPrim(32767)/PropertyDecimal\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"value\\":\\"34\\"}" , resultString )
assertEquals ( TEST_VALUE , endpoint . getDurableSubscriptionName ( ) )
Assert . assertTrue ( true )
assertEquals ( 0 , p . getMaskGroup ( ) . getNodeCount ( ) )
assertEquals ( 15663 , HttpUtil . readChunkSize ( new ByteArrayInputStream ( s . getBytes ( ) ) ) )
assertTrue ( s . isBalanced ( root ) )
Assert . assertFalse ( "Shouldn't exceed - " + LONG_TEXT_2 . getBytes ( ) . length , payload . isGlobalExceedLength ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( ShoppingProductChannel . LOCAL , channel . getChannel ( ) )
assertArrayEquals ( expectedPart , serializer . serialize ( ) )
assertEquals ( "concat() Text Is TestTest" , Text . valueOf ( "TestTest" ) , _text )
assertTrue ( dim . width > separator . getPreferredSize ( ) . width )
assertTrue ( "Admin should be booted" , testSupport . boot ( ) )
assertArrayEquals ( pkgClasses . toArray ( ) , defaultClasses . toArray ( ) )
assertEquals ( "Expected datacenter coordinates to be the same" , coordinate , ctx . readClient ( ) . coordinateDatacenters ( coordinate ) )
assertEquals ( 1 , rpt . size ( ) )
assertEquals ( "Mismatched factory manager" , expected , actual )
assertThat ( instance , is ( nullValue ( ) ) )
assertEquals ( witness , tl )
assertEquals ( expected , actual )
JSONAssert . assertEquals ( expected , response . getBody ( ) , false )
Assert . assertNotNull ( id )
Assert . assertEquals ( pixel_EXPECTED , pixel_ACTUAL , eps05 )
assertEquals ( 0.5 , similarWordRatio , 0.0 )
assertEquals ( result , "10.2" )
Assert . assertTrue ( set . toIdentityString ( ) . contains ( "foo" ) )
assertEquals ( "field.asMap()" , p . toString ( ) )
assertEquals ( UNPROCESSEABLE , response . getStatus ( ) )
Assert . assertEquals ( "(aa_change_indel (aa_point_location (aa_char Cys) 123) del (aa_string Cys ins arg))" , aa_change_indel . toStringTree ( parser ) )
Assert . assertEquals ( 1 , find . getCount ( ) )
Assert . assertEquals ( "08/10/2016 17:57:49 GMT-04:00" , time )
assertEquals ( "Cookie{name='foo', value='bar', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.local], httpOnly=true, secure=false, maxAge=Optional[-1]}\\n" + "Cookie{name='foo
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertEquals ( expectedTimelineSegments , timeline . getTimelineSegments ( ) )
Assert . assertNotNull ( cm )
assertEquals ( model1 , model2 )
assertEquals ( "Find by label with unknown label is still returning a list with one reading" , 0 , readings . size ( ) )
assertEquals ( generatedName , extractedName )
assertTrue ( out . contains ( "User [admin] is not authorized to view the logs for entity" ) )
assertEquals ( 1 , nodes . size ( ) )
assertThat ( MODEL . findNextTransition ( utc ) . get ( ) , is ( AUTUMN_1947 ) )
assertEquals ( expResult , result )
Assert . assertTrue ( returnedVisibilities . isEmpty ( ) )
assertEquals ( "master" , result . get ( ) )
Assert . assertEquals ( 2 , segments . size ( ) )
Assert . assertEquals ( sortStringToList ( expected ) , sortStringToList ( discipline ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "This is a test" , "Another test" , "No spaces" , "Between these two" ) ) )
assertEquals ( "" , result )
assertMockEndpointsSatisfied ( )
assertEquals ( count1 . get ( ) , count2 . get ( ) )
assertEquals ( USERNAME , profile . getId ( ) )
assertFalse ( arrayType . isPrimitive ( ) )
Assert . fail ( "distcp failure" )
assertTrue ( session . getProperties ( ) . size ( ) > 0 )
assertEquals ( CREATED_PODCAST_RESOURCE_ID , createPodcast . longValue ( ) )
assertTrue ( exists )
assertEquals ( sortedSinged , result )
assertEquals ( body . toString ( ) , POST_VAL )
assertEquals ( expResult , result )
assertSame ( t , TEST_2007_07_15 )
assertEquals ( "[\\"bla\\",null,\\"blub\\"]" , json )
assertFalse ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
Assert . assertTrue ( pointQuadTree . getLevel ( ) == nodeQuadTree . getLevel ( ) )
Assert . assertEquals ( 5 , results . count ( ) )
Assert . assertTrue ( irodsFileForSecondaryUser . canWrite ( ) )
assertEquals ( "{}" , bson . toString ( ) )
assertEquals ( 4 , parent . getChildren ( ) . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( samplePage , actualSimplePage )
assertNotNull ( perms )
assertThat ( entry , not ( nullValue ( ) ) )
Assert . assertEquals ( 2 , lexicon . getRootLexicon ( ) . size ( ) )
assertThat ( updatedSearchFormat , equalTo ( "(somefield:anotherfield)^5" ) )
assertThat ( principals , hasItem ( new UserNamePrincipal ( "user" ) ) )
JSONAssert . assertEquals ( expected , result . getResponse ( ) . getContentAsString ( ) , false )
assertThat ( fileWithSize . getSize ( ) , is ( TEST_FILE_SIZE ) )
assertEquals ( 1.0 , result , 0.1 )
assertEquals ( expectedValue , generatedValue )
assertThat ( session , is ( notNullValue ( ) ) )
assertEquals ( expected , actual )
assertThat ( url . toString ( ) , is ( "http://localhost/foo/bar" ) )
assertThat ( listener . getPartitionSpecFilter ( ) , is ( "(p1='val1' AND p2=val2) OR (p1='val11' AND p2=val22) OR (p1='val111' AND p2=val222)" ) )
Helpers . assertJson ( result . toString ( ) , json )
assertEquals ( new ModelId ( "com.bosch.Car" , "1.0.0" ) , ModelId . fromPrettyFormat ( modelId ) )
assertEquals ( testValue , result )
assertEquals ( 1 , auc . updatesSize ( ) )
Assert . assertEquals ( 0 , result . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
Assert . assertFalse ( t . sameContent ( ) )
assertEquals ( "8a7ac32f-c2bd-4316-87d8-4219dc5e8031" , orderId )
Assert . assertTrue ( isEqual ( distance , 0.25 ) )
assertNotNull ( service )
assertThat ( result , is ( false ) )
assertEquals ( expectedPrefix , actualPrefix )
assertNotNull ( regResponse )
assertEquals ( obj , value )
assertFalse ( handler . handlesBaseUri ( dodgyBase ) )
assertMockEndpointsSatisfied ( )
assertThat ( cr . title ( ) , is ( "Comune Amministrativo-1.2.3" ) )
assertEquals ( "@{foo()}" , s )
assertEquals ( "thevalue" , retrievedValue )
Assert . assertEquals ( 1 , timeZoneDefinition . compare ( first , second ) )
assertOrecValue ( orec , orecValue )
assertNull ( nullConverted )
assertEquals ( CudaGridExecutioner . MetaType . NOT_APPLICABLE , executioner . getMetaOpType ( opB ) )
Assert . assertTrue ( pos == arg . getBeginColumn ( ) )
assertEquals ( 0 , issues . size ( ) )
assertTrue ( isMineInDirection )
Assert . assertEquals ( true , objectSet . isEmpty ( ) )
assertEquals ( "Hello" , mustache . render ( null ) )
assertEquals ( "1b5b33346d611b5b6d" , Hex . encodeHexString ( TextUtils . green ( "a" ) . getBytes ( ) ) )
Assert . assertTrue ( sentinelHello1 . equals ( sentinelHello2 ) )
assertEquals ( stat , stat2 )
assertEquals ( singleton ( "not" ) , map . keySet ( ) )
assertFalse ( "No clip information!" , result . isEmpty ( ) )
assertThat ( comparator . compare ( actual , expected ) , is ( false ) )
assertEquals ( Level . INFO . toString ( ) , level . toString ( ) )
Assert . assertEquals ( 2 , TestUtil . getRepositoriesPathLength ( workingCopy ) )
assertTrue ( MethodChecksUtils . hasBooleanVariableInFied ( classOrInterfaceBody ) )
Assert . assertEquals ( "*3*5*7*9*" , result )
assertThat ( comparator . compare ( axiom1 , axiom2 ) , is ( 1 ) )
assertEquals ( "jede sekunde" , t . describe ( cron ) )
assertEquals ( StrictMath . pow ( 10 , 4 ) , pow )
assertEquals ( expected , successors )
assertEquals ( asList ( "-ibar" , "-i" , "junk" , "xyz" , "-jixnay" , "foo" , "-k" , "blah" , "yermom" ) , options . specs ( ) )
Assert . assertNull ( userService . getUser ( 502 ) )
assertEquals ( "Wrong number of results." , 1 , set . getSize ( ) )
Assert . assertEquals ( new URI ( "http://somehost/mypath" ) , uri )
assertEquals ( CompressionType . TarGz , compressionType )
assertFalse ( shell . disposed )
assertEquals ( expected , actual )
assertEquals ( metrics . size ( ) , 0 )
endpoint . assertIsSatisfied ( )
assertEquals ( timeFrameView , timeFrameEditor . view )
assertEquals ( expectedNode , actualNode )
Assert . assertEquals ( expectedMessage , new CompareTool ( ) . convertProducerLine ( licensed , agpl ) )
assertThat ( outcome . getIssues ( ) , hasSize ( 3 ) )
assertTrue ( ! result . hasErrors ( ) )
assertEquals ( msgAndResponse . getCompleteDataset ( ) , both . getCompleteDataset ( ) )
Assert . assertTrue ( "OS should match" , first . matchesCapabilities ( capabilities ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertEquals ( "1.0 * DOUBLECLOSED(+A) + 1.0 * SINGLECLOSED(+Foo) = 1.0 ." , rule . toString ( ) )
assertEquals ( Integer . toString ( times ) , output )
assertTrue ( "Alias setter is not working correctly" , delegate . getAlias ( ) . equals ( "myTestAlias" ) )
assertFalse ( new JavaAssistClass ( fakeClass ) . canInstantiate ( fakeClass ) )
assertEquals ( InetAddress . getLoopbackAddress ( ) . getHostAddress ( ) , tchannel . server ( ) . getHostAddress ( ) )
assertEquals ( expected , new String ( data ) )
assertNotNull ( metadata )
Assert . assertFalse ( this . manager . isConnected ( this . person1 , this . family1 ) )
assertEquals ( fixture , this . libshout . getFormat ( ) )
assertEquals ( "vehLoc" , route . getEnd ( ) . getLocation ( ) . getId ( ) )
assertEquals ( expecting , found )
assertTrue ( countDownLatch . await ( 10 , TimeUnit . SECONDS ) )
assertionsFailure ( resultMap )
assertNull ( entry )
assertEquals ( lastValue , "EndNode8" )
assertThat ( $ ( NotificationElement . class ) . exists ( ) , is ( true ) )
assertEquals ( expectedMap , map )
assertEquals ( "Hello :John :Doe" , ResponseBodyInterpolator . interpolate ( "Hello :firstName :lastName" , req ) )
assertFalse ( listOutput . isEmpty ( ) )
assertEquals ( LONG_STRING , new String ( trie2 . get ( cat ) ) )
assertEquals ( CONTRIBUTED_PATH , cp )
assertEquals ( abort . isUserResourceLimitation ( ) , duplicate . isUserResourceLimitation ( ) )
Assert . fail ( )
assertThat ( stringOf ( sut . toDevice ( msg ) ) , is ( lua ( powerPinMessage ( anyAnalogPin . pinNum ( ) , anyValue . toString ( ) ) ) ) )
assertOut ( "function a() {\\n}" )
assertEquals ( 1 , courses . size ( ) )
Assert . assertEquals ( ( Float ) 1.0f , res )
assertSearchYields ( index , "foo:aaa" , "fooaaa" )
arrays . assertContains ( description , null , values )
Assert . assertEquals ( functionColumn , ( ( String [ ] ) result ) [ 0 ] )
assertTrue ( success )
assertEquals ( expected , result )
Assert . assertEquals ( expectedLong , result )
assertNotNull ( error )
assertEquals ( 0 , n )
sensei . assertWriteJson ( property )
assertSame ( expr . accept ( visitor ) , visitResult )
assertPutFails ( role , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertEquals ( "ISO-8859-1" , originalEncoding )
assertEquals ( "2015-11-23 00:00" , results )
assertTrue ( Futures . getUnchecked ( collector ) )
assertThat ( requestHeader ( UNDEFINED_HEADER , mockMatcher ) . retrieveValue ( req ) , is ( nullValue ( ) ) )
assertPartialOrdered ( storeWithoutCommitThenDelete_expected ( stored , deleted ) , readLatestJournalEntries ( ) )
Assert . fail ( "Should have thrown IndexExistsException" )
assertEqualsJson ( expected , actual )
assertEquals ( "Wrong number of visited nodes" , nodeCount , visitor . getVisitedNodes ( ) . size ( ) )
assertEquals ( 10 , ( ( Number ) results . iterator ( ) . next ( ) . getValue ( ) ) . intValue ( ) )
assertEquals ( resultMock , result )
assertTrue ( result . isEmpty ( ) )
assertVisitorSatisfied ( )
assertEquals ( "5" , arr . reduceRight ( callbackfn ) )
context . assertIsSatisfied ( )
assertNull ( flow )
assertEquals ( xs , ys )
assertThat ( compatibility . getIncompatibility ( ) , both ( containsString ( "time" ) ) . and ( not ( containsString ( "20" ) ) ) )
Assert . assertEquals ( "{\\"some\\":\\"abc\\"}" , result )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertEquals ( mockedX509Certificate , actualPublicKeyCertificate )
assertEquals ( text . getText ( ) , "" )
Assert . assertEquals ( 10L , template . execute ( callable , retryState ) . longValue ( ) )
assertEquals ( "gradient index (" + gradIdx + ") for class " + cls , 0.0 , grad . get ( gradIdx ) , 1e-5 )
assertEquals ( "Select script should match expected" , expectedConcatenationWithNestedConcatenations ( ) , result )
assertFactorization ( poly , UnivariateSquareFreeFactorization . SquareFreeFactorization ( poly ) )
assertTrue ( constraints . getExpiryTime ( ) < System . currentTimeMillis ( ) )
assertArray ( new double [ ] { 0.01 , 0.038 , 0.028 , 0.075 , 0.139 , 0.222 , 0.194 , 0.295 } , scaleDouble ( 3 , node1 . getPotentials ( ) ) )
assertEquals ( adjacentRoad , roads )
assertNotNull ( kidless )
assertEquals ( hashMap , CollectionsFactory . createMap ( hashMap ) )
assertEquals ( data1 , data2 )
assertEquals ( "prefix must be equal to ABCDEFGH" , "ABCDEFGH" , state . prefix )
Assert . assertTrue ( cex . getMessage ( ) . contains ( test . cSource ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
Assert . assertTrue ( acceptOptions . get ( "http.server.header" ) == null )
assertEquals ( expected , actual )
Assert . assertEquals ( json , writer . toString ( ) )
Assert . assertEquals ( "true" , result )
assertNotNull ( entity . getId ( ) )
UmaTestUtil . assert_ ( pat )
Assert . assertEquals ( service , mixer . getService ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( grd_EXPECTED . length , input_buffer . length , DELTA_06 )
assertThat ( infos . length , is ( 0 ) )
assertEquals ( 2 , liList . size ( ) )
assertTrue ( retryPolicy . getRetryCondition ( ) . shouldRetry ( null , e , 1 ) )
assertThat ( mid . get ( ) , is ( firstMid ) )
assertEquals ( s , r . toString ( ) )
assertTrue ( processor . canProcessEvent ( event ) )
assertFalse ( result )
assertEquals ( ( float ) now , Float . valueOf ( output ) , 100 )
assertEquals ( 0 , result . getMappingsCount ( ) )
assertEquals ( position , returnedPosition )
assertEquals ( "myseq.nextval" , new SQLSerializer ( new Configuration ( new SQLServerTemplates ( ) ) ) . handle ( nextval ) . toString ( ) )
assertEquals ( "bar" , jsonConfiguration . getString ( "foo" ) )
Assert . assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
Assert . assertTrue ( false )
assertEquals ( new ModelId ( "com.bosch.si" , "Test" , "1.0.2" ) , ModelId . fromPrettyFormat ( modelId ) )
assertEquals ( "ExpirationDate not equal to value set by setTokenExpirationDate()" , newExpireDate , sut . getTokenExpirationDate ( ) )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , true , "3" , null ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( expected , actual )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( "foo" , s )
assertEquals ( result , true )
assertDtoAndMapConstructorAreSame ( 0 )
assertJsonEquals ( ImmutableMap . of ( ) , message )
assertThrows ( IllegalStateException . class , funnel :: run )
assertEquals ( 3 , result . getProperties ( ) . size ( ) )
assertBrownGCD ( gcd , a , b )
assertEquals ( "Base for strings is wrong" , "192.168.0.1" , parsed )
assertEquals ( 0.0f / 60.0f , entry . getEffectiveDurationHours ( ) , Float . MIN_NORMAL )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "onekey2" , hash )
Assert . assertEquals ( 2 , batches . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertAnnotations ( 2 , Coordinate . class , new TestCoordinate ( 0 , "51-30,26 N, 000-07,39 W" , "dd" , TYPE_POINT_COORDINATES_0_000_07_39 ) )
Assert . assertFalse ( context . getResult ( ) )
runner . assertAllFlowFilesTransferred ( AbstractBigQueryProcessor . REL_FAILURE , 1 )
assertEquals ( "test" , someObject . someField )
assertNull ( "An open task cannot have a closer" , task . getCloser ( ) )
assertEquals ( "Got too many threads" , threadCount . get ( ) , repeat )
assertEquals ( "delta Mon" , d . getDescription ( ) )
Assert . assertEquals ( REMOTE_FILE_TABLE , dao . getRemoteFileTable ( ) )
assertTrue ( e . getCause ( ) . getMessage ( ) . contains ( "ELY05125" ) )
tester . assertInfoMessages ( "Username and password are wrong!" )
result . assertIsSatisfied ( )
assertThat ( prop . satisfiesConstraints ( value ) , is ( true ) )
assertEquals ( 0 , tableNames . size ( ) )
assertNotNull ( error )
assertEquals ( expected , result , 0.000001d )
assertEquals ( 1 , result )
Assert . assertTrue ( "Single namespace is not supported by protobuf" , false )
org . junit . Assert . assertEquals ( expected , actual )
assertFalse ( album1 . equals ( album2 ) )
assertTrue ( newRecipe . getTags ( ) . isEmpty ( ) )
assertEquals ( "http://localhost.jenkins/git/notifyCommit?" + "url=http%3A%2F%2Fsome.stash.com%2Fscm%2Ffoo%2Fbar.git" + "&branches=refs%2Fheads%2
assertNotNull ( injector )
assertEquals ( expResult , result )
assertTrue ( ( ( BooleanType ) respParam . getParameter ( ) . get ( 0 ) . getValue ( ) ) . booleanValue ( ) )
assertEquals ( "svrl:failed-assert" , cause [ 0 ] . getMessage ( ) )
assertEquals ( "Echo Tex.post()t Doesn't Match!" , "echo this..." , response . getMessageBody ( ) )
assertEquals ( "A" , z )
Assert . areEqual ( "getd bmode,zone" , ZdalDataSource . getDefaultGetdbMode ( ) , "zdalDataSource getd bmode,zone" )
assertThat ( result , hasSize ( 0 ) )
assertTrue ( "Snapshot with greater timestamp is greater than other" , greaterSnapshot . compareTo ( snapshot ) > 0 )
assertThat ( bolt . getSrcDestFieldMapping ( ) . size ( ) , is ( 3 ) )
assertTrue ( sba instanceof ThickSBA )
Assert . assertTrue ( "The test file " + out + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertTrue ( model instanceof PMML4_2 )
assertNotNull ( prov )
assertEquals ( expected , result )
assertEquals ( getLabel ( ) , 0.0 , prod . minus ( b ) . getRMS ( ) , TOLERANCE )
assertions . isNotEmpty ( )
assertThat ( os . size ( ) , not ( 0 ) )
assertEquals ( "double mapper serialization is wrong" , expected , actual )
assertEquals ( true , res != null && res . length > 0 )
assertEqualLines ( "invalid updating" , definedContent , newContent . toString ( ) )
assertEquals ( "very obese" , string0 )
assertEquals ( "UNI___mduniversity_in" , orgSectionHasher . hash ( section ) )
assertEquals ( Orientation . typeOf ( 7 ) , orientation )
Assert . assertEquals ( expResult , result )
assertTrue ( e . getMessage ( ) . startsWith ( "Exception expected" ) )
Assert . assertArrayEquals ( expected , actual )
Assert . assertTrue ( Models . isomorphic ( expected , actual ) )
assertThat ( metaMessage . getDuration ( ) , is ( 1L ) )
assertThat ( instance . size ( ) , is ( i ) )
assertEquals ( "8.1.0" , revision )
helper . assertAttributeValue ( EXPECT_NoAttributeValue , invoiceLine . getM_AttributeSetInstance ( ) , attr_Country )
assertEquals ( "not default" , ret )
assertEquals ( "should be 2" , new Long ( 2L ) , shareAnalysisSubmissionWithProject . getAnalysisSubmissionJoinId ( ) )
Assert . assertNotNull ( obj )
assertEquals ( input . parseString ( ) , expected )
assertComplete ( )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "movies/TheMatrixRevolutions" , "movies/TheMatrixReloaded" , "movies/TheMatrix" ) )
assertTrue ( Arrays . equals ( getPacketData ( "00 00 04" ) , version . serialize ( ) ) )
Assert . assertEquals ( 0 , a . getNosi ( ) )
assertEquals ( sb . toString ( ) , whereSb . toString ( ) )
assertEquals ( str , "\\"string\\"" )
assertTextEquals ( "[S1]|#k1a|k1 = v1 # comment|[#k1b]|" , cm )
assertTrue ( true )
assertEquals ( RawData . fragmented , ip . getData ( ) )
assertEquals ( NUM_WRITERS * ENTRIES , countHLog ( logfile , fs , conf ) )
assertEquals ( 2 , branch_conditions . size ( ) )
assertFalse ( translationResult . getResult ( ) . booleanValue ( ) )
assertEquals ( true , r . avalie ( avaliaveis , null ) . getReal ( ) )
assertEquals ( 6 , shacl . nbResult ( gg ) )
assertTrue ( entity . isValid ( ) )
assertThat ( description . toString ( ) , is ( "number of sheets in the workbook" ) )
assertEquals ( anchorListItem , workbenchMenuCompactNavBarView . getMenuItemWidgetMap ( ) . get ( menuId ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . FUNDING_READ_LIMITED )
mock . assertIsSatisfied ( )
assertThat ( target . getQueueId ( ) , is ( new Integer ( 1234 ) ) )
assertEquals ( "Hello Tim" , resp . getResponseBody ( ) . trim ( ) )
Assert . assertEquals ( expected , actual )
assertSelectResultKeys ( selector , "abc" , "edf" )
assertEquals ( Transaction . DEFAULT_TX_FEE , request . tx . getFee ( ) )
assertNotNull ( MessageInteraction . reader ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "KCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "KPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNotNull ( result )
assertEquals ( expected , actual )
assertNull ( map )
assertThat ( certificate , is ( notNullValue ( ) ) )
assertThat ( ConnectionHeaders . fromString ( " \\b\\t\\n\\r\\f{ \\b\\t\\n\\r\\f\\"key\\" \\b\\t\\n\\r\\f: \\b\\t\\n\\r\\f\\"value\\" \\b\\t\\
assertTrue ( events . size ( ) == 3 )
assertEquals ( "Steven (Frederic) Seagal" , victim . readLiteralString ( ) )
assertTrue ( acceptor . validate ( controllerMethod , controllerInstance ) )
Assert . assertEquals ( DUMMY_URL , endpoint )
assertThat ( out , is ( equalTo ( out ) ) )
assertThat ( tester . request . getParameter ( "aaa" ) , is ( "111" ) )
assertEquals ( expected , result )
Assert . assertTrue ( pinyinSet1 . size ( ) > 1 )
assertEquals ( "ABCDEF" , ObjectInspector . substitute ( ObjectInspector . reVarSubstPattern , "${X}" , new ZorkaConfig ( props ) ) )
assertTrue ( error )
Assert . assertEquals ( new TableName ( "bar" , "foo" ) , manipulation . getOriginalTableName ( ) )
assertEquals ( 6 , outSize )
assertTrue ( learner . getModelFinal ( equiv ) != null )
assertThat ( pathsInSource , hasItems ( pathInSource1 , pathInSource23 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( out , cmp , destinationFolder ) )
assertEquals ( "No events should be returned" , 0 , events . size ( ) )
Assert . assertEquals ( 2 , count . get ( ) )
Assert . assertFalse ( validator . validSequence ( 0 , inputSequence , outcomesSequence , outcome ) )
assertTrue ( "Syslog audit log should be created" , ops . exists ( TEST_SYSLOG_AUDIT_LOG_ADDRESS ) )
Assert . assertTrue ( comparator . compare ( id1 , id2 ) == 0 )
assertEquals ( 0 , argList . size ( ) )
Assert . assertTrue ( conn . isClosed ( ) )
Assert . assertEquals ( filters , scope . getFilters ( ) )
assertEquals ( "pong!" , reply . body ( ) )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
assertNotNull ( result )
assertEquals ( generatedJavascript , expectedJavascript )
assertNotNull ( oracleEngine )
assertTrue ( desc . isEmpty ( ) )
assertNotNull ( result )
assertTrue ( "isPresent should return true if only element not present is not required when " + "RequireAll annotation is used." , testView . isPresent ( ) )
assertNull ( future . get ( ) )
Assert . assertEquals ( 1 , JSONUtils . getInt ( jsonObject , "salary" ) )
assertEquals ( BODY_CONTENT , rewrite ( gadget , BODY_CONTENT ) )
Assert . assertEquals ( 1 , metaUpdate . addKeepers ( dc , cluster , new ShardTbl ( ) . setShardName ( shard ) ) )
Assert . fail ( "Expecting MathIllegalStateException" )
assertTrue ( 12345.0d == d . asFloat8 ( ) )
Assert . assertEquals ( "meeting_register form" , q )
assertTrue ( evaluator . evaluate ( ae ) )
assertEquals ( Result . STOP , or . apply ( pathData ) )
assertEquals ( 1 , x . size ( ) )
assertThat ( results , contains ( mrId ) )
assertTrue ( versionFileLib . exists ( ) )
assertThat ( versionManager . isCheckedOut ( child2 . getPath ( ) ) , is ( false ) )
Assert . assertEquals ( "value" , properties . getProperty ( "namesrv.domain" ) )
assertNotNull ( "No event retrieved" , event )
assertThat ( root . getString ( ( NamespaceRegistry ) null , encoder , encoder ) , is ( "/" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 0 , intList . size ( ) )
assertEquals ( "public boolean equals(java.lang.Object)" , mthd . toString ( ) )
assertObjectEquals ( "{'in':'header',name:'If-Unmodified-Since',type:'string'}" , pi )
assertEquals ( expected , result . getTime ( ) )
Assert . assertNotSame ( this . target1 [ 0 ] , this . target2 [ 0 ] )
assertEquals ( 1 , type . getCapacityDimensions ( ) . getNuOfDimensions ( ) )
assertGraph ( "" + "digraph G1 {\\n" + "  label=\\"10\\" tall;\\n" + "  style=filled;\\n" + "  color=lightgrey;\\n" + "  edge(ElectricHeater, Heater)
assertFalse ( loadconstraint . fulfilled ( context ) )
Assert . assertTrue ( "MetadataTableConfigHelper.configure threw the expected exception." , true )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertTrue ( barrier . isAborted ( ) )
assertThat ( specification . getUnits ( ) , is ( MILLI ( SECOND ) ) )
assertEquals ( 2 , branch_conditions . size ( ) )
assertEquals ( 3 , paragraphElement . getElementCount ( ) )
assertEquals ( 3 , size )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertEquals ( new SchemaAndValue ( Schema . BOOLEAN_SCHEMA , true ) , avroData . toConnectData ( avroSchema , true ) )
assertTrue ( result . contains ( "\\"1-0-v0\\":{\\"type\\":\\"LCD\\",\\"values\\":[\\"1\\",\\"2\\"]}" ) )
Assert . assertEquals ( true , 0 == partition . calculate ( "2014-01-01 12:00:03" ) )
Assert . fail ( "Expected failure due to multiple operation name" )
assertEquals ( mk , mk2 )
Assert . assertEquals ( expected , name )
Assert . assertEquals ( HttpServletResponse . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "foo" , this . classifier . classify ( new IllegalStateException ( "Foo" ) ) )
assertFalse ( attributes . isNew ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( "[5.0, 4.0, 3.0, 2.0, 1.0]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertEquals ( 144. , violation , 0.01 )
assertEquals ( Float . valueOf ( 81.56891f ) , testVal )
assertNull ( expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
assertArrayEquals ( centuryAndTitlesFromHadoop , centuryAndTitlesFromInput )
assertThat ( generated , is ( "{}" ) )
assertEquals ( expected , results )
assertTrue ( details . hasCompensated ( ) )
assertTrue ( "Location not defined" , handler . isLocationDefined ( ) )
assertThat ( "interface inherited static method" , obj , equalTo ( 44 ) )
Assert . assertTrue ( "No results when search for topic search" , success )
assertEquals ( l , fr . getAuthors ( ) )
assertEquals ( "readonly" , exp . s )
assertTrue ( result . isSuccess ( ) )
assertEquals ( expectedResult , actualResult )
assertEquals ( "Failed to generate for loop with initializer" , FOR_INITIALIZER_NO_COUNTING_EXP_EMPTY , s )
assertNotNull ( transferer )
assertThat ( actual , is ( "ABC_ID_OID" ) )
assertEquals ( "Base for doubles is wrong" , Double . valueOf ( 3.5d ) , parsed )
assertEquals ( TOKEN , profile . getId ( ) )
assertEquals ( 3 , getCount ( ) )
assertEquals ( 1 , books . size ( ) )
assertEquals ( expected , got )
Assert . assertEquals ( 0 , getCountingDummyPersister ( ) . getSaveCount ( ) )
assertEquals ( 500 , fixedRate )
assertThat ( testOutcome . getCompleteName ( ) , is ( "My user story" ) )
assertThat ( nextBackoffMillis , allOf ( greaterThanOrEqualTo ( factor ) , lessThanOrEqualTo ( factor ) ) )
assertTrue ( isSorted )
Assert . assertTrue ( res . isEmpty ( ) )
assertTrue ( ! result . isEmpty ( ) )
assertEquals ( "Float value does not match" , bookmark . getVisitRatio ( ) , loadedBookmark . getVisitRatio ( ) , 0.1f )
assertThat ( result , containsInAnyOrder ( "Jane" , "Adam" ) )
assertEquals ( "{\\"field1\\":1729, \\"field2\\": [true, true, false], \\"field3\\": {\\"key\\": \\"value\\"}}" , r . toString ( ) )
Assert . assertTrue ( myRecordList . size ( ) == 2 )
Assert . assertEquals ( List . of ( new IdentifierToken ( "foo" ) , new IdentifierToken ( "bar" ) ) , parser . parse ( "foo" , List . of ( "bar" ) ) )
assertNull ( sessionFactory . getCurrentSession ( ) . get ( TaskElement . class , taskGroupWithOneChild . getId ( ) ) )
assertArrayEquals ( "odd terminated compact decode fail" , expected , CompactEncoder . unpackToNibbles ( test ) )
assertEquals ( new SubmissionSet ( ) , result )
assertEquals ( "F0F7" , result )
assertTrue ( "loader must have addons: fails here because the loading happens lazily" , loader . iterator ( ) . hasNext ( ) )
assertSystemConfigurationAfter ( read )
assertNotNull ( Member . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "QUXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( q2 , qr )
Assert . assertTrue ( payLoad . contains ( "value" ) )
Assert . assertSame ( o , p . getExpectedValue ( ) )
assertTrue ( "incorrect value" , aNumber . toString ( ) . equals ( result ) )
Assert . assertEquals ( expected , actual )
assertTrue ( model . getObjects ( BiochemicalReaction . class ) . size ( ) == 4 )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-domain-remote:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertFalse ( resp )
Assert . assertEquals ( Rfc1349TrafficClass . IPTOS_LOWCOST . value ( ) , socket . getTrafficClass ( ) )
assertEquals ( "bar" , p . deref ( ) )
assertEquals ( true , classUnderTest . getSavePreferencesImmediately ( ) )
Assert . assertEquals ( 350L , c1 . add ( c2 ) . getTotalMessages ( ) )
assertEquals ( expResult , result )
assertEquals ( r1 , r2 )
assertCorrectBinaryString ( data , expected )
assertFalse ( clusterStatus . isInSafeMode ( false , DEFAULT ) )
assertRaw ( actual )
Assert . assertEquals ( element . getText ( ) , "click me" )
assertEquals ( "163.152.23.222" , ip . asChars ( ) )
Assert . assertTrue ( userDetails == mockUserDetails )
Assert . assertEquals ( 1 , searchCallback . issues . size ( ) )
Assert . assertEquals ( c . getValue ( ) , null )
assertEquals ( "test" , echo . echo ( "test" ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( "DragMe" , destination . getText ( ) )
assertNotNull ( Transcription . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "REXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertThat ( "should not register user with existing mail address" , registered , is ( false ) )
assertTrue ( "unexpected value" , value )
assertNull ( result )
assertInvocations ( invocations )
assertThat ( builder , is ( CoreMatchers . any ( BaseWssFactoryBuilder . class ) ) )
TestUtils . assertEquals ( interesado , interesadoCreado )
assertThat ( testExecutor . invokeTest ( 1000L , ImmutableMultimap . of ( "timeout" , "pass" ) ) , is ( true ) )
assertEquals ( transformedQuery , expectedQuery )
assertThat ( po . get ( ) . getRegisteredCount ( ) , is ( 200 ) )
assertEquals ( response . getStatus ( ) , STATUS201 )
Assert . assertNull ( prewritePrimaryRow ( ) )
assertEquals ( expResult , result )
assertEquals ( MessagePackGenerator . class , generator . getClass ( ) )
assertTrue ( true )
assertThat ( axioms , hasItem ( axiom ) )
assertEquals ( tags , taggedMetric . getTags ( ) )
assertEquals ( expected , json )
assertNotNull ( form )
assertTrue ( sut . isAccountNonLocked ( ) )
assertTrue ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , STARTING_BYTE_OF_4_BYTE_CHAR ) )
assertEquals ( "(1,2,3,4,5)" , asSequenceStr ( result ) )
assertTrue ( traceHeaderLatch . await ( 5 , TimeUnit . SECONDS ) )
assertEquals ( trans . get ( i ) , result )
assertTrue ( rs . next ( ) )
assertEquals ( count , session . from ( $ ( u ) ) . count ( ) )
Assert . assertEquals ( fsAccess . serviceHadoopConf . get ( "foo" ) , "FOO" )
assertThat ( output . format ( "failed" , "" , "failed" ) , Matchers . is ( "\\033[35mred\\033[0m" ) )
Assert . fail ( "Was able to create two fields with same alias" )
assertThat ( sortDependencies . toString ( ) , is ( "DependencySortOrder{childElementNames=[groupId, scope]}" ) )
assertThat ( frame , notNullValue ( ) )
Assert . assertEquals ( 140.5 , Arithmetic . numericallySafeSum ( numbers ) , 0d )
assertTokensEqual ( of ( integer ( 1 ) ) , lastSeenTokens . get ( ) )
assertThat ( result , nullValue ( ) )
assertEqualsQR ( A , qr . factor ( new DenseMatrix ( A ) ) )
assertThat ( writer . toString ( ) , equalTo ( "onetwothree" ) )
assertEquals ( expectedPosition , actualPosition , 0 )
Assert . assertEquals ( HttpURLConnection . HTTP_UNACCEPTABLE , urlConnection . getResponseCode ( ) )
Assert . assertNotNull ( resultEntity )
arrays . assertDoesNotContain ( description , actual , other )
assertEquals ( 1 , query . count ( ) )
assertSame ( docElement . getBody ( child ) , docElement . getBody ( ) )
assertTrue ( future . isDone ( ) )
assertEquals ( TextFileMetricsPersister . DEFAULT_FILE_FORMAT , manager . getFileFormat ( ) )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
assertEquals ( "COORDINATE[��degree��, 0.0174532925199433]" , crs . toString ( ) )
Assert . assertTrue ( newPointAvailable )
assertEquals ( 2 , statistics . size ( ) )
assertTrue ( lt . interpret ( Version . valueOf ( "1.2.4" ) ) )
assertThat ( result , is ( false ) )
assertXsltOutput ( "D" , "I" )
assertThat ( "Count of customer" , res , is ( 3 ) )
assertEquals ( "�注�� 3 ���转" , t . format ( new Date ( 315569259747L * 3L ) ) )
Assert . assertEquals ( 1 , s . x )
assertEquals ( HttpStatus . SC_MOVED_MULTIPLE , response . getStatus ( ) )
assertEquals ( r1 . hashCode ( ) , r2 . hashCode ( ) )
assertFalse ( Intersects . lineIntersectsCircle . call ( a , c ) )
Assert . assertTrue ( pss . toString ( ) . contains ( Integer . toString ( Calendar . getInstance ( ) . get ( Calendar . HOUR_OF_DAY ) ) ) )
assertEquals ( acceptor , typedMap . get ( accKey ) )
assertEquals ( history , unmarshalledHistory )
assertTrue ( actual . isSuccess ( ) )
assertEquals ( "' \\"'" , tk . next ( ) )
arrays . assertStartsWith ( description , null , new short [ 2 ] )
assertKeyPairExists ( getResourceAsString ( "keys/test.pub" ) , null )
assertEquals ( OVERRIDE_NAME_TRAIT , v . get ( OVERRIDE_NAME_TRAIT . getName ( ) ) )
assertEquals ( signatureValue , certificate . getSignature ( ) )
Assert . assertTrue ( hasIndexHashKeyEqualCondition )
assertNotNull ( "Date cannot be null" , date )
assertEquals ( expected , result )
assertThat ( result . size ( ) , is ( 1 ) )
rule . assertScenarioEnded ( )
assertEquals ( "http://host/sentry/api/" + projectId + "/store/" , sentryApiUrl . toString ( ) )
assertRows ( sequencedPath , 6 , TEST_COLUMNS )
assertEquals ( new TrackPosition ( 1 ) , changeEvent [ 0 ] . getTrackPosition ( ) )
assertTrue ( entity . getId ( ) > 0 && entity . getArea ( ) == - Double . MIN_VALUE )
Assert . assertEquals ( VAL6 [ j ] [ 0 ] + "->" + j , VAL6 [ j ] [ 1 ] , result . getText ( ) )
assertEquals ( DeSerializer . class , deserializer . getClass ( ) )
Assert . assertEquals ( true , LdapUtil . authentication ( user , password ) )
assertNotNull ( result )
assertEquals ( violations . size ( ) , 2 )
assertEquals ( 1 , dataStore . getIndices ( MOCK_DATA_TYPE_1 ) . length )
assertEquals ( base64CipherText , decryptedText )
assertEquals ( expected , filterAclEntriesByAclSpec ( existing , aclSpec ) )
Assert . assertEquals ( "\\ninside-a-closure\\n\\ninside-b-closure\\n\\n" , html . trim ( ) . replace ( " " , "" ) )
assertEquals ( "OK" , result . body ( ) )
assertEquals ( "[A-Z]+" , regex )
assertTrue ( h . getNewURL ( ) . equals ( "/NewSimpleRegex" ) )
assertArrayEquals ( new String [ ] { "1.2.40.0.13.1.1.99.27.1.1" , "1.2.40.0.13.1.1.99.27.1.1" } , matches ( query ,
assertTrue ( cloned [ 0 ] == cloned [ 1 ] )
assertTrue ( ok )
assertTrue ( TEST_UTIL . getHBaseAdmin ( ) . isTableEnabled ( TABLENAME ) )
assertEquals ( 2 , context . getAssociatedActivities ( ) . size ( ) )
assertResolvedModelIsNull ( )
assertEquals ( text , infoTextManager . getNewsText ( ) )
Assert . assertEquals ( "BeginString should match" , FixVersions . BEGINSTRING_FIX44 + " " + Integer . toString ( 5 ) + " " + Integer . toString ( 5 ) + " " + "sender" + Integer . toString ( 5 ) + " " + "target" +
Assert . assertTrue ( count > 0 )
assertNull ( patientInfo . getName ( ) )
assertEquals ( expected , header . getValue ( ) )
Assert . assertFalse ( json . has ( CONTROLLER_NAME ) )
assertLog ( Log . INFO , "test info argument argument2 argument3" )
Assert . assertArrayEquals ( expected , actual . toArray ( ) )
Assert . assertTrue ( c . getLastReport ( ) . toString ( ) , c . getLastReport ( ) . isEmpty ( ) )
assertTrue ( clientInfoService . isUseProxiesEnabled ( ) )
assertTrue ( metricsService . metricsNames ( ) . size ( ) > 0 )
assertEquals ( 0 , clientManager . getAll ( ) . size ( ) )
assertThat ( cloths , IsIterableWithSize . < String > iterableWithSize ( 4 ) )
assertEquals ( i , fromList )
assertNotNull ( testObj . getPanel ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( expectedReprovisionPolicy , individualEnrollment . getReprovisionPolicy ( ) )
assertInstanceOf ( "baseCRS" , ProjectedCRS . class , crs . getBaseCRS ( ) )
assertTrue ( emptyMap . isEmpty ( ) )
assertPlanMatches ( project )
Assert . assertEquals ( null , _c . convert ( "" ) )
assertTrue ( criteria . getResultList ( ) . containsAll ( criteriaCTO . getResultList ( ) ) )
assertEquals ( 4 , result . get ( ) . size ( ) )
assertEquals ( expected , splitter . split ( expression ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.common.action.rev130731.actions.grouping.Action " + "output
assertTrue ( Pattern . matches ( HTableDescriptor . VALID_USER_TABLE_REGEX , tn ) )
Assert . assertFalse ( task . isInitialized ( ) )
assertIterationsEqual ( out1 , out2 )
assertEquals ( "foo" , subject . getSafeProjectName ( ) )
assertions . doesNotContain ( )
assertTrue ( functionsWithName . isEmpty ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED_BREAK , status )
assertEquals ( "num metrics in registry" , 3 , r . metrics ( ) . size ( ) )
assertEquals ( "" , propertyValue )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertEquals ( setOf ( new KeyStatistics < String > ( "Ford" , 6 ) , new KeyStatistics < String > ( "Honda" , 6 ) , new KeyStatistics < String > ( "Toyota" , 6 ) , new KeyStatistics < String > (
Assert . assertEquals ( dim . getNumCols ( ) , 100 )
assertTrue ( action . isExecuted ( ) )
assertEquals ( "atom1" , atomURI . toString ( ) )
assertTrue ( lock . lockConnection . getMetaData ( ) . getURL ( ) . contains ( database ) )
assertEquals ( "POLYGON ((0 0, 1 3, 0 0))" , ClobType . getString ( c ) )
assertEquals ( dummyResource . getSourcePath ( ) , testResource . getSourcePath ( ) )
assertEquals ( arr , resultArr )
assertEquals ( r3 , mostRelevantResource )
assertThat ( result , equalTo ( "{\\"d\\":[{\\"uri\\":\\"https://api.tinify.com/v1\\",\\"version\\":\\"1.0\\"}]}" ) )
assertEquals ( "bar1" , jedis . get ( "foo2" ) )
assertNotNull ( query )
Assert . assertEquals ( "Date " + date + " was not correctly truncated to year" , dateTruncExpected , dateTruncActual )
assertNotNull ( Member . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?><root>" + "<firstArray><value>firstArrayValue0</value><secondArray><value>secondArrayValue0-0</value>" + "<thirdArray><
assertNull ( t2 )
assertThat ( allDomainPermissions . isEmpty ( ) , is ( true ) )
assertThat ( "澶у�寮�" , effect , equalTo ( 1 ) )
assertNull ( field . getFill ( null , null ) )
Assert . assertTrue ( readable )
assertEquals ( 3 , count . get ( ) )
Assert . assertNotNull ( pojo . testManager )
Assert . assertEquals ( entity , result )
assertTrue ( Arrays . equals ( sniffed , predicted ) )
assertEquals ( "<test:Foo text='foobar' data='foobar'/>" , output )
assertThat ( message , containsString ( "You have been banned until 2007-12-03, please respect throttling and retry-after headers." ) )
assertTrue ( true )
Assert . assertEquals ( FileType . MZXML , fileType )
assertEquals ( "jdbc/DS" , propertyLoader . getUniqueName ( ) )
org . junit . Assert . assertEquals ( 2 , count . get ( ) )
assertPathPresent ( sequencedRootPath )
Assert . assertEquals ( "test" , description . getPattern ( ) )
assertTrue ( result . passedValidation ( ) )
Assert . assertEquals ( x , y )
Assert . assertEquals ( latestActivity , component . getLastActivity ( ) )
assertThat ( getProcessingError ( ) , containsTypeError ( "domainNamespaces" , "array" , "string" ) )
assertTrue ( "Record should be valid" , isValid )
assertEquals ( expResult , result )
assertEquals ( 2 , commentlList . size ( ) )
assertEquals ( arr , resultArr )
assertEquals ( 1 , stopwatch . getCount ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( value , genericSolutionAttribute . getAttribute ( solution ) )
assertEquals ( 1 , selectJobByProcessInstanceId ( processInstance . getId ( ) ) . getRetries ( ) )
assertThat ( converter . toJavaObject ( new HiveCharWritable ( hiveChar ) ) , is ( ( Object ) "a" ) )
assertEquals ( Subscription . State . PENDING , subscription . getState ( ) )
assertThat ( mid , is ( not ( - 1 ) ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . delete ( this . patient ) )
assertEquals ( "abc" , result )
assertEquals ( dataType , header . getDataType ( ) )
runner . assertValid ( )
Assert . assertNotNull ( s )
Assert . assertFalse ( "Invalid request from interceptor" , result )
assertNull ( attrs . get ( "someInt" , Integer . class ) )
assertE ( "�尖�尖�尖�尖��" + "��131��" + "��111�
assertEquals ( name , result )
Assert . assertEquals ( "Error updating public file" , file . getVersion ( ) , version + 1 )
assertEquals ( "GBP 125.34" , test . toString ( ) )
assertEquals ( 3 , idView . caretPosition ( ) . get ( ) )
assertSame ( reply1 , reply2 )
assertEquals ( new Long ( 1 ) , usage )
assertEquals ( 1 , resultComparator . compare ( ucc1 , ucc2 ) )
assertEquals ( new Dimension ( 50 , 50 ) , ac . getValue ( ) . getSize ( ) )
assertEquals ( 1 , n )
assertEquals ( 1 , kieSession . fireAllRules ( ) )
assertFalse ( executableHelper . overrides ( subType , superType ) , "Literature#getTitle() is private. It should not be possible to override it." )
assertSingleIssue ( issues , 1 , "Function def." , "5min" )
assertDtos ( expected , actual )
assertEquals ( Hive2SimbaDatabaseMeta . URL_IS_CONFIGURED_THROUGH_ODBC , baseSimbaDatabaseMeta . getURL ( testDbName , null , null ) )
assertEquals ( "unsignedByte" , shortForm )
assertEquals ( "Expected 0 results!" , 0 , count )
assertEquals ( "ALTER TABLE testtable DROP PARTITION (country='US')" , query )
assertThat ( findBook , is ( notNullValue ( ) ) )
assertNull ( "no item should have been found" , item )
assertEquals ( statementExecutedLog , readLog )
assertEquals ( DataTransferStatus . REJECTED , response . getStatus ( ) )
Assert . assertNull ( tree . getLabel ( data ) )
Assert . assertEquals ( result . toStringWithoutTime ( ) . trim ( ) , expectedResult . trim ( ) )
assertEquals ( SourceStatus . CONNECTED , disp . invoke ( ) . getStatus ( ) )
assertFalse ( foo . _boolean )
Assert . assertNotNull ( referrers )
assertEquals ( "Must parse 3 elements" , 3 , message . getSensors ( ) . size ( ) )
assertThat ( result , is ( "'\\r'\\n" ) )
assertNotNull ( result )
assertEquals ( result . size ( ) , 2 )
assertEquals ( "{\\"relationship\\":\\"SELF\\",\\"url\\":{\\"value\\":\\"http://orcid.org\\"},\\"workExternalIdentifierType\\":\\"DOI\\",\\"workExternalIdentifierId\\":{\\"content\\":\\"peer-review:subject-external
assertEquals ( Sets . newHashSet ( "table2" , "table3" ) , service . getTablesToRepair ( cluster , unit ) )
Assert . fail ( "Should have thrown exception" )
assertTrue ( result . isResultOK ( ) )
Assert . assertTrue ( result . isEmpty ( ) )
assertMapTest ( form )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertNull ( "empty translation is not worth a review. The UI spots that alone" , review )
assertFalse ( validator . validate ( request ) )
assertEquals ( expResult , result )
assertThat ( "Incorrect row height." , nestedGrid . getSize ( ) . height , greaterThan ( 30 ) )
assertNegatedNameToken ( ast , "bwahaha" )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertObjectEquals ( "{name:'foo'}" , t )
assertNotNull ( LibUsb . getVersion ( ) )
assertEquals ( "010203ff" , formatter . decodeFromString ( "010203ff" ) )
assertEquals ( 4 , orderService . getOrders ( patient , outPatient , testOrderType ) . size ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "ttTo" ) )
validator . assertValid ( value )
assertThat ( errors , not ( hasFieldErrors ( "familyNamePrefix" ) ) )
assertEquals ( "bar1,bar2" , containerRequest . getHeaderAsString ( "foo" ) )
assertEquals ( 0.5 , errorRate , 0.01 )
assertEquals ( 1 , rpt . size ( ) )
assertTrue ( actual instanceof Jaxb )
assertNull ( validatingPlugin )
assertEquals ( "4.01" , response . getHeader ( HttpHeader . ODATA_VERSION ) )
Assert . assertEquals ( "newId" , newActualId )
Assert . assertEquals ( 0 , solution . getUnassignedJobs ( ) . size ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertIsAborted ( tx )
Assert . assertEquals ( "f1" , f1 . getName ( ) )
assertNotNull ( "could not find contract resource" , url )
assertTrue ( folder . getProgressState ( ) == ProgressState . IN_PROGRESS )
assertEquals ( result , AuthenticationStatus . AUTHENTICATED , "Authentication existing user with correct credentials should be successful." )
Assert . fail ( "Exception should be thrown" )
Assert . assertThat ( QueryBuilder . getInstance ( ) . buildFilterQuery ( co , "" , 0 , 1 , 0 , 0 , 0 , null ) , equalTo ( expected ) )
assertNull ( new RandomNodeSelector ( ) . selectNode ( database ) )
assertEquals ( "test-value" , request . getHeaders ( ) . get ( "x-custom-header" ) )
assertThat ( model . getChildCount ( prueba2 ) , equalTo ( 0 ) )
assertEquals ( "boolean" , shortForm )
assertThat ( sw . toString ( ) , is ( equalTo ( "    b" ) ) )
assertSeq ( new String [ ] { "<a/>" , "<b/>" } , "reverse(/top/*, 1)" )
assertThat ( asset . formatAttributes ( ) . get ( "contributors" ) , is ( singletonList ( "Foo <foo@example.com> (http://www.example.com/foo)" ) ) )
assertEquals ( 1 , entry . getTotalResults ( ) )
assertEquals ( "http://blob" , packageUri )
assertMatches ( written , resolved )
assertEquals ( expected , result )
assertEquals ( expectedAst , ast . dump ( "" ) + "\\n" )
assertEquals ( "" , digest )
Assert . assertTrue ( entryList . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "There should only be one entity" , 1 , result . size ( ) )
assertThat ( result , is ( false ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertArrayEquals ( u , MathArrays . unique ( x ) , 0 )
assertThat ( iterImpl . asDocument ( ) , sameInstance ( b . build ( ) ) )
assertEquals ( "" , wire . toString ( ) )
Assert . assertTrue ( env . containsKey ( "java.naming.factory.initial" ) )
assertEquals ( "https://listener:2000/foo/bar" , url )
assertEquals ( version , "12" )
assertEquals ( expected , cls )
assertThat ( builder , IsNot . not ( ( Builder ) null ) )
assertEquals ( String . valueOf ( ReturnCode . NO_DIGITS . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "rc" ) )
assertThat ( name . getQualifiedName ( ) , is ( "aaa.bbb.server.meta.ccc.DddMeta" ) )
assertEquals ( Long . toString ( event . getContentLength ( ) ) , result )
Assert . assertEquals ( hello , helloFromIrods )
assertFalse ( isDisabled )
assertNotNull ( result )
assertEquals ( true , classUnderTest . getShowToolTips ( ) )
assertThat ( box . has ( thing ) , is ( false ) )
runner . assertNotValid ( )
assertMockEndpointsSatisfied ( )
assertTrue ( longArray . length == 3 )
assertEquals ( TextUtil . readUTF8 ( path ) , generator . getResult ( ) )
assertTrue ( "Translation failed" , pelopsException instanceof SocketException )
Assert . assertTrue ( contains )
assertEquals ( arr , resultArr )
Assert . assertEquals ( sum , 39555 )
assertFalse ( Strings . isNullOrEmpty ( resp ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertNull ( output )
assertEquals ( "Failed to parse: @[5,-50]" , pe . getMessage ( ) )
assertEquals ( expected , actual )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) < 0 )
assertEquals ( "123124142" , reader . get ( new IntWritable ( 1 ) ) . toString ( ) )
assertEquals ( g1 , g2 )
assertTrue ( matchResult )
assertThat ( description . toString ( ) , is ( "cell at \\"B1\\" contained <STRING> expected <STRING> sheet \\"Sheet1\\"" ) )
assertTrue ( sta . validateStrokeAndFill ( null , null ) )
assertThat ( supplier . authForImage ( "image/non-gcr" ) , is ( nullValue ( ) ) )
assertEquals ( SimpleScore . of ( 42 ) , scoreDirector . calculateScore ( ) )
Assert . assertEquals ( testString , HtmlToXMLUtil . unescapeToXML ( testString ) )
Assert . assertEquals ( expectedStr , rows . next ( ) . toString ( ) )
assertCollection ( response )
assertEquals ( "redirect:/reset-password?expired=false" , modelAndView . getViewName ( ) )
assertEquals ( "abc" , injected . val . get ( ) )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) )
assertEquals ( 2 , roleListWrapper . getRoles ( ) . size ( ) )
Assert . fail ( "expected exception. Found " + resource )
Assert . assertEquals ( "涓�|浠�涔�" , words )
assertThat ( reportGenerator . generateJsonUser ( usageStatistics ) , equalTo ( "{\\n" + "  \\"jobId\\": \\"cvop\\",\\n" + "  \\"user\\": \\"cvop\\",\\n" + "  \\"finish
assertThat ( entityId , is ( equalTo ( ( Object ) 100L ) ) )
assertEquals ( "This is binary content" , IOUtils . toString ( response . getEntity ( ) . getContent ( ) ) )
assertEquals ( "2008-02-07_00:30" , s )
assertEquals ( 0 , logRecordList . size ( ) )
assertThat ( top3RichCustomerList , contains ( "Jeff Bezos" , "Hiro Tanaka" , "Jeff Bezos" , "Hiro Tanaka" ) )
Assert . assertNotNull ( menuBarContainerTool )
assertEquals ( entities , entities2 )
assertEquals ( expected , actual )
Assert . assertEquals ( expected , wire . read ( ) . text ( ) )
assertTrue ( pass )
assertEquals ( n , c )
assertEquals ( 5 , table . getTableSize ( ) )
assertEquals ( "select sql_cache survey.NAME from SURVEY survey order by survey.NAME asc" , toString ( query ) )
Assert . assertEquals ( devices , loadedDevices )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( - 1 , resultado )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( schema , schema2 )
assertThat ( duration , allOf ( greaterThanOrEqualTo ( 1000L ) , lessThanOrEqualTo ( 10000L ) ) )
assertEquals ( expected , actual )
Assert . assertEquals ( PriorityBean . PRIORITY , job . getPriority ( ) )
Assert . assertTrue ( concept . isEmpty ( ) )
assertEquals ( "|Monday|Tuesday|Wednesday|Thursday|Friday" , days )
Assert . assertEquals ( createObjectNode ( "fieldName" , 42 , "fieldName2" , 12 ) , result )
assertTrue ( matcher . match ( msg , rule ) )
assertEquals ( "LitecoinURI['amount'='987654321000000000','label'='Hello World','message'='Be well','address'='PRODNET_GOOD_ADDRESS']" , testObject . toString ( ) )
assertTrue ( pub . isClosed ( ) || sub . isClosed ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( combiSet . nbOfCombinationsAbove ( 2 ) == 2 )
assertFalse ( victim . isValid ( box , null ) )
Assert . assertEquals ( invokers , fileredInvokers )
assertEquals ( DispatcherType . REQUEST , dispatcherType )
assertEquals ( 2 , str . length ( ) )
assertNotNull ( stream )
assertNotNull ( result )
assertTrue ( simpleValue1 . equals ( simpleValue2 ) )
assertEquals ( "returned parsed text value was incorrect" , expectedReturn , StringUtils . searchAndColor ( text , searchText , dummyColorInt ) )
assertEquals ( connectionTimeout , ConfigUtils . getConnectionTimeout ( mockServletContext ) )
Assert . assertEquals ( etalonFrequencyListJSON , frequencyListJSON )
mock . assertIsSatisfied ( )
assertTrue ( true )
assertEquals ( mod , modSer )
assertE ( "�尖�尖�尖�尖��" + "�� �� ��" + "�
assertThat ( r , hasEntry ( "int" , ( Object ) 3 ) )
Assert . assertEquals ( 0 , count )
assertEquals ( "Input key/value json should match output key/value json" , inputJson , outputJson )
assertEquals ( VerifyFailType . WARN , pluginParameters . verifyFailType )
assertEquals ( "[someDataStore] testVM/Renamed" , testDiskFileNameString )
Assert . assertEquals ( "test create schema with bson type" , HttpStatus . SC_CREATED , resp . getStatus ( ) )
assertMetric ( "ReqPerSec" , "1.99871" )
assertArrayEquals ( expected , actual )
assertNotNull ( result )
Assert . assertEquals ( "Wrong value" , clientConfig . getConfig ( ) , clientConfig2 . getConfig ( ) )
assertThat ( taxFactor , equalTo ( TaxService . DEFAULT_TAX_FACTOR ) )
assertTrue ( validator . isValid ( ) )
assertEquals ( 0 , lintresult . getIssues ( ) . size ( ) )
assertEquals ( "Connector is null" , null , query . getConnector ( ) )
assertStack ( new Object [ ] { 3L , null } , stack )
Assert . assertTrue ( expected . equals ( result ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( nullValue ( ) ) )
assertScriptEquality ( expectedScript , actualScript )
assertEquals ( "http://apache.org/shindig?foo=bar&hello=world" , builder . toString ( ) )
assertEquals ( 0 , numEdits )
assertEquals ( expected , actual )
assertEquals ( emptyList ( ) , result )
files . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( response . getStatus ( ) , Status . SUCCESS . getValue ( ) )
assertNotNull ( uMapping )
assertEquals ( 1 , testSet . getTestResults ( ) . size ( ) )
Assert . isTrue ( true )
Assert . assertEquals ( path , "dir" + File . separatorChar + "dir2" )
assertThat ( sw . toString ( ) , is ( equalTo ( "    bcd\\n    test" ) ) )
Assert . assertEquals ( 2 , verbSynset . getItemCount ( ) )
assertEquals ( "High-Performance Java Persistence" , post . getTitle ( ) )
Assert . assertTrue ( messages . toString ( ) , messages . size ( ) == 2 )
Assert . assertNotNull ( el )
assertEquals ( "" + QueryMessages . outputFilter ( ) + "\\n" + "organisation:   FOO-ORG\\n" + "source:         RIPE\\n" + "\\n" + "organisation:   BAR-ORG\\n" + "source:
Assert . assertEquals ( Integer . class , clazz )
assertTrue ( ex . getMessage ( ) . equals ( "Dee on initial crawl!" ) )
assertEquals ( 404 , responseGet . getStatus ( ) )
assertEquals ( DataStatus . ACTIVE , empty . getCycleLockStatus ( ) )
assertThat ( effect , is ( 1 ) )
assertThat ( validations . getErrors ( ) , hasSize ( 1 ) )
assertTrue ( syncOpt . isDbVersionPresent ( ) )
assertNotNull ( transplant . getId ( ) )
assertFalse ( "GraphDatabase is locked" , db . isLocked ( ) )
assertEquals ( "a<V>\\n" , found )
assertThatReferenceSetIsEmpty ( referenceSet )
assertEquals ( "foo" , result )
Assert . assertNotNull ( "did not find collection" , actual )
assertEquals ( 3 , groupMembers . size ( ) )
assertEquals ( expected , result )
assertEquals ( "Springfield" , exp . evaluate ( person ) )
assertEquals ( SAMPLE_BOOLEAN_ATT_VALUE , returnedDomainEntity . getBooleanField ( ) )
assertEquals ( JBossSAMLURIConstants . NAMEID_FORMAT_PERSISTENT . get ( ) , nameIDPolicy . getFormat ( ) . toString ( ) )
assertEquals ( purRepository , diConfig . getRepository ( ) )
assertEquals ( "bob" , val )
assertThat ( mqttClient . getMessages ( ) , is ( Arrays . asList ( new Message ( topic ( "D2" ) , "true" ) ) ) )
assertTrue ( "getMinimized() doesn't return true" , gadget . getMinimized ( ) )
assertEquals ( "http://suryagaddipati/cancan.git" , template )
assertEquals ( "Types that only differ in case should be equivalent" , 0 , comparator . compare ( type1 , type2 ) )
assertEquals ( pos . getErrorIndex ( ) , 0 )
assertThat ( l , contains ( 9 , 8 , 7 ) )
assertEquals ( parser . parse ( expectedOutput ) , devent . payload )
assertEquals ( expected , got )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_widthTest01_" ) )
assertEquals ( "2.234" , e . eval ( ) . toPlainString ( ) )
assertThat ( html , is ( "<input type=\\"hidden\\" name=\\"w1\\" id=\\"w1\\" value=\\"2014-10-01\\" />" ) )
assertEquals ( 5 , res )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
assertEquals ( m1 , m2 )
assertEquals ( ElasticSearchIndexProvider . ES_OTHER_TYPE , type )
assertEquals ( "Wrong decoded value" , decodedValue , config . getEncodedString ( KEY_PREFIX , null ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( atom ) )
assertEquals ( message , baseObject , activity . getBaseObject ( ) )
assertEquals ( expResult , result )
assertParse ( code , true )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ORCID_BIO_EXTERNAL_IDENTIFIERS_CREATE )
assertTrue ( Files . isModified ( testFolder ) )
assertEquals ( BuilderFactory . start ( ) . addBinary ( "a" , ( byte ) 5 , "The quick brown fox jumped over the lazy dogs." . getBytes ( "US-ASCII" ) ) . build ( ) , doc )
assertTrue ( result . matches ( "\\\\{\\\\s*\\"third\\"\\\\s*:\\\\s*\\"Third\\"\\\\s*,\\\\s*\\"fourth\\"\\\\s*:\\\\s*:\\\\s*\\"Fourth\\".*}" ) )
assertEquals ( 1 , service . prepare ( query ) . countEntities ( fo ) )
Assert . assertEquals ( 37.3100 + 60 , calculator . cost ( ) , 0.0001 )
assertEquals ( "bootConf" , bootConf )
assertEquals ( false , namedCluster . isHdfsHostEmpty ( null ) )
Assert . assertNotNull ( personStructure )
assertEquals ( data , target . getDataManager ( ) . get ( new Parameters ( ) . setLocationKey ( locationKey ) . setContentKey ( contentKey ) ) )
assertEquals ( Arrays . asList ( "col1" , "col2" ) , subset . getProperty ( "key5" ) )
Assert . assertFalse ( isNewRequired )
assertTrue ( "Waited less than 700ms: " + waited , waited < 700 )
assertEquals ( "Hello" , argument . getValue ( ) . get ( "_id" ) )
assertNotEquals ( ctx1 , ctx2 )
assertFalse ( purchase . getTicket ( ) . isDiscount ( ) )
assertEquals ( 4 , metadata )
assertFalse ( validator . validate ( Meta , POST ) . passedValidation ( ) )
assertEqualMarginals ( fg , bf , bp )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.http_$$ns_apache_org$2017$custom$namespace__b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\
assertTrue ( roles . size ( ) > 0 )
Assert . isTrue ( grades . size ( ) > 0 )
assertNull ( item . getList ( ) )
assertEquals ( 6. * 3600. + 6. * 60. , sec , 0.01 )
assertEquals ( sample , sample2 )
assertThat ( result . getPayload ( ) , is ( instanceOf ( String . class ) ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\n  this.d() {\\n}" )
assertEquals ( ( short ) 0x0009 , s . m0_0 ( ) )
assertEquals ( "" , sanitized )
Assert . assertTrue ( true )
assertEquals ( expectedSpec , opts . getIndexingSpecification ( ) )
Assert . assertFalse ( thrown )
assertEquals ( expectedURI , gotURI )
assertTrue ( indexEngine . isIndexReady ( cluster , TEST_INDEX ) )
assertThat ( arguments . getAgent ( ) , equalTo ( "funky-bot-2" ) )
assertCaret ( 2 )
assertTrue ( Math . abs ( acc2 - acc ) < DELTA )
assertThat ( output , containsString ( "Number of numerical stats:" ) )
assertEquals ( WEBJAR_URL_PREFIX + "validate.js/0.8.0/validate" , javaScript )
assertThat ( dto . isLegacyUser ( ) , is ( true ) )
assertTrue ( userCanReadBranch )
assertEquals ( endOfDay ( base . plusDays ( 20 ) ) , absoluteTime )
Assert . assertFalse ( handle )
assertEquals ( refPoint , testPoint )
assertNull ( e . abortShutdownReason ( ) )
assertEquals ( 0 , p . getStart ( ) )
assertNotNull ( ciudad )
Assert . assertTrue ( authenticator . logout ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( "override:5678" , factory . newNameResolver ( URI . create ( "dns:///localhost:443" ) , NameResolver . Args . EMPTY ) . toString ( ) )
assertArrayEquals ( overwrite , readAllBytes ( gfs . getPath ( "/dir/file.txt" ) ) )
assertTrue ( exceptionTestResults . hasThrownException ( ) )
assertEquals ( false , result )
Assert . assertEquals ( expectedResult , user )
assertEquals ( 0 , count )
assertThat ( sel , is ( datatype ) )
arrays . assertContainsOnly ( someInfo ( ) , actual , array ( "Luke" , "Yoda" , "Leia" , null ) )
assertThat ( JDBCAdapter . SQL_TIMESTAMP . from ( Moment . of ( 1341100800L , 210 , TimeScale . POSIX ) ) , is ( ts ) )
assertEquals ( rdiv , answer )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertNotNull ( createdBreaker )
assertNotNull ( parent )
assertFalse ( result . passedValidation ( ) )
assertThat ( encoded , containsString ( "{\\"linkId\\":\\"value123\\",\\"_linkId\\":{\\"extension\\":[{\\"url\\":\\"http://123\\",\\"valueString\\":\\"HELLO\\"}]}}" ) )
assertEquals ( objectName , expectedObjectName )
assertThat ( actualShardNumber >= 0 && actualShardNumber < 1 , is ( true ) )
assertThat ( underTest . isValid ( new TestObj ( "parentRole" , Collections . singleton ( "childRole" ) ) , context ) , is ( false ) )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 " + "INNER JOIN table2 AS t2 " + "CROSS JOIN table3 AS t3 ON t1.c0 = t3.c0 ON
assertEquals ( "configName" , fixture . getConfig ( ) . getName ( ) )
assertSame ( binder1 , binder2 )
assertTrue ( song1 . compareTo ( song2 ) == 0 )
assertEquals ( field . getValue ( ) , entityField . get ( IndexingUtils . FIELD_STRING ) )
assertEquals ( "IDX" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertThat ( this . N . getContext ( ) . getContextPath ( ) , is ( "/context" ) )
assertEquals ( "get() returns the correct formatter string" , "formatter" , formatterHelper . get ( 0 ) )
assertEquals ( "SELECT * FROM xmltable('/a/b' passing convert('<a><b><c>1</c></b><b><c>1</c></b><b><c>1</c></b><b>1</b></a>', xml)
assertEquals ( "1,2" , result )
assertEquals ( model . getChangedProperty ( ) , "value" , "Value changed" )
Assert . assertEquals ( "meglio" , language . getLanguage ( ) )
resultEndpoint . assertIsSatisfied ( )
assertEquals ( testUser , user )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
assertEquals ( typeDeclaration . toString ( ) , td . toString ( ) )
assertFalse ( actualBoolean )
assertNotNull ( reader . getDataSource ( ) )
Assert . assertEquals ( "UK10KRecord [chrom=1, pos=10066, id=., ref=T, alt=[TAACCCTAACCCTAACCCTAACCCTAACCCTAACCC], " + "filter=[RF, LCR], chromosomeCount=
assertNotNull ( expression )
assertEquals ( false , result )
assertEquals ( 10 , results . getTotal ( ) )
assertTrue ( epollID > 0 )
Assert . assertEquals ( 0.0 , a . minInColumn ( 0 ) , Vectors . EPS )
assertThat ( referenceSet . getReferencingAxioms ( ) , hasItem ( annotationAssertionAxiom ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_READ_LIMITED )
assertFalse ( "No upcoming movies found" , result . isEmpty ( ) )
Assert . assertEquals ( 1 , analysis . getErrors ( ) . size ( ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
Assert . assertSame ( notifier , result )
assertEquals ( expectedAst , ast . dump ( "" ) + "\\n" )
assertThat ( result , is ( "This is item 1" ) )
assertEquals ( GOOD_API_KEY , response )
assertEquals ( exepcted_individual , returned_individual )
assertEquals ( "Permission type doesn't match" , expectedPerm , e . getPermission ( ) )
assertThat ( SpringFacesIntegration . isInstalled ( this . applicationContext ) , is ( true ) )
assertEquals ( "<!--- x ---><cfset/>" , cfmlSource . toString ( ) )
assertEquals ( "Simple delete with where clause" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertArrayEquals ( VALUE . toArray ( ) , dataItems . toArray ( ) )
Assert . assertFalse ( "this should not exist" , result )
assertEquals ( "Wrong executor name." , "NoOpEventsIngestionExecutor" , eventIngestionExecutor . name ( ) )
assertEquals ( true , classUnderTest . isFirstRun ( ) )
assertTrue ( timestamp2 - timestamp1 >= 100 )
Assert . assertEquals ( "aString" , prop . getPropertyName ( ) )
Assert . assertNull ( "No se deber�a haber encontrado la aplicaci�n" , aplicacion )
Assert . assertTrue ( subscription . accept ( element ) )
org . junit . Assert . assertEquals ( 2 , count . get ( ) )
Assert . assertEquals ( expected , result )
assertEquals ( "_cat/indices/testIndex" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertAppearanceFontSize ( dest , 3.56f )
assertEquals ( 1 , tasks . get ( "dao_test_sqlsvr_dbShard" ) . intValue ( ) )
assertTrue ( "Failed to read correct data" , new String ( buf1 , 0 , buf1 . length ) . equals ( fileString . substring ( 3000 , 3100 ) ) )
assertStreamEquals ( expectedBackoffs , policy . toBackoffs ( ) )
assertSame ( conf , table . getConfiguration ( ) )
assertEquals ( 5. , serviceActivity . getEndTime ( ) , 0.01 )
assertEquals ( AuthorizationResult . ACCESS_GRANTED , permission . getResult ( ) )
assertEquals ( "coap://127.0.0.1:12354/identity/3" , coapRequest . getURI ( ) )
this . assertLoadBlob ( departments , true , false )
assertFalse ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertEquals ( false , result )
assertPayloadEqual ( payload )
assertEquals ( true , result )
Assert . assertTrue ( "Native cipher failed to load!" , loaded )
assertNotNull ( edm )
assertEquals ( "default-elasticsearch" , getClusterName ( client ) )
assertSseResponse ( sseResponse , "data:payload" )
assertEquals ( PatientProfileDstu2 . class , bundle . getEntry ( ) . get ( 0 ) . getResource ( ) . getClass ( ) )
assertEquals ( e . getId ( ) , id )
assertEquals ( "Got a modification date" , 0 , strategy . getLastModificationDate ( ) )
Assert . assertEquals ( "regetTable returned incorrect table" , tableName , table . getName ( ) )
assertNotNull ( IpAddress . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ALXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( "Pictogram not valid" , constraintViolations . size ( ) == 0 )
assertions . isEqualTo ( new Double ( 6d ) )
assertThat ( job . getOwnershipUrl ( ) , containsString ( "jenkins-acceptance-tests-user" ) )
Assert . assertNull ( "description should not be found" , actualDescription )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertTrue ( info . isEmpty ( ) )
assertThat ( cf . parse ( "30. Februar, AD 1712" ) , is ( PlainDate . of ( 1712 , 3 , 11 ) ) )
assertThat ( lineWriter . getTotalLineLength ( ) , equalTo ( 0 ) )
assertFalse ( matchResult )
assertTrue ( f . getMessage ( ) . contains ( "fault-two" ) )
assertEquals ( "overloaded 5.6" , b . overload ( 5.6d ) )
assertNotNull ( john )
Assert . assertNull ( result )
assertSame ( filter , derive ( filter , "g:a:1" ) )
assertEquals ( HttpServletResponse . SC_OK , response . getStatus ( ) )
Assert . assertEquals ( version , languageVersion . getVersion ( ) )
assertEquals ( original , restored )
result . assertIsSatisfied ( )
assertEquals ( 2 , artists . size ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( 7 , count )
assertEquals ( nodeReply , reply )
assertHasInterface ( interfaceClass , dst . toClass ( ) )
Assert . fail ( "Should not be able to send successfully with a reply to that address." )
result . assertIsSatisfied ( )
assertEquals ( 1 , patient . getIdElement ( ) . getExtension ( ) . size ( ) )
assertEquals ( 1 , constructors . length )
assertEquals ( lineOriginal , lineNew )
assertCommit ( writeTx . submit ( ) )
assertTrue ( order . hasSameOrderableAs ( otherOrder ) )
Assert . assertNull ( ex )
assertEquals ( "Laroche" , lastName )
assertNotNull ( store )
assertEquals ( DataTypeManager . getArrayType ( DefaultDataClasses . OBJECT ) , c . getType ( ) )
assertEquals ( initialDate , processor . getMeasurementHistory ( exchange ) . getReferenceDate ( ) )
AssertAnnotations . assertPOS ( posTags , posTags , select ( jcas , POS . class ) )
assertEquals ( "Both lists should be same" , Arrays . asList ( richGroup1 , richGroup2 ) , groupsManagerBl . convertGroupsToRichGroupsWithAttributes ( sess , Arrays . asList ( group , group2 ) , attributesList ) )
assertResult ( )
assertEquals ( mode , acl . getMode ( ) )
assertEquals ( expResult , result )
assertTrue ( ! nnList . isEmpty ( ) )
assertEquals ( "https://www.erome.com/Jay-Jenna/profile" , ripper . getGIDProfilePage ( url ) )
Assert . assertEquals ( result . getResultSize ( ) , 0 )
assertNotNull ( s3PersistWriter . getAmazonS3Client ( ) )
assertEquals ( 2 , logs . size ( ) )
assertTrue ( delta < delay + overhead )
assertEquals ( "XMLLiteral" , shortForm )
Assert . assertTrue ( state [ i ] == expected )
assertTrue ( failedAsExpected )
assertEquals ( 0.0F , ( float ) calculator . sub ( 1 , 0 ) , - 1 )
assertEquals ( "123" , rp . getIdPartAsLong ( ) )
assertResultList ( target )
assertResult ( )
assertEquals ( expected , out )
assertEquals ( "Unexpected result" , "{\\"key\\":\\"val\\"}" , sb . toString ( ) )
assertEquals ( PersonGenderCodeType . UNKNOWN , output . getRegularCPRPerson ( ) . getPersonGenderCode ( ) )
assertEquals ( "foo foa foo" , tagsRetrieved )
assertEquals ( TimeUtil . parseTime ( time , TimeUtil . TimeFormat . LONG_DATE_PATTERN ) , "2014\\\\11\\\\11 10:11:11" )
assertTrue ( latch . await ( 1 , TimeUnit . MINUTES ) )
assertEquals ( "aTestString" , classUnderTest . getSchema1 ( ) )
assertTrue ( key . verify ( message . getBytes ( ) , output ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Client method=\\"GET\\" statusCallback=\\"https://example.com\\" statusCallbackEvent=\\"initiated\\" statusCallbackMethod=\\"GET\\" url=\\"https://example
TestUtils . assertEquals ( "Kendall's correlation matrix" , createRealMatrix ( rData , 5 , 5 ) , correlationMatrix , 10E-15 )
assertEquals ( "select count(entity_0.code) from Entity entity_0" , select . getQuery ( ) )
assertEquals ( 1 , actualOutputs . size ( ) )
assertThat ( getDomainPresenceInfo ( dp , UID ) . getPod ( "admin" ) , equalTo ( pod ) )
assertSame ( val , ConfigUtils . getObject ( config , val , "no-value" ) )
assertEquals ( pennTree , jcas . getDocumentText ( ) )
assertEquals ( "Find all not returning a list with one reading" , 1 , readings . size ( ) )
assertThat ( domain . getDomainHome ( ) , equalTo ( "/u01/oracle/user_projects/domains" ) )
assertEquals ( "Player not moved" , tileAt ( g , 1 , 0 ) , g . getPlayer ( ) . getTile ( ) )
assertArrayEquals ( maxFragmentLengthStructure , helloExtensions . toByteArray ( ) )
assertEquals ( 2 , pairs . size ( ) )
assertThat ( renderer . score ( context , QueryResult . from ( "data" ) ) , is ( 0 ) )
assertEquals ( "^aa$" , result )
assertThatSelectedTabIndexIs ( index )
assertEquals ( a1 , a2 )
assertTrue ( CascadingUtil . getBooleanProjectProperty ( childProject , AbstractProject . CLEAN_WORKSPACE_REQUIRED_PROPERTY_NAME ) . getOriginalValue ( ) )
context . assertIsSatisfied ( )
assertEquals ( "text" , dataTypeUtil . load ( "text" ) )
Assert . assertFalse ( "Must be invalid" , signed . verify ( verifier ) )
Assert . assertEquals ( "Should return exactly one variable" , 1 , response . jsonPath ( ) . getMap ( "" ) . size ( ) )
Assert . assertTrue ( "瑙ｆ��姝ｅ父HTTP GET璇锋��ㄤ�" , 1 == rst )
assertEquals ( 1 , stopwatch . getCount ( ) )
assertTrue ( isValid )
assertEquals ( zpk1 , zpk2 )
assertThat ( parseCompileEvaluate ( inputExpression ) , is ( mapOf ( entry ( "a value" , 10 ) , entry ( "an applicant" , mapOf ( entry ( "first name" , "Edson" ) , entry ( "last name" , "Tirel
assertTrue ( "no writeskew detected" , writeSkewEncountered . get ( ) )
assertThat ( classes . size ( ) , is ( 1 ) )
assertEquals ( "Expected 1 result!" , 1 , n )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE UPPER(NAME(nodes)) = $literal" ) )
assertNotNull ( tree . context ( ) )
assertThat ( s . getState ( ) , equalTo ( "state" ) )
Assert . fail ( )
assertThat ( streetAddressNumber , startsWith ( "N" ) )
assertThat ( sink . toString ( ) , is ( "Database[db: sentBytes=0, sentCount=0, receivedBytes=0, receivedCount=0, " + "lastLatency=0 ms, totalLatency=0 ms]" ) )
assertions . isEqualTo ( expected )
assertEquals ( ansi ( ) . bold ( ) . fg ( Color . RED ) . toString ( ) , str )
assertEquals ( "testuuid" , sut . transform ( "/blah/whatever/someversionhere_uuid_testUUID" ) )
assertTrue ( r1 instanceof PublicCloneable )
assertThatTraceIs ( trace , expected )
assertEquals ( 5 , m . getTopLevel ( ) . getList ( ) . size ( ) )
Assert . assertEquals ( "k1" , value . getName ( ) )
assertCollectionCanBeSerialised ( collection , TreSource . ExtendedHeaderData , 2 )
Assert . fail ( "Expected IllegalArgumentException" )
assertTrue ( wlsClusterConfig . hasDynamicServers ( ) )
Assert . assertEquals ( 0 , sFsShell . run ( "mount" , mountPoint . toString ( ) , ufsPath ) )
assertThat ( stdOutContent . toString ( ) , equalsIgnoringOSSpecificLineSeparators ( originalContent ) )
assertTrue ( "Got " + function . getCallCount ( ) + ", expected 1" , 1 == function . getCallCount ( ) )
Assert . assertEquals ( "Incorrect number of selected items" , 2 , menu . getSelectedMenuItems ( ) . size ( ) )
assertNotNull ( audio )
assertEquals ( Arrays . asList ( "12" , "34" ) , projection . args )
assertEquals ( 1 , droppedFigure . getValue ( ) . getScore ( ) )
assertEquals ( "V2 Composer" , wrapper . getComposer ( ) )
assertThat ( result , is ( ofpFlowAction . getClass ( ) ) )
assertEquals ( "property.name" , res )
Assert . assertEquals ( "2011-11-01 23:59:59" , formater . format ( date . getTime ( ) ) )
assertNotNull ( result )
Assert . assertNotNull ( "The TestCases should not be null" , cases )
assertTrue ( "Walked too far astray: " + walk + "\\nNote: This " + "test will fail randomly about 1 in 100 times." , FastMath . abs ( walk ) < FastMath . sqrt ( N ) * 2.576 )
assertTrue ( "FromEntity empty" , constraintViolations . size ( ) == 1 )
assertTrue ( saved . getId ( ) != null )
Assert . assertTrue ( component . getCommands ( ) . size ( ) == 1 )
assertFalse ( unit . isValid ( Money . of ( - 1 , "EUR" ) , null ) )
assertEquals ( "\\"NAME\\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertEquals ( 4 , exceptions )
assertEquals ( "\\\\*\\\\\\"\\\\\\"\\"" , StringUtils . escapeLeavesSupportedSpecialCharacters ( supportedSpecialCharacters ) )
assertEquals ( "Base value is not properly parsed" , "09999.9999" , parsed )
Assert . assertNotNull ( str )
assertEquals ( initialHeaderHeight , getGridElement ( ) . getHeader ( ) . getSize ( ) . getHeight ( ) )
assertFalse ( verifyCertificateFails ( DtlsTestTools . getClientCertificate ( ) ) )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . fail ( "Xfdf files are not equal" )
assertEveryChildHasTheSameWeightWithCorrectSum ( )
assertTrue ( entity . getCount ( ) == 3456789 )
Assert . assertEquals ( "" , result )
assertEquals ( DefaultTopology . SAME_GRAPH , g . getTopology ( ) )
Assert . assertTrue ( s . isEnabled ( ) )
assertEquals ( timeAmount . getQuantity ( ) , 11 )
Assert . assertEquals ( 4 , nr )
assertTestRunFails ( testPlan )
assertEquals ( MemoryCacheStrategy . class , actual . getClass ( ) )
assertEquals ( expected , this . output . toString ( ) )
assertEquals ( "anonymous" , targetBean . getPrincipalName ( ) )
Assert . fail ( "Expected UnprocessableError" )
assertNotNull ( jdbc )
assertEquals ( ( float ) 8 , result . getFloatValue ( ) , 0.0 )
assertEquals ( "LOCAL: \\nName1\\nName2\\nUserFN UserLN\\naddr2\\naddr1\\n121212 City1\\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null )
assertThat ( rawJSON , is ( "mock_json/page/f4j.json" ) )
assertEquals ( "12345" , operator . trace )
assertEquals ( expected3 , actual3 )
Assert . assertEquals ( "2.5 kB" , actual )
assertThat ( robots . getDirectives ( ) , empty ( ) )
assertFalse ( "Document should not contain metadata" , doc . hasContentField ( "test_pdf_metadata" ) )
assertEquals ( 0 , variables . size ( ) )
Assert . assertEquals ( esperado , obtido )
assertEquals ( "Objects{integerValue=1}" , objects . toString ( ) )
checker . assertEquals ( msg , exp , act )
assertEventEqualAfterSerializeDeserialize ( purchaseAdvisedEvent )
assertNull ( p )
assertEquals ( 1 , result )
assertEquals ( "value" , config . getString ( "test.key" ) )
Assert . assertEquals ( "my name is \\\\\\"repodriller\\\\\\", man" , lines [ 0 ] )
assertEquals ( "Too many messages" , 1 , observer . getMessageCount ( ) )
Assert . assertEquals ( null , _c . convert ( "" ) )
assertFalse ( scriptEngine . executeFilter ( msg ) )
assertEquals ( simple . getName ( ) , find . get ( ) . getName ( ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<rdf:RDF\\n" + "\\txmlns:rdf=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns
assertThat ( e . getMessage ( ) , is ( "manual reiteration not unavailable" ) )
Assert . assertTrue ( dependency1 . equals ( dependency2 ) )
Assert . assertEquals ( result . getResultSize ( ) , 10 )
assertEquals ( mockResponse , response )
assertListTEquals ( listT , 24 , 42 )
assertThat ( weightedCucumberScenarios . scenarios , hasSize ( 1 ) )
assertTrue ( result . getErrorMessage ( ) , result . isSucceeded ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertThat ( result , is ( Collections . singletonList ( "setMyField" ) ) )
assertTrue ( ! result )
Assert . assertEquals ( hl7XML . getElementsByTagName ( "OBX" ) . getLength ( ) , handler . getOrderStatus ( ) )
assertTrue ( "submission should be prepared." , submission . prepareAnalysisWorkspace ( ) )
PositionCollectorTestUtil . assertEmpty ( collector2 )
assertThat ( result , equalTo ( false ) )
assertEquals ( SearchContext . SIMPLIFICATION_BONUS , sut . computeSearchGoalBonus ( current ) )
assertEquals ( "topology" , conf . getTopologyName ( ) )
assertThat ( array2 , equalTo ( new short [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) )
Assert . assertEquals ( 2 , qy . size ( ) )
assertEquals ( true , conn . isOpen ( ) )
assertTrue ( "Returned object should be a PredicatedSortedBag." , bag instanceof PredicatedSortedBag )
assertEquals ( "Johannes" , nameField . getValue ( ) )
assertFalse ( response . cancel ( ) )
assertEquals ( expecteds , actuals )
maps . assertContainsOnly ( description , actual , entries )
assertNull ( s . findPath ( grid ) )
assertEquals ( expectedAwql , serviceQuery . toString ( ) )
assertThat ( jcache . size ( ) , is ( MAXIMUM ) )
assertEquals ( on ( 6 , 3 ) , next )
assertEquals ( new Integer ( "2147483647" ) , result )
assertArrayEquals ( ArrayConverter . hexStringToByteArray ( "3b7a839c239ef2bf0b7305a0e0c4e5a8c6c69330a753b308f5e3a83aa2ef6979
assertMockEndpointsSatisfied ( )
assertEquals ( this . out . toString ( ) , byteTally . getOnlyElement ( ) . toString ( ) )
assertThat ( cursor . proceedTo ( 'b' ) , is ( false ) )
assertEquals ( 30 , out . get ( "T2" ) )
assertTrue ( "No video is found" , foundVideo )
assertTrue ( comparator . isDifferent ( lhs , rhs ) )
assertEquals ( "foobar" , instance . getProperty ( element ) )
assertEquals ( result , expected , 0.0000001 )
assertDelete ( )
Assert . assertEquals ( "John Doe" , customer )
Assert . assertEquals ( String . format ( "some %s" , this . html ( bb , "java" ) ) , formatter . format ( "some [google]java[/google]" , defaultOptions ( ) ) )
assertEquals ( 5 , count )
assertThat ( result . isCompletedExceptionally ( ) , is ( true ) )
assertEquals ( expected , actual )
assertEquals ( 3 , g . queryDescendants ( obj ) . size ( ) )
assertThat ( result . statusCode , is ( Response . NO_CONTENT ) )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( expected , replacing . transform ( subject ) . getType ( ) )
assertThat ( daNull , is ( nullValue ( ) ) )
assertNull ( "Value should be null" , bucket )
assertEquals ( expect , result )
Assert . assertEquals ( 5 , buffer . getBufferSize ( ) )
assertEquals ( 10 , atAct . get ( 0 ) )
assertTrue ( sf . decide ( r ) )
assertTrue ( pool . isClosed ( ) )
Assert . assertEquals ( d1 , d2 )
assertThat ( subject . getFormattedKey ( ) . toString ( ) , is ( "route: 10/8\\norigin: AS333" ) )
Assert . assertEquals ( 5 , output . count ( ) )
assertTrue ( result . isEmpty ( ) )
assertEquals ( ObjectUtils . hashCode ( s ) , ObjectUtils . hashCode ( s ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertBreadcrumbsAreEqual ( actualResult , expectedResult )
Assert . assertTrue ( result )
context . assertNotNull ( ip )
assertThat ( readedValue , is ( value ) )
assertFalse ( collector . isMessageComplete ( ) )
assertEquals ( true , result )
assertEquals ( "raw servlet" , result )
assertThat ( date , is ( expected ) )
assertTrue ( "Filesystem realm should be created" , ops . exists ( TEST_FILESYSTEM_REALM_ADDRESS ) )
Assert . assertEquals ( "not connected" , processor . getCurrentEnv ( ) )
assertFalse ( Files . exists ( child ) )
assertEquals ( "/catalog/" + PROVIDER_ID , rc . getPath ( ) )
testContext . assertEquals ( "Invalid authentication" , cause . getMessage ( ) )
assertions . isNotLessThan ( new Double ( 10d ) )
assertThat ( matches . size ( ) , is ( 1 ) )
Assert . assertTrue ( validator . valid )
assertTrue ( exceptionThrown )
assertNotNull ( actual )
assertEquals ( "Must return self" , sut , result )
assertEquals ( 2 , new DefaultReflectionProvider ( ) . on ( fixture ) . get ( ) . field ( "finalField" ) )
assertEquals ( expected , actual )
assertTrue ( allEvents . stream ( ) . limit ( events . size ( ) ) . collect ( toList ( ) ) . containsAll ( reverse ( events ) ) )
assertEquals ( mboss . getCar ( ) . getBrand ( ) , "缇�浜鸿惫" )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'\\\\'true\\\\'',h:'\\\\'123\\\\''}" , r )
assertEquals ( assertion , array )
Assert . assertEquals ( "beeline --showHeader FAILED. \\n" + results . get ( "outputStream" ) , true , consoleMsg . contains ( "set showheader to false to skip" ) )
Assert . assertEquals ( result . getResultSize ( ) , 0 )
Assert . assertEquals ( "You must be able to say he has the answer" , "You must say he has the answer" , result )
assertTrue ( sub . getRow ( subNodes . get ( 0 ) ) . get ( CyNetwork . SELECTED , Boolean . class ) )
Assert . assertEquals ( "Invalid csv line" , "1,DEVICE0,METRIC0,0,20150203235809-0500,1001" , line )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertNotNull ( certificate )
assertEquals ( expectedDDL , ddl )
assertEquals ( "Message: 123" , ResponseBodyInterpolator . interpolate ( "Message: [request.minor]" , req ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . getPatientByExternalId ( "Neuro123" ) )
Assert . assertEquals ( config . getEncoders ( ) . size ( ) , 2 )
Assert . assertEquals ( 0 , connectionManager . getConnectionDetailsByScheme ( "" ) . size ( ) )
assertTrue ( "Comparator did not reorder the List correctly" , orderedList . equals ( randomList ) )
assertNotNull ( serializedNetwork )
assertEquals ( "Mercury" , map . findNext ( null , null , Pattern . compile ( Pattern . quote ( "cury" ) ) , true , null ) . getText ( ) )
assertEquals ( result , "busybox:latest" )
assertNotNull ( fileOperationMap . getOperation ( operation . getPnfsId ( ) ) )
test . assertValue ( expected )
assertTest1 ( )
assertEquals ( "development" , value )
assertNull ( requestImpl . accepts ( "test" , "test" , "test" ) )
assertEquals ( 3 , result )
assertEquals ( "Billie" , result )
assertResourceWasAdaptedToModel ( )
assertEquals ( 0.0 , corrOzone , 0.0 )
assertEquals ( "3 氓rhundreder fra nu" , t . format ( new Date ( 3155692597470L * 3L ) ) )
assertEquals ( "value1" , ( ( TextValue ) value1 ) . getValue ( ) )
assertBrownGCD ( gcd , a , b )
assertArrayEquals ( expectedObjects , array )
assertEquals ( NOT_DECODED , object , new ColorTransform ( decoder , context ) )
Assert . assertEquals ( rel . getEndNode ( ) , nodes . iterator ( ) . next ( ) )
assertEquals ( 10 , classUnderTest . getIndex ( ) )
assertTrue ( range . isSupported ( ) )
Assert . assertEquals ( Arrays . toString ( new int [ ] { 0 , 2 , 2 , 2 } ) , Arrays . toString ( this . getCounts3 ( ) ) )
assertArrayEquals ( data , ( int [ ] ) deserialize . readObject ( int [ ] . class ) )
assertThat ( propertyValues , Matchers . hasSize ( 0 ) )
testRunner . assertAllFlowFilesTransferred ( PutCassandraQL . REL_FAILURE , 1 )
assertTrue ( AutnumUtil . isValidAutnum ( validAutnum ) )
assertTrue ( "no exception was thrown" , exception )
assertEquals ( "Rewritten command was not expected" , rewritProc , procReturned )
assertTrue ( SFA . isLanguageSpecific ( ba , Long . MAX_VALUE ) )
assertThat ( domain , is ( notNullValue ( ) ) )
assertEquals ( testId , song . getId ( ) )
assertEquals ( trend [ i - 1 ] , data [ i ] , 1.0e-4 )
assertSame ( name , expected , ASN1Type . fromName ( name ) )
Assert . assertEquals ( new PhoneNumber ( "+12345678910" ) , pn )
assertEquals ( 50 , jobExecutor . getJobs ( ) . size ( ) )
assertFalse ( sut . isEnabled ( ) )
objects . assertIsInstanceOfAny ( mock ( Description . class ) , actual , null )
assertEquals ( true , isOpened )
assertNotNull ( result )
assertFalse ( target1 . equals ( target2 ) )
assertEquals ( 0L , pipeline . getTotalBuildTime ( ) )
assertEquals ( 3 , filterStrings . size ( ) )
assertTrue ( serviceConf . containsKey ( "testkey" ) )
Assert . assertEquals ( 0 , rule . getTaskService ( ) . getVariablesLocal ( compensationTask . getId ( ) ) . size ( ) )
assertThat ( response , containsString ( "<object type=\\"object\\">" ) )
assertNull ( result )
Assert . assertEquals ( "Value is incorrect" , map ( "3141-05" , "test" ) , value )
assertEquals ( "MurmurHash.hash64(String) returns wrong hash value" , expectedHash , actualHash )
assertTrue ( comparator . isDifferent ( lhs , rhs ) )
Assert . fail ( "should have failed" )
assertTrue ( result . contains ( "CURRENT LOG APPENDER" ) )
Assert . assertTrue ( FileUtils . contentEquals ( logo . getOutput ( ) , temp ) )
assertThat ( actual , hasSize ( 10 ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertEquals ( "999999999999.99" , produto . getValorTotalBruto ( ) )
assertEquals ( sb . toString ( ) , param . getValue ( ) )
assertEquals ( version . getDescription ( ) , "First Full Functional Build" )
assertThat ( converted , equalTo ( expected ) )
Assert . assertSame ( EDIT_ACCESS , this . component . getAccessLevel ( this . entity , COLLABORATOR ) )
assertNotNull ( newProxyInstance )
Assert . assertEquals ( expected , component )
assertEquals ( DependendencyStatus . UNKNOWN , oracle . assess ( access ( "bar" , "foo" ) ) )
assertTrue ( predicate . test ( pickle ) )
context . assertIsSatisfied ( )
assertEquals ( "Number of threads is not set correctly." , numThreads , ThreadsEngine . getNumberOfThreads ( ) , 0 )
Assert . assertEquals ( cons , e )
Assert . assertFalse ( "no query result returned" , result . isEmpty ( ) )
assertEquals ( 0 , listeners . length )
assertThat ( f . format ( ) , containsString ( expected ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\\n" + "<dummyNode eh=\\" 'a &amp;> b&quot; \\" foo=\\"bar\\" ohio=\\"4\\">\\n" + "
assertThat ( httpServletResponse . getStatus ( ) , is ( HttpServletResponse . SC_OK ) )
Assert . assertTrue ( contains )
Assert . fail ( "Mechanism properties could not be null" )
Assert . assertTrue ( irodsFile . canRead ( ) )
assertEquals ( PDUType . REQUEST , request . getPDUType ( ) )
assertEquals ( "Select with descending order by" , expectedSelectFirstOrderByNullsLastDesc ( ) , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( dto , dto2 )
assertNull ( "Intersection between lines is incorrect" , pi )
assertEquals ( 119999L , m . getLastMillisecond ( ) )
assertTrue ( rec_cnt == 4 )
assertEquals ( "\\"2014-03-10T23:32:47+00:00\\",hello\\n" , csv )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expected , actual )
assertEquals ( 0 , OldCache . getOldStoreSize ( ) )
assertEquals ( model , actual )
Assertions . assertFalse ( result )
assertThat ( new JcrValue ( factories , PropertyType . LONG , 0L ) . getDate ( ) . getTimeInMillis ( ) , is ( expectedValue . getTimeInMillis ( ) ) )
Assert . assertEquals ( 2 , memberships . size ( ) )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
Assert . assertTrue ( context . getResult ( ) )
assertTrue ( rpt . getEvents ( ) . size ( ) == 10 )
Assert . assertTrue ( Arrays . equals ( new int [ ] { 2 , 2 } , this . getCounts1 ( ) ) )
Assert . assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( false , config . isCacheGzippedContent ( ) )
assertEquals ( expectedMsg , faultSoap12 )
assertEquals ( "DebugClassLoading" , false , config . isDebugClassLoading ( ) )
Assert . assertEquals ( 1 , results . getCollection ( ) . size ( ) )
assertEquals ( 200 , ( int ) caller . getSentError ( ) )
Assert . assertEquals ( options . getTargetPath ( ) , new Path ( "hdfs://localhost:8020/target/" ) )
assertThat ( "Combined vars" , IteratorUtils . transformedIterator ( combined . iterator ( ) , VarDef :: getPathName ) , visitsMembers ( "Color.*" , "Color.Hue" ) )
Assert . assertEquals ( 100. , tdCosts . getTransportTime ( loc ( "from" ) , loc ( "to" ) , 0. , null , null ) , 0.01 )
Assert . assertArrayEquals ( expected , values )
assertThat ( getServers ( ) , empty ( ) )
Assert . assertEquals ( "\\"name=name\\" \\"event_id=event-id\\" \\"key=129\\"" , event . toString ( ) )
Assert . assertArrayEquals ( b , a , MathUtils . EPSILON )
assertEquals ( "ñòó" , result )
assertThat ( extractMonitorables ( histogramAdapter ) . get ( COUNT ) . get ( ) , Matchers . < Object > is ( newCount ) )
assertEquals ( expectedSource , instrumentedSource )
assertNotNull ( i )
assertThat ( authscope . getByOrigin ( "SomeHost" ) , equalTo ( host ) )
assertTrue ( registry . getMonitorables ( ) . isEmpty ( ) )
assertTrue ( failedAsExpected )
assertEquals ( expected , filterAclEntriesByAclSpec ( existing , aclSpec ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1_WITH_INFIX_AND_SUFFIX , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1_WITH_INFIX_AND_SUFFIX , CORRECT_
assertEquals ( expResult , result )
assertThat ( unescaped , is ( "\\\\thello\\\\nworld\\\\x" ) )
assertGridIndexes ( data , new boolean [ ] { true , true , true , true } , new boolean [ ] { false , false , false , false } , new Expected [ ] [ ] { { Expected . build ( true , 3 , true ) } , { Expected . build ( true , 3
assertEquals ( "test" , echo . echo ( "test" ) )
assertFalse ( constraint . fulfilled ( iContext ) )
assertEquals ( 4.0 , median , 0.0000001 )
assertNotSame ( listener . getEvent ( ) , null )
Assert . assertEquals ( datahoraRecebimento , dados . getDatahoraRecebimento ( ) )
Assert . assertEquals ( "1" , eventoCancelamento . getIdLote ( ) )
Assert . assertEquals ( 0.0 , a . transposeMultiply ( b ) . subtract ( a . transpose ( ) . multiply ( b ) ) . getNorm ( ) , 1.0e-15 )
assertEquals ( "" , result )
assertThat ( dateTime , equalTo ( IntraDayDate . create ( today , halfHour ) . toDateTimeAtStartOfDay ( ) ) )
assertThat ( certList , is ( context . getClientCertificateTypeDesiredTypes ( ) ) )
assertThat ( retrieved , isPresent ( not ( infoEquals ( 2 ) ) ) )
Assert . assertTrue ( "topic2 had ID!" , topic2 . getItemIdentifiers ( ) . isEmpty ( ) )
Assert . assertEquals ( "0" , prefix . getPrefix ( ) )
Assert . assertTrue ( irodsFileForSecondaryUser . canRead ( ) )
assertE ( "�尖�尖�尖�尖�尖��" + "�� *  ��" + "�
assertEquals ( request . getUri ( baseURI ) , expectedURI )
Assert . assertEquals ( content + "\\n" , result )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertEquals ( 0 , content . refCnt ( ) )
assertThat ( isEquals , is ( true ) )
Assert . assertEquals ( "{\\"queue\\":\\"WQXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\",\\"rules\\":[{\\"skill\\":\\"HR\\",\\"timeout\\":30,\\"friendlyName\\":\\"WQXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\"},{
assertNotNull ( result )
assertEquals ( expectedSize , size )
assertEquals ( "SELECT *\\nWHERE {\\n  ?s ?p ?o , ?o2, <toto> ;\\n  ?b ?c;<name> ?e .\\n}\\n" , processed )
assertThat ( converters . exists ( MyConverter . class ) , is ( true ) )
Assert . assertEquals ( "Hallo, Welt" , oembedService . executeRequest ( request ) )
assertFalse ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertDeletedIDs ( expDeletedIIDs , deletedLinkIDs )
assertNull ( p )
assertEquals ( expected , d_meas . toString ( getCat ( d_cv , 0 ) ) )
assertEquals ( 2 , collectorManager . collectorsByCorrelationId . size ( ) )
assertTrue ( flipConditionEvaluator instanceof DefaultFlipConditionEvaluator )
assertTrue ( "actions should have triggered" , actionsTriggered . get ( ) )
assertEquals ( expectedDate , newConceptSource . getDateCreated ( ) )
assertNotNull ( injector )
assertThat ( proxy . wasCalled ( ) , is ( true ) )
assertEquals ( HttpStatus . SC_FORBIDDEN , response . getStatus ( ) )
assertXmlMarshaling ( referenceObjectBinding , XML )
assertNotNull ( initializer )
ctx . assertEquals ( 0 , records . size ( ) )
assertTrue ( details . hasCancelled ( ) )
assertSame ( hello , uriTools . resolveUri ( HELLO_URI . resolve ( "processor/" ) , wfBundle ) )
assertEquals ( "Unexpected number of announcements" , 2 , dao . getAnnouncements ( ) . size ( ) )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
assertEqualsIgnoreLineEnding ( output , "{\\n" + "  \\"additionalProp1\\" : {\\n" + "    \\"joel\\" : \\"string\\",\\n" + "    \\"prop2\\" : \\"string\\",\\n" + "
assertThat ( "Expceted principal not found" , rmap , contains ( KERMIT_PRINCIPAL ) )
assertEquals ( INSTANCE1a , callUpdateOnThread ( INSTANCE1b ) . get ( ) )
Assert . assertEquals ( 2 , prtition_num )
assertNotNull ( entityGroup )
Assert . assertEquals ( "null\\n" + "{\\"universe\\":0,\\"time\\":8,\\"uuid\\":4,\\"data\\":{\\"name\\":\\"district_2_t7\\"}}\\n" + "{\\"universe\\":0,\\"
assertThat ( config . getFailTopic ( ) , is ( "y" ) )
assertTrue ( "Match should have succeeded." , match )
assertTrue ( isFailure ( ) )
assertEquals ( "foo_value" , sharedMap . get ( "foo" ) )
assertEquals ( Action . SUCCESS , action . execute ( ) )
Assert . assertTrue ( "The test file " + out + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
Assert . assertEquals ( "client_name=AP123,client_name=CL123,foo=bar" , scope . toString ( ) )
assertNull ( "treeTable autoCreateRowSorter must be null" , table . getAutoCreateRowSorter ( ) )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertNull ( mergeReport )
assertEquals ( "{\\"version\\": \\"3.0.0\\", \\"gauges\\": {}, \\"counters\\": {}, \\"histograms\\": {}, \\"meters\\": {}, \\"timers\\": {\\"foobar\\": {\\"count\\
assertEquals ( 1 , val . size ( ) )
Assert . assertEquals ( HttpServletResponse . SC_FORBIDDEN , response . getStatus ( ) )
assertEquals ( expResult , result )
assertNotNull ( objJPAEdmProperty . getJPAEdmNavigationPropertyView ( ) )
Assert . assertEquals ( THIRTEEN_BYTE , pi . getThirteenByte ( ) )
assertEquals ( "{'some':'data'}" , json . toString ( ) )
assertThat ( baseStepListener . failed ( ) , is ( false ) )
assertEquals ( new Date ( pastDate ) , job . getNextRun ( ) )
assertNull ( previous )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( asList ( "a" , "b" , "c" ) , toml . getTables ( "a.b.c" ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertTrue ( FlowDifferenceFilters . FILTER_ADDED_REMOVED_REMOTE_PORTS . test ( flowDifference ) )
assertFalse ( "No keywords found" , result . isEmpty ( ) )
assertEquals ( rows , sorter . getViewRowCount ( ) )
assertEquals ( expResult , result )
assertNotNull ( source )
assertTrue ( simpleContainsValue ( keyEquiv ( 12345 ) ) )
assertOut ( "/**\\n * @constructor\\n * @implements {custom.TestInterface}\\n * @implements {custom.TestOtherInterface}\\n */\\norg.apache.royale.A = function() {\\n};" )
assertEquals ( 1 , acquiredTriggers . size ( ) )
assertEquals ( out , frame2 )
assertEquals ( "" , errorTextArea . getText ( ) )
assertThat ( readBytes ( testee , 4 ) , is ( "World|" ) )
assertEquals ( geo , expResult )
assertValueModelFires ( model , interval , expected )
assertThat ( new String ( readContent ) , is ( new String ( content ) ) )
assertEquals ( fattest , menu . get ( 4 ) )
Assert . assertArrayEquals ( expected , result )
assertThat ( age , notNullValue ( ) )
assertThat ( plugin . getClass ( ) , is ( equalTo ( HtmlFormatter . class ) ) )
assertEquals ( PCEPErrors . UNKNOWN_PLSP_ID , this . errorsSession1 . get ( 0 ) )
assertTrue ( "value was " + Arrays . toString ( target ) , Arrays . equals ( expected , target ) )
Assert . assertFalse ( errors . hasGlobalErrors ( ) )
assertEquals ( "Hello world" , wire . bytes ( ) . readUtf8 ( ) )
Assert . assertEquals ( 200 , reply . getStatus ( ) )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( 2 , resultList . size ( ) )
assertFalse ( fail )
Assert . assertSame ( list , Args . notEmpty ( list , "list" ) )
assertNull ( tr . findCertInfo ( createCert ( ) ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( i , number )
Assert . assertTrue ( errors . hasFieldErrors ( "loser" ) )
Assert . assertArrayEquals ( ByteArrayHelper . HEX . decode ( input ) , result )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertThat ( items , arrayWithSize ( 0 ) )
Assert . assertEquals ( 1 , provider . count )
assertThat ( issues , hasItems ( "#123" , "#456" , "#789" ) )
assertArrayEquals ( location , oFloorOffset )
assertEquals ( "[]" , powers . toString ( ) )
assertEquals ( total , result , 0.0001 )
Assert . assertTrue ( validator . validSequence ( 0 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( 0 , patterns . size ( ) )
assertEquals ( "2005-10-12T10:00:00.5" , v . getStringValue ( ) )
Assert . fail ( "DalRuntimeException expected" )
assertThat ( attributes , contains ( new Attribute ( "mntRoutes" , "OWNER-MNT {10.0.0.0/8}" , null , "mntner" , new Link ( "locator" , "http://localhost/lookup/TEST/mntner/10.0.
Assert . assertNull ( queue . removeHead ( 0 ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertSame ( toTest , toTest . setMethodsRetryHandler ( RetryHandler . class ) )
assertEquals ( out . readableBytes ( ) , 0 )
assertNull ( orgToCreate . getId ( ) )
assertEquals ( HttpStatusCodes . INTERNAL_SERVER_ERROR . getStatusCode ( ) , result . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( response . getSOAPPart ( ) . contains ( "invalid" ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertFalse ( drug . getRetired ( ) )
assertFalse ( validator . isValid ( resource , MetadataSection . ADDITIONAL_PART_SECTION ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
assertEquals ( "Wrong number of nodes" , 1 , c2 . getNodeCount ( "test.autosave" ) )
Assert . assertEquals ( node , r . get ( "node" ) )
assertNotNull ( EndUserType . reader ( ) . read ( ) )
Assert . assertNotNull ( out . getD6 ( ) )
assertByteArraysEquals ( Lists . newArrayList ( VALUE ) , extractor . extract ( result ) )
assertNotNull ( state )
Assert . assertEquals ( 100 , terminatedAfter )
assertOperation ( ( ) -> roleClient . getRepository ( SPACE_NAME , name ) )
assertEquals ( 654321 , wsss . getReceiveBufferSize ( ) )
PSLTest . assertModel ( dataStore , input , expected )
assertEquals ( HttpURLConnection . HTTP_NOT_FOUND , connection . getResponseCode ( ) )
assertEquals ( 3 , count )
assertThat ( table . asString ( ) , equalTo ( "|one|two|\\n|11|12|\\n|21|22|\\n" ) )
assertTrue ( FlagDelegate . isVisited ( ) )
Assert . assertEquals ( 5 , set . size ( ) )
Assert . assertFalse ( "Adapter does not support" , requestHandler . isRequestSupported ( request ) )
Assert . assertTrue ( threadPoolConfig . getQueue ( ) instanceof SynchronousQueue )
Assert . assertNull ( result . getFirstHeader ( "Warning" ) )
Assert . assertFalse ( "failure - expected numbers to be diff" , CMC . equals ( CMC2 ) )
assertions . contains ( expected )
context . assertIsSatisfied ( )
assertEquals ( ColumnDifference . COLUMN_TYPE_INTEGER , columnDifference . getCol1Type ( ) )
assertEquals ( resultKthSelector , Double . doubleToLongBits ( resultSort ) )
Assert . assertTrue ( "Expected contextual rights for orphan entity" , auths . isEmpty ( ) )
assertTrue ( uploadResult . getModels ( ) . size ( ) == 2 )
assertEquals ( "2012-01-02" , date . getValueAsString ( ) )
assertThat ( numFound ( query ( "," ) ) , is ( 1L ) )
assertThat ( actual , is ( expected ) )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "m Foo, {1}, {2}, {3}, {4,number,#.00}, {5} {foe}" , msg . getMessage ( ) )
assertTrue ( s . length ( ) > 0 )
assertEquals ( "someHost" , requestImpl . host ( ) )
Assert . assertEquals ( false , retval )
Assert . assertTrue ( ff4j . toString ( ) . contains ( "{" ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
Assert . assertNull ( caixa )
assertEquals ( StormApplication . class , mockStormApplication . getConfigClass ( ) )
assertEquals ( "field1" , name )
assertDtoAndMapConstructorAreSame ( 0 )
assertions . doesNotHaveDuplicates ( )
assertE ( "�尖�尖�尖�尖�尖�尖��" + "��     ��
assertEquals ( tenantId , connection . getClientInfo ( PhoenixRuntime . TENANT_ID_ATTRIB ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( component . getStyleName ( ) , "style1 style2" )
Assert . assertTrue ( got . contains ( "Created device: {" ) )
assertEquals ( expected , actual )
assertTrue ( loaded )
assertThat ( "add" , localRepo . getPulls ( ) , hasItem ( localPR ) )
assertTrue ( true )
Assert . assertFalse ( deadLockDetected . booleanValue ( ) )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , true , "test" , null ) . property ( "fubar" , true , null , null ) )
Assert . assertEquals ( expected . toString ( ) , version )
assertEquals ( null , jobEntryHadoopCopyFiles . loadURL ( testUrl , testNcName , metaStore , mappings ) )
assertTrue ( link instanceof LinkType )
assertFalse ( processor . canProcessEvent ( event ) )
assertTrue ( expectedMaxPoolingActivation . compare ( poolingActivation , TOLERANCE ) )
assertThat ( restfulServerConfig . getPort ( ) , is ( 1080 ) )
assertTrue ( prefs . matches ( t ) )
Assert . assertEquals ( expected , MessageFormatter . format ( message , "p1" , "p2" , "p3" , "p4" ) )
assertEquals ( "Unexpected server selection timeout" , "5000" , clientOptions . getServerSelectionTimeout ( ) )
Assert . assertEquals ( "<div id=\\"header1\\"></div>\\n" , printer . toString ( ) )
assertEquals ( 2 , removeEmpty . size ( ) )
assertEquals ( ".outer { margin: 2px; padding: 3px; }" , normalize ( css ) )
Assert . assertEquals ( 1 , compareResult )
assertEquals ( 20 , header . getCallID ( ) )
assertEquals ( actual , expected , "Wrong substitution" )
assertTrue ( cli . isConnected ( ) )
assertEquals ( rs2 , rs )
Assert . assertEquals ( expectedResult , resultString )
Assert . assertNull ( testPatientData )
assertThat ( tuple . getSetOrEmpty ( "field" ) , empty ( ) )
assertThat ( buf . size ( ) , is ( 0 ) )
assertEquals ( expectedMessage , result )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( expResult , result )
Assert . assertArrayEquals ( oldbb , bb )
assertThat ( extension . getMaxFragmentLength ( ) , is ( 257 ) )
assertEquals ( expected , actual )
assertEquals ( "[Function released]" , v8Object . toString ( ) )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 1500: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 1500 )
assertEquals ( 1 , fired )
assertXMLStringsEquals ( ( "<Root>\\n" + "   <X>Passed</X>\\n" + "   <Y>Value</Y>\\n" + "</Root>\\n" ) , test . toString ( ) )
assertFalse ( violation )
assertEquals ( con . hashCode ( ) , fp . hashCode ( ) )
assertNull ( actual )
Assert . assertEquals ( expected , component )
assertThat ( defn . getDeclaringNodeType ( ) , is ( nullValue ( ) ) )
assertEquals ( 5 , anchors . size ( ) )
N4CliHelper . assertExpectedOutput ( "functionFromModuleA\\n" + "variableFromModuleB\\n" + "variableFromModuleC" , out )
Assert . assertEquals ( 200 , newMergedRecord . getIncomingTransferSsl ( ) )
assertEquals ( packet , p )
Assert . assertNotNull ( "null target" , target )
assertFalse ( condition . evaluate ( new Object ( ) ) )
assertTrue ( Boolean . FALSE . equals ( value ) )
assertEquals ( expResult , result )
assertEquals ( "3 items were not deleted" , 0 , numberOfItems )
assertThat ( studies . size ( ) , is ( 1 ) )
assertEquals ( 1 , set . size ( ) )
Assert . assertEquals ( 0 , inventoryItems . size ( ) )
assertThat ( reader . nextKeyValue ( ) , is ( false ) )
assertEquals ( 10 , getCache ( provider , "bar" ) . capacity )
Assert . assertTrue ( evaluator . hasPermission ( authentication , targetId , targetType , permission ) )
assertions . contains ( value , index )
assertTrue ( isTransposed ( m ) )
assertEquals ( 0 , sentryStore . createSentryRole ( roleName ) . getSequenceId ( ) )
assertDateEquals ( dateTime , result )
Assert . assertEquals ( Type . High , type )
assertEquals ( nullInfo , info )
assertTrue ( "user in admin group should have access" , val )
Assert . fail ( "Can't cd into a non-existing nodepath." )
assertStat ( result )
assertArrayEquals ( output , output2 )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . NOW )
assertEquals ( result , toTypedExpression ( "someB#ICB.onlyConcrete() " , ICA . class ) . getExpression ( ) . toString ( ) )
assertNotNull ( response . getReturn ( ) )
assertEquals ( "Method #toString is wrong" , "PrefixCondition{boost=0.5, field=name, value=tr}" , condition . toString ( ) )
assertEquals ( "Should get a 200 response" , HttpStatus . OK , mongodbFeedSource . getEntry ( getEntryRequest ) . getResponseStatus ( ) )
strings . assertStartsWith ( mock ( Description . class ) , null , "Yoda" )
assertArrayEquals ( new byte [ ] { 0x01 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0
assertFalse ( strategy . isCrawable ( url , 1 ) )
assertEquals ( "JSON Form" , result , json . toString ( ) )
Assert . assertNotNull ( mediaId )
assertDepth ( right , rightSource , 2 )
assertTrue ( "Expected " + s . getStringText ( ) + " to be lowercase" , wordsFedFound )
Assert . assertTrue ( fallbackRan )
assertTrue ( "No complete rich members found!" , ids . contains ( createdMember . getId ( ) ) )
assertEquals ( "chrome" , result . getUserAgent ( ) )
Assert . assertEquals ( "Invalid output with XML" , TransformXMLTestHelper . TEST_XML , output )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( decompressFlag , methodCalled . get ( 0 ) )
assertThat ( fieldError , is ( not ( nullValue ( ) ) ) )
assertEquals ( "check plugins empty" , _plugins , Collections . emptySet ( ) )
Assert . assertNotNull ( value )
assertEquals ( "Did not expect this category." , category . getId ( ) , deleteCategory . getId ( ) )
assertAnnotationCompletions ( "@Value(\\"#{345${spring.prop1}<*>}}\\")" )
assertArrayEquals ( ordered , result . toArray ( new String [ 0 ] ) )
assertEquals ( "00:00:396" , d_wtp . format ( op ) )
Assert . assertTrue ( "It should return Parameter Values" , Arrays . equals ( values , parameterValues ) )
tester . assertRenderedPage ( HomePage . class )
assertThat ( text ( written ) , is ( "" ) )
assertEquals ( "/t/test" , templateUri . toString ( ) )
assertEquals ( 5445 , result )
assertThat ( input . getAxiomCount ( ) , is ( 1 ) )
testRunner . assertNotValid ( )
assertEquals ( refPoint , testPoint )
assertEquals ( "value" , new ReflectiveException ( ) . invoke ( call ) )
assertEquals ( 1 , module . getInstalledModuleServices ( ) . size ( ) )
assertArrayEquals ( domainRoles , result )
assertEquals ( 1 , ( ( ObjectWithOptions2 ) ( ( ObjectWithOptions ) options . optOp ) . optionsOp ) . value )
context . assertIsSatisfied ( )
assertEquals ( 0.0 , epsilon . evaluate ( front ) , EPSILON )
assertFalse ( orchestrator . isRunning ( ) )
assertTrue ( testModelView instanceof MyModelView )
assertNotSame ( "ProtectionDomain inherited" , pd1 , pd2 )
assertEquals ( Integer . valueOf ( 2 ) , deque . getLast ( ) )
assertEquals ( "a\\tb\\tc\\n" + "b\\tc\\td\\n" , out . toString ( ) )
assertEqualDoubleArrays ( pymin , min , epsilon )
assertEquals ( MyMedication . class , mo . getContained ( ) . getContainedResources ( ) . get ( 0 ) . getClass ( ) )
Assert . assertFalse ( event . accept ( element ) )
assertThat ( testValues , is ( expectedValues ) )
assertEquals ( expectedContainers , actualContainers )
assertThat ( toTest . fromJson ( parsed . properties , Properties . class ) , equalTo ( toTest . fromJson ( JsonUtils . givenPointJson ( 10 , 10 ) , Properties . class ) ) )
assertEquals ( "two hundred dollars" , actual )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<samlp:Response Consent=\\"urn:oasis:names:tc:SAML:2.0:consent:unspecified\\" Destination=\\"https://samlcent/Shib
assertEquals ( instance . expected ( ) , ratio , 0.01 )
assertTrue ( testListener . isDelivered ( ) )
assertThat ( logRecords , containsInfo ( originalService . getName ( ) ) )
GenericTestUtils . assertExceptionContains ( "does not match CTime of NN" , ive )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
resultEndpoint . assertIsSatisfied ( )
Assert . assertEquals ( "Should return a serialized point" , ALICE_PUBLIC_KEY , mult )
assertNotNull ( "No session returned" , this . session )
Assert . assertFalse ( pti . equals ( null ) )
assertTrue ( isValid )
assertGameOver ( )
assertTrue ( "Configurable sasl server factory should be created" , ops . exists ( TEST_SERVER_FACTORY_ADDRESS ) )
assertions . isNotLessThan ( new Double ( 10d ) )
Assert . assertArrayEquals ( new double [ ] { 2 , 3 } , nn . getLpDist ( ) , 1e-5 )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertEquals ( simple . getName ( ) , find . getName ( ) )
assertDependencyWasResolvedToOptional ( )
assertThat ( mode , is ( equalTo ( BatchMode . replay ( ) ) ) )
assertEquals ( expected , wire . read ( ( ) -> "VALUE" ) . int64 ( ) )
Assert . assertEquals ( 0d , p . evaluate ( d ) , Double . MIN_VALUE )
assertEquals ( "Empty" , dsc . getDisplayName ( ) )
assertTrue ( ( Boolean ) result )
verify ( messages ) . assertAbsenceOfErrors ( )
assertThat ( tags , hasSize ( 0 ) )
Assert . assertNull ( HtmlFormEntryUtil . getLocation ( "SessionAttribute" , formEntryContext ) )
assertEquals ( "[{http://dbpedia/Person/1},{http://dbpedia/Person/2},{http://dbpedia/Person/3}]" , this . debugConciseTreeQuery ( tree ) . toString ( ) )
Assert . assertTrue ( "lookup returned wrong topic" , topic == found )
assertLdapPasswordByFullName ( ACCOUNT_HT_FULL_NAME , ACCOUNT_HT_PASSWORD )
assertEquals ( "Failed authentication with wrong user was not logged" , "testingValue:" + SecurityAuthenticationFailedEvent . class . getName ( ) , getContent ( ) )
assertTrue ( getRecordsAsXmlString . contains ( "hopCount=\\"1\\"" ) )
assertEquals ( originalSize + 1 , tags . all ( ) . size ( ) )
assertEquals ( 2 , result . getProperties ( ) . size ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( expect , cnt )
assertResultSet ( res )
assertTrue ( Bytes . compareTo ( bytes1 , bytes2 ) < 0 )
assertEquals ( "subSubName" , expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
assertEquals ( "asdf" , obj . get ( "jsonNode" ) )
Assert . assertEquals ( node , r . get ( "node" ) )
Assert . assertFalse ( service . isAlertSystemOn ( ) )
mockery . assertIsSatisfied ( )
assertFalse ( "Administrator Main Page should not have Privileges" , resp . getLinks ( ) . isEmpty ( ) )
assertEquals ( expected , actual )
Assert . assertTrue ( true )
Assert . assertEquals ( "Number of tuples in database" , DATABASE_SIZE , sink . collectedTuples . size ( ) )
assertTrue ( e instanceof E_StrLowerCase )
Assert . assertTrue ( parameter . evaluate ( rewrite , context ) )
assertSame ( GBP_2_34 , test )
assertEquals ( expected , result )
assertTrue ( check ( "a" , input , output ) )
assertFalse ( report . isEmpty ( ) )
assertEquals ( expResult , result )
assertEquals ( 2 , builder . getAddedVehicleTypes ( ) . size ( ) )
assertEquals ( test . expected ( ) , test . actual ( ) )
assertEquals ( creditCardXML , writer . toString ( ) . trim ( ) )
assertEquals ( Collections . emptyMap ( ) , inverse . get ( fields . length - 1 ) )
assertEquals ( "-something" , commandLine . getOptionValue ( 't' ) )
assertEquals ( sqe , convertResult . get ( 0 ) )
assertThat ( JdbcUtils . getTableNames ( getConnectionProperties ( ) ) , containsInAnyOrder ( "V4_1_0" ) )
Assert . assertEquals ( 1 , reactorHandlerRegistry . getEntrypoints ( ) . size ( ) )
assertEquals ( "two undecillion" , actual )
assertEquals ( EmailState . DELETED , result . getState ( ) . getState ( ) )
assertPermanentCount ( playerB , "Elite Vanguard" , 1 )
assertNotNull ( result )
Assert . assertEquals ( 5461 , result , 1 )
assertThat ( getRecordedDomain ( ) , not ( hasCondition ( Progressing ) ) )
assertArray ( new double [ ] { 0.01 , 0.038 , 0.028 , 0.075 , 0.139 , 0.222 , 0.194 , 0.295 } , scaleDouble ( 3 , node1 . getPotentials ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
Assert . assertEquals ( String . valueOf ( obj ) , quantidade , tamanho )
assertEquals ( expected , identity )
assertArrayEquals ( EXAMPLE_RESPONSE_SINGLE_ROWS , catResult . getResults ( ) . toArray ( ) )
assertEquals ( a1 , a2 )
assertEquals ( ConfigKey . ENCRYPTION_DEFAULT , property )
assertThat ( info . isRequired ( ) , is ( true ) )
assertTrue ( inv1 . fire ( ) )
assertEquals ( 8 , someNotSoRandomAsciiAsList . size ( ) )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
assertTrue ( selector . evaluate ( source ) )
Assert . assertEquals ( EstadoAsientoRegistralEnum . RECHAZADO . getValue ( ) , estado . getEstado ( ) )
assertEquals ( 0.2 , distance . compute ( point1 , point2 ) , EPSILON )
assertEquals ( 4 , encounters . size ( ) )
assertThat ( notSent . size ( ) , is ( 2 ) )
assertNotNull ( dummy . target )
assertThat ( terminalStep . wasRun ( ) , is ( false ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertXMLEqual ( "Invalid name" , headerName . getValue ( ) , result . toString ( ) )
assertFalse ( monitor . getZk ( ) . isPresent ( ) )
Assert . assertNotNull ( this . mocker . getComponentUnderTest ( ) . getLock ( this . currentDocumentReference ) )
assertTrue ( config . isAdvancedClusterConfigSet ( ) )
assertThat ( sampleTestClass . driver , is ( not ( nullValue ( ) ) ) )
rule . assertScenarioEnded ( )
assertTrue ( cp . isReadOnly ( ) )
assertEquals ( "Hello Tim" , ResponseBodyInterpolator . interpolate ( "Hello :name" , req ) )
Assert . isTrue ( rows == 1 )
assertThat ( version , is ( notNullValue ( ) ) )
assertEquals ( connectionTimeout , ConfigUtils . getConnectionTimeout ( mockServletContext ) )
assertEquals ( expected , result )
assertEquals ( "return proposition should have been returned" , propositionDefinition . getName ( ) , returnPropositionDefinition . getName ( ) )
assertEquals ( IS_NULL . toString ( ) , res . getHibernateCriterion ( ) . toString ( ) )
logSpy . assertInfoWithExceptionWasLogged ( ElementNotClickableException . class )
assertEquals ( 1 , constraints . size ( ) )
assertFalse ( collection . isEmpty ( ) )
Assert . assertEquals ( "Fail count record of room" , i , cr )
Assert . assertFalse ( tcpConnectivity . supports ( requirement ) )
assertEquals ( LineText . LEFT , lineText . getAlignment ( ) )
assertThat ( anyTS . contains ( SECOND_OF_DAY ) , is ( true ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "[0,1,2]" , p . toString ( ) )
assertEquals ( 0 , curatedDrugs . size ( ) )
assertAxisEquals ( 0.9 , 1.3 , new double [ ] { 0.9 , 0.1 , 0.2 , 1.3 } , new String [ ] { "0.9" , "0.1" , "1.2" , "1.3"
assertAllCommandsUsed ( )
assertThat ( selectedCell , is ( "B2" ) )
assertThat ( new SearchArgumentFilter ( searchArgument , structTypeInfo ) . accept ( corc ) , is ( true ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_overflowNewContent02_" ) )
assertEquals ( 3 , command . getVariables ( ) . size ( ) )
assertExtendedEquals ( expected , dd , PRODUCT_TOLERANCE_FACTOR )
assertEquals ( 2 , numberOfTests . getLength ( ) )
assertNull ( result )
assertEquals ( 0 , tasks . size ( ) )
assertEquals ( JScrollPane . VERTICAL_SCROLLBAR_ALWAYS , scrollPane1 . getVerticalScrollBarPolicy ( ) )
Assert . assertEquals ( 4 , tables . size ( ) )
assertNotNull ( result )
r . assertEqualBeans ( orig , received , "ami,zone,description,remoteFS,type,jvmopts,stopOnTerminate,securityGroups,subnetId,useEphemeralDevices,useDedicatedTenancy,connectionStrategy" )
assertEquals ( expected , actual )
assertTrue ( rs . next ( ) )
assertEquals ( 1 , Evaluator . evaluate ( ex ) )
assertTrue ( "Wrong result for unknown key" , config . getSources ( "an.unknown.key" ) . isEmpty ( ) )
assertThat ( result , is ( "Network2" ) )
assertEquals ( 2 , instance . getNeuronsCount ( ) )
context . assertIsSatisfied ( )
UnitTestUtils . assertEquals ( 0.0 , x . evaluate ( topo . getInputs ( ) ) , 1e-13 )
assertEquals ( null , encryption )
Assert . assertNotNull ( instance . getFirstAtomMapping ( ) )
Assert . assertEquals ( 1 , followInitiativeDao . getFollowers ( initiativeId ) . size ( ) )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "shouldReturnFieldsOnlyWithPropertys.json" , result )
assertNull ( "Unexpected value in outputTriple: " + outputTriple , outputTriple )
assertTrue ( map instanceof HashMap )
assertTrue ( map . get ( loadBalancerId ) . get ( hostId ) . size ( ) == 1 )
assertThat ( type , equalTo ( DBR_String . TYPE ) )
assertEquals ( "Wrong super type" , Event . RESET , builderResetType . getSuperType ( ) )
assertEquals ( 3 , allClasses . size ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , allOf ( hasItem ( createConfigMapKeyRefEnvVar ( "VARIABLE1" , "my-env" , END_VALUE_1 ) ) , hasItem ( createSecretKeyRefEnvVar ( "VARIABLE2" , "my
assertEquals ( expected , actual )
assertThat ( getPodSpec ( jobSpec ) . getContainers ( ) , nullValue ( ) )
assertTrue ( "Timer exceeded max time of " + elapsed , elapsed > timer . getElapsedNanoTime ( ) )
assertEquals ( ExitStatus . COMPLETED , execution . getExitStatus ( ) )
assertThat ( groupUnderTest . isFeatureEnabled ( ) , is ( equalTo ( false ) ) )
assertEquals ( content . get ( numberOfContent - 1 ) , nodeB . getDataManager ( ) . get ( parameters ) . getTestString ( ) )
assertEquals ( "6.3-((3 + 1)/5+3.14)*600%(2+3-(4.3-9)))" , this . codeGenerator . getPostFixExpression ( ) )
assertNotNull ( Jta . getContext ( ) . get ( "test" ) )
assertNull ( processEngine . getRuntimeService ( ) . createProcessInstanceQuery ( ) . singleResult ( ) )
Assert . assertEquals ( expected , actual . getName ( ) )
assertEquals ( literal , builder . toString ( ) )
assertEquals ( 6 , aggregator . generateId2OutcomeFile ( ) . split ( "\\n" ) . length )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertThat ( page . clickTargetButton . isVisible ( ) , is ( true ) )
assertEquals ( expectedFolderPath , buildFolderPath )
assertChildren ( moveTo )
assertEquals ( "program name" , p . getName ( ) )
assertEquals ( "Latitude is not properly parsed" , 5.3f , mapper . readLatitude ( columns ) , 0 )
assertEquals ( testcrypt , client . getCryptoSuite ( ) )
assertThat ( result ( ) , not ( containsString ( "\\"client\\"" ) ) )
assertThat ( updatedSearchFormat , equalTo ( "(somefield:10)^5(1)^8797(10000)" ) )
assertThat ( result , notNullValue ( ) )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertThat ( Material . matchMaterial ( String . valueOf ( material . getId ( ) ) ) , is ( material ) )
assertNotNullOrEmpty ( "Tags should never be null." , tags )
Assert . isTrue ( users . size ( ) > 0 )
assertTrue ( ( "actual count: " + count ) , count <= 2 )
assertTrue ( "Audit log count should less than or equal to 5" , auditLogs . size ( ) <= 5 )
assertEquals ( 0. , iCosts , 0.01 )
Assert . assertEquals ( "Mismatch between system property (or default) and OgnlRuntime _useFirstMatchGetSetState flag state ?" , optionDefinedInEnvironment ? flagValueFromEnvironment : defaultValue , OgnlRuntime . getUseFirstMatchGetSetLookupValue ( ) )
assertEquals ( 1 , cache . listPrivileges ( null , null , null ) . size ( ) )
assertEquals ( "Hello There. Here is some text." , text )
assertEquals ( "!false || '456.5' =~" , this . codeGenerator . getPostFixExpression ( ) )
mockery . assertIsSatisfied ( )
assertEquals ( 100 , total )
assertXmlEqual ( expected , formatterOutput )
assertEquals ( publisher , result )
assertTrue ( AbstractAnalyticsService . hasMetrics ( css1 ) )
assertTrue ( setCookie . startsWith ( "; HTTP/1.1" ) )
assertThat ( PlainDate . of ( 2000 , 12 , 1 ) . with ( model . weekOfYear ( ) . atFloor ( ) ) , is ( PlainDate . of ( 2000 , 11 , 26 ) ) )
assertEquals ( "LOCAL: \\nName1\\nName2\\nUserFN UserLN\\naddr2\\naddr1\\n121212 City1\\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null )
Assert . assertFalse ( FileUtil . gitDirectoriesAreEqual ( neq1 , neq2 ) )
assertEquals ( asList ( info ( mdcValues , marker , message ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( null , t . foo )
Assert . assertEquals ( "EXCEPTION: class java.lang.IllegalStateException" , response )
Assert . assertEquals ( true , authServerName . equals ( "oldServer" ) )
assertThat ( confirmation . validate ( ) , equalTo ( true ) )
Assert . assertEquals ( "HomeScreenActivity" , defaultApp )
assertEquals ( "hello, world!" , result )
assertTrue ( "Repository should contain newly added statement" , testCon . hasStatement ( name , name , nameBob , false ) )
assertEquals ( expectedValue , advice . cacheGetSingle ( pjp ) )
assertEquals ( expected , actual )
assertEquals ( "A Value with added then removed should return the interpolated value on getValue()." , interpolatedValue , victim . getValue ( ) , EPSILON )
assertEquals ( 1 , dao . getAllPolicies ( ) . size ( ) )
assertThat ( result , is ( jsonBoolean ( false ) ) )
assertTrue ( pattern . matches ( "-1.1" ) )
assertEquals ( "Hello World" , adapterHelloWorld . helloWorld ( ) )
assertThat ( sel , is ( cls ) )
assertThat ( result , is ( 7L ) )
assertBeanValidation ( json , "end_relative.value must be greater than or equal to 1" )
assertEquals ( "mark incorrect" , 5 , cr . read ( ) )
assertEquals ( 20 , rs . getInt ( 1 ) )
assertTrue ( output , output . matches ( "(?s).*set 'x' in \\\\d+ms = " + val + ".*" ) )
assertThat ( ( String ) dest . get ( "ccc" ) , is ( "111" ) )
Assert . assertEquals ( "[a, b, c, d, e]" , inv . invokeFunction ( "split" , "a.b.c.d.e" ) . toString ( ) )
assertEquals ( list , parser ( "s //\\\\tr" ) . object ( "" ) )
Assert . assertTrue ( workspaceNames . contains ( defaultWorkspaceName ) )
assertThat ( branchFilter , instanceOf ( AllFilter . class ) )
Assert . assertEquals ( null , vo )
assertTrue ( resolver . resolve ( ) == null )
Assert . assertEquals ( 0 , analyser . getVariableTransportCostsAtActivity ( route . getStart ( ) , route ) , 0.01 )
assertNull ( fileOperationMap . getOperation ( operation . getPnfsId ( ) ) )
assertEquals ( 0 , errors . get ( ) )
assertEquals ( "INFO: First line\\n  Indented line\\nLast line" , formatted )
Assert . assertEquals ( AgentConstants . PLATFORM_VMWARE , this . agent . parameters )
Assert . assertTrue ( predict . size ( ) > 0 )
assertEquals ( "<p><img src=\\"http://example.com/\\" alt=\\"Image\\" /></p><p><img /></p>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( TextField . FIELD_TYPE , f . getFieldType ( ) )
assertEquals ( 0 , errors . size ( ) )
assertTrue ( Arrays . equals ( new byte [ ] { 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x
assertNotNull ( start . getLastBuild ( ) )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  id in (?,?,?) " ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( generatedJavascript , expectedJavascript )
assertEquals ( expected , actual )
Assert . assertEquals ( ( Long ) 10L , res )
assertTrue ( false )
assertEquals ( 6. * 3600. + 6. * 60. + 12. , sec , 0.01 )
assertEquals ( str , stream . get ( 0 ) )
assertThat ( result , is ( equalTo ( ( List < String > ) of ( "AA" , "BB" ) ) ) )
assertEquals ( 1 , findings . size ( ) )
assertValid ( "//xsd:element[@name='s'][@type='xsd:string']" , getWSDLDocument ( doc ) )
assertNoMessage ( getMockEndpoint ( ) )
assertEquals ( "123 Some Road" , result )
assertThat ( selected , is ( infoPresenter2 ) )
assertEquals ( body . toString ( ) , "<html><body><h1>Resource not found</h1></body></html>" )
assertNotNull ( "EngineFactory is not configured." , factory )
assertEquals ( 1 , objects . size ( ) )
assertNotNull ( subset )
assertFalse ( algorithm . contentEquals ( "" , equalAlgorithm ) )
TestCase . assertTrue ( result )
assertTrue ( result )
assertEquals ( ExpectedVersion . NO_STREAM , slice . version )
assertEquals ( Arrays . asList ( 0 , 1 ) , conversions . newInstance ( "1" , 1 ) . get ( ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertThat ( POSIX_FORMATTER . format ( utc ) , is ( "2012-06-30 23:59:59.123456789Z" ) )
assertEquals ( sentFrame . toString ( ) , message )
assertTrue ( determinized . equals ( fstDeterminized ) )
assertTrue ( ok )
assertEquals ( "" , result )
assertEquals ( "x" , vdb . getProperty ( "name" ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertFalse ( tagNode . isSelfClosing ( template ) )
Assert . assertEquals ( "in" , listLoopStatement . getExpression ( ) )
assertPowerToughness ( playerA , "Amoeboid Changeling" , 4 , 4 )
assertThat ( testUriStr , is ( expectedUriStr0 + "/" + expectedUriStr1 ) )
assertNotNull ( super . webPageStore . get ( key , new String [ 0 ] ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertEquals ( expFilter , filter )
assertNotNull ( base64 )
assertEquals ( 1 , result . getNuOfDimensions ( ) )
assertEquals ( server . getName ( ) , "server-test-1" )
assertEquals ( "����" , person . getMyname ( ) )
assertEquals ( 1 , inProgressMessages . size ( ) )
Assert . assertEquals ( importedSample . getName ( ) , sample . getName ( ) )
assertThat ( repo1 == repo2 , is ( true ) )
assertTrue ( rec_cnt == 1 )
Assert . assertFalse ( result )
assertMatrixEquals ( Ad , A )
assertNull ( twinMetadata )
assertNotNull ( "First transcript in the collection must be returned" , transcript )
assertThat ( control . matches ( "/clients/3" ) , is ( true ) )
assertEquals ( "Testade" , pm_ade . getCategoryName ( ) )
assertThatReplicatorWillCommitUpToIndex ( 1 )
assertArrayEquals ( expected , result , 0.000001 )
assertTrue ( Transforms . abs ( sub1 . sub ( arr2 ) . div ( sub1 ) ) . maxNumber ( ) . doubleValue ( ) < 0.01 )
Assert . assertEquals ( dataHoraRecibo , consultaRetorno . getDataHoraRecibo ( ) )
assertArrayEquals ( expected , numbers )
Assert . assertNotNull ( "Default module not found" , def )
assertEquals ( "world" , message . toString ( ) )
assertEquals ( "test-apikey" , bitApi . getApiKey ( ) )
assertThat ( valid , is ( equalTo ( false ) ) )
assertEquals ( 100d * SCROLL_LEFT / ( SCROLL_WIDTH - CLIENT_WIDTH ) , position , 0 )
assertFalse ( array . isView ( ) )
assertEquals ( new Response ( ) , result )
assertEquals ( ChargingCapability . V_480V_3_PHASE_32A , ChargingCapability . fromConnector ( connector ) )
Assert . assertFalse ( faceted . register ( faceted ) )
assertEquals ( 204 , response . getStatus ( ) )
assertThat ( abc , is ( "eureka" ) )
assertEquals ( expResult , result )
assertEquals ( hash64_1 , hash64_2 )
Assert . assertEquals ( "136.5" , response )
assertEquals ( "world&bar" , builder . getQueryParameter ( "hello world" ) )
assertEquals ( "<html><head><title>One</title></head><frameset><frame /><frame /></frameset></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "Value is incorrect" , map , value )
assertTrue ( baseConsumerClass . exists ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( motivo , consultaRetorno . getMotivo ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "/my/foo/bar" , rewriteEngine . processInbound ( null , null , c , url ) )
assertTrue ( "Page does not contain the given text" , page . getPageSource ( ) . contains ( "Wizard" ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , secondOutbound )
Assert . assertEquals ( expected , actual )
assertThat ( qualifier , is ( "Simple Data Driven" ) )
context . assertIsSatisfied ( )
assertEquals ( Sets . newHashSet ( 1 , 2 ) , Sets . newHashSet ( q . asList ( ) ) )
assertThrown ( val , promise2 )
assertNotNull ( result )
assertEquals ( "Mismatched result for [" + index + "] iteration" , expected , actual )
assertTrue ( cc . toString ( ) . contains ( "private=\\"a,b\\"" ) )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertTrue ( cs . getWarnings ( ) . size ( ) > 0 )
assertEquals ( featureService1 , aspect . getFeatureService ( ) )
arrays . assertHasSize ( description , null , 8 )
assertTrue ( result == null )
Assert . assertEquals ( b , m . getBook ( ) )
assertEquals ( new Float ( 123.4F ) , result )
Assert . assertEquals ( expResult , result , 0.0 )
assertTrue ( actionServiceRegistered )
Assert . assertEquals ( new Path ( "obj1.nestedSimpleInteger" ) , fullPath )
Assert . assertEquals ( "Block result is wrong" , new Integer ( 1 ) , o )
assertEquals ( 0 , maxByColumns . length )
assertEquals ( map . get ( "child" ) , map . get ( "child" ) )
assertEquals ( - 1 , tree . getBeforePosition ( ZERO ) )
assertEquals ( "{k1:{f:1}}" , o )
assertThat ( emptyDatabase . isClean ( ) , is ( true ) )
assertEquals ( "jsmith@aaa.$3" , mappedIdentity )
assertThat ( txId1 . get ( ) , is ( txId2 . get ( ) ) )
assertThat ( uri . isTemplate ( ) , equalTo ( true ) )
Assert . assertTrue ( true )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( "1" , wrapper . getFirstHeader ( "Options" ) . getValue ( ) )
assertEquals ( "graph has wrong average value, should be 0.0" , 0.0 , average , 0.00001 )
assertThat ( passwordFile . readFile ( ) , is ( "testpass" ) )
assertFalse ( violation )
assertTrue ( fs . exists ( srcFilePath ) )
assertEquals ( actual , pluginConfiguration , "ByName should return one plugin configuration." )
assertEquals ( expectedQuery , actualQuery )
assertNotEquals ( getMapping1 , getMapping2 )
assertEquals ( "#: expected type: String, found: Map" , actual )
assertEquals ( tag . doStartTag ( ) , Tag . EVAL_BODY_INCLUDE )
assertTrue ( events . size ( ) == 1 )
assertEquals ( false , result )
Assert . assertEquals ( 1 , uploadedScreenshots . size ( ) )
assertEquals ( "Expected 10 results!" , 10 , n )
Assert . assertTrue ( children . size ( ) > 0 )
Assert . assertNotNull ( rangerServiceDef )
Assert . assertNotNull ( endpoint . toString ( ) )
assertEquals ( "blah" , result . getOut ( ) . getBody ( ) )
Assert . assertEquals ( "current" , authzDepConf . get ( currentVar . getVar ( ) ) )
iterables . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Yoda" , "Yoda" , "C-3PO" ) )
assertEquals ( 2 , em . createQuery ( query ) . getResultList ( ) . size ( ) )
assertEquals ( "requests" , response )
assertTrue ( true )
Assert . assertEquals ( getElement ( "PV1.7" ) , handler . getPatientLocation ( ) )
Assert . assertArrayEquals ( expected , actual . toArray ( ) )
Assert . assertEquals ( builder . toString ( ) , expected , actual , tol )
assertEquals ( count1 , repository . execute ( countOp ) . longValue ( ) )
Assert . assertEquals ( "(nt_change_duplication (nt_point_location (nt_base_location (nt_number 123))) dup)" , nt_change_duplication . toStringTree ( parser ) )
assertEquals ( albums , repository . findByTrackNameLike ( album . getAlbumName ( ) ) )
assertEquals ( newValue , rot . getRateOfTurn ( ) , 0.1 )
Assert . assertEquals ( expected , new HtmlFormatter ( null , container ) . format ( input , options ) )
assertEquals ( "Number of keys in the tree" , 0 , keys )
Assert . assertEquals ( expected , FileCommands . ftGetFileInfoArray ( channelIds , 2 , channelPasswords , filePaths ) . toString ( ) )
assertEquals ( server . getConfig ( ) . get ( "testserver.a" ) , "default" )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . BAD_REQUEST ) )
assertTrue ( "testExtractor" == extractorInstance1 . getClass ( ) )
Assert . assertTrue ( success )
assertEquals ( "SSN, SSM IS IN ('11111111111111', '22222222222222')" , result . toString ( ) )
Assert . assertEquals ( "涓�瑗�|浼�|��|浜�" , words )
Assert . assertThat ( values , Matchers . contains ( "gzip" , "compress" ) )
assertEquals ( uploadLocation + FileUtils . toDir ( stateToken ) + filename + pngExtension , absFile )
assertTrue ( MessageEncodeDecode . checkIsSameList ( m1 . dataSetList ( ) , m2 . dataSetList ( ) ) )
assertNotNull ( result )
assertCapturedHint ( expected , capture , EncodeHintType . CHARACTER_SET )
Assert . assertNull ( "Mechanism name was supposed to be null" , httpServerAuthenticationMechanism )
Assert . assertEquals ( "select group by sym from test" , select . toQ ( ) )
assertEquals ( "thai 1" , DateUtils . formatFriendlyDate ( DateUtils . nowUtc ( ) , Locale . THAI ) )
assertTrue ( getAlphaConstraint ( ksession ) instanceof LambdaConstraint )
assertEquals ( factory . getClass ( ) . getName ( ) , ExtraDataPropertyAccessorFactory . class . getName ( ) )
assertTrue ( newYearsEve . isBefore ( newYearsDay ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_USHORT_ROI )
assertEquals ( 0 , multimap . size ( ) )
assertThat ( subject . toString ( ) , is ( "" + "***RDNS: (related to 0.2.193.in-addr.arpa) CRITICAL: Fatal error in delegation for zone 0.2.193.in-addr.arpa.\\n" + "\\
assertEquals ( "my-content-type" , connection . getHeaders ( ) . get ( "Content-Type" ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( qsCallback . asDocument ( ) , is ( b . build ( ) ) )
Assert . assertEquals ( expectedResult , fileComparer . replaceAbstractClasses ( file1AsList ) )
Assert . assertEquals ( getDao ( ) . count ( ) , count - 1 )
assertTrue ( actualObj ( ) . isArray ( ) )
Assert . assertFalse ( policy . isResponseCacheable ( "GET" , response ) )
assertEquals ( i1 , i2 )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Sms action=\\"https://example.com\\" from=\\"+15558675310\\" method=\\"GET\\" statusCallback=\\"https://example.com\\"
assertSame ( cache , nativeCache )
Assert . assertEquals ( score , smsd1 . getFragmentSize ( 0 ) )
Assert . assertFalse ( "Capabilities should match" , first . matchesCapabilities ( map ) )
assertEquals ( true , bm . isBitSet ( 63 ) )
Assert . assertEquals ( expected , Strings . unCapitalizeFirstChar ( data ) )
assertEquals ( parentHolder , pi . getParentHolder ( ) )
Assert . fail ( "Test encountered an unexpected exception." )
assertEquals ( 0 , spy . getSchemaNames ( ) . size ( ) )
assertEquals ( "string" , param . toJson ( ) )
Assert . assertTrue ( report . isSuccess ( ) )
assertNull ( token )
assertThat ( type , is ( notNullValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "distance($current.x, $current.y), 1.1, 1.2)" , p . toString ( ) )
Assert . assertNotNull ( url )
assertEquals ( testNewUrl , jobEntryHadoopCopyFiles . loadURL ( testUrl , testNcName , metaStore , mappings ) )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 " + "INNER JOIN table2 as t2 ON t1.c0 = t2.c0" ) )
assertEqualsIgnoreWhitespace ( expected , drl )
assertEquals ( 0 , changes . size ( ) )
assertThat ( collectionName , not ( startsWith ( ADMIN_VRE ) ) )
assertThat ( value . getCodes ( ) [ 0 ] , is ( equalTo ( "test" ) ) )
assertSame ( value , XenqttUtil . validateGreaterThan ( "integer" , value , max ) )
Assert . assertEquals ( ( Integer ) 1 , res )
assertThat ( testOutcome . getTags ( ) , hasItem ( TestTag . withName ( "A user story" ) . andType ( "feature" ) ) )
Assert . assertEquals ( "driver.navigate().goBack();" , result )
assertEquals ( expected , result )
assertScheduleWhenTuplesAvailableStrategy ( strategy , 0 )
Assert . assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( testQueryValue , rval )
assertThat ( tester . response . getStatus ( ) , is ( equalTo ( HttpServletResponse . SC_OK ) ) )
assertEquals ( linearChainFg , fgfile )
Assert . assertEquals ( "other" , config . getStringValue ( "name" ) )
assertEquals ( "Required profiles" , "tui" , new KnopflerfishPlatformBuilderF300 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertThat ( route , canHandle ( ClientsController . class , "list" ) )
assertEquals ( expectedResult , result )
assertContains ( e . getMessage ( ) , "'first'" )
assertBuildException ( "password" )
assertEquals ( "Wrong path" , "${$DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc.jar\\\\,$${DB2UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cu.jar" , config . getString ( "mypath"
assertEquals ( "Two ext sources should be same" , extSource . getId ( ) , extSource2 . getId ( ) )
Assert . fail ( "Should have thrown exception" )
assertEquals ( "bar" , lr . get ( 2 ) . get ( ) )
assertNotSame ( fixture , copy )
assertNotEquals ( update1 , update2 )
assertTrue ( "result must be a failure" , result . isFailure ( ) )
assertEquals ( "Base for floats is wrong" , Double . valueOf ( 3.6d ) , parsed )
assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( HttpStatus . SC_INTERNAL_SERVER_ERROR ) )
Assert . assertNotNull ( this . userService . get ( ) )
assertThat ( result , is ( jsonNumber ( 1 ) ) )
assertEquals ( "Authorization should be equal to Bearer 4adc339e0" , rc . getHeader ( "Authorization" ) )
assertEquals ( outerJson , BsonCodec . bsonObjectToJsonObject ( outerBson ) )
Assert . assertEquals ( "Remote invocation of EJB was not successful" , StatefulBeanRemote . ANSWER , response )
Assert . assertEquals ( "lentement lentement plus" , lentement . toString ( ) )
assertNotNull ( exception )
assertThat ( b . join ( ) , is ( 20 ) )
assertSame ( is , this . testee . getData ( cn ) )
assertHandCount ( playerB , 0 )
assertEquals ( "X=foo%3Dbar%3Dquz" , s . serialize ( m ) )
assertNotEquals ( putMapping1 , putMapping2 )
assertObjectEquals ( "{}" , t )
assertEquals ( 1 , posts . size ( ) )
assertThat ( results , is ( Arrays . asList ( "A-" , "B-" , "C" ) ) )
assertEquals ( "test" , new String ( data . getData ( type ) ) )
Assert . assertEquals ( "da2794f442f08a73ac9eef7f9378dd7a5bbcf8c6" , fp )
assertFalse ( post . isVotedUpBy ( user ) )
assertEquals ( 5 , p . getTotalPages ( ) )
assertEquals ( 1 , handler . getCalledTimes ( ) )
assertThat ( testOutcome . lastStep ( ) . getDescription ( ) , is ( "Step 3" ) )
assertTrue ( wasException )
assertFalse ( aggregator . usages ( ) . iterator ( ) . hasNext ( ) )
assertThat ( result , isFailedCommand ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertTrue ( articles . isEmpty ( ) )
assertEquals ( "" , printer . toString ( ) )
Assert . assertEquals ( 0 , resources . size ( ) )
assertEquals ( "Should return failure" , "failure" , jsonObj . get ( "status" ) . getAsString ( ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertEquals ( 1 , batchedModifications . size ( ) )
assertEquals ( original , result )
assertEquals ( expResult . getId ( ) , result . getId ( ) )
assertEquals ( "{\\"uniqueItems\\":true,\\"minItems\\":5,\\"maxItems\\":10,\\"allItemSchema\\":BooleanSchema}" , actual )
assertNotNull ( referenceObjectBinding )
assertTvShowResultsPage ( results )
assertThat ( house . cat . firstLeg . birthDay , is ( equalTo ( ( Calendar ) new GregorianCalendar ( 2010 , 4 , 10 ) ) ) )
assertEquals ( mockPom , converter . convertFromText ( moduleName , null , null ) )
assertMigrate ( beforeFile , afterFile )
this . assertLoadBlobViaTuples ( tuples , false , true )
assertTrue ( "should ignore unknown password" , jdbcAuthProvider . comparePasswords ( PASSWORD , DEFAULT_PASSWORD ) )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertTrue ( runtimeExceptionCalled [ 0 ] )
Assert . fail ( "Invalid version " + version )
assertEquals ( "3.yes,1.A;3.yes,1.C;3.yes,1.D;3.yes,5.hello;3.yes,5.world;" , stringWriter . toString ( ) )
assertNull ( container . getMetadata ( ) )
assertEquals ( "" , converter . format ( null ) )
assertEquals ( comboBox . getDataProvider ( ) , provider )
assertThat ( taskScheduler ( ) . list ( ) . size ( ) , equalTo ( initialSize - 1 ) )
assertEquals ( ( Integer ) 1 , counter . getCount ( ) )
assertArrayEquals ( expected , oneZero . split ( ) )
assertEquals ( Long . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertions . startsWith ( sequence )
assertEquals ( 6 , tokens . size ( ) )
assertTrue ( Arrays . equals ( searchTrits , trits ) )
Assert . assertTrue ( systemUnderTest . propertyOverridesExist ( ) )
assertThat ( results . size ( ) , is ( 0 ) )
assertions . hasSize ( 5 )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertEquals ( "Expected resolution to mock parent" , parent , instance . getParent ( ) )
assertEquals ( 1 , sink . count )
assertEquals ( "Wrong value" , TEST_VALUE , interpolator . resolve ( TEST_NAME ) )
Assert . assertFalse ( isOk )
assertEquals ( Integer . valueOf ( - 1 ) , value )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "[= foo]" , m . toString ( ) )
assertEquals ( "Counts [follows=1, followed_by=1, media=1]" , result )
Assert . assertEquals ( adImpressionStream . size ( ) + 2 , collector . actualResults . size ( ) )
assertFalse ( checkTest )
Assert . assertEquals ( 0.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
Assert . fail ( "Have not found the 'doDynamic' declared function for FooClass" )
assertEquals ( 2 , a . argCount )
assertThat ( token . isActive ( ) , is ( true ) )
assertEquals ( 1 , hookClass . markPossiblyBroken )
assertNotNull ( NonTerminal . STATEMENTS . buildAbstractSyntaxTree ( tokenStream ) )
assertTrue ( resourceRelationBoundary . isAddableAsProvidedResourceToResourceGroup ( master , slaveName ) )
assertNotNull ( cache . get ( key ) )
Assert . assertTrue ( true )
Assert . assertNotNull ( findElement ( By . id ( "message" ) ) )
assertTrue ( result instanceof XMLTextChunkBuilder )
assertFalseForPropertyValidation ( )
assertThat ( properties , is ( expected ) )
assertThat ( ids , contains ( pid . getValue ( ) ) )
assertThat ( log . getLogEntries ( 1 , 5 , quorumId ) , resultsIn ( equalTo ( entries ) ) )
assertEquals ( NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( noOfSolutions , is ( 81 ) )
assertThat ( exitCode , is ( 0 ) )
assertEquals ( date2 . toString ( ) , "" + date )
Assert . assertEquals ( "Value is incorrect" , map ( MONTH_DAY_STRING , "test" ) , value )
assertEquals ( result , "10 years ago" )
assertEquals ( VALUE1 + VALUE2 , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertThat ( result . getPermission ( ) , is ( permissionToSet ) )
Assert . assertArrayEquals ( "Not all expected favorites are returned." , expectedResult ( queryResult ) . toArray ( ) , results . toArray ( ) )
Assert . assertEquals ( lastProgress , 10 )
Assert . assertEquals ( 2 , this . newUserDao ( ) . getTotalUnreadPrivateMessages ( user ) )
assertThat ( result , is ( expected ) )
assertNotNull ( con . getAutoCommit ( ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"conference\\":{\\"id\\":\\"1234\\",\\"mute\\":false,\\"playTones\\":false,\\"interdigitTimeout\\":3.5,\\"required\\":
assertEquals ( "Deleted entity should match original" , revisions . getNumberOfElements ( ) , 1 )
assertThat ( underTest . maybeUpdateLastDownloaded ( asset ) , is ( false ) )
Assert . assertEquals ( "select babyfish_shared_alias_0 " + "from org.babyfishdemo.jpacriteria.entities.Employee babyfish_shared_alias_0 " + "inner join babyfish_shared_alias_0.department b
assertEquals ( "?p1=v1&p2=v2&p3=v3" , query . toString ( ) )
assertThat ( tag , is ( notNullValue ( ) ) )
assertEquals ( 1 , instance . evaluations )
assertNotNull ( helper . findLabels ( TEST_IRI ) )
assertThat ( fe , notNullValue ( ) )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 299.0 , 299.0 )
testHelper . assertJobMigrated ( "eventSubProcessStart" , "subProcess" , "start" )
assertEquals ( 1 , CollQueryFactory . from ( entity , Collections . singleton ( new Entity ( ) ) ) . where ( $ ( entity . getBoolean1 ( ) ) . eq ( Boolean . TRUE ) ) . fetchCount ( ) )
assertThat ( result , contains ( v_121 , v_122 ) )
Assert . assertEquals ( 9 , map . size ( ) )
assertMissing ( "foo" )
Assert . assertEquals ( "bob" , token . getUserName ( ) )
assertFalse ( canHandle ( handlerInput ) )
assertEquals ( "Wrong override name" , newName , root . getName ( ) )
Assert . assertNotNull ( savedTenant2 )
assertJSLintResult ( expected , result )
assertResultSet ( res )
assertEquals ( "this is a test" , pnr . getProperty ( "test" ) . get ( ) )
assertTrue ( diff > - TIME_DIFF && diff < TIME_DIFF )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 0.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
assertEquals ( dataSet . getRowCount ( ) , 50 )
assertTrue ( "Headers tar file '" + headersTarFile + "' for sdk '" + sdk + "' and configuration '" + configuration + "' does not exist." , headersTarFile . exists ( ) )
assertEqualsLQ ( Ac , lq . factor ( new DenseMatrix ( Ac ) ) )
assertEquals ( "Hawk id=\\"x\\",mac=\\"x+xxxxx\\",ts=\\"1\\",nonce=\\"abc\\",body=\\"Das ist ein toller body\\",type=text/plain" , h . toString ( ) )
assertTrue ( "Failed permission check was not logged" , loggedFailedPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertEquals ( "x\\n" , found )
Assert . assertEquals ( jsonString , "[{\\"name\\":\\"涓���\\",\\"id\\":1,\\"brithDate\\":null,\\"money\\":1.1},{\\"name\\":\\"涓�
assertEquals ( ( VecTools . multiply ( newOutput , outputGrad ) - VecTools . multiply ( output , outputGrad ) ) / eps , grad . get ( i ) , 1e-5 )
assertTrue ( check )
assertThat ( identityService . createUserQuery ( ) . userId ( user . getId ( ) ) . count ( ) , is ( 0L ) )
Assert . assertEquals ( "test" , stack . top ( ) . get ( "test" , null ) )
assertNull ( entry )
assertEquals ( 30.0 , v . getLatestArrival ( ) , 0.01 )
assertThat ( runtime ( ) . toString ( result ) , sameJSONAs ( runtime ( ) . toString ( result ) ) )
Assert . assertEquals ( expectedOutput , output )
assertEquals ( "ocpp1.5" , response . getHeader ( SecWebSocketVersionInterceptor . SEC_WEB_SOCKET_PROTOCOL_HEADER ) )
assertEquals ( "<p>Hello</p>\\n<p>There</p>" , divs . html ( ) )
assertEquals ( customUiTemplateUpdated . getTemplateValue ( ) , customUiTemplate . getTemplateValue ( ) )
assertEquals ( "regexp condition serialization is wrong" , expected , actual )
assertFalse ( "WorkflowDocument should not indicate quickstart as SuperUser" , document . isValidAction ( ActionType . SU_BLANKET_APPROVE ) )
assertThat ( description . toString ( ) , is ( "A JSON array with size: <2>" ) )
org . assertj . core . api . Assertions . assertThat ( searchResponse . getHits ( ) . totalHits ( ) )
assertAllCommandsUsed ( )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertNull ( vm . getInstanceOfferingUuid ( ) )
assertNotNull ( entity . getId ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertThat ( formatter . parse ( "April/14, Heisei 29" ) , is ( expected ) )
assertMedianIs ( 250D )
assertEquals ( false , test5 . equals ( null ) )
Assert . assertArrayEquals ( answer , result , 1e-5 )
assertEquals ( testGen1 . getLookupGroup ( testLSN ) . toString ( ) , testGen2 . getLookupGroup ( testLSN ) . toString ( ) )
assertEquals ( header , conditionals . toHeaders ( ) . getFirstHeader ( HeaderConstants . IF_MODIFIED_SINCE ) . get ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( "<!DOCTYPE html><!-- a comment -->One <qux />Two" , TextUtil . stripNewlines ( doc . html ( ) ) )
Assert . assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "<th class=\\"pass\\">Col 1</th>\\n
assertEquals ( "asdf" , columnInformation . getInformationContent ( ) )
assertTrue ( page . getContent ( ) . contains ( "ENABLED_FOR_CK = true" ) )
assertEquals ( 2 , graph . countVertices ( "V" ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
assertEquals ( "two nonilh玫es de inteiros" , actual )
assertProductEvidence ( result , product )
assertNotNull ( result )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 1 , result )
assertEquals ( false , maybeName . isPresent ( ) )
assertThat ( page . hasError ( ) , is ( false ) )
assertTrue ( exitCallHook . exitCalled )
assertTrue ( list . isEmpty ( ) )
assertNotNull ( result )
assertEquals ( 1 , getStartBatchCount ( ) )
assertUnselectableDatesSelectedWhileHasValidSelection ( model )
assertTrue ( result instanceof V8Function )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"transfer\\":{\\"to\\":\\"tel:+14157044517\\"}}]}" )
assertFalse ( Files . exists ( source ) )
assertNotNull ( result )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-managed:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertEquals ( data , IOUtils . toString ( ad . getInputStream ( ) ) )
Assert . assertEquals ( "distributedTransactionTimeout=42" , getReplHeader ( ) )
assertThat ( webbitException , is ( notNullValue ( ) ) )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue')" , transformed )
assertTrue ( failedAt > maxTries )
arrays . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( ) )
assertTrue ( blobStore . delete ( tileRange ) )
assertTrue ( "TimezoneOffset is not correct" , offsetMillis >= 0 && offsetMillis <= 60 )
assertEquals ( true , classUnderTest . isSelected ( ) )
Assert . assertTrue ( "did not pass filter when no last good path" , testControlBlock . filter ( "" ) )
assertEquals ( 3 , tree . calculateDepth ( ) )
assertEquals ( afterAesEncrypt2 , pc . encrypt ( randomStr , replyMsg2 ) )
assertEquals ( 1 , e . getMessageReference ( ) . getContent ( ) . size ( ) )
assertTrue ( responseBody . contains ( "Frederic Fall MODIFIED" ) )
Assert . assertTrue ( expect ( o , false ) )
assertResourceContains ( "function" )
assertEquals ( expected , result )
assertCorrectList ( )
assertPaintingResult ( objects )
assertEquals ( ( short ) 0xffff , result )
assertArrayEquals ( "The view path array is incorrect" , new String [ ] { "" } , scm . getViewPaths ( EMPTY_VARIABLE_RESOLVER ) )
Assert . assertEquals ( id , act . getId ( ) )
assertEquals ( "x=(b a);(b a)\\n" , found )
assertTrue ( result . getErrorMessage ( ) , result . isSucceeded ( ) )
assertThat ( m1 , is ( not ( m2 ) ) )
assertNotNull ( rh )
softly . assertThat ( skipInstallationChecker )
Assert . assertTrue ( "Out of bounds (" + result [ 0 ] + " > " + start [ 0 ] + ")" , result [ 0 ] <= start [ 0 ] )
assertEquals ( resources , parser . derToIpAddressBlocks ( Asn1Util . decode ( RFC3779_APPENDIX_B_EXAMPLE_1 ) ) )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
Assert . fail ( "should have failed" )
Assert . assertEquals ( expResult , result )
assertNull ( mostRecentId )
assertThat ( ids , containsInAnyOrder ( encId . getValue ( ) , encId . getValue ( ) , conditionId . getValue ( ) ) )
assertEquals ( HttpStatus . SC_OK , getStatus ( patchReq ) )
assertTrue ( checker . evictable ( ) . isEmpty ( ) )
assertEquals ( "Apache This is a test" , sb . toString ( ) )
assertGroups ( ldapUserGroupCallback , true , true , true , true )
Assert . assertArrayEquals ( expected , MathArrays . reverse ( array ) , 0d )
assertNotEquals ( column1 , column2 )
Assert . assertEquals ( urlEsperada , nota . getInfoSuplementar ( ) . getQrCode ( ) )
assertEquals ( expected , sorted )
assertEquals ( expected [ i ] [ y ] [ x ] , ra . get ( ) . get ( ) , 0 )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( USERNAME , principal . getName ( ) )
assertEquals ( 1L , result . longValue ( ) )
assertEquals ( 2 , ksession . fireAllRules ( ) )
assertFalse ( appender . isStarted ( ) )
assertEquals ( "CFBundleVErsion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_VERSION ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "OK" , close )
assertThat ( validator . getErrors ( ) , hasSize ( 0 ) )
assertEquals ( id , sut . getId ( ) )
assertResultsMatch ( select ( windowFunction ( count ( ) ) . build ( ) . as ( "count" ) ) . from ( tableRef ( "WindowFunctionTable" ) ) , 1L )
assertTrue ( filter . matches ( operation , poolInfoMap ) )
assertFalse ( fs . deleteOnExit ( path ) )
assertTrue ( "Wrote incorrect char[] string: " + s , s . equals ( "Hello World" ) )
ValidationTestUtils . assertPatternMatches ( pattern , expected )
assertThat ( result , is ( true ) )
should . assertEquals ( 2 , res . result ( ) . principal ( ) . getInteger ( "provider" ) )
assertEquals ( tags , new MetricResources ( configuration , security , api ) . getTags ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( simple . getName ( ) , name )
assertEquals ( 25 , cap . get ( 0 ) )
assertThat ( coords , equalTo ( actualCoords ) )
assertNotNull ( w . getWorkGroup ( ) . get ( 0 ) . getWorkSummary ( ) . get ( 0 ) . getUrl ( ) . getValue ( ) )
Assert . assertEquals ( "3.14" , this . ghci . pullRaw ( "my_pi" ) . get ( ) )
Assert . assertTrue ( result . isEmpty ( ) )
assertEquals ( 200 , test . getVal ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( newValues , hasSize ( 0 ) )
assertEquals ( MLContextUtil . BUILD_TIME_NOT_AVAILABLE , buildTime )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 } LIMIT 4" )
assertThat ( new SelectBest ( ) . selectSolution ( Arrays . asList ( sol1 , sol2 ) ) , is ( sol2 ) )
assertEquals ( ImmutableMap . of ( "trace-id" , "12345" ) , carrier . getHeaders ( ) )
assertEquals ( expected , actual )
assertEquals ( 1 , comparator . compare ( null , solution2 ) )
Assert . assertEquals ( "%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CConnect%2F%3E" , elem . toUrl ( ) )
Assert . assertFalse ( DAO . isNew ( tweet , "testing" ) )
assertEquals ( "Merge table should have 2 additional records now" , 2 , finalNumberOfRecords - initialNumberOfRecords )
assertEquals ( goldenResponse , responseObserver . firstValue ( ) . get ( ) )
assertNotNull ( testObj . getPanel ( ) )
Assert . assertEquals ( "ORU_R01" , queueItem . getMessage ( ) )
assertEquals ( 2 , branch_conditions . size ( ) )
assertObjectEquals ( "{type:'array',items:{type:'string',title:'my title',description:'my description',id:'my/id'}}" , actual )
assertEquals ( 2d * Math . cos ( Math . E ) * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
assertEquals ( "myTestId" , history . getId ( ) . getIdPart ( ) )
assertArrayEquals ( refar , d . getResult ( ) )
this . assertLoadBlob ( departments , true , false )
assertTrue ( metrics . size ( ) == 1 )
assertThat ( result , is ( true ) )
assertEquals ( NodeState . NEW , updateRMNode ( getId ( ) ) . getState ( ) )
assertEquals ( count1 + 1 , count2 )
assertTrue ( "Error ratio=" + errorRatio + " < " + maxSlopRatio , errorRatio < maxSlopRatio )
assertEquals ( "padRight() To 10" , Text . valueOf ( "******Test" ) , _text )
assertTrue ( doc . getStatementGroups ( ) . isEmpty ( ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( APP_BASE ) ) )
assertEquals ( 1 , ksession . createProcessInstanceQuery ( ) . processInstanceId ( instance ) . count ( ) )
assertFalse ( selectedFile . exists ( ) )
assertEquals ( "Didn't get a CREATED response!" , CREATED . getStatusCode ( ) , getStatus ( put ) )
assertThat ( resultCommand , is ( expectedCommand ) )
assertEquals ( 1549 , result )
assertTrue ( resp . isSuccess ( ) )
MockInterceptor . assertContent ( new String [ ] { "Mock1" , "Mock2" , "Mock3" } , new String [ ] { "Mock4" , "Mock5" , "Mock6" } )
assertEquals ( StorageCommonConfig . DEFAULT_STORE_URL , connectorConfig . getStorageURL ( ) )
assertThat ( tester . getMessages ( FeedbackMessage . ERROR ) . size ( ) , is ( 1 ) )
assertEquals ( "Expected another type of analyzer" , KeywordAnalyzer . class , analyzer . getClass ( ) )
Assert . assertTrue ( last . getType ( ) . equals ( "AND" ) )
assertAnnotations ( 2 , Quantity . class , new TestQuantity ( 0 , "2 cubic metres" , 2 , "m3" , 0 , "m3" , "area" ) )
assertSame ( dt . toLocalTime ( ) , t )
assertNoneEqual ( otherCapabilityFqans )
assertEqualsWithoutWhiteSpaces ( "" , union )
assertEquals ( "hello" , result )
assertTrue ( subject . isModified ( ) )
Assert . assertTrue ( logLatch . getCount ( ) == 0 )
assertThat ( result , equalTo ( true ) )
out . assertIsSatisfied ( )
assertSame ( t , TEST_2007_07_15 )
assertEquals ( BigDecimal . TEN , dto . getQty ( ) )
assertEquals ( 0 , sparseView . getFirstColumn ( ) )
assertTrue ( "Token realm should be created" , ops . exists ( TEST_TOKEN_REALM_ADDRESS ) )
assertEquals ( IProcess . URN_XPATH_1_0_IN_BPEL_2_0 , process . getExpressionLanguage ( ) )
assertNull ( placeHolder . getParentClass ( ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"message\\":{\\"say\\":[{\\"value\\":\\"This is an announcement\\"},{\\"value\\":\\"+13055551212\\",\\"from\\":\\"305555
assertThat ( supers , contains ( superProperty ) )
Assert . assertTrue ( new File ( testFM . outputDir , "metadata.txt" ) . exists ( ) )
assertEquals ( UNPROCESSEABLE , response . getStatus ( ) )
SerializableObjects . assertEquals ( bar , parsedBar )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
Assert . assertEquals ( "Result is not last evaluated expression" , "World" , o )
assertEquals ( "pong!" , reply . body ( ) . getString ( "name" ) )
assertEquals ( 32 , program . getMemSize ( ) )
assertTrue ( "expected 100ms, actual " + duration , duration < 100 )
assertThat ( exists , is ( false ) )
Assert . assertTrue ( queryResult . getSize ( ) >= 1 )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertEquals ( 3 , ( int ) sync ( list . get ( 0 ) ) )
Assert . assertEquals ( 14 , results . length )
Assert . assertNotNull ( id )
assertTrue ( graphContains ( gStore . getDefaultGraph ( ) , new Triple ( s , p , NodeFactoryExtra . parseNode ( "123" ) ) ) )
assertThat ( scriptContent , is ( "Selective Annotation" ) )
assertEquals ( 1 , result )
assertTrue ( true )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertTrue ( passed [ 0 ] , passed [ 0 ] == null )
assertTrue ( result . isResultOK ( ) )
assertEquals ( "hello" , result )
assertEquals ( 32 , match . getLayer3Match ( ) . getIp4Prefix ( ) . getValue ( ) . intValue ( ) )
assertEquals ( "a,c" , out )
assertEquals ( testSet . cardinality ( ) , board . computeHash ( ) )
assertThat ( candidates . size ( ) , is ( 1 ) )
assertEquals ( "Caption should be selected" , "Null" , getSelect ( ) . getText ( ) )
assertEquals ( "Value not as expected!" , Long . valueOf ( 1 ) , bi . getValue ( ) )
assertEquals ( "pm1.g1.e1" , query . getOrderByExpressions ( ) . get ( 0 ) . toString ( ) )
assertTrue ( GerritVersionChecker . isCorrectVersion ( GerritVersionChecker . Feature . fileTrigger , testServer ) )
Assert . assertEquals ( unidadeFederativa , eventoRetorno . getOrgao ( ) )
assertObjectEquals ( "{type:'string'}" , x . getSchema ( ) )
assertEquals ( 1 , listener . count )
assertEquals ( "hello world" , new String ( ObjectConverterUtil . convertToCharArray ( result . getBinaryStream ( ) , - 1 , "ASCII" ) ) )
assertEquals ( 0 , score ( ) )
assertTrue ( ( Boolean ) result )
Assert . assertEquals ( expected , actual , 0d )
assertEquals ( stream , streamAfterParse )
assertNotEquals ( playlist1 . hashCode ( ) , playlist2 . hashCode ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertEquals ( "Different graph head" , inputGraphHead , outputGraphHead )
assertNotNull ( testObj . getFieldDataManager ( ) )
assertContainsAllGames ( games )
assertThat ( taskService . createTaskQuery ( ) . taskAssignee ( "demo" ) . count ( ) , is ( 1L ) )
Assert . assertEquals ( displayNameExpected , displayNameActual )
assertTrue ( matchResult )
assertFalse ( satisfiesPrecondition ( cu ) )
assertEquals ( expResult , result , 0.01F )
Assert . assertEquals ( "Wrong key created" , comparationKey , createdKey )
assertEquals ( new org . apache . http . client . utils . URIBuilder ( SERVICE_ROOT + "/metadata" ) . build ( ) , uri )
assertFalse ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertEquals ( expectedDataset . getId ( ) , dataset . getId ( ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Say>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Say>" , elem . toXml ( ) )
assertThat ( targetEnv . tables ( ) . size ( ) , is ( 2 ) )
assertEquals ( expectedPlotsNames , sprites )
assertTrue ( "The entityGroup should be present in online entityGroups list." , fs . getOnlineEntityGroups ( ) . contains ( eg ) )
assertTrue ( wkt , wkt . matches ( WGS84 ) )
Assert . assertEquals ( d , voidable . getDateVoided ( ) )
assertEquals ( str , decrypted )
Assert . assertEquals ( "updated" , result . getReturnMsg ( ) )
Assert . assertTrue ( lostWorkersInfo . size ( ) == 0 )
assertThat ( testInstance . getMyInjection ( ) , nullValue ( ) )
assertTrue ( root . containsNetwork ( s1 ) )
assertCloseTo ( "Scroll position should be 0" , newRowLocation , rowLocation0 )
assertEquals ( 1 , v . count )
runner . assertAllFlowFilesTransferred ( PublishKafka_0_10 . REL_FAILURE , 3 )
assertEquals ( "3.141592653589793" , method . invoke ( normalizer , literal , false ) )
Assert . assertEquals ( "41 �拽�转" , prettyTime . formatUnrounded ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
assertNotNull ( reservation )
assertThat ( result . fullName ( ) , is ( "long" ) )
assertEquals ( "[s,e,c]" , s . getContext ( ) . toString ( ) )
Assert . assertEquals ( ExchangePhase . OUT , exchange . getPhase ( ) )
assertThat ( PrettyTime . of ( Locale . US ) . print ( duration , TextWidth . WIDE ) , is ( "1 year and 1 day" ) )
assertThat ( isEquals , is ( true ) )
assertTrue ( p1 . implies ( p2 ) )
Assert . assertEquals ( CORSFilter . CORSRequestType . PRE_FLIGHT , requestType )
assertTrue ( reportData . size ( ) > 0 )
assertEqualsWithoutWhiteSpaces ( "union(){rotate([10,20,30]) moves([10,20,30]) rotate([30,10,20])}" , moved )
assertEquals ( 1 , postIds . size ( ) )
Assert . assertTrue ( isFile ( fc , f ) )
assertIpAddress ( )
Assert . assertEquals ( schema . getSubsequentVersionField ( ) , "version_number" )
assertEquals ( expResult , result )
assertTrue ( icheck . getFaults ( ) . length > 0 )
assertTrue ( reader . nextTag ( ) . equals ( XMLConstants . END_ELEMENT ) )
assertArrayEquals ( ARRAY2 , memcache . get ( KEY1 ) )
assertEquals ( expResult , result )
Assert . assertEquals ( patientPrograms . size ( ) , Util . getResultsSize ( result ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( - 1 , cmpTo . compareTo ( 5 ) )
assertTrue ( value . contains ( "cas" ) )
assertEquals ( expected , actual )
assertTrue ( s . equals ( s1 ) )
assertEquals ( "<http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Country3-a>" , val )
assertEquals ( 0.5 , density , .1 )
assertTrue ( Futures . getUnchecked ( collector ) )
assertEquals ( mod , modSer )
assertEquals ( expected , modelWriter . toString ( ) )
Assert . assertThat ( reader . readLine ( ) , is ( "Hello World" ) )
assertHasMethod ( model , "java.lang.Object proofGen()" )
assertTrue ( connectFuture . isConnected ( ) )
Assert . assertEquals ( 200 , res . getStatus ( ) )
assertEquals ( "<p>This is deleted text</p>\\n" , result . message ( ) . get ( 0 ) . getData ( ) )
assertEquals ( pValue , testPlatform )
assertEquals ( 6L , object . get ( "level" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
Assert . assertEquals ( 1 , countNotifier . getNotificationCount ( ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10" , sql )
assertResultsEqual ( net , 0.0 )
assertTrue ( "admin not found" , u . getAdmins ( ) . isEmpty ( ) )
assertThat ( content , is ( equalTo ( ( List < String > ) pageContent ) ) )
Assert . assertEquals ( 3 , majorityElement . majorityElement ( nums ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertTrue ( this . requirejsManagerInitIsCalled ( response , null ) )
assertThat ( ! duration . isNegative ( ) , equalTo ( true ) )
assertNotNull ( todo )
Assert . assertEquals ( aString , sut . getName ( ) )
assertEquals ( msg . getCompleteDataset ( ) , msgAndResponse . getCompleteDataset ( ) )
assertDurationEquals ( d , t1 . minus ( t2 ) )
assertEquals ( "en-US" , h . getLanguage ( ) )
JSONAssert . assertEquals ( "{objectType:error,context:a,errorCode:b,msg:c}" , s , false )
assertThat ( configuration , is ( not ( present ( ) ) ) )
assertNotNull ( diagnosis . getId ( ) )
Assert . assertEquals ( list , result )
Assert . assertEquals ( 2 , vm . getStack ( ) . size ( ) )
assertTrue ( ConnectionInterceptor . isClosed ( ) )
assertNotNull ( IncomingPhoneNumber . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "PNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( HttpServletResponse . SC_FORBIDDEN , response . getStatus ( ) )
assertTrue ( twoBackoffIntervalsMs < ( endTimeMs - startTimeMs ) )
Assert . assertNull ( UIUtils . componentAt ( 0 , 0 ) )
assertThat ( node . getEntities ( ) , is ( Collections . singleton ( owlBottomClass ) ) )
assertYaml ( "" , Samples . PROJECT_STRATEGY_ROLESMAPPING_UNIQUE_KIBANA_MODE . getContent ( ) , rolesMapping )
assertThat ( slider . getValue ( ) , is ( 5.0 ) )
assertNumEquals ( "1.0" , highestValue . getValue ( 12 ) )
assertEquals ( "Expected another type of analyzer" , SimpleAnalyzer . class , analyzer . getClass ( ) )
assertThat ( handledResponse , is ( equalTo ( response ) ) )
assertEquals ( expectedSqlForMathOperations15 ( ) , result )
assertEquals ( mockQuery , queryPlan . getQuery ( ) )
assertEquals ( Result . FAIL , nogroup . apply ( item ) )
assertEquals ( 20000L , testLong )
assertRows ( filePath , 4 , TEST_COLUMNS )
assertEquals ( "Attribute not set" , ATTR_VALUE , node2 . getAttributes ( ) . get ( ATTR ) )
Assert . assertEquals ( "2 from now" , p . format ( new Date ( 1000 * 60 * 60 * 2 ) ) )
assertEquals ( "OK" , reply )
assertResponseContainsModel ( "<img class=\\"componentIcon\\" src=\\"modelregistry/api/componenticon\\"/> nt:unstructured" , Model . class , 123L , "modelName" )
assertEquals ( "Expected 2 result!" , 2 , n )
assertEquals ( "Not returning null" , null , inprogressNodePath )
assertEquals ( BRIGHT_RED . foreground ( RED ) , style )
arrays . assertDoesNotContain ( description , actual , emptyArray ( ) )
assertEquals ( "simple test" , entries . get ( 0 ) . getMessage ( ) )
assertEquals ( Collections . emptyList ( ) , descendants )
assertEquals ( expectedMd5 , sb . toString ( ) )
assertEquals ( jsonFromObject , jsonFromString )
assertEquals ( expResult , result )
Assert . assertEquals ( identificador , protocoloInfo . getIdentificador ( ) )
assertNull ( f . evaluate ( ) )
assertIsCommitted ( tx )
assertEquals ( expected , manager . getUser ( ) )
assertResult ( metrics )
assertEquals ( "yes" , html )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( 18 , instance . evaluations )
assertEquals ( expected , uri . toString ( ) )
assertThat ( filter . include ( artifact ) , is ( false ) )
assertEquals ( "joinName" , scopes . get ( 0 ) . getName ( ) )
assertThat ( confirmation . getStatus ( ) , equalTo ( clearCacheStatus ) )
assertFalse ( "Result should be false for public method." , result )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( InterpreterResult . Code . SUCCESS , interpreterResult . getCode ( ) )
assertTrue ( page . asText ( ) . contains ( "MESSAGE 1 MYPARAM" ) )
assertTrue ( GenomeWarpTestUtils . equivalentRanges ( got , got ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertEquals ( "<table border=\\"1\\" cellspacing=\\"0\\">\\n" + "<tr>\\n" + "<th class=\\"pass\\">Col 1</th>\\n" + "<th class=\\"pass\\">Col 2</th>\\n
assertEquals ( 7 , req . getPayload ( ) . size ( ) )
assertEquals ( "{\\n" + "  'player2':{\\n" + "    'board':'some_board2',\\n" + "    'boardSize':6,\\n" + "    'gameName':'game',\\n" + "    '
Assert . assertTrue ( strategy . shouldRetry ( null , 0 , null ) )
assertFalse ( it . next ( ) . asText ( ) . contains ( "Hello World" ) )
assertThat ( target . parse ( ) , is ( true ) )
assertThat ( new CodePrinter . Builder ( statement ) . setCompilerOptions ( options ) . build ( ) , equalTo ( "_$jscoverage['test.js'].branchData['4'][2].init(12,15)" ) )
Assert . assertEquals ( "Jack" , lambda . getString ( ) )
assertEquals ( expected , actual )
assertEquals ( 2 , count )
Assert . assertNotNull ( t )
assertNull ( "The validateArgTypes() method is buggy." , sf . validateArgTypes ( argTypes ) )
assertEquals ( 200 , sc . getCode ( ) )
assertEquals ( entry , result )
assertTrue ( ok )
assertEquals ( "zero" , actual )
assertEquals ( 10 , ( int ) version )
Assert . assertEquals ( 0 , classpath . scan ( ) . size ( ) )
assertEquals ( new AffineTransform ( 1 , 3 , 2 , 1 , 10 , 20 ) , g2 . getTransform ( ) )
Assert . assertTrue ( cubes . size ( ) <= 1000 )
assertTrue ( "command " + cmd + " timed out" , con . getTimeout ( ) > 2000 )
assertResponse ( outputStream , expected )
Assert . assertEquals ( SPECIFICATION , shape . decompress ( ) . build ( ) . getSpecification ( ) )
assertThat ( t , is ( u ) )
Assert . assertEquals ( expected , testIndex . findConc ( "[word = 'jumps' | lemma = 'jump']" ) )
assertEquals ( DependendencyStatus . FORBIDDEN , oracle . assess ( access ( "bar" , "foo" ) ) )
assertNotNull ( result )
assertEquals ( originalService , event . getServiceForData ( ) )
PSLTest . assertRule ( rule , "@Max[|A|, |B|] * SINGLECLOSED(+A) + 1.0 * SINGLECLOSED(+B) = 1.0 ." )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) < 'literal'" ) )
assertThat ( new SearchArgumentFilter ( searchArgument , structTypeInfo ) . accept ( corc ) , is ( false ) )
assertUrlsEqual ( expected , url )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'the' " ) )
assertSqlCanBeParsedAndDeparsed ( statement )
assertTrue ( "Differences: " + differences + "/" + rounds , differences > rounds * 0.9 && differences <= rounds )
assertTrue ( "Short Title empty" , constraintViolations . size ( ) == 1 )
Assert . fail ( "Expected to fail, but didn't" )
assertEquals ( "4.1" , serviceMetadata . getVersion ( ) )
assertSame ( test1 , test2 )
assertEquals ( asList ( foo5 ) , results )
assertNull ( deltaDays )
assertEquals ( "[(AppNode:foo --name=value:0>16)]" , ast . stringify ( true ) )
assertThat ( testDescription . getName ( ) , is ( "My test" ) )
assertThat ( envelope . getValue ( ) . getMessage ( ) , is ( "test" ) )
assertEquals ( "operator" , operator . getName ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
assertThat ( locationManager . getTableLocation ( ) , is ( new Path ( TABLE_BASE_PATH ) ) )
assertTrue ( result )
Assert . assertEquals ( String . format ( "a %s text" , this . html ( bb , "http://something" , "url description" ) ) , formatter . format ( "a [UrL]http://something[/URL] text" , defaultOptions ( ) ) )
Assert . assertEquals ( expected , result )
assertThat ( target , is ( instanceOf ( OFPFlowActionPopPbbQuery . class ) ) )
assertEquals ( val , results . getTimestamp ( colN ) )
assertEquals ( 1 , tasks . size ( ) )
Assert . assertTrue ( nullObserver . get ( ) )
Assert . assertTrue ( response . startsWith ( "404|not found" ) )
assertTrue ( stream . idempotent )
Assert . assertArrayEquals ( "Invalid binary data" , data , dataActual )
assertEquals ( newArrayList ( objectFactory ) , everrestApplication . getFactorys ( ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertSame ( configuration , victim . getConfiguration ( ) )
assertEquals ( mockReader . toString ( ) , response . getContentAsString ( ) )
assertEquals ( expResult , result )
Assert . fail ( )
assertEquals ( "{X}" , URITemplates . getUriTemplateString ( f1 ) )
assertArrayEquals ( new int [ ] { 0 , 0 , 1 } , closed )
assertAllPenguinsPoked ( 2 )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertEquals ( resolved . getPaths ( ) . get ( "/test" ) . getResponses ( ) . get ( "200" ) . getContent ( ) . toString ( ) , "application/json" )
assertEquals ( 0 , sqlMetadataQueryExec . driverClassesToForceMeta . size ( ) )
Assert . assertEquals ( dbvEnum . size ( ) , 1 )
assertEquals ( ImportConfirmAction . SUCCESS , action . execute ( ) )
assertTrue ( page . asXml ( ) . contains ( "foo:bar" ) )
org . junit . Assert . assertEquals ( expected , tHandler . getLastRecord ( ) . getThrown ( ) )
assertNotNull ( caught )
Assert . assertEquals ( "Shadow Button 1" , button . getText ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( 6 , getHistoryLength ( ) )
assertEquals ( "dest_name1" , conf . getDestinationName ( ) )
assertEquals ( 1 , x )
assertTrue ( m . nextInt ( 4 ) < 4 )
assertTrue ( "Expected the DependencyCheck report to be generated" , report . exists ( ) )
assertNotNull ( foo . tList )
assertEquals ( "Option value" , "-Dhttp.port=80" , commandLine . getOption ( "simpleOption" ) )
Assert . assertEquals ( 1 , count )
assertAllTargetsCount ( 0 )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) > 0 )
assertThat ( sut . isMatch ( real , expected ) , is ( false ) )
Assert . assertEquals ( expectedGeoJson , geoJson )
assertShapeCoordinates ( boundaryEventBounds , 343 , 200 )
assertEquals ( "tz:" + tz . getID ( ) + " locale:" + locale . getDisplayName ( ) , expected , actual )
assertNotNull ( "The retrieved icap request instance is null" , request )
assertEquals ( "city1" , me . getLikes ( ) )
assertValidQuery ( query )
Assert . assertEquals ( "Request to 'http:///foo.com/myEndpoint' could not be resolved: Map = " + NL + "{" + NL + "    key1 = val1 java.lang.String" + NL + "    key2 = val2 java.lang.String
assertTrue ( result )
Assert . assertEquals ( endpoint , binding . getEndpoint ( ) )
assertThat ( formattedValue , is ( "A big story (<a target=\\"_blank\\" href=\\"http://my.issue.tracker/MYPROJECT/browse/MYPROJECT-123\\">#MYPROJECT-123</a>,<a target=\\"_blank\\" href=
assertFalse ( result . getMap ( ) . getReactions ( ) . isEmpty ( ) )
assertReflectionEquals ( expectedLineItem , actualLineItem )
assertTrue ( statisticManager . findTaskRunningStatisticsWeekly ( ) . isEmpty ( ) )
assertOut ( "/**\\n * @constructor\\n */\\nfoo.bar.B = function() {\\n  custom.TestOtherInterface(this).type = '';\\n}" )
assertEquals ( OK . getStatusCode ( ) , response . getStatusCode ( ) )
assertEquals ( String . class , c . resolveType ( "java.lang.String" ) )
Assert . assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( "messages" , joined ( "starting SimpleGamma" , "starting SimpleBeta" , "started SimpleGamma" , "started SimpleBeta" , "started SimpleGamma" , "started SimpleBeta" , "started SimpleGamma" ) , Strings . join ( DummyInterfaces .
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE (nodes.col1 IS NOT NULL " + "AND (nodes.col2 IS NOT NULL " + "AND nodes.col3 IS NOT NULL))" ) )
assertEquals ( new BigDecimal ( "9.0" ) , ticket . getDiscountPrice ( ) )
assertThat ( localTime . toString ( ) , is ( "2015-06-20T23:07:30" ) )
assertThat ( sentGetRequest ( "http://127.0.0.1:19000/api/job/events/test-job" ) , is ( GsonFactory . getGson ( ) . toJson ( jobStatusTraceEvent ) ) )
assertEquals ( ref , item )
Assert . assertEquals ( profile . getId ( ) , 1 )
Assert . assertTrue ( "Listener was not called" , listenerAdded . get ( ) )
assertEquals ( true , clusterBarrierManager . manageAckBarrier ( barrierPath , nodesExpected ) )
assertEquals ( Integer . valueOf ( "1" ) , result . getValue ( ) )
assertEquals ( columnInfoList , fromConfig )
assertThat ( found , is ( equalTo ( method ) ) )
assertEquals ( "name" , paramConfig . toString ( ) )
assertThat ( counter . toString ( ) , is ( equalTo ( "1" ) ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) = 'literal'" ) )
assertThat ( config . getClassLoader ( ) . getResource ( "/x/WEB-INF/classes/" ) , is ( notNullValue ( ) ) )
assertEquals ( test , npLoad )
assertEquals ( 5 , count )
assertThat ( tableMetas , is ( nullValue ( ) ) )
Assert . assertEquals ( "0123\\n" , eval ( sb . toString ( ) ) )
assertEquals ( "" , result )
assertEquals ( expected , actual )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testEnvironment.json" ) ) )
assertSingleElementCollection ( regionClientId , executeIds )
assertEquals ( Quaternionf . IDENTITY , readQuaternion ( buf ) )
assertNotEmptyAndClear ( output )
assertEquals ( "payload" + i , result )
Assert . assertEquals ( Integer . MIN_VALUE , iotaConfig . getLocalSNAPSHOTSPRUNING_DELAY ( ) )
assertNotNull ( processInstanceId )
assertTrue ( slice . events . isEmpty ( ) )
assertSame ( result , configuration . getBindingResult ( ) )
assertEquals ( witnessList , partList )
Assert . assertEquals ( "StringColumns:\\n" + "WORLD:\\n" + "WORLD:\\n" + "WORLD:\\n" + "WORLD:\\n" + "WORLD:\\n" + "WORLD:\\n" + "WORLD:\\n" + "
assertNumEquals ( 2 , getCriterion ( ) . calculate ( series , tradingRecord ) )
assertEquals ( 1.0 , errorRatio . evaluate ( FrontUtils . convertFrontToSolutionList ( frontApproximation ) ) , EPSILON )
assertThat ( options . toJSON ( ) , is ( ( JsonElement ) json ) )
listener . assertTestFailedWith ( AssertionError . class )
Assert . assertEquals ( newValue , readValue , 0f )
assertEquals ( IProcess . NAMESPACE_BPEL_2_0 , process . getTargetNamespace ( ) )
assertEquals ( expected , mapper . valueToTree ( resource ) )
assertThat ( content , is ( nullValue ( ) ) )
runner . assertValid ( )
assertEquals ( expResult , result )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( 1 , violations . size ( ) )
Assert . assertTrue ( portA != portB )
assertEquals ( "{\\"f1\\":\\"J\\",\\"f2\\":100,\\"f3\\":true}" , s . serialize ( a ) )
assertThat ( output , CoreMatchers . containsString ( "Successfully wrote 2 rows" ) )
assertEquals ( body . toString ( ) , "123" )
assertTrue ( callableInterceptor . executed . get ( ) )
assertEquals ( 259 , map . get ( 190 , 211 ) )
assertEquals ( "Set of bytes not matching any bitmask " + bitmask , expected , result )
MatrixTestAbstract . assertMatrixEquals ( e , c )
assertEquals ( "<input type='hidden' name='ACCEPTURL' value='http://mydomain.com/callback?hint=ok'>\\n" + "<input type='hidden' name='AMOUNT' value='1000'>\\n" + "<input type='hidden' name='CANCEL
assertDateEquals ( r , t . plus ( d ) )
assertEquals ( String . class . getName ( ) , propertyType . getName ( ) )
Assert . assertFalse ( reuseStrategy . keepAlive ( null , response , context ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertThat ( candidateSteps . size ( ) , Matchers . equalTo ( 0 ) )
Assert . assertEquals ( icmsSetado , icms . getIcms90 ( ) )
Assert . assertEquals ( expected , actual )
assertThat ( h . toSmiles ( ) , is ( "C(C)CC" ) )
assertThat ( ChronoHistory . from ( history . getVariant ( ) ) , is ( history ) )
assertEquals ( "(| (& [* fo.*] [* .*oo]) [= bar])" , m . toString ( ) )
assertThat ( TimestampInterval . parseISO ( "P4DT1H45M/2012-096T16:00" ) , is ( expected ) )
mockOutput . assertIsSatisfied ( )
assertNull ( resolvedMatrixParameter )
assertEquals ( expectedDocument , editedDocument )
assertNull ( service . search ( tmid ) )
assertEquals ( 1 , result )
assertTrue ( result . isEmpty ( ) )
assertEquals ( flag , result )
listener . assertEventFired ( new SortOrder ( "foo" , SortDirection . ASCENDING , SortDirection . DESCENDING ) )
assertEquals ( Integer . valueOf ( 7 ) , transform . evaluate ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "colorTest03.pdf" , sourceFolder + "cmp_colorTest03.pdf" , destinationFolder , "diff_" ) )
assertEquals ( "av0c" , nodeToStringTransformer . transform ( ) )
Assert . assertEquals ( DefaultJobPriorityProvider . DEFAULT_PRIORITY_ON_RESOLUTION_FAILURE , job . getPriority ( ) )
assertEquals ( longKeyAlt , password . getPassword ( ) )
assertThat ( parser . parsePath ( tokens ( identifier ) , typeSystem ) , is ( identifier ) )
assertVideos ( videos )
Assert . assertTrue ( exclusion1 . hashCode ( ) == exclusion2 . hashCode ( ) )
assertThat ( int_gt_1 , description ( "is greater than <1>" ) )
assertEquals ( expected , emptyGraph . getSuccessors ( ) )
assertRequest ( "POST" , "Call/%s/Speak/" , callId )
assertEquals ( expected , actualQuery )
assertEquals ( DecodeQualification . UNABLE , readerPlugIn . getDecodeQualificationFromXfduManifestOnly ( path ) )
assertEquals ( "V1 Title" , wrapper . getTitle ( ) )
assertTrue ( cvs . size ( ) > 0 )
assertSame ( "Auditor re-election is not happened for auditor failure!" , newAuditor1 , newAuditor2 )
assertThat ( actual . size ( ) , is ( equalTo ( 0 ) ) )
assertEquals ( argumentCaptor . getValue ( ) . getExposedPorts ( ) , expectedExposedPorts )
assertEquals ( - 1 , getStdOut ( ) . indexOf ( "Caused by:" ) )
Assert . assertEquals ( assinatura , eventoManifestacaoDestinatario . getAssinatura ( ) )
assertEquals ( service1 , service2 )
TestUtil . assertSuccess ( result )
assertThat ( result , is ( "LowerNwNodeId" ) )
assertEquals ( expected , actual )
assertEqualsIgnoreWhitespace ( expected , real )
assertNotNull ( result )
assertThat ( event . getExtra ( ) . get ( key ) , equalTo ( expectedValue ) )
Assert . assertEquals ( "Double decode brackets not correct" , out , WebUtilities . decodeBrackets ( in ) )
assertEquals ( "Hello world!" , engine . compileMustache ( "custom_source_processor" , "{{#foo}}world{{/foo}}" ) . render ( ImmutableMap . of ( "templateName" , "template" , "{{foo}}" ) ) )
assertNotNull ( Session . reader ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertTrue ( "query: " + q [ 2 ] + ", expected " + q [ 1 ] + " but got " + q [ 0 ] , evaluate ( q [ 0 ] ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_copyLargeFile.pdf" , destinationFolder , "diff_" ) )
assertEquals ( 0 , result . size ( ) )
assertTrue ( mapCell . isAtSameLocationAs ( other ) )
assertEquals ( c1 , c2 )
assertThat ( returnedMode . getData ( ) , is ( instanceOf ( SpecificData . class ) ) )
assertEquals ( "value $$value" , sub . replace ( org ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertTrue ( page . getSuccessMessages ( ) . isEmpty ( ) )
assertTrue ( dest . getServerPolicy ( ) != null )
assertEquals ( "1" , r )
assertEquals ( Hex . toHexString ( hash % 2147483648 ) , Hex . toHexString ( s ) )
assertEquals ( Collections . singletonList ( 9L ) , result )
assertEquals ( change . getChangeData ( ) , data )
assertEquals ( expected , errorLogger . getErrorList ( ) )
assertThat ( c . toString ( ) , is ( "myString >= aaa" ) )
assertTrue ( worker . getTimeForQueryMs ( "select * {?s ?p ?o}" , "1" ) [ 0 ] > 0 )
assertEquals ( 1 , d . getValue ( ) )
assertEquals ( Node . UNDEF , n )
assertEquals ( 1 , value . value )
assertThat ( resultFilters . get ( "publisherId1" ) , is ( nullValue ( ) ) )
assertSizes ( validator , double [ ] . class )
assertIsomorphic ( validExpected , parsed )
assertThat ( actual , is ( equalTo ( n ) ) )
assertEquals ( 1 , stat . getDev ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Rejecting direct call to synthetic constructor." ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertFalse ( lhs . equals ( rhs ) )
assertSame ( expectedResp , FutureUtils . result ( rrStore . getNamespace ( expectedReq ) ) )
assertThat ( result , is ( true ) )
assertEquals ( "om 3 氓r" , t . format ( new Date ( 2629743830L * 12L * 3L ) ) )
assertEquals ( Collections . singleton ( 1 ) , myTestInstance . groupByAsync ( builder ) . get ( ) . toList ( ) )
Assert . assertEquals ( Character . valueOf ( 'F' ) , node . getIncomingEdgeFirstCharacter ( ) )
assertOut ( "visible=\\"false\\"" )
assertEquals ( superClass . hashCode ( ) ^ Objects . hashCode ( value ) , doublePrecisionFloat . hashCode ( ) )
assertEquals ( 60 , results . iterator ( ) . next ( ) . getValue ( ) . intValue ( ) )
assertThat ( storedProcResultAsString , equalTo ( "a is my temp value\\"" ) )
assertEquals ( getExpectedItemSize ( allStrings ) , DynamoDBUtil . getItemSizeBytes ( item ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
Assert . assertEquals ( result , aggregator . getResult ( 0 ) )
assertEquals ( "4>5 6" , AviatorEvaluator . execute ( "4>5 \\r\\n 6" ) )
assertMockEndpointsSatisfied ( )
assertEquals ( TagUtils . getTaggedCommit ( "source_tag" , repo ) , BranchUtils . getHeadCommit ( "test_branch" , repo ) )
assertNotNull ( "PlacementChangeRequest is null" , entity )
assertEquals ( date , avg )
assertEquals ( null , ent . getName ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 1 , listener . updatedInjectedFilters . size ( ) )
assertEquals ( "/my/path/to/file.txt" , FileUtils . readFileToString ( gfs . getPath ( "/my/path/to/file.txt" ) ) )
Assert . fail ( "HelixException should have been thrown" )
assertTrue ( instance . getInterfaceCount ( ) == 0 )
assertNotNull ( result )
assertNull ( "Should not find user" , MCRUserManager . getUser ( this . user . getUserName ( ) , this . user . getRealm ( ) ) )
assertFalse ( kieModule instanceof CanonicalKieModule )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
Assert . assertEquals ( expResult , result )
Assert . assertTrue ( foundSetting )
assertNotNull ( mch . getMondrianXmlDocument ( new StringBufferInputStream ( xml ) ) )
Assert . assertNotNull ( response )
assertThat ( referenceSet . getReferencingAxioms ( ) , hasItem ( entity ) )
assertTrue ( connectFuture . isConnected ( ) )
mockEndpoint . assertIsSatisfied ( )
assertEquals ( "Lisa and Six" , firstLoyaltyAbilityRulesText )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "No test case was supposed to be created" , 1 , foundTestCases . size ( ) )
assertEquals ( mav . getViewName ( ) , "redirect:/outbox" )
Assert . assertFalse ( context . getResult ( ) )
assertArrayEquals ( result , ByteArray . getAllBytes ( aggregator ) )
assertNotNull ( Country . reader ( ) . read ( ) )
assertEquals ( "uuml 眉" , p . getNameFirstRep ( ) . getFamilyFirstRep ( ) . getValue ( ) )
assertEquals ( expected , result )
Assert . assertEquals ( "AroundConstructPostConstruct" , bean . getMessage ( ) )
assertEquals ( "Invalid result" , false , result )
assertEquals ( "<div><b>foo</b></div>" , unrender . getBody ( ) . toString ( ) )
assertEquals ( one , result )
assertEquals ( "ab" , sb . toString ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertNotNull ( addressResultsDto )
paths . assertHasDigest ( INFO , actual , digest , expected )
assertArrayEquals ( " { 'BSON': ['awesome', 5.05, 1986] } not the expected bytes." , arrayDocument , out . toByteArray ( ) )
assertCurrentTestFileName ( currentHtmlFileName )
assertEquals ( 1 , buffer . get ( ) )
assertThat ( ages , everyItem ( greaterThan ( 18 ) ) )
assertLastEventIsType ( XAxesExtremesEvent . class )
assertTrue ( onto . containsAxiom ( factory . getOWLDatatypeDefinitionAxiom ( factory . getOWLDatatype ( IRI . create ( tns , "Decimal" ) ) , OWL2Datatype . XSD_DOUBLE ) ) )
assertThat ( manager . registerVoter ( "foo" ) , is ( 123L ) )
this . assertServiceInstanceGetRequest ( serviceInstance , false , "failed" )
assertFalse ( post . getTopic ( ) . getSubscribers ( ) . contains ( user ) )
Assert . assertEquals ( 10.0 , a . diagonalProduct ( ) , Matrices . EPS )
assertEquals ( 1 , countValue )
assertTrue ( closed . await ( 2 , SECONDS ) )
Assert . fail ( "should have thrown SQLFeatureNotSupportedException" )
assertOut ( "var /** @type {*} */ a = ((a + b) - (c + d)) * e" )
assertThat ( p , is ( nullValue ( ) ) )
assertEquals ( "onetwo" , sb . toString ( ) )
assertNotNull ( testee )
assertEquals ( 1 , list . head ( ) . get ( ) )
assertEquals ( expResult , result )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( itemExportacaoIndireta , detalheExportacao . getExportacaoIndireta ( ) )
assertTrue ( Double . valueOf ( f ) . equals ( output . get ( ) ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
Assert . assertTrue ( result . equals ( "11 minutoj" ) )
assertTrue ( hasNoise )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertThat ( actualExceptionCode , is ( "bus001" ) )
assertThat ( result ( ) , not ( containsString ( "\\"comments\\"" ) ) )
Assert . assertTrue ( false )
assertEquals ( 8 , someNotSoRandomAsciiAsList . size ( ) )
assertTrue ( stack . getDurability ( ) == potion . toDamageValue ( ) )
Assert . assertEquals ( Arrays . asList ( record5 , record4 , record3 , record2 , record1 ) , listToSort )
assertNotNull ( monitorConfig . getIni ( ) )
assertNotNull ( result )
Assert . fail ( "Was able to set properties when referencing sensitive parameter from within EL" )
assertTrue ( isKey )
assertThat ( s1 , containsString ( str ) )
assertTrue ( Assertions . isEnabled ( ) )
assertEquals ( 2 , membersFiltered . getMembers ( ) . size ( ) )
assertEquals ( "someStringstringAsObject" , deserializedMessage . getString ( ) )
assertEquals ( RESULT , result )
assertions . isNotEqualTo ( actual )
assertTrue ( lines . stream ( ) . anyMatch ( l -> l . contains ( "SF: Hello World!" ) ) )
assertEquals ( expected , result )
assertEquals ( 100. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertTrue ( detector . evaluate ( "" , 10 , 6 ) )
assertThat ( parse ( contents ) , contains ( map ( "value" , "1.0" ) ) )
assertEquals ( r1 , r2 )
assertEquals ( expectedResult , result )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( new ParseResult ( new Doc ( "ParserTest" , Pkg . _Pkg ( list ( _JavaEOLComment ( "//a start comment" ) , _JavaEOLComment ( "//a start comment" ) ) , "hello.world" ) , list ( Imprt . _
assertEquals ( ko1 , ko2 )
assertEquals ( indexRollover1 , indexRollover2 )
assertNull ( "The result should be null." , config )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , allOf ( hasEnvVar ( "item1" , "value1" ) , hasEnvVar ( "item2" , "value2" ) ) )
assertEquals ( 591 , orbitFiles . length )
assertEquals ( "MARMADUKE" , name )
Assert . assertTrue ( match )
Assert . assertTrue ( "this should be a directory" , isDirectory )
Assert . assertNotNull ( savedBook . getBookId ( ) )
Assert . assertEquals ( 0 , errors . size ( ) )
assertArrayEquals ( expected , dest . get ( ) . toByteArray ( ) )
Assert . assertEquals ( value + 1 , nextValue )
assertNull ( "Analyzer must be null" , mapper . analyzer )
Assert . fail ( "RuntimeException should be thrown!" )
assertNotNull ( reporter )
assertThat ( decorator , is ( notNullValue ( ) ) )
assertEquals ( "test email" , reply )
Assert . assertNotNull ( result )
assertNotNull ( proveedorFacturas . getId ( ) )
Assert . assertEquals ( 4 , f15 . getPartialDerivative ( 1 ) , EPS )
assertSame ( tokenCell ( 0 ) , sync . getPair ( ( TextTokenCell ) tokenCell ( 0 ) ) )
assertEquals ( keyExpected , keyBuilt )
assertEquals ( expect , strategy . write ( new FunctionData6 ( ) ) )
assertEquals ( expectedKeys , actualKeys )
assertFalse ( "syntaxChecker OID should no longer be present" , schemaManager . getLdapSyntaxRegistry ( ) . contains ( OID ) )
assertParser ( twig )
Assert . assertTrue ( diff . toString ( ) , diff . identical ( ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"newCategory\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category
assertEquals ( expResult , result )
assertThat ( del . getDeadline ( ) , is ( nullValue ( ) ) )
assertTrue ( task . poll ( ) . size ( ) == 0 )
assertNull ( "was supposed to pass" , status )
assertNull ( GeodeticDatum . ANCHOR_POINT_KEY , properties . put ( GeodeticDatum . ANCHOR_POINT_KEY , "Origin Z" ) )
assertEquals ( 1 , result . size ( ) )
Assert . assertEquals ( "didn't get expected file length" , fileLength , length )
assertThat ( builder , hasToString ( "<a href=\\"https://flattr.com/thing/123546/a-demo-thing\\">" + "<img src=\\"http://api.flattr.com/thing/123546/a-demo-thing\\"/>" )
assertThat ( allowed , equalTo ( true ) )
assertTrue ( listEditor . getList ( ) . isEmpty ( ) )
assertThat ( DatastoreUtil . referenceToKey ( reference ) , is ( key ) )
Assert . assertEquals ( dbLoadBalancers . size ( ) , dbLoadBalancers1 . size ( ) )
Assert . assertEquals ( 2 , detailC . size ( ) )
Assert . assertEquals ( "8999" , cnx . getAttribute ( "attr" ) )
assertEquals ( - 1 , idx )
assertTrue ( fetchIterationLimit > 0 )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( short [ ] . class ) )
assertThat ( condition . isSatisfied ( ) , is ( true ) )
assertArrayEquals ( new String [ ] { "MODS_IN_STUDY" } , matches ( query , Tag . SeriesName ) )
assertResultSet ( res )
assertThat ( underTest . extract ( request ) , is ( nullValue ( ) ) )
assertThat ( cb . getForwardCallback ( ) , sameInstance ( mockResults ) )
Assert . assertEquals ( true , a . compareTo ( b ) < 0 )
Assert . assertEquals ( "somethingmock" , ret . getValue ( ) )
assertOut ( "var /** @type {Object} */ a = Object(\\"1\\")" )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
Assert . fail ( e . getMessage ( ) )
assertEquals ( 2 , sink . getOutputs ( ) . size ( ) )
assertResultsEqual ( results , 42.0 )
assertTrue ( true )
assertEquals ( "mickey@disney.com" , descriptor . getDefaultRecipients ( ) . getValueAttribute ( ) )
assertFalse ( recordResultSet . next ( ) )
Assert . assertEquals ( clone . getForwardServers ( ) , 2 )
assertEquals ( "fileName-" + TIMESTAMP + ".js" , result )
assertEquals ( 0 , trace . allProperties ( ) . size ( ) )
assertEquals ( STATUS_BAD_REQUEST , updated . getStatus ( ) )
Assert . assertEquals ( i , InetAddress . getByName ( "10.0.1.2" ) )
assertEquals ( "true" , result )
assertFeatureValues ( expected , testQuery , testText , new UnigramFeatureExtractor ( ) )
assertArrayEquals ( result , new byte [ ] { 0x0 , 0x1 } )
assertNotSame ( "background must not be the same" , viewportColor , table . getBackground ( ) )
Assert . assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location * (nt_number 123)) (nt_offset - (nt_number 4)))" , loc . toStringTree ( parser ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "3" , "
assertThat ( f . format ( PlainDate . of ( 2017 , 10 , 1 ) ) , is ( "Sunday, October 1, 2560 BE" ) )
assertEquals ( 0 , dureation )
assertTrue ( content . contains ( "Category:�板��" ) )
assertThat ( subject . getUri ( "aut-num" ) , ciString ( "AS3546" ) )
Assert . assertEquals ( HISTORY_ID , historyProxy . getHistoryId ( ) )
assertThat ( router . allRoutes ( ) , hasItem )
assertEquals ( expected , result )
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Rooms('3')\\"," + "\\"uri\\":\\"" + getEndpoint ( ) + "Rooms('3')\\",\\"type\\":\\"RefScenario.
assertEquals ( 2 , tasks . size ( ) )
assertDocContent ( doc )
assertFalse ( empty . isGeneKnown ( "unknown" ) )
assertEquals ( NetPlan . getAttributeValues ( n1 , "att" ) , Arrays . asList ( "1" , "2" ) )
assertEquals ( expectedTag , true )
Assert . assertEquals ( HttpURLConnection . HTTP_FORBIDDEN , conn . getResponseCode ( ) )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
assertEquals ( first , builder . getValue ( ) )
assertNull ( userArg . getValue ( ) )
assertEquals ( globals . size ( ) , tree . getModelObject ( ) . getChildCount ( tree . getModelObject ( ) . getRoot ( ) ) )
assertEquals ( "aTestString" , classUnderTest . getClientName ( ) )
Assert . assertEquals ( "curl -X GET -L 'https://eatstreet.com/api/v2/CitiesByState.json?test-cookie=test-value&test-cookie3=test-value4' 'https://eatstreet.com/api/
assertThat ( parse ( contents ) , contains ( map ( "a" , BigDecimal . valueOf ( 12 ) ) ) )
assertEquals ( timeFrameEditor . isFirstMonthAvailable ( ) , true )
assertColumnFamilyResource ( resource , false )
assertThat ( result . isEmpty ( ) , is ( true ) )
assertEquals ( String . format ( p , r . getMillis ( ) ) , cf . format ( r ) )
assertThat ( formatMsg ( jmc , OBJ_MSG ) , is ( OBJ_MSG ) )
assertEquals ( actual , expected )
assertEquals ( HttpStatusCode . CREATED_201 , response . getStatus ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertOut ( "var /** @type {*} */ a = undefined" )
Assert . assertEquals ( 5 , es . size ( ) )
TestUtils . assertBuildSuccess ( build )
assertNull ( user )
assertNull ( properties . get ( KEY_1 ) )
assertEquals ( originalText , scriptPanel . getText ( ) )
assertEquals ( 1 , ( int ) ( manager2 . logicalNodeWatches . size ( ) - 1 ) )
assertEquals ( personList . length , 2 )
assertMockEndpointsSatisfied ( )
assertEquals ( 0 , database . getNumberOfEmployees ( ) )
assertNotNull ( namespace )
Assert . fail ( "IllegalArgumentException should occur but didn't!" )
assertTrue ( rooted == false )
assertEquals ( "SQL to select from for update" , "SELECT FROM " + tableName ( TEST_TABLE ) , testDialect . convertStatementToSQL ( stmt ) )
assertArrayEquals ( binaryData , asciiData , 0.001f )
assertEquals ( child , instance . getChild ( ) )
assertEquals ( Flavour . SALTY . name ( ) , helper . getStringValue ( "flavour" ) )
assertResponse ( outputStream , expected )
assertOut ( "this[\\"knownMember\\"]" )
assertMockEndpointsSatisfied ( )
assertThat ( requests , is ( 1 ) )
assertEquals ( "Positive selection iteration result" , "[a, b, c, d, e, f]" , IterableUtil . shallowCopy ( selection ) . toString ( ) )
assertEquals ( 80. , stateManager . getActivityState ( route . getActivities ( ) . get ( 1 ) , vehicle , InternalStates . LATEST_OPERATION_START_TIME , Double . class ) , 0.01 )
assertEquals ( "Incorrect number of roles" , 0 , roles . size ( ) )
assertThat ( c . toString ( ) , is ( "myString = aaa" ) )
assertSame ( expectedT , t )
assertEquals ( plugins . size ( ) , runningInForumPlugins . size ( ) )
assertOptionsSetViaConfigurator ( )
Assert . assertEquals ( createArrayNode ( 1 , 2 , 3 ) , result )
assertEquals ( "Conversion did not match" , value , to )
Assert . assertEquals ( 0 , fileredInvokers . size ( ) )
this . assertAnalyzesTo ( _a , "true" , new String [ ] { "foo" , "bar" } , new String [ ] { TypeAttribute . DEFAULT_TYPE , "boolean" } )
assertEquals ( result , "10:15 AM" )
assertEquals ( value , evaluated )
assertException ( "FEEL-01015" , "''" , "< ''" , "'camunda'" , "< 'camunda'" , "false" , "< true" , "'12'" , "< '12'" , "\\"12\\"" , "< \\"12\\"" )
assertAllExchangesAreCompleted ( config , client . getExchangeStore ( ) , time )
Assert . areEqual ( true , countA < 10 && countB < 10 , "countA值" )
assertEquals ( "failed to generate class with JSNI method" , CLASS_WITH_JSNI_METHOD , cls )
assertEquals ( asList ( warn ( mdcValues , marker , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "2017-01-19 05:05:59" , spec . interpret ( "1484802359" ) )
assertNotNull ( render . getRuleRenderOptions ( ) )
assertEquals ( expected , actual )
assertEquals ( 1 , acquiredTriggers . size ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( expected , result )
assertEquals ( now , target . getCreatedOn ( ) )
assertNull ( binningFormModel . getRegion ( ) )
Assert . assertEquals ( position , lastPosition )
assertEquals ( "bug" , bout . toString ( ) . trim ( ) )
assertUrl ( url , null , "localhost" , 80 , "/" )
assertEquals ( "locationUpdate" , subscriptionRequest . getValue ( ) . getSubscriptionName ( ) )
assertThat ( result , is ( Arrays . copyOfRange ( data , 1 , 3 ) ) )
Assert . assertTrue ( bd . compareTo ( exp ) == 0 )
assertEquals ( "Nice" , person . getName ( ) . getFamilyName ( ) )
assertEquals ( "sort field condition serialization is wrong" , expected , actual )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( NOT_FOUND . getStatusCode ( ) , response . getStatusCode ( ) )
assertStreamOpenedExactlyOnce ( )
assertEquals ( 400 , fail )
assertTrue ( "This" . equals ( form . firstName . getValue ( ) ) )
Assert . assertTrue ( spill > out )
assertFalse ( outputGraphExecutor . equals ( nullOutput ) )
Assert . assertTrue ( httpAcceptor . emptyBindings ( ) )
Assert . assertEquals ( 1 , result )
assertThat ( codes , containsInAnyOrder ( "50015-7" ) )
assertEquals ( "Mismatched message at line #" + i , message , line )
assertTrue ( isElementPresent ( By . className ( "v-tree-item-click" ) ) )
assertEquals ( expResult , result )
assertNotEquals ( "primeNumber" , cfg . primeNumber ( ) )
assertTrue ( requestContext . isSecure ( ) )
assertEquals ( field . getXrefLabelNames ( ) , Arrays . asList ( "xrefEntity.3" ) )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
Assert . assertEquals ( EmptyNode . Empty ( ) , compoundWrite . apply ( EmptyNode . Empty ( ) ) )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
Assert . assertEquals ( 18 , result . intValue ( ) )
Assert . assertFalse ( agent . needsModel ( ) )
assertTrue ( enumValuesSet . isEmpty ( ) )
Assert . assertNotNull ( zoo )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { assetDocument , "jexlexpression" , "*" , repoToContainedGroupMap } , null ) , is ( false ) )
Assert . assertEquals ( 0L , n )
assertTrue ( subject . isGUID ( "12345678-1234-1234-1234-123456789ABC" ) )
assertThat ( contributors . size ( ) , is ( 1 ) )
assertEquals ( expecting , result )
assertEquals ( "<foo\\n" + "  'completed'->kill\\n" + "  '*'->custard\\n" + "  || bar>" , ctn . toDSL ( ) )
assertTrue ( s . startsWith ( "str in com.querydsl.core.DefaultQueryMetadata@c" ) )
assertEquals ( view , compassDropController . getDropTarget ( ) )
assertEquals ( 1 , filterA . filter ( aciContext , OperationScope . ENTRY , null ) . size ( ) )
assertTrue ( references . isEmpty ( ) )
assertEquals ( 0 , g . size ( ) )
assertOut ( "a *= b" )
assertEquals ( "(int a 3)\\n" , found )
assertThat ( g1 . hydrogenCount ( i ) == g2 . hydrogenCount ( i ) , is ( true ) )
Assert . assertThat ( returnedItem . getItemName ( ) , is ( item . getItemName ( ) ) )
JSONAssert . assertEquals ( "[{\\"id\\":1,\\"name\\":\\"Arcade Fire\\"}]" , data . toString ( ) , false )
assertThat ( entities . getTotalElements ( ) , equalTo ( 1L ) )
Assert . assertEquals ( 0 , results . size ( ) )
assertTrue ( deleteSecurityGroupIPSetsResponse . getRet_code ( ) == 0 )
assertThat ( result , is ( Arrays . asList ( "path/to/output.json" ) ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
Assert . assertTrue ( ! dict . contains ( entry2 ) )
assertNotNull ( services )
assertEquals ( 10 , routeState . get ( 0 ) )
assertNull ( dsc . getPanel ( ) )
assertThatThrownBy ( ( ) -> queryService . processRequest ( request ) )
Assert . assertEquals ( user , cache . get ( id ) )
assertEquals ( 1 , ksession . getObjects ( ) . size ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertTrue ( aNumber == result )
Assert . assertEquals ( "John,Doe" , result . trim ( ) )
assertEquals ( 5 , hg19 . size ( ) )
assertEquals ( l1 , l2 )
assertEquals ( row . isPresent ( ) , false )
assertNull ( topicService . getDraft ( currentUser ) )
assertEquals ( "Removal failed" , 0 , newPerms & Perms . CREATE )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "test" , echo . echo ( "test" ) )
Assert . assertEquals ( 2 , p . h ( 2 , 4 ) )
Assert . assertEquals ( BatchStatus . FAILED , exec . getBatchStatus ( ) )
assertThat ( digest , is ( sameInstance ( MessageDigest . MD5 ) ) )
Asserts . check ( targetHosts . size ( ) > 0 , "fail" )
assertEquals ( 2 , trends . size ( ) )
assertEquals ( "A1 text" , sheetController . getCellContent ( "A1" ) )
assertEquals ( request . getRemoteHost ( ) , result )
assertEquals ( "d189225fbecb12296349d548fef503bc095fbc827dfd442706e48b8965eea482" , block . getHashAsString ( ) )
assertThat ( emptySession . getEnd ( ) , equalTo ( date ) )
assertThat ( convertedSalt , is ( BaseEncoding . base16 ( ) . encode ( bytes ) ) )
assertEquals ( "toString is wrong" , expected , actual )
Assert . assertEquals ( result1 . size ( ) + 1 , result2 . size ( ) )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertEquals ( "test-value" , clientWrapper . get ( "key1" ) )
Assert . assertTrue ( result )
assertNull ( getParameterRepositoryService ( ) . getParameterValueAsBoolean ( key ) )
assertEquals ( "Hibernate Master Class" , _post . getTitle ( ) )
assertStyleEquals ( ".xyz {}" , styleSheet )
assertEquals ( 4 , dummyResult . getResultList ( ) . size ( ) )
assertDepth ( "addComplex" , callTree , expectResult )
assertEquals ( 1 , capturedEvent . getValue ( ) . getFirstIndex ( ) )
Assert . assertEquals ( "highlighted" , highDriver . highlight ( b ) )
Assert . fail ( "InvalidFormatException must be thrown" )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
lowLevelElasticSearchOperations . assertThatConnectionToElasticsearchIsPossible ( anyString ( ) , anyInt ( ) )
assertThat ( localName , is ( "thename" ) )
assertEquals ( DecodeQualification . SUITABLE , readerPlugIn . getDecodeQualification ( headerFile ) )
assertOut ( "a.setTime(10)" )
assertTrue ( true )
assertEquals ( Integer . valueOf ( 1 ) , myTestInstance . insertAsync ( doc ) . get ( ) )
assertEquals ( new BigDecimal ( "11" ) , lambda . apply ( BigDecimal . ONE ) )
Assert . assertTrue ( new File ( jar ) . exists ( ) )
assertStat ( result )
assertGridBodyCellEditContext ( editContextArgumentCaptor . getValue ( ) , 0 , 1 , ROW_HEIGHT * 2 , col2 . getWidth ( ) , GRID_ABSOLUTE_Y + HEADER_HEIGHT , GRID_ABSOLUTE_X + col1 . getWidth ( ) , GR
assertScoreAndParse ( content , null , 1 )
Assert . assertEquals ( "[1, 2, 3, 4, 6, 7, 5]" , result . toString ( ) )
Assert . assertTrue ( isEqual ( distance , 0 ) )
assertValidLicenseKeyFormat ( licenseKey )
assertThat ( fileConfig . getConfigProperties ( ) , contains ( configProperty ( INSERT_FINAL_LINE , false ) ) )
assertThat ( upstreamPipelinesForBuild1 . keySet ( ) , Matchers . containsInAnyOrder ( "my-downstream-pipeline-1" ) )
assertEquals ( "hello world" , lclp . rawCommands ( cmds ) . get ( 0 ) . toString ( ) )
assertNotNull ( "Resource not found" , in )
Assert . assertEquals ( 1 , reports . size ( ) )
assertMigratedTo ( processInstance , targetDefinition )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Message action=\\"https://example.com\\" from=\\"from\\" method=\\"GET\\" statusCallback=\\"https://example.com\\" to=\\"to\\" method=
Assert . assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertEquals ( ImmutableList . of ( 1 , 2 , 3 ) , ImmutableList . copyOf ( evaluate ( "${iter}" , Iterable . class ) ) )
arrays . assertStartsWith ( description , actual , null )
assertEquals ( "Wrong constructed key" , "key..test.more.tests" , key . toString ( ) )
assertEquals ( entry1 . getParticipantId ( ) , foundEntry . getParticipantId ( ) )
assertThat ( testOutcome . getPendingCount ( ) , is ( 1 ) )
assertThat ( ebs1 , not ( equalTo ( ebs2 ) ) )
assertSame ( "wrapping renderer must use list's default on null" , renderer . getDelegateRenderer ( ) , list . getWrappedCellRenderer ( ) )
assertTrue ( c . getMethod ( "registerAlertFiredEvent" ) . invoke ( null , event ) )
assertEquals ( bestStats . getFinalScore ( ) , 0.5 )
assertEquals ( Arrays . asList ( "phase1_1" , "phase2_2" ) , events )
assertFalse ( payload . needsBuild ( getProject ( ) ) )
assertThat ( result , isFailedCommand ( ) )
assertTrue ( result . get ( ) . equals ( "http://www.google.com" ) )
assertEquals ( "2015-10-05" , mo . getDateWrittenElement ( ) . getValueAsString ( ) )
assertThat ( document , is ( nullValue ( ) ) )
assertTrue ( s . stopCalled )
assertEquals ( "getSongs" , Names . resourceMethodName ( resource , method ) )
assertTrue ( or . isDefined ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , slices , rows , columns ) + ", rmse = " + rmse , 0.0 , rmse , EPSF )
assertTrue ( "Enlish alphabet not correctly reverse sorted" , result )
assertFalse ( JodaBeanSer . COMPACT . smartReader ( ) . isKnownFormat ( bytes ) )
assertHeader ( header , name , value )
assertThat ( config . getBasePackages ( ) . isEmpty ( ) , is ( true ) )
assertThat ( r . reduce ( Arrays . asList ( 1.0 ) ) , equalTo ( 1.0 ) )
assertTrue ( descriptor . isBeanConstrained ( ) )
assertThat ( objectMapper . writeValueAsString ( dto ) , equalTo ( "{\\"twoWords\\":\\"value\\"}" ) )
assertEquals ( fileId , mFileSystemMaster . getFileInfo ( NESTED_FILE_URI , GET_STATUS_CONTEXT ) . getFileId ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( new BigInteger ( "2" ) , bookCount )
assertEquals ( expectedSqlForMathOperations7 ( ) , result )
assertEntityHasValue ( key , value )
assertEquals ( 204 , WebClient . client ( proxy ) . getResponse ( ) . getStatus ( ) )
assertEquals ( count , 1 )
assertEquals ( "Wrong number of inactive roles" , 0 , incompleteActivationRule . getDesiredRoles ( ) . size ( ) )
assertThat ( builder . toSettings ( ) . isAllowRespondByVRK ( ) , is ( true ) )
assertSame ( "Edit type was not correct" , EditType . NONE , element . getEditType ( ) )
assertEquals ( "../subFolder1/fileName1" , relPath )
assertEquals ( obj . getLastSale ( ) , "AAPL" )
assertRequest ( "POST" , "Conference/%s/Member/%s/Speak/" , confId , memberId )
assertEquals ( "Chuck Norris" , victim . readLiteralString ( ) )
assertEquals ( 200 , containerResponse . getStatus ( ) )
assertEquals ( res , - 1 )
assertMessage ( "<type>REASSIGNED</type>" , 4 )
assertions . isEqualTo ( ( short ) 2 )
assertThat ( functions . getFunctions ( ) . values ( ) , hasSize ( 10 ) )
assertEquals ( expectedRestriction , restriction )
assertEquals ( "inet mapper serialization is wrong" , expected , actual )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertFalse ( hasIndexRangeKeyCondition )
assertEquals ( GOOD_IP , credentials . getIp ( ) )
assertEquals ( "message with 2 cookies and milk" , logRecord . getMessage ( ) )
assertTrue ( crsStore . getVersion ( ) . isNTV2 ( ) )
assertThat ( json , equalTo ( expectedJson ) )
assertEquals ( "Wrong value" , "success" , configuration . getString ( "test.outcome" ) )
Assert . assertEquals ( Permission . YES , providerPermission )
assertEquals ( cal . getTime ( ) , d . getEnd ( ) )
assertEquals ( "/a/b/c" , path . toString ( ) )
assertEquals ( value , things . getResponse ( ) . getEntity ( ) . getProp ( "testprop" ) )
assertObjectEquals ( "[{f1:'x1'}]" , p . run ( bs , in , sa ) )
assertTrue ( ex . isPrime ( 19 ) )
assertTrue ( resultFromJPQL . size ( ) == 1 )
assertEquals ( allocator . wrap ( ByteBuffer . wrap ( expect ) ) , out )
assertEquals ( "URI is not built correctly" , "http://bar/" , newUri . toString ( ) )
assertThat ( result , is ( jsonBoolean ( false ) ) )
assertEquals ( expected , result )
assertEquals ( "format does not match" , StringDateTimeModel . DATETIME_FORMAT_CONFIG , config . getFormat ( ) )
Assert . assertTrue ( state [ i ] == expected )
assertThat ( target . matchExactly ( ( FlowAction ) action ) , is ( true ) )
assertEquals ( "UVWXY" , targetId . textValue ( ) )
assertEquals ( m1 , m2 )
Assert . assertTrue ( isEqual ( distance , 0 ) )
Assert . assertFalse ( "SearchByTags returned no results" , jsonList . isEmpty ( ) )
Assert . assertEquals ( 1L , vm . getStack ( ) . pop ( ) )
assertThat ( token . getType ( ) , is ( PCRELexer . POSIXNegatedNamedSet ) )
assertEquals ( TestModel . class , model . getModelClass ( ) )
assertFalse ( OpenmrsUtil . isInNormalNumericRange ( 5.64f , concept ) )
assertEquals ( result . toString ( ) , "-18446744073709551616" )
assertEquals ( p1 , p2 )
assertEquals ( expResult , result , 0.01F )
assertTrue ( authorizer . isAuthorized ( MockWebContext . create ( ) , profiles ) )
assertNotEquals ( 0 , tokenLists . size ( ) )
assertThat ( t . getTitle ( ) , notNullValue ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Empty collection must return no items" , 0 , selection . size ( ) )
assertTrue ( "p2 is assigned to g1 and g1 assigned to r2" , roleService . principalHasRole ( "p2" , roleIds , Collections . < String , String > emptyMap ( ) ) )
assertEquals ( "dubbo://127.0.0.1:20887" , result )
Assert . assertEquals ( RheemCollections . asSet ( - 1 + expectedOffset , 1 + expectedOffset , 5 + expectedOffset ) , RheemCollections . asSet ( result ) )
assertTrue ( TestService . LIFECYCLE . contains ( "serverStatusChange" ) )
assertTrue ( instance . runCommand ( ) )
assertEquals ( rootNode . getPermissionList ( ) . size ( ) , 1 )
assertThat ( index . count ( PropertyType . ROOT ) , is ( 3L ) )
assertEquals ( "XML Equals" , jdkXml , javolutionXml )
Assert . assertEquals ( 2 , tables . size ( ) )
assertEquals ( "http://home.dir.com" , client . getBasePath ( ) )
assertEquals ( 208 , stopTimes . size ( ) )
assertEquals ( 0 , peopleIds . size ( ) )
Assert . assertEquals ( 100 , count )
assertEquals ( 1 , new ArrayList < > ( results . values ( ) ) . get ( 0 ) . getWidgetUsages ( results . values ( ) ) . size ( ) )
assertTrue ( aNumber == - 1.54728E26f )
assertUpdate ( result , 1 )
assertNotNull ( response )
assertAllTargetsCount ( 0 )
assertTrue ( attributes . isNew ( ) )
Assert . assertTrue ( gid > 0 )
assertThat ( I18nUtil . marktr ( TEST_STRING ) , is ( TEST_STRING ) )
assertEquals ( "Does not compare " + nv5 + " & " + nv7 , NodeValue . CMP_LESS , NodeValue . compare ( nv5 , nv7 ) )
Assert . assertEquals ( '\\'' , decChar )
Assert . assertEquals ( ANY , desc . getImplementation ( ) )
assertAllCodesOfSubChainSelector ( subChainSelector , "[a1, a2]" , "[a1, a2, a3]" , "[a2, a3, a4]" , "[a3, a4]" , "[b1, b2]" , "[b2,
assertArrayEquals ( userAddCL1 . toString ( ) , userAddCL2 . toString ( ) )
assertEquals ( uberfireDocksContainer , docksBars . getDocks ( ) )
assertEquals ( 0. , violation , 0.01 )
assertEquals ( "" , "one" , elr . getMessage ( ) . toString ( ) )
assertTrue ( m . isIsomorphicWith ( m2 ) )
Assert . assertNotNull ( "did not get checksum" , actual )
assertThat ( gson . fromJson ( gson . toJson ( ldt ) , LocalDateTime . class ) , is ( ldt ) )
assertEquals ( expResult , result )
assertTrue ( userCanBuildProject )
assertEqualDoubleArrays ( pydiv , div , epsilon )
Assert . fail ( "should have thrown an exception" )
assertEquals ( oc . collection , oc2 . collection )
Assert . assertEquals ( "abcTest" , result )
Assert . assertSame ( o , p . getExpectedValue ( ) )
assertEquals ( "text/plain" , response . readEntity ( String . class ) )
assertTrue ( b )
Assert . assertTrue ( "Modification button should be present" , driver . findElement ( By . xpath ( "//*[@data-id='ModificationGroup']" ) ) . isDisplayed ( ) )
assertEquals ( "fre_01-01-13.xliff" , res )
context . assertEquals ( Collections . singletonList ( "ba" ) , candidates )
Assert . assertEquals ( 2 , terms . size ( ) )
assertHelpLines ( "Option                       Description                   " , "------                       -----------                   " , "-d [Integer: double dizzle]  dizzle (default: [2, 3, 5, 7])" , EMPTY )
Assert . assertEquals ( 0 , total )
assertEquals ( "lesson_05/_json_configs/smooks-config-reader-only.xml" , uri . toString ( ) )
assertThat ( requestedShutdownCallable . call ( ) , equalTo ( false ) )
assertEquals ( 5 , size )
Assert . assertEquals ( name , manufacturerService . findManufacturerByName ( name . toString ( ) ) . getName ( ) )
JSONAssert . assertEquals ( "{a:[[9]]}" , ARRAY_OF_JSONARRAYS , new CustomComparator ( JSONCompareMode . LENIENT , customization ) )
assertEquals ( prefix_not_search_result , result )
assertNotNull ( childProject . blockBuildWhenUpstreamBuilding )
assertThat ( targetLocator . getUntargetedDriver ( ) , instanceOf ( FirefoxDriver . class ) )
Assert . assertEquals ( "test" , v . getName ( ) )
Assert . assertEquals ( 2 , result . size ( ) )
assertSame ( theme , sut . getTheme ( ) )
Assert . assertNotNull ( PropertyUtils . getProperty ( newObs , "allergen" ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertImage ( null , destImg , e )
assertEquals ( c1 , c2 )
Assert . assertEquals ( expectBucketName , bucketName )
assertEquals ( "clicked" , testPage . newElement . getText ( ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa must be a number(####)." ) )
Assert . assertTrue ( mvcResult . isSucceeded ( ) )
assertEquals ( 2 , statements . size ( ) )
assertFalse ( one . equals ( two ) )
Assert . assertEquals ( 1 , patientCount )
Assert . assertEquals ( "Hasan" , person . getName ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( sentPayload , receivedPayload )
assertEquals ( expResult , result )
Assert . isTrue ( organizations . size ( ) > 0 )
assertEquals ( "Mike" , getGenderTable ( ) . getCell ( 1 , 0 ) . getText ( ) )
assertEquals ( expectedJson , actualJson )
Assert . assertEquals ( expected , config . toString ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( expected , actual )
Assert . assertTrue ( theFlows . isEmpty ( ) )
assertEquals ( 0 , svn . getProperties ( ) . size ( ) )
assertThat ( count - 1 , is ( 3 ) )
assertThat ( "09-15-2013T13:00:00" , 1379250000000L , is ( date . getTime ( ) ) )
assertEquals ( s , LittleEndianInputStream . wrap ( b ) . readUnsignedShort ( ) )
assertTrue ( group . isAssignedAsStudent ( student ) )
Assert . assertEquals ( 200 , result . getStatus ( ) )
approver . assertApproved ( "banana" )
assertFalse ( "Model should not contain RDF types" , rdfTypes . isEmpty ( ) )
Assert . assertEquals ( 1L , ctx2 . tQueryForLongValue ( "select count(*) from users where name=Tom and address=China" , bind ( "name" , "Tom" ) , bind ( "address" , "China" ) , bind ( "
assertEquals ( this . view , view )
assertEquals ( "numhits is wrong" , 2160 , res . getNumhits ( ) . intValue ( ) )
assertEquals ( "123" , map . get ( "v" ) )
assertNull ( added )
assertEntityHasValue ( key , value )
assertSuggestions ( suggestions , "foo" , "fooba" )
assertSame ( defaultDurability , result )
assertEquals ( 1 , metaView3 . getSd ( ) . getColumns ( ) . size ( ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaDefaultParameterTransformerDefinition ( threeArg , lookup , new String [ 0 ] ) )
assertEquals ( "Failed to generate array" , "new String() { \\"1\\", \\"2\\" }" , s )
assertEquals ( 1 , tags . size ( ) )
assertEquals ( entityBundle , clone )
assertTrue ( new Matcher ( ) . matchRelationshipInstance ( output , input ) )
assertTrue ( objmap . containsKey ( "field_priv" ) )
assertTrue ( "expecting no start rules; found " + msg . getClass ( ) . getName ( ) , msg instanceof GrammarSemanticsMessage )
Assert . assertEquals ( any , map )
assertEquals ( "Running on control port " + port + " but responded with: \\"ok\\"" , response )
assertTrue ( ti . wasContainedIn ( uri ) )
Assert . fail ( e . getMessage ( ) )
Assert . assertEquals ( "table_name" , generator . formatTableName ( "table" ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertTokenStreamContents ( ts , new String [ ] { "hello" , "world" , "world" } , new int [ ] { 0 , 0 , 10 , 10 } , new int [ ] { 5 , 5 , 15 , 15 } , null , new int [ ] { 1 ,
assertEquals ( r1 , r2 )
Assert . assertEquals ( 2 , buttons . size ( ) )
Assert . assertTrue ( deal . isAccepted ( ) )
Assert . assertNotSame ( exporter , exporter2 )
assertEquals ( "Matching" , VersionMatchResult . MATCHED , p . matches ( info ) )
assertEquals ( 0x00 , acia . read ( 0x0001 , true ) )
Assert . assertEquals ( 3 , count )
Assert . assertEquals ( 3 , issues . length )
assertThatSelectedValueIs ( "z" )
assertEquals ( SentryStoreSchemaInfo . getSentryVersion ( ) , sentryStore . getSentryVersion ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertThat ( SimpleFormatter . ofMomentPattern ( "dd.MM.yyyy HH:mm (zzzz)" , Locale . ENGLISH , tzid ) . format ( Moment . UNIX_EPOCH ) , is ( expected ) )
assertNull ( lease . getTenancyDuration ( ) )
assertEquals ( expected , x )
assertTrue ( "the method \\"vote\\" must return ACCESS_GRANTED" , voteGenericTest ( authorities , configAttributes , AccessDecisionVoter . ACCESS_GRANTED ) )
assertEquals ( 1 , traverseCount )
assertEquals ( 0 , theValue . get ( ) . intValue ( ) )
assertNotNull ( DocumentPermission . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ETXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( new ComparisonExpression ( b ) , orPredicate . getRhs ( ) )
assertEquals ( modulus , certificate . getPublicKeyModulus ( ) )
assertNull ( SG_SFC_UNBIND_DELETE_SFC . getNetworkElementId ( ) )
assertTrue ( entity . getId ( ) > 0 && entity . getCity ( ) == null )
assertNotNull ( target )
assertFalse ( result . isSucceeded ( ) )
assertNull ( query )
assertEquals ( expected . substring ( 0 , 5 ) , sb . toString ( ) )
Assert . assertNull ( changed . getReifier ( ) )
assertEvalTrue ( new File ( "abssamples/backend/ObjectTests/classRecover1.abs" ) )
assertEquals ( value , redis . objectIdletime ( key ) )
assertTrue ( "content-type application/json; charset=wtf-8 should be valid" , mediaTypeChecker . isContentTypeValid ( mockHeaders ) )
assertEquals ( "{\\"resourceType\\":\\"Observation\\",\\"value\\":{\\"contentType\\":\\"text/plain\\",\\"data\\":\\"AAECAw==\\",\\"url\\":\\"http://foo\\",\\"size\\":123}}" , encoded )
assertEquals ( xs , ys )
Assert . assertFalse ( bpInfo1 . equals ( bpInfo2 ) )
assertEquals ( "array of days must be equal to null" , null , monthView . getDaysOfTheWeek ( ) )
assertThat ( comment , equalTo ( "Simple field comment from classpath" ) )
assertThat ( info . isRequired ( ) , is ( true ) )
assertEquals ( BigInteger . valueOf ( 536879104L ) , work )
assertEquals ( same . sum ( 1 ) , sum )
assertEquals ( PrimitiveTypeProducer . class , typeProducer . getClass ( ) )
Assert . assertEquals ( n , rids . size ( ) )
assertEquals ( VLWSentence . KM , empty . getTotalUnits ( ) )
assertThat ( retrier . retrierResult ( first , retry , 10 , TimeUnit . SECONDS ) , is ( true ) )
assertTrue ( unk1 . length == unk2 . length )
assertEqualsJson ( expected , actual )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response statusCode is: 200" ) ) )
Assert . assertTrue ( cloudStackClient . shouldRequestsExpire ( ) )
assertEquals ( expResult , result )
assertFalse ( hasConfigurationChanged )
assertThat ( target . getBodyAsMap ( String . class ) , is ( nullValue ( ) ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( 3 , result . getSize ( ) )
assertThat ( dns , hasItems ( LdapConfiguration . DEFAULT_ROOT_OBJECT_DN ) )
assertEquals ( "V" , data . getUnit ( ) )
assertDependencyWasResolved ( )
assertEquals ( AM_UXS , 2 , rd . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( string2 , string1 )
assertEquals ( Arrays . asList ( "INSERT INTO " + tableName ( "TableOne" ) + " (id, value) VALUES (3, 1 + 2)" ) , testDialect . convertStatementToSQL ( testStatement , schema , null ) )
Assert . assertEquals ( expected , filterResult )
assertTrue ( AcceptanceTestUtil . isInterested ( component , remoteWorkerStub . getDeploymentID ( ) . getServiceID ( ) , rwmOD . getDeploymentID ( ) ) )
Assert . assertEquals ( "1" , value )
assertEquals ( "Wrong vote count" , 5 , credit . getVotesCount ( ) )
assertEquals ( ExpressionFactory . exp ( "path not in (1,2,3)" ) , exp )
assertNull ( createSchema ( map , 1 ) . convert ( ) . getName ( ) )
assertEquals ( "admin" , jsp )
assertTrue ( code == 200 )
Assert . assertEquals ( "SELECT '0' = 0;" , text )
assertEquals ( ProcessInstance . STATE_ABORTED , processInstance . getState ( ) )
assertEquals ( expected , actual )
assertThat ( sslContextSelector . select ( httpContext ) , is ( sslContext ) )
assertEquals ( out , StringUtils . join ( Charsets . UTF8 . decode ( in ) , " " ) )
assertNotNull ( WorkerRealTimeStatistics . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 0 , walEdit . size ( ) )
assertServiceInstanceCreateRequest ( serviceInstance )
assertMockEndpointsSatisfied ( )
assertOut ( "function B(msg) {\\n\\tthis.msg = msg;\\n}" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( metric , metric2 )
assertThat ( normalize ( results ) , is ( path ( "" , "a" , "b" , "c" ) ) )
assertThat ( DateUtil . clearDatePart ( date ) , is ( cal . getTime ( ) ) )
Assert . assertEquals ( expected , rewriter . rewriteCookie ( cookie ) )
assertEquals ( 1 , foo . size ( ) )
assertNotNull ( actual )
assertEquals ( - 1 , error . getOkValue ( ) )
assertEquals ( branches , Functions . getBranchesPageIsSharedWith ( PROJECT , BRANCH , PAGE ) )
assertObjectEquals ( "{type:'array',items:{type:'object',properties:{f1:{type:'string'}}}}" , s . getSchema ( BeanList . class ) )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( 4 , doubler . doubleIt ( 2 ) )
assertEquals ( foo , deserialized )
assertTrue ( "haveLifetime after set" , _info . hasLifetime ( ) )
assertEquals ( 6 , actualExpectedWorkerLinkCount )
assertEquals ( p . getContent ( ) . size ( ) , 1 )
assertTrue ( result . length > 0 )
assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertEquals ( "Select with null value" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertEquals ( "object object," + SiddhiStreamMetadataUtils . EAGLE_ALERT_CONTEXT_FIELD + " string," + SiddhiStreamMetadataUtils . EAGLE_ALERT_CONTEXT_FIELD + " long" , siddhiStreamDef )
assertSame ( first , second )
assertFalse ( params . doesCodingListMatch ( codings ) )
context . assertIsSatisfied ( )
assertEquals ( - 1 , t . indexOfUnquoted ( str , ">>" ) )
assertEquals ( aNumber , result , 1E14 )
assertThat ( document . toDBObject ( ) . get ( "_id" ) , notNullValue ( ) )
Assert . assertEquals ( 0 , estimatedSizeBytes )
assertEquals ( response , res )
assertArrayEquals ( new double [ ] { 1.0 , 3.0 } , degToRads , 1e-4 )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-l" , "1" } ) )
assertTrue ( resourceBundle . getObject ( "component.type.FileType" ) instanceof Image )
assertEquals ( topic , topics . get ( 0 ) )
Assert . assertTrue ( "RunJar failed" , outFile . exists ( ) )
assertThat ( ContractClass . privateNestedInstanceVariable , is ( true ) )
assertNotNull ( builder )
assertThat ( applicationSettings . getProjectCreationSetting ( ) , is ( PROJECT_CREATION_NOT_ALLOWED ) )
assertResults ( chain )
assertEquals ( 2 , list . size ( ) )
assertEquals ( "?a=b&c=d" , qs . encode ( ) . toQueryString ( ) )
assertThat ( out . toString ( ) , equalTo ( json ) )
assertResult ( - 1 , 1 )
assertEquals ( "Expected 1 result!" , 1 , n )
assertThat ( value . get ( ) , is ( "1" ) )
assertEquals ( HttpStatus . BAD_REQUEST , response . getStatusCode ( ) )
assertEquals ( 6 , testDescriptor . getChildren ( ) . size ( ) )
assertNotNull ( hit )
assertEquals ( "test (REG_SZ) = {\\"\\"} (0x00000000)" , value . toString ( ) )
assertFalse ( iter . hasNext ( ) )
Truth . assert_ ( )
assertNull ( result )
assertThat ( driver . getTitle ( ) , containsString ( "JUnit 5 extension for Selenium" ) )
assertEquals ( "1. Row 5" , getLogRow ( 0 ) )
assertEquals ( tree . predict ( x [ loocv . test [ i ] ] ) , evalPredict ( tree , x [ loocv . test [ i ] ] ) )
assertTrue ( e instanceof E_NotEqual )
assertThat ( "default 64 OS" , sut . getOs ( ) , is ( equalTo ( VM . DEFAULT_64_OS ) ) )
assertEquals ( 1 , result . size ( ) . intValue ( ) )
assertEquals ( types , expectedTypes )
assertEquals ( "Learn. Eat. Code." , phraseDecodedToString )
assertThat ( result . message ( ) . get ( 0 ) . getData ( ) , CoreMatchers . containsString ( "<img src=\\"http://yuml.me/diagram/" ) )
assertEquals ( "Expected 4 result!" , 4 , n )
assertEquals ( date , result . getModified ( ) )
CallTreeAssert . assertDepth ( "corrupted" , callTree , expectResult )
context . assertIsSatisfied ( )
assertContainsOnly ( testee . getFileFilters ( ) , filter1 , filter2 , filter3 )
assertEquals ( "<y-axis><plot-lines><line x1=0, y2=2></line></plot-lines>" , removeWhitespacesBetweenTags ( parent . child ( 0 ) . toString ( ) ) )
assertFailure ( mode , scanner , "/*" , 1 , 2 , IllegalStateException . class )
assertThat ( whereClause , is ( equalTo ( WHERE_FILTER ) ) )
Assert . assertEquals ( instancesCount , InstanceHelpers . getAllInstances ( this . app ) . size ( ) )
assertNotNull ( descuento . getId ( ) )
assertAccessorsCorrect ( control , "delay" , 0 , 1 , 2 )
assertAccessorsCorrect ( table , "currentPage" , 0 , 1 , 2 )
assertThat ( response . getStatus ( ) , equalTo ( Response . Status . OK . getStatusCode ( ) ) )
assertEquals ( "H2" , heading . getText ( ) )
assertThat ( iter . hasNext ( ) , is ( true ) )
assertThatIsMaximized ( )
assertTrue ( true )
assertEquals ( 0 , settings . getMinimum ( ) )
Assert . assertEquals ( value + 1 , value1 )
Assert . assertTrue ( appTableColumnsMeta . indexOf ( "natural" ) != - 1 )
assertTrue ( codeGenFailedEx . getMessage ( ) != null )
assertThat ( credentials , is ( notNullValue ( ) ) )
assertNotNull ( actual )
assertTrue ( mpp . getPlannerResources ( ) . size ( ) > 0 )
assertTrue ( "Killed" , System . currentTimeMillis ( ) - start < SHUTDOWN_WAIT )
assertThat ( result , is ( alicia ) )
assertNotNull ( sut . getName ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertTrue ( ( fTime > sTime ) , "Immediate trigger did not fire within a reasonable amount of time." )
Assert . assertTrue ( evaluator . evaluate ( offsets ) )
assertEquals ( 0 , x . size ( ) )
assertNotNull ( "Skill is null" , entity )
Assert . assertEquals ( SingleValueAssignExtension . SingleValueAssignTag . class , assign . getTagActionClass ( ) )
assertEquals ( "History filename provider" , name )
Assert . assertTrue ( ( max - min ) <= defaultCapacity / 100 )
Assert . assertEquals ( 1 , analysis . getWarnings ( ) . size ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_UPDATE )
assertSame ( result , instance . unwrap ( String . class ) )
assertThat ( validationErrors . size ( ) , equalTo ( 0 ) )
assertNull ( entity . getProperty ( "user" ) )
assertSetDirty ( )
assertThat ( action , is ( Matchers . not ( new SetProjectPrefixDeclarationsAction ( projectId , otherDecls ) ) ) )
assertEqualsIgnoreLineEnding ( Json . pretty ( new Schema ( ) . toString ( definitions ) ) , "{\\n" + "  \\"properties\\" : {\\n" + "    \\"id\\" : { type : "string" , description : "fred\\" }\\n"
assertEquals ( "Wrong number of unread messages" , 3 , checkNumberUnreadMessages )
assertThatContainsOnly ( archive , scriptPath )
assertEquals ( "Incorrect size of struct" , io . desc . structSize , dcStructSize ( struct ) )
assertEquals ( 666 , mpd . getTimeout ( ) )
assertEquals ( 0 , t . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertEquals ( 4 , ex . getMax ( - 2 , 4 ) )
assertEquals ( detailMethods , result )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertEquals ( HttpStatus . NO_CONTENT , responseEntity . getStatusCode ( ) )
Assert . assertNotNull ( st . tag )
assertEquals ( expectedResult , result )
Assert . assertEquals ( 20 , analyser . getLoadAtEnd ( route ) . get ( 0 ) , 0.01 )
assertEquals ( URL + "?param+1=&param+2=%22" , uri . toString ( ) )
assertNotNull ( x509Attestation )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
Assert . assertEquals ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , resp . getStatus ( ) )
assertThat ( windows . minus ( earlier ) , is ( IntervalCollection . onDateAxis ( ) ) )
Assert . assertNotSame ( connection , HConnectionManager . getConnection ( TEST_UTIL . getConfiguration ( ) ) )
assertEquals ( value + "bar" , result )
assertArrayEquals ( result1 , result2 )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
assertRange ( q , Long . class , time ( "2000-01-01" ) , time ( "2010-02-04" ) )
PatternAssert . assertThat ( H2_CONNECTION_STRING )
assertEquals ( actual1 , actual2 )
assertEquals ( container . receive ( ) . length , messagesToSend )
Assert . assertEquals ( "simpleInteger" , found . getName ( ) )
Assert . assertEquals ( "UserId should be same as authenticated user:" + answer , userId , answer . getReturnVal ( ) )
Assert . assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , response . getJerseyResponse ( ) . getStatus ( ) )
assertEquals ( v1 . length + count , value . length )
assertEquals ( "2007-12-03 - 10:15:30" , result )
assertEquals ( 5 , res . getInt ( "nbHits" ) )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertIncluded ( node )
assertThat ( nextToken , is ( "10" ) )
assertFailureValue ( "differs at index" , "[0, 0, 0]" )
assertEquals ( 1L , result )
Assert . assertNotNull ( page . getPageTimings ( ) )
Assert . assertNotNull ( xhtmlOptions )
Assert . assertEquals ( "Wrong port" , 0x00010203 , out . readUnsignedInt ( ) )
assertEquals ( 200 , trigger . getPolicyLimit ( ) . intValue ( ) )
assertEquals ( selectedInterval . getName ( ) , "Engineering" )
assertThat ( tester . request . getServletPath ( ) , is ( "/" ) )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
assertTaskEvents ( task , TaskListener . EVENTNAME_COMPLETE )
assertEquals ( "Thank you very much." , email . getVisibleText ( ) )
Assert . fail ( "MathIllegalArgumentException expected" )
TestUtils . assertResponseStatus ( response , Status . NOT_FOUND )
Assert . assertEquals ( 40. , route . getActivities ( ) . get ( 0 ) . getEndTime ( ) , 0.01 )
assertEquals ( 3 , count )
assertTrue ( Script . matchNamed ( MatchType . EQUALS , "bar" , null , "{ hello: null, world: '##(foo.b)' }" , ctx ) . pass )
Assert . assertTrue ( errors . hasErrors ( ) )
assertEquals ( mockedJobResult , jobResult )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
assertFalse ( guangdong . notExisted ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( null , annotation )
arraysWithCustomComparisonStrategy . assertDoesNotContainSubsequence ( someInfo ( ) , actual , sequence )
assertTrue ( ( ( IMAPFolder ) test ) . getUIDNotSticky ( ) )
assertEquals ( singleQuotedString , ocsvTransformer . getCellContent ( unQuotedString ) )
assertThat ( result , is ( nullValue ( ) ) )
assertThat ( parent . getNodes ( ) . getSize ( ) , is ( 2L ) )
assertEquals ( Location . LOCATION_LHS_INSIDE_CONDITION_START , getLastIntegerValue ( parser . getEditorInterface ( ) . get ( 0 ) . getContent ( ) ) )
assertEquals ( 1.2 , cs . getX ( 0 ) , TOL )
assertTrue ( notify . matches ( 10 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "12345.68" , getCell ( 0 , 10 ) . getText ( ) )
assertTrue ( drug . getRetired ( ) )
Assert . assertEquals ( "[3, 2, 4, 1, 5]" , result . toString ( ) )
assertEquals ( "OK" , reply )
Assert . assertTrue ( mod . exists ( ) )
assertNotNull ( sut . getMainAttributes ( ) . getValue ( "Entry" ) )
assertEquals ( "a,\\"b\\\\\\\\c\\"" + recordSeparator , sw . toString ( ) )
assertNull ( actionOut . getType ( ) )
assertEquals ( "https://127.0.0.1:6443" , builder . getBasePath ( ) )
assertMsg ( )
assertEquals ( expectedArg , parsedArg )
assertNull ( objmap . get ( "field" ) )
assertThat ( PrettyTime . of ( Locale . GERMANY ) . withReferenceClock ( clock ) . printRelative ( PlainTimestamp . of ( 2014 , 8 , 25 , 14 , 0 ) . atUTC ( ) , ZonalOffset . UTC ) , is ( "vor 7 Decem
assertThat ( deletes , StreamMatchers . empty ( ) )
assertQuotientReminder ( MultivariateDivision . divideAndRemainder ( dividend , divider ) , dividend , divider )
assertTrue ( redisServer . isActive ( ) )
Assert . assertNotNull ( writer )
assertEquals ( "Max Time" , result )
assertAllCommandsUsed ( )
assertEquals ( 0 , comparator . compare ( car , car ) )
assertEquals ( cVector , normalizedCVector )
assertNull ( myDtoInstance )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( PathJoint . DEFAULT_VALUE , o . getValue ( ) )
assertThat ( representation . getString ( "display" ) , is ( "48.56" ) )
assertEquals ( ModelInterceptor . exists ( DummyModel . class . getMethod ( "exists" , Object . class ) , model2 ) , model2 )
Assert . assertEquals ( expected , actual )
assertEquals ( endpoint . getPostParamString ( ) , "filterLevel=" + Constants . FilterLevel . Medium . asParameter ( ) )
assertMatch ( e , s )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertEquals ( expected , sql [ 0 ] . toSql ( ) )
assertThat ( orderLine . getAdvancePercentage ( ) , sameValueAs ( division . divide ( 20 , 4 ) ) )
assertEquals ( 2 , cc . size ( ) )
assertEquals ( 20000 , builder . getMaxEvaluations ( ) )
assertFalse ( accepted )
assertTrue ( validationErrors . hasErrors ( ) )
assertEquals ( "" , doc . text ( ) )
assertEquals ( actualMime , "bundle/mime-from-bundle" )
assertEquals ( 2 , results . size ( ) )
assertEquals ( filter , config . getBuildConfiguration ( ) . getFilter ( ) )
Assert . assertEquals ( Sets . newHashSet ( 1 , 2 ) , parser . getSecureResultIndices ( ) )
assertEquals ( "foo" , jc . get ( "51" ) )
assertEquals ( false , result )
assertTwoInstancesAreStarted ( firstProcessDefinition , secondProcessDefinition )
assertTrue ( "An Uninitialized Value should return a NaN on get()." , Double . isNaN ( victim . get ( ) ) )
assertTrue ( plan . getRootNode ( ) instanceof ProjectNode )
assertEquals ( 0 , profile . getIdTokenString ( ) . length ( ) )
Assert . assertEquals ( "lukas podolski" , result )
assertEquals ( 1 , result )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertOut ( "var /** @type {boolean} */ a = isFinite(1000000.9)" )
assertEquals ( FAILING , collector . getStatus ( ) )
Assert . assertNull ( nullResourceComposite . getResource ( ) )
assertTrue ( "Expected stop to timeout. Actual: " + timeTaken , timeTaken >= beforeStop )
result . assertAbsenceOfErrors ( )
assertThat ( iframeStr . matches ( "<iframe id=\\"foo\\">.*</iframe>" ) , is ( true ) )
Assert . assertEquals ( 202 , response . getStatus ( ) )
assertStat ( result )
assertEquals ( "Response body is not correct." , SimpleSecuredServlet . RESPONSE_BODY , Utils . makeCallWithBasicAuthn ( servletUrl , "elytron1" , "password" , 200 ) )
assertEquals ( "Should have not constraint violation" , 0 , validator . validate ( product ) . size ( ) )
assertTrue ( language . contains ( country ) )
assertThat ( uri . getPath ( ) , endsWith ( "testing" ) )
assertEquals ( TEST_INITIAL_DFS_REPLICATION , testConfiguration . get ( "dfs.replication.initial" ) )
Assert . assertEquals ( 11 , patients . size ( ) )
assertEquals ( a , b )
Assert . assertTrue ( pss . toString ( ) . contains ( "true" ) )
assertEquals ( expResult , result )
assertNotEquals ( otherHashCode , foreignableFieldHashCode )
assertThat ( step . getScreenshots ( ) . size ( ) , is ( 1 ) )
assertTrue ( emptyChain . getExtractors ( ) . size ( ) == 1 )
assertSame ( val , ConfigUtils . getObject ( config , null , "no-object" , "some-object" ) )
assertRemoveSubsystemResources ( servicesB )
assertThat ( errors , not ( hasFieldErrors ( "familyName2" ) ) )
assertTrue ( configurationDeserialized )
assertEquals ( HTML , result )
Assert . assertEquals ( String . class . getName ( ) , klass . getDeclaredField ( "s" ) . getType ( ) )
assertExceptionContainsCorrectMessage ( ( ) -> userTaskAdminClient . addPotentialOwners ( BAD_CONTAINER_ID , task . getId ( ) , false , add ) , "Container '" + BAD_CONTAINER_ID + "' is not instantiated or cannot find container for alias '" + BAD_
assertEquals ( "some" , result )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x0 ) ) )
assertTrue ( passwordResetPage . isPasswordResetDisplayed ( ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertEquals ( 2 , deltas . size ( ) )
Assert . assertEquals ( 0 , result . size ( ) )
assertNotEquals ( original , objectId ( "/dir" ) )
assertEquals ( "select textcat('a', 'b'), textcat+('a', 'b')" , result )
Assert . assertEquals ( 1 , c . getLinks ( ) . size ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertTrue ( Arrays . equals ( new int [ ] { 0x02 , 0x00 } , request . getOutputBuffer ( ) ) )
assertRequest ( "POST" , "Message/" )
assertEquals ( expected , actual )
assertTrue ( typeUtil . isTopLevelType ( v2Schema ) )
assertEquals ( "<#function name ></#function>" , result )
assertTrue ( transactionClosed . get ( ) )
assertEquals ( "GET" , r . getHeader ( "Allow" ) )
assertEquals ( contents , "How now brown cow?" )
Assert . assertEquals ( "4" , head . getId ( ) )
assertEquals ( 0 , victim . getAll ( request ) . size ( ) )
assertThat ( resources , contains ( patientId , orgId , parentOrgId , parentParentOrgId ) )
assertEquals ( "test-123" , val )
Assert . assertEquals ( Arrays . asList ( "testa" , "testb" ) , list )
Assert . assertTrue ( set1 [ i ] . equals ( set2 ) )
assertTrue ( terminologyService . isSupported ( cp ) )
Assert . assertEquals ( cacheConfig . getNamespace ( ) , getNamespace )
assertNull ( runtimeService . getVariable ( processInstance . getId ( ) , "myBusinessKey" ) )
assertEquals ( ( byte ) 34 , s . m0_0 ( ) )
assertEquals ( 128000 , ph . getTpm2BAUDRATE ( ) )
assertThat ( readEmailAddress , is ( address ) )
assertEquals ( 3 , interfaces . size ( ) )
assertFalse ( result )
assertEquals ( "TASKID = -1" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertEquals ( result , solution . multiply ( result ) )
assertExec ( "Methods defined in String" , Classes . class , "listObject__Ljava_lang_String_2ZLjava_lang_String_2ZLjava_lang_String_2" , methods , true , "toStr" )
assertThat ( revision . json ( ) , sameJSONAs ( revision . json ( ) . toString ( ) ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( Math . md5 ( s ) , PBKDF . murmurhash3 ( s ) )
assertTrue ( r . get ( String . class ) . contains ( "Paul" ) )
assertBoard ( "�尖�尖�尖�尖��\\n" + "��***��\\n" + "��
Assert . assertTrue ( contains )
assertCompleted ( "fff" )
assertTrue ( result )
assertTrue ( dump . contains ( JP_TEXT ) )
Assert . assertEquals ( 5 , analyser . getLoadRightAfterActivity ( route . getEnd ( ) , route ) . get ( 0 ) )
TestUtil . assertEquals ( exp , getSpans ( ) )
assertEquals ( 16 , profile . dashBoards [ 0 ] . widgets . length )
assertOut ( "/**\\n * @export\\n */\\nfoo.bar.B.prototype.b = function() {\\n  var /** @type {custom.TestProxy} */ a = new custom.TestProxy();\\n  a.setProperty('foo', 'bar
assertThat ( ( double ) stopwatch . getMinimumDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 150 , 50 ) ) )
assertTrue ( cls . containsComplexSubPropertyAxiom ( chain ) )
assertEquals ( "Base for integers is wrong" , Double . valueOf ( 3 ) , parsed )
assertEquals ( 6 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertFalse ( handler . process ( null , consumer , Direction . In , null , null ) )
assertNotSame ( toUpdated , null )
assertNotNull ( result )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "actors/Keanu" , "actors/Hugo" , "actors/Emil" , "actors/Carrie" , "actors/Laurence" ) )
assertTrue ( equals ( stat , nativeEntity ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertGridIndexes ( data , new boolean [ ] { true , true , true } , new boolean [ ] { false , false , false } , new Expected [ ] [ ] { { Expected . build ( true , 3 , "(0, 2)" ) , Expected . build ( false , 1 , "(
assertTrue ( p . getDirectivesByType ( PluginTypesDirective . class ) . size ( ) == 3 )
assertEquals ( LocaleHelper . getDefaultLocale ( ) , TEST_LOCALE_LANG )
assertThat ( now . getZone ( ) , is ( DateTimeZone . forID ( "UTC" ) ) )
assertEquals ( 1 , one . getAsDouble ( ) , 0 )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( "pendingAddOpReceived = false" , pendingAddOpReceived )
assertEquals ( "Method #toString is wrong" , "GeoDistanceCondition{boost=0.4, field=name, " + "longitude=-1.0, minDistance=1km, maxDistance=9.0}" , condition . toString ( ) )
assertEquals ( expResult , result )
assertThat ( properties . size ( ) , is ( 0 ) )
assertThat ( config . getMaxFileSizeBytes ( ) , equalTo ( maxFileSizeBytes ) )
Assert . assertEquals ( "durability=1,distributedTransactionTimeout=2,transactionLatencyCount=3" , getReplHeader ( ) )
assertTrue ( weakMap . size ( ) == 0 )
assertArrayEquals ( expectedResult , output )
Assert . assertEquals ( "[1, 2, 3, 4, 5]" , result . toString ( ) )
assertThat ( generatedReportText , containsString ( "step 1" ) )
assertEquals ( liveSearchDropDown . isSearchEnabled ( ) , false )
assertEquals ( 4 , results . size ( ) )
Assert . assertEquals ( test , expected )
assertThat ( queryMapping . transformOutboundDatabaseName ( metaStoreMapping , query ) , is ( "SELECT " + PREFIX + "bdp.hellobdp1(), " + PREFIX + "bdp.hellobdp2()" ) )
assertEquals ( projectShortName , cardRepository . findRelatedProjectShortNameByEventId ( eventId ) )
this . assertLoadBlobViaTuples ( tuples , true , true )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "Value: [request.query]" , resp . getResponseBody ( ) . trim ( ) )
assertEquals ( RDF . type . getId ( ) , editor . getValue ( ) )
assertTrue ( tpk . getWindowing ( ) instanceof Time )
assertEquals ( TMP , A )
assertEquals ( group , identity . getGroup ( ) )
assertArrayEquals ( new Object [ ] { int . class , int . class , String . class , DerivedClass . class } , converters . toArray ( new Object [ 0 ] ) )
tester . assertRenderedPage ( TestClient . class )
assertEquals ( asList ( asList ( 1 , 2 , 3 , 4 , 5 , 6 ) , asList ( 1 , 2 , 3 , 4 , 5 , 6 ) ) , result )
assertFalse ( property . isPersistent ( ) )
assertNull ( log )
Assert . assertEquals ( "Hello World" , cdiEjb . sayHello ( ) )
assertOutput ( expected )
assertTrue ( out . contains ( "User [owner] is not authorized to view the logs for entity" ) )
assertStack ( new Object [ ] { 3.0d , null } , stack )
Assert . assertTrue ( actualUrl . endsWith ( "/registration/result" ) )
assertEquals ( "some-image-tag: digest: " + digest + " size: 1234" , parse ( status ) )
assertEquals ( 10 , vrp . getJobs ( ) . get ( "1" ) . getSize ( ) . get ( 0 ) )
assertEquals ( 4 , result . size ( ) )
assertEquals ( origItemsJson , outJson )
Assert . assertFalse ( result )
assertThat ( schema , hasEntry ( is ( TYPE_2 ) , hasProperty ( "predicates" , hasItem ( predicate ( ) . withName ( PROP_I ) . withIsDouble ( ) ) ) ) )
Assert . assertEquals ( "i=" + i , expected , f . value ( i ) , 2 * Math . ulp ( expected ) )
assertThat ( targetSubdirectory , is ( expectedTargetSubDirectory ) )
assertThat ( dummified . getAttributes ( ) , containsInAnyOrder ( new RpslAttribute ( "inetnum" , "193.0.0.0 - 193.0.7.255" ) , new RpslAttribute ( "netname" , "RIPE
assertEquals ( "Size should be 0." , 0 , set . getSize ( ) )
assertTrue ( problemState )
assertEquals ( 1 , newSize - initialSize )
assertThat ( aClass . getCompilationUnitAsString ( ) , equalToIgnoringWhiteSpace ( expectedResult ) )
assertThat ( view , is ( nullValue ( ) ) )
assertNotNull ( "Calling class should not be null" , callingClass )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isInfoEnabled ( ) )
assertInjectsCollectionsOfMocks ( exampleTest )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( 5 , map . size ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertFalse ( rootDAO . deleteDatabase ( DB_NAME , true ) )
assertEquals ( "select entity_0 from Entity entity_0 where entity_0.code in ( select entity_1.code from Entity entity_1 )" , select . getQuery ( ) )
assertThat ( problems . size ( ) , is ( 0 ) )
assertEquals ( 10 , count )
assertEquals ( "" , result )
assertThat ( output . toString ( ) , is ( "/* migration script */\\n" + "select * from sys.tables order by name" + " asc\\n" + "order by name asc\\n" ) )
Assert . assertEquals ( expect_sql , sql )
assertThat ( ChronoFormatter . ofPattern ( "2016" , PatternType . CLDR , Locale . ROOT , CalendarYear . chronology ( ) ) . format ( cy ) , is ( "2016" ) )
assertEquals ( 0.0001 , r , 0 )
assertThat ( out . toPlainString ( ) , startsWith ( "0.05000000" ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . ACTIVITIES_READ_PUBLIC )
assertEquals ( 4 , actualEntries . size ( ) )
assertNotNull ( methodInjectable . getInjectionTarget ( ) )
assertEquals ( "OFF" , level . toString ( ) )
assertThatWritableIs ( false )
assertTrue ( propertiesMatch ( dataFieldOriginal , dataFieldCopy ) )
assertEquals ( test , topicServiceImpl . getTopcicCount ( ) )
assertEquals ( expected , jsonb . getFlows ( prePopulatedBucketId ) . toString ( ) )
Assert . fail ( "Expected InstanceNotFoundException" )
assertEquals ( 5 , firehoseItemCount )
assertThat ( wrapped , is ( PrimeFacesPagedDataModel . class ) )
assertNull ( "principal should not be found" , principal )
assertEquals ( 10 , totalNumberOfLines )
assertThat ( PlainTimestamp . of ( date , time ) . getCalendarDate ( ) , is ( date ) )
assertEquals ( expectedKeys , globalTags . keySet ( ) )
assertEquals ( "Value {0{1}" , result )
Assert . assertEquals ( "Incorrect condition" , "(WTextField=\\"1\\" or (WTextArea=\\"2\\" and WDropdown=\\"3\\" or WMultiSelect=\\"4\\"))" , builder . build ( ) . toString ( ) )
assertEquals ( "1 minute" , repairStatus . getDuration ( ) )
assertEquals ( CONSTRUcor_DECLARATION , sink . result ( ) )
assertEquals ( cls . getNNF ( ) , nnf )
assertEquals ( 1 , res . size ( ) )
assertThat ( threadName , is ( doAsync . get ( ) ) )
Assert . assertEquals ( 0 , doc . getFirstPage ( ) . getResources ( ) . getPdfObject ( ) . size ( ) )
assertEquals ( "1.3.0" , vers )
assertThat ( doubled . count ( ) , equalTo ( 0L ) )
assertEquals ( 10000 , connStr )
assertNotNull ( entryRelationship )
assertTrue ( "requires on reference" , ref . requires ( ) )
assertGenerators ( result , generator . getClass ( ) , AnInt . class )
assertEquals ( nrOfProcessInstances * 100 , COUNTER . get ( ) )
assertEquals ( "ODataDemo.ODataDemoFunctionImport" , fullyQualifiedFunctionImportName )
assertEquals ( "9208675309" , parsedTelePhoneNumber )
assertEquals ( OperatingSystem . MAC_OSX_10_7_4 , OperatingSystem . get ( ) )
Assert . areEqual ( true , rownum == 1 , "验证优先级判断" )
assertEquals ( "Expected 0 results!" , 0 , n )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( false ) )
assertTrue ( fortyNinersSuck . after ( superBowlXLV ) )
assertTrue ( output . startsWith ( "<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD XHTML 1.0 Strict//EN\\" \\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\">" ) )
assertEquals ( Boolean . TRUE , validator . isValid ( null ) )
assertEquals ( r1 , r2 )
assertTrue ( skillConstraint . fulfilled ( insertionContext ) )
assertThat ( result , is ( false ) )
assertThat ( isTransactionRelated , is ( false ) )
assertMockEndpointsSatisfied ( )
assertFalse ( prefs . matches ( t ) )
Assert . assertArrayEquals ( expected , actualNames )
Assert . assertTrue ( t instanceof ScriptException )
assertThat ( result , equalTo ( object ) )
Assert . assertEquals ( "Value is incorrect" , map ( OFFSET_0_STRING , "test" ) , value )
assertThat ( printer . toString ( ) , is ( "1970-01-01T00:00:00.000Z" ) )
assertResultSet ( res )
assertEquals ( x , z )
assertTrue ( mockedProvider . getExternal ( ) )
assertEquals ( violations . size ( ) , 0 )
assertNotNull ( Workers . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expResult , result )
Assert . fail ( "getByCode should throw IllegalStateException for unknown annotation key" )
Assert . assertNotNull ( token )
assertEquals ( 1.2 , cs . getX ( 0 ) , TOL )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "adm1Name" ) )
assertEquals ( ( short ) 0 , mutNum . shortValue ( ) )
assertEquals ( response , webRespose )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertTrue ( of . isDirectory ( ) )
Assert . assertEquals ( "110_org.happyfaces.domain.TestEntity" , converter . getAsString ( null , null , testEntity ) )
assertCapturedMessage ( eventMessage ( "sess1" , "/topic" , "eventMessage" ) )
assertEquals ( 3 , provenanceRepo . getEvents ( 0L , 100000 ) . size ( ) )
assertEquals ( SimpleScore . of ( 42 ) , scoreDirector . calculateScore ( ) )
assertEquals ( "bar" , objectColumn . getSortProperty ( ) )
Assert . assertEquals ( "亘毓丿 �丨馗丕鬲" , t . format ( new Date ( 0 ) ) )
assertEquals ( "blob condition serialization is wrong" , expected , actual )
assertOut ( "with (a)\\n  b;" )
assertEquals ( "A\\n" , mat . group ( ) )
assertEquals ( "Greetings Tenka." , response . body ( ) . asString ( ) )
assertTrue ( yt . videoHasCaptionsInLanguage ( "AMH" ) )
assertTrue ( "Random braces - three" , "Paired { begin an escaped sequence" . equals ( result ) )
Assert . assertTrue ( children . size ( ) > 0 )
assertEquals ( "1 卅丕� 卅��诏�乇�" , t . format ( then ) )
Assert . assertEquals ( Integer . class , con . getGenericParameterTypes ( ) [ 0 ] . getActualTypeArguments ( ) [ 0 ] )
assertTrue ( fTempDir . list ( ) . length == 1 )
assertEquals ( Status . FAIL , jxm . getStatus ( ) )
assertTrue ( ParseUtil . paramClassesMatch ( false , memberClassList , sigclassList , false ) )
Assert . assertTrue ( uniqueUnits . size ( ) > 0 )
assertEquals ( 200 , response . getStatusCode ( ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( "239 122 87 154 40 7 171 115 207 12 130 71 155 254 129 237" , visualized )
assertNull ( result )
assertEquals ( ResultType . ERROR , result . getType ( ) )
Assert . assertTrue ( this . ontologyServiceResult == 0 )
assertEquals ( 0 , runtimeService . createProcessInstanceQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertTrue ( abc . size ( ) == 3 )
assertMockEndpointsSatisfied ( )
assertEquals ( template + "(" , test . build ( ) )
assertEquals ( parent , fixture . relativize ( parent ) )
assertThat ( target , notNullValue ( ) )
Assert . assertEquals ( mRNAPos , cds )
assertNull ( myTestInstance . restart ( b ) )
assertThat ( isPresent , is ( false ) )
assertEquals ( data , change . getChangeData ( ) )
assertSortable ( sortable )
Assert . assertEquals ( 404 , response . getStatus ( ) )
Assert . assertEquals ( 0 , testedStore . getFeatures ( ) . size ( ) )
assertOutputResult ( consoleResult )
assertTrue ( "Credential store should be created" , ops . exists ( TEST_CREDENTIAL_STORE_ADDRESS ) )
assertEquals ( "addon count should match" , addonCount + 1 , registry . getAddons ( ) . size ( ) )
assertEquals ( 2 , c . getRowCount ( ) )
assertions . contains ( )
assertTrue ( isDisabled )
assertNotNull ( response )
Assert . assertEquals ( "some [img]image here[/img]" , formatter . format ( "some [img]image here[/img]" , defaultOptions ( ) ) )
assertNotNull ( SigningKey . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertFalse ( entry . containsAttribute ( "administrativeRole" ) )
assertEquals ( "application/json;odata.metadata=minimal" , request . getResponseContentType ( ) . toContentTypeString ( ) )
assertEquals ( expectedDescription , description )
Assert . assertEquals ( "DB number is not correct" , 2 , ( int ) redisURI . select ( ) )
assertEquals ( in . value , out . value )
assertTrue ( output . startsWith ( "<!DOCTYPE HTML PUBLIC \\"-//W3C//DTD XHTML Basic 1.1//EN\\">" ) )
assertNotNull ( getFixture ( ) . review ( null , master , slave ) )
assertArrayEquals ( TEST_DATA , actualBytes )
assertEquals ( Types . ARRAY , jmp . getArrayRuntimeType ( "varchar" ) )
maps . assertHasEntrySatisfying ( info , actual , null , isNull )
assertPutResult ( ResponseCode . MESSAGE_ILLEGAL )
assertThat ( email . getSubject ( ) , is ( "Error" ) )
assertEquals ( text , adapter . getStringAt ( 2 , 2 ) )
Assert . assertEquals ( 300 , li . getValue ( 50 ) , 1e-5 )
assertArrayEquals ( array1 , array )
assertThat ( "一-" , matches ( exp ) )
assertDataFrame ( frame , true , Unpooled . EMPTY_BUFFER , streamId )
Assert . assertEquals ( result , collector . output . get ( Utils . DEFAULT_STREAM_ID ) )
assertEquals ( 83 , x . value )
assertThatLineHasBeenDisplayed ( "Nazwa: filename.txt" )
Assert . assertEquals ( "�械蟹 蟹邪谐谢邪胁懈�" , actualResult )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Stream>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Stream>" , elem . toXml ( ) )
assertEquals ( Status . BYPASS , impl . getStatus ( ) )
assertNotNull ( fixture )
Assert . assertEquals ( 6 , e . getEncounterId ( ) . intValue ( ) )
assertEquals ( localeImportHandler . loadPropertiesByXml ( repFileBundleMock ) . size ( ) , 1 )
assertThat ( unlockKey . getKey ( ) , is ( notNullValue ( ) ) )
test . assertResult ( )
assertThat ( z_F4JInternalParseUtil . getPrimitiveLong ( "long" , json ) , is ( - 1l ) )
assertEqualLines ( "invalid renaming in another.p.A" , getFileContents ( getOutputTestFileName ( type , folder ) ) , cu . getSource ( ) )
assertThat ( testDataSourcePath . getInstanciatedPath ( "%USERDIR%/simple-semicolon-data.csv" ) , is ( "/home/john/work/simple-semicolon-data.csv" ) )
assertSame ( node , transform ( node ) )
assertEquals ( fileData . getBytes ( ) [ ( int ) Files . size ( file ) - 1 ] , fileRequest . getByte ( Files . size ( file ) - 1 ) )
assertArrayEquals ( new Class [ ] { int . class } , c . getParameterTypes ( ) )
assertEquals ( expResult , result )
assertEquals ( asStatementList ( "\\"foo;\\\\; b  a r\\\\\\"\\"'foo;\\\\; \\\\'b  a r\\\\\\"'''\\"foxlov  e \\"" ) , splitter . split ( expression ) )
assertEquals ( "http://localhost/?foo=test" , uri . toString ( ) )
assertNotNull ( ShortCode . fetcher ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( 403 , response . getStatus ( ) )
Assert . assertEquals ( 135 , clonedAttr . getAnnotation ( ) . getElementValues ( ) . size ( ) )
assertEquals ( body . toString ( ) , "hello" )
assertTrue ( permitted )
assertEquals ( Integer . MAX_VALUE , victim . readInt ( ) )
assertEquals ( 2 , queriedAnnotation . getTriples ( RDFFormat . JSONLD ) . size ( ) )
Assert . assertSame ( bitmap , ic . getBitmap ( ) )
assertXMLEqual ( "Invalid WSDL returned" , expectedDocument , result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( sourceLoader )
assertEquals ( 4 , count )
assertEquals ( identifier1 , identifier1 )
assertObjectEquals ( "[{f:'1'},{f:'true'},{f:'a'}]" , p . run ( bs , in , sa ) )
assertEquals ( 0 , getModifications ( artifacts ) . size ( ) )
assertEquals ( Arrays . asList ( 5 ) , procedureExecution . getOutputParameterValues ( ) )
assertTrue ( found )
assertTrue ( s1 . equals ( s2 ) )
assertArrayEquals ( d . toString ( ) . getBytes ( ) , d . asTextBytes ( ) )
assertFalse ( rv . isEmpty ( ) )
assertRequest ( "POST" , "Call/%s/Play/" , callId )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 1 ) )
Assert . assertEquals ( v1 , KCVSUtil . get ( store [ 0 ] , k , c1 , tx [ 0 ] [ 0 ] ) )
assertEquals ( 1 , session . from ( $ ( noteVar ) ) . where ( where ) . list ( $ ( noteVar ) ) . size ( ) )
assertNotNull ( result )
assertGreater ( "Spacer should've been pushed down (oldTop: " + oldTop + ", newTop: " + newTop + ")" , newTop , oldTop )
assertFalse ( Files . isHidden ( path ) )
assertEquals ( 5 , p1 . distance ( r ) , PRECISION )
assertThat ( event , is ( expected ) )
assertEquals ( "pub field value" , objmap . get ( "field_pub" ) )
assertEquals ( 600084223 , widget . color )
assertEquals ( expected . getTime ( ) , actual . getTime ( ) )
assertTrue ( "Value descriptor controller unable to update value descriptor" , controller . update ( valueDescriptor ) )
Assert . assertNotNull ( node )
assertEquals ( p1 , p2 )
assertThat ( CompUInt128 . extractValue ( actual ) , Is . is ( expected ) )
assertTrue ( writer . toString ( ) . contains ( "public class DomainClass implements SimpleType {" ) )
assertTrue ( correct . get ( namedEntity . getLabel ( ) ) . equals ( disambiguatedURL ) )
assertEquals ( expected , actual )
Assert . assertThat ( e . getMessage ( ) , containsString ( expected ) )
TestCase . assertEquals ( testStr , dpidStr )
Assert . assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertThat ( sheet . sheetName , is ( "������" ) )
assertEquals ( expected , actual )
Assert . assertEquals ( warning , result . getFirstHeader ( "Warning" ) . getValue ( ) )
context . assertTrue ( gotit . get ( ) )
assertTrue ( count > 0 )
assertTrue ( ! _event . hasStartTime ( ) )
assertEquals ( expected , actualQuery )
assertEquals ( 0.5 , Capacity . divide ( cap1 , cap2 ) , 0.001 )
assertSeen ( visible , g1 )
assertThat ( databaseHelper . lookupObject ( ObjectType . PERSON , "PP1-TEST" ) . containsAttribute ( AttributeType . CHANGED ) , is ( true ) )
assertCapacityUnitEqual ( cu , new CapacityUnit ( 3 , 0 ) )
assertNotNull ( result )
runner . assertAllFlowFilesTransferred ( PutHiveQL . REL_RETRY , 1 )
assertEquals ( mockJaxbList , response )
assertEquals ( expResult , result , 0.000001 )
assertThat ( result . getValueForAttribute ( AttributeType . ROUTE ) . toString ( ) , is ( "212.166.64.0/19" ) )
assertEquals ( "file Name,fileName1,fileName2" , message )
assertEquals ( "Values not equal: " + d . get ( new CellIndex ( 1 , 1 ) ) + "!=" + EPSILON , d . get ( new CellIndex ( 3 , 1 ) ) , EPSILON )
assertNull ( encodedText . decode ( ) )
assertNotNull ( "Social Profile list is null" , profiles )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_UNBOXING ) )
assertThat ( findFeature ( features , "StatusNotification" ) , is ( instanceOf ( StatusNotificationFeature . class ) ) )
assertThat ( isEquals , is ( true ) )
assertEquals ( "LVU" , cwuTx . get ( DEEP_WILDCARDED_PATH ) . getLeafFromGrouping ( ) )
Assert . assertEquals ( userKey1 , userKey2 )
assertThat ( reporters . size ( ) , is ( not ( reporters2 . size ( ) ) ) )
assertThat ( option , is ( new IntOption ( 100 ) ) )
Assert . fail ( "Caught unexpected exception: " + e . getClass ( ) . getSimpleName ( ) )
assertEquals ( caseDefinitionKey , activity . getKey ( ) )
assertTrue ( "Issue tracker URL is not correct" , test . equals ( titaProject . getTrackerUrl ( ) ) || test . equals ( titaProject . getTrackerUrl ( ) + "/tracker-1" ) )
assertEquals ( user , expected )
assertEquals ( child , mStore . getChild ( mRoot , child . getName ( ) ) . get ( ) )
Assert . assertEquals ( shifted . getPos ( ) , 100 )
assertNotNull ( result )
assertEquals ( expectedQuery , actualQuery )
assertThat ( description . toString ( ) , is ( "a stage that completed to a value that was <2>" ) )
assertEquals ( expect , src )
Assert . assertEquals ( 1 , workTree . size ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( maxUpdates , files . length )
assertMockEndpointsSatisfied ( )
assertEquals ( expected , actual )
assertNoProblems ( )
assertFiles ( "audit" , "audit.1970-01-01" , "audit.1970-01-01-7" )
assertions . doesNotContain ( values )
editor . assertProblems ( "bogus|Unknown property" )
assertExpectedResponse ( r , Response . Status . OK . getStatusCode ( ) , Boolean . FALSE . toString ( ) )
assertNotNull ( result )
assertNotNull ( header )
assertThat ( rendered , is ( test [ 1 ] ) )
Assert . assertNotNull ( dbRangerPolicyList )
assertEquals ( 35 , cap . get ( 0 ) )
assertEquals ( netName , obj . getNetName ( ) )
assertEquals ( map , map2 )
assertThat ( foundResources , contains ( p1id . getValue ( ) ) )
assertTrue ( future . isCancelled ( ) )
assertEquals ( "dump is complete" , dumpException )
assertEquals ( "person found inside range" , person , found )
assertEquals ( value , fieldValueGenerator . generatePreviousValue ( value ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertEquals ( m , r . get ( "map1" ) )
assertEquals ( "13.05.2014 23:52:28" , dateAsString )
Assert . assertEquals ( simpleModel , models . get ( SIMPLE_MODEL ) )
assertEquals ( state , cp . restoreState ( ( byte [ ] ) InstantiationUtil . deserializeObject ( serialized , Thread . currentThread ( ) . getContextClassLoader ( ) ) ) )
assertThat ( query . count ( ) , is ( 3L ) )
Assert . assertEquals ( test . getExpectedEntropy ( ) , test . getEntropy ( ) , test . getDelta ( ) )
assertTrue ( contextMapRef . get ( ) . isEmpty ( ) )
assertEquals ( expected , query . export ( ) )
assertMessage ( "<type>FORWARDED</type>" , 4 )
assertEquals ( 200 , output . getStatusCode ( ) )
assertTrue ( entity . getId ( ) > 0 && entity . getDistanceFromEarth ( ) == 2400000000000000L )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( result )
Assert . assertFalse ( StraightOrder . is ( p1 , p2 , p3 , IntegerNumberSystem . getInstance ( ) ) )
assertThat ( any . contains ( DAY_OF_QUARTER ) , is ( true ) )
assertEquals ( 255 , result . getVoxel ( 0 , 4 , 0 ) , .01 )
assertEquals ( "reserved_word.tableName" , database . escapeTableName ( "reserved_word" , null , "tableName" ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L * 24L * 60L * 60L * 1000L ) , mapper . readBitemporalDate ( columns , "ttFrom" ) )
Assert . assertTrue ( explodeDeploymentContentAndGetOutcome ( TEST_DEPLOYMENT_NAME , "page.html" ) )
Assert . assertTrue ( optimum . getValue ( ) > 0.1 )
assertTrue ( configuration . buildDownstream )
assertPutFails ( occurrence , OntopiaRestErrors . MANDATORY_OBJECT_IS_NULL )
Assert . assertEquals ( "{ \\"error\\" : {\\"statusCode\\":401,\\"code\\":\\"ERR10001\\",\\"message\\":\\"AUTH_TOKEN_EXPIRED\\",\\"description\\":\\"Jwt token in authorization header expired\\"} }" , status . toString ( ) )
assertEquals ( "An &#128512;awesome &#128515;string with a few &#128521;emojis!" , result )
assertLog ( Log . VERBOSE , "test trace argument argument2" )
assertEquals ( Months . of ( - 4 ) , test12 . dividedBy ( - 3 ) )
assertEquals ( 1 , requestImpl . getCookies ( ) . size ( ) )
assertEquals ( 1 , remotingAbstract . responseTable . size ( ) )
assertArrayEquals ( convert ( rhs ) , r )
assertFalse ( result )
assertEquals ( URI . create ( "http://test.com/headSub" ) , uri )
assertEquals ( exp , arr2 )
assertEquals ( expected , output )
Assert . assertEquals ( car , received . getPayload ( ) )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "indexPage" ) , "You arrived at index page" ) . apply ( driver ) )
assertEquals ( "value" , runTool ( cmd , args , conf ) )
assertEquals ( ( short ) 0x8000 , result )
assertEquals ( 1 , constructors . length )
assertEquals ( new BigDecimal ( "1234.45" ) . toBigInteger ( ) , bigD . toBigInteger ( ) )
assertEquals ( FILE_SEPATATOR , result )
assertEquals ( androidAppMetadata , ANDROID_APP_NO_DISPLAY_NAME_METADATA )
Assert . assertEquals ( dataString , new String ( read ) )
assertEquals ( true , result [ 0 ] )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( 1 , count )
assertThat ( subject . getResponseHeader ( ) , is ( " - From-Host: 127.0.0.1\\n - Date/Time: Sun Mar 3 12:55:00 2013\\n" ) )
assertThat ( resolver . getClassLoader ( ) , is ( this . getClass ( ) . getClassLoader ( ) ) )
Assert . assertEquals ( legacyVariantString , variant . toLegacyString ( ) )
assertThat ( target . parse ( ) , is ( false ) )
Assert . fail ( errorMessage )
assertTrue ( "Audit log handler should be created" , ops . exists ( TEST_FILE_HANDLER_ADDRESS ) )
assertEquals ( 4 , fixture . mark ( ) )
assertThat ( Reverse . reverse ( builder ) . toString ( ) , is ( "0123456789" ) )
assertFalse ( builder . isOptimized ( ) )
assertSame ( fieldVar , result )
Assert . assertEquals ( testEx , infEx . getCause ( ) )
assertEquals ( expected , actualQuery )
assertArrayEquals ( new Object [ ] { 5 , "five" } , ( Object [ ] ) execution . next ( ) . get ( 0 ) )
assertThat ( checkFailed , is ( true ) )
assertSame ( val , ConfigUtils . getMap ( config , null , "no-object" , "some-map" ) )
assertTrue ( r . isLastPublishedVersionPublic ( ) )
assertEquals ( 4 , httpIndexLoader . getTotalHits ( ) )
assertEquals ( "z" , newVal . val . get ( ) )
assertEquals ( "test" , read . getString ( db . DATA . VALUE ) )
Assert . fail ( "server-group was unrecognized" )
assertThat ( options . isMonochrome ( ) , equalTo ( true ) )
assertEquals ( expResult , result )
assertEquals ( "NaN" , sb . toString ( ) )
assertEquals ( 10 , all . size ( ) )
Assert . fail ( )
assertThat ( db . getUserInfo ( 1 ) . getAge ( ) , is ( i + 1 ) )
assertEquals ( nativeQuery , hibernateHandler . transform ( projection ) )
assertEquals ( "<p>This is <em>Sparta</em></p>\\n" , renderer . render ( document ) )
given ( ) . when ( ) . get ( resourcePrefix ) . then ( ) . statusCode ( 200 ) . assertThat ( )
assertTrue ( isReady )
assertTrue ( latch . getCount ( ) == nrOfValueThreads * nrOfLoopsPerThread )
Assert . assertEquals ( Config . DEFAULTS , properties )
assertTrue ( entity . isValid ( ) )
assertResponseContainsModel ( "<img class=\\"componentIcon\\" src=\\"componentregistry/api/componenticon\\"/>\\n" + "<img class=\\"componentIcon\\" src=\\"componenticon\\"/>\\n" + "</img>" )
assertArrayEquals ( data , uncompressed )
assertEquals ( "Rooted Android Data Collector" , testResult )
assertSame ( cause , CRestException . handle ( e ) )
assertTrue ( result )
Assert . assertEquals ( TxStatusMediaType . TX_CDELAY , content )
assertThat ( delegate . getDimension ( ) , equalTo ( 2 ) )
this . assertGet ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplateWith
assertEquals ( mp . getCount ( ) , 2 )
assertFileContents ( tartest )
assertEquals ( 0 , exporter . getFileNames ( ) . size ( ) )
assertEquals ( 5 , results . size ( ) )
arrays . assertContains ( description , new short [ 1 ] , new short [ 0 ] )
assertions . isNotLessThan ( expected )
assertNotNull ( "Social Friends (JSON STRING)" , friends )
assertEquals ( "%F0%9F%98%83" , Encoder . encode ( s ) )
assertTrue ( inStatus . isFile ( ) )
assertEquals ( "k0" , nodeToStringTransformer . transform ( ) )
Assert . assertEquals ( windowSize , determiner . getNumberOfIterations ( ) )
assertNotNull ( "Messages are not null" , messages )
assertEquals ( schedulingIterations * noOfAlerts , list . size ( ) )
Assert . assertFalse ( GeneralUtilities . safeEquals ( zero , null ) )
assertSame ( sseq , manager . getSequence ( message , inSid , maps ) )
assertEquals ( expected . size ( ) , sds . size ( ) )
assertEquals ( ( short ) 8 , ( short ) result . getShortWrapperValue ( ) )
assertThat ( token . getType ( ) , is ( PCRELexer . HorizontalWhiteSpace ) )
assertEquals ( "http://example.com:signed:0:owner:0:0:0:0:0" , builder . build ( ) )
Assert . assertFalse ( isTmp )
Assert . assertTrue ( out . contains ( "customized handler:CustomException" ) )
Assert . assertEquals ( chave , infoEventoManifestacaoDestinatario . getChave ( ) )
assertThat ( actual , contains ( likeVertex ( ) . withTimId ( "id3" ) , likeVertex ( ) . withTimId ( "id2" ) ) )
assertThat ( result , contains ( 4 , 4 , 4 , 3 ) )
assertEquals ( 33100 , timeout )
assertFalse ( actualResult )
assertEquals ( "wrong result" , new BigDecimal ( "24" ) , expression . getValue ( ) . asNumber ( ) )
assertNotSame ( result , arg )
assertEquals ( propValue , result )
TestCase . assertTrue ( result )
assertEquals ( "aTestString" , classUnderTest . getName ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 123 + 1 , ssdbClient . incr ( "counter" ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( p1 . getFirst ( ) . subtract ( p2 . getFirst ( ) ) , p1 . getSecond ( ) . subtract ( p2 . getSecond ( ) ) , 0d )
assertEquals ( ZonedDateTime . parse ( "2017-09-01T09:00-07:00" ) , getNextExecutionTime ( myCron , time ) )
assertEquals ( animal , deserialized )
assertEquals ( 2 , searcher . search ( q , 100 ) . totalHits )
assertNotNull ( "The connection exists" , stubConnectionHandle . getConnection ( CLUSTER_NAME ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertEquals ( EnumField . Size . SMALL , entity . getSize ( ) )
assertThat ( result1 == result2 , is ( true ) )
assertTrue ( basicAccessAuthenticator . authenticate ( request ) . isPresent ( ) )
assertThat ( inputStream , notNullValue ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertTrue ( "Button click should be logged" , logContainsText ( "Button clicked!" ) )
assertEquals ( "{public static void main(String[] args)" , actualContent )
assertNotNull ( item )
assertNull ( identifiable )
assertNotNull ( SyncList . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( currentUser , currentUser2 )
assertEquals ( saved , member . get ( ) )
assertTrue ( manager . getRules ( ) . contains ( forwardBlz ) )
assertEquals ( "true" , mustache . render ( Json . createReader ( new StringReader ( "[\\"1\\",true,null]" ) ) . read ( ) ) )
assertTrue ( ConnectionStringUtils . blobContainer ( connectionString ) . isPresent ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertTrue ( entity . isValid ( ) )
assertEquals ( "012" , result . toString ( ) )
assertEquals ( 0 , violations . size ( ) )
assertNull ( proxy . getConnection ( ) )
assertEquals ( 200 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertChangeResultsPage ( changeResultsPage )
assertEquals ( "https://api-fxtrade.oanda.com/v1/accounts/123456/trades/1800805337" , service . getTradeForAccountUrl ( tradeId , OandaTestConstants . accountId ) )
assertFalse ( Arrays . equals ( randBytes1 , randBytes2 ) )
assertThat ( list . size ( ) , is ( not ( 0 ) ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
Assert . assertEquals ( 0 , engineRule . getHistoryService ( ) . createUserOperationLogQuery ( ) . entityType ( EntityTypes . PROCESS_INSTANCE ) . count ( ) )
assertThat ( result . size ( ) , is ( 3 ) )
assertThat ( stdOutContent . toString ( ) , equalsIgnoringOSSpecificLineSeparators ( "1.7.2-teamcity-SNAPSHOT\\n" + "    ##teamcity[setParameter name='env.PROJECT_VERSION' value='1.7.2-team
assertFalse ( validator . validate ( connectionLimits , PUT ) . passedValidation ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
Assert . assertEquals ( expected , quickTypeDependencyList )
assertTrue ( hv > 0.65 )
assertArrayEquals ( refar , d . getResult ( ) )
assertFalse ( instance . isBuilding ( event ) )
assertBoard ( "�尖�尖�尖�尖��\\n" + "��   ��\\n" + "��
assertEquals ( Arrays . asList ( null , NoteType . A , NoteType . B , NoteType . TYPE1 ) , session . from ( $ ( n ) ) . orderBy ( $ ( n . getType ( ) ) . asc ( ) ) . list ( $ ( n . getType ( ) )
assertEquals ( "SELECT TO_DATE(TEST_HIST.CREATED_AT) DT, " + "COUNT(TEST_HIST.ID) NUM_QUERIES " + "FROM H2.PUBLIC.TEST_HIST INNER JOIN H2.PUBLIC.UINFO " + "
Assert . assertEquals ( 1 , ret . getId ( ) )
assertEquals ( expectedRemoteCallReturn , testRemoteCallReturn )
assertEquals ( "subscriptionId1" , app . getSubscriptionId ( ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
Assert . assertArrayEquals ( convert ( expected ) , solution )
assertEquals ( a , b )
assertEquals ( 0 , found )
assertEquals ( "test" , doc . getContentField ( "out" ) . toString ( ) )
assertTrue ( Arrays . equals ( new byte [ ] { 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x
assertThat ( instance . counter , is ( 1 ) )
assertEquals ( "Required profiles" , "123" , new FelixPlatformBuilderF160 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertTrue ( Graphene . waitGui ( ) . until ( ExpectedConditions . textToBePresentInElementLocated ( By . className ( "error" ) , UNAUTHORIZED ) ) )
Assert . assertEquals ( 5 , numericValue . intValue ( ) )
Assert . assertEquals ( 0.0 , diag . getEntry ( 1 , 2 ) , Precision . SAFE_MIN )
assertScoreAndParse ( content , null , 6 )
assertEquals ( "SELECT firstname, lastname UNION ALL SELECT a, b" , statement . toString ( ) )
assertTrue ( dbStopped )
assertEquals ( "Samson" , book . getName ( ) )
assertThat ( result , is ( sameInstance ( primaryKeysRequest ) ) )
Assert . assertEquals ( 2 , tweetsByUser . count ( ) )
assertEquals ( 0 , argList . size ( ) )
assertEquals ( Sets . newHashSet ( "s1" , "s2" , "s3" ) , sets )
assertTrue ( rowChange . compareTo ( rowChange2 ) == 0 )
assertEquals ( 5 , x )
assertThat ( paginate , is ( not ( nullValue ( ) ) ) )
assertEquals ( "meat" , actualPrefs . getValue ( "meat" ) )
assertEquals ( expected . getTime ( ) , parsedDate . getTime ( ) )
assertThat ( thread . getName ( ) , CoreMatchers . containsString ( "prefix-test" ) )
assertEquals ( "http://localhost/things{/id}" , affordance . expand ( ) . getHref ( ) )
assertTrue ( result . contains ( expectedResult ) )
assertEquals ( "Find by name and device not returning a list with one reading" , 1 , readings . size ( ) )
assertEquals ( jobCounters . getCounters ( ) . size ( ) , 2 )
Assert . assertEquals ( polygon , result . getValue ( ) )
assertEquals ( 5 , retryCount )
assertEquals ( 1 , count )
Assert . assertEquals ( "/wro4j/wro/path/to/" , Context . get ( ) . getAggregatedFolderPath ( ) )
UmaTestUtil . assert_ ( authorization )
assertEquals ( expected , actual , 0.0 )
assertThat ( coll , equalTo ( reference ) )
assertThat ( url . toString ( ) , endsWith ( AppEngineTester . LOCAL_RUNTIME_LIB_LOCATION ) )
assertEquals ( ref . getUri ( ) . toString ( ) , obj . get ( "uri" ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoVolume ( ) . toString ( ) )
Assert . assertNotSame ( "Pass phrases should not match" , phrase1 , phrase2 )
assertionHelper . assertLocalScratchFileLengthEquals ( IRODS_TEST_SUBDIR_PATH + "/" + testRetrievedFileName , testFileLength )
assertThat ( meanTaxFactor , equalTo ( TAX_FACTOR ) )
assertThat ( sorted . get ( 0 ) . getUuid ( ) , is ( "ended 2015" ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( "<mongo-datastore name=\\"name\\">\\n" + "  <hostname>hostname</hostname>\\n" + "  <database>database</database>\\n" + "  <user>user</username>\\n" + "  <password>" +
assertEquals ( expecting , found )
assertEquals ( "c" , result . toString ( ) )
assertThat ( expected , equalTo ( actual ) )
assertEquals ( out . get ( ) , LARGE_NUM - 1.0 , 0.0 )
assertThat ( joynrVersionnAnnotation . major ( ) , equalTo ( 1 ) )
assertEquals ( parseCalendar ( "20131103-07:45:00" , TimeZone . getTimeZone ( "UTC" ) ) , dh . getCalendarAfter ( easternTime ) )
assertEquals ( getFailureMessage ( ) , assertion , slice )
Assert . assertNotNull ( ref )
assertTrue ( ! result )
assertEquals ( PojomatorFactory . makePojomator ( Simple . class ) . doToString ( new Simple ( ) ) , "Simple{x: {foo}}" )
assertFalse ( "Did not expected to find GROUP BY limit optimization in: " + query , explainPlan . contains ( " LIMIT 3 GROUPS" ) )
assertTrue ( seq . getNumberOfSubSequences ( ) == 3 )
assertEquals ( "Wrong boundaries" , singletonList ( "0123456789abcdef" ) , boundaries )
assertEquals ( "a=eh:/A;b=eh:/B" , q )
assertEquals ( testString . substring ( 1 , 3 ) , writer . toString ( ) )
assertEqualHash ( byteBuffer , murmur3a )
assertEquals ( EXPECTED_HASH , classFile . getHash ( ) )
assertEquals ( count , puts . size ( ) )
I_BpartnerImportTestHelper . assertBpartnerImported ( ibpartner )
Assert . assertEquals ( 0 , instances . size ( ) )
assertTrue ( sum >= 5.0 )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertCommandLineArgs ( "localhost" , "etc/jmxetric.xml" , "multicast" , "true" , "ProcessName" , "SpoofName" )
assertEquals ( "a}\\n" , found )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , true , "test" , null , "fubar" , 10 ) )
assertEquals ( SID . TYPE1 , new SIDTypeNode ( testBinaryReaderBuilder , chunkHeader , parent , 4 ) . getType ( ) )
Assert . fail ( "Should have thrown exception" )
assertEquals ( "Hello3" , new ImportsToFQCN ( imports ) . resolveFQCN ( "Hello3" ) )
assertEquals ( 2d * Math . cos ( Math . E ) * Math . E , e . evaluate ( ) , 0d )
assertThat ( rows , is ( 1 ) )
assertEquals ( "Incorrect number of commands returned" , 1 , testCommands . size ( ) )
assertThat ( test ( mock . getVerifier ( ) , "Hello1" , "Hello2" , "Hello3" ) , hasSize ( 1 ) )
Assert . assertEquals ( expected , Strings . unCapitalizeFirstChar ( data ) )
assertEquals ( obj . toString ( ) , "LSAPR_POLICY_AUDIT_EVENTS_INFO{AuditedEvents:[]}" )
Assert . assertEquals ( threadNum , res . size ( ) )
Assert . assertEquals ( "" , expected , actual , 0d )
assertEquals ( LocalDate . of ( 2012 , 7 , 20 ) , test )
assertNull ( "2MB allocation shouldn't be satisfied by LAB." , alloc )
assertTrue ( "Schemas" , schemaHomology . schemasMatch ( schema1 , schema2 , exclusionRegex ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertTrue ( "Output bytes are not the expected value" , Arrays . equals ( new byte [ ] { 0x30 , 0x20 , 0x48 , 0x45 , 0x41 , 0x44 , 0x0D , 0x31 , 0x20 , 0x43
assertEquals ( clean ( input ) , output )
assertNull ( route )
assertThat ( logRecords , containsInfo ( CM_CREATED ) )
assertEquals ( expected , actual )
assertFalse ( observer . accept ( path ) )
Assert . assertEquals ( OVERRIDING_USERNAME , callIntermediateWhoAmI ( ) )
Assert . assertEquals ( CatalogResponseMessage . INTERNAL_SERVER_ERROR , response . getCode ( ) )
assertions . isNotEmpty ( )
assertSame ( op , new OperationBuilder ( op ) . build ( ) . getOperation ( ) )
assertEquals ( this . multipleCom , result . getAttributes ( ) )
Assert . assertEquals ( Explain . ExplainType . RUNTIME , o . explainType )
assertNull ( "There should be no last unfixed alerts" , lastUnfixed )
Assert . assertEquals ( 1 , n )
assertMessageFound ( goodMessage )
Assert . assertEquals ( idSet . size ( ) , 16000 )
assertEquals ( "file" , result . getName ( ) )
assertEquals ( "{\\"id\\":100,\\"version\\":10,\\"schema\\":\\"string\\"}" , request . toJson ( ) )
Assert . fail ( "Neither source listing not source paths present" )
Assert . assertEquals ( Arrays . asList ( 1 , "_" , 2 ) , res . getValues ( ) )
assertResultSet ( res )
assertEquals ( mockCellWithTags , newCell )
assertTrue ( authenticate ( ) )
assertTrue ( exception . getMessage ( ) . contains ( "field has no generic type" ) )
assertEquals ( newValue , globalProperties . getProperty ( DEFAULT_PROPERTY_KEY ) )
Assert . assertEquals ( "/entity/" + funeral . getId ( ) + ".test" , objectTree . get ( "href" ) )
this . assertVerification ( )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
assertEquals ( 0.75 , comparator . getSimilarity ( cb1 . getJCas ( ) , cb2 . getJCas ( ) ) , epsilon )
assertNotNull ( scriptStatement )
assertEquals ( expected + "-" + actual , expected , actual )
assertThat ( sampleEntities . getTotalElements ( ) , is ( greaterThanOrEqualTo ( 1L ) ) )
assertEquals ( expected , actual )
assertTrue ( server . isAuthenticated ( ) )
assertThat ( userCount , is ( 0 ) )
assertThat ( locationManager . getTableLocation ( ) , is ( new Path ( TABLE_LOCATION + "/partition" ) ) )
assertThat ( systemMessagesProvider , notNullValue ( ) )
assertEquals ( 2 , stack . size ( ) )
assertEquals ( w , col . getWidth ( ) )
assertEquals ( encodedSignature , "BQwm1HCz0cjHYbulWMumkhZgyb2dD93uScXmC6Fv8Ik" )
assertEquals ( pp . getValue ( ) , new Payload < > ( "hello1" ) . getValue ( ) )
assertTrue ( found )
Assert . assertEquals ( result , true )
assertEquals ( moonsBefore - 1 , moonsAfter )
assertEquals ( org . drools . core . test . model . Person . Nested1 . Nested2 . class , resolver . resolveType ( "Person.nested1.nested2" ) )
assertThat ( router . parse ( url , HttpMethod . POST , null ) . getMethod ( ) , is ( equalTo ( method ) ) )
MatrixTestAbstract . assertMatrixEquals ( eI , c )
InterpolationTest . assertArray2dEquals ( test , roundtrip , 0.01f )
Assert . assertEquals ( expectedPorts , EC2NetworkValidator . getPortRangeFromAclEntry ( networkAclEntry ) )
assertFalse ( "The same keys must not match:" , key1 . equals ( key2 ) )
assertTokens ( Tokens . PLUS , new IntValueToken ( - 1 ) )
assertEquals ( destroyableCount , result . size ( ) )
Assert . assertTrue ( ef_bnet . equal_efBN ( ef_testnet , 0.05 ) )
assertEquals ( "ex:s" , x )
assertTrue ( ord . isCaseInsensitive ( ) )
assertEquals ( "AB C D E F G H I J K L M N O P" , joined )
assertEquals ( "default" , cm . toString ( ) )
assertEquals ( ( Long ) i , result . get ( result . size ( ) - 1 ) )
assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
assertThat ( ( Person ) ( ( EntryPoint ) oie . getValue ( ) . getObject ( ) ) . getObject ( ) , is ( person ) )
assertThat ( outputStream . toString ( ) , is ( "" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?>\\n" + "<dbupdate created=\\"2012-12-01 00:00:00\\">\\n"
assertTrue ( validator . validate ( EntityNames . SECTION , sectionIds ) . equals ( sectionIds ) )
Assert . assertEquals ( "Wrong number of records in join result." , NUM_KEYS * BUILD_VALS_PER_KEY * PROBE_VALS_PER_KEY , numRecordsInJoinResult )
assertThat ( desc . toString ( ) , is ( "was a value greater than <5>" ) )
assertEquals ( someCert , actualPublicKeyCert )
assertThat ( isValid , is ( false ) )
Assert . assertEquals ( "2014:01:01" , this . vocabulary . getVersion ( ) )
Assert . assertEquals ( "Hello World!" , sc . saySomething ( ) )
Assert . assertNull ( tmp )
assertEquals ( "[[['s1', 's2'], ['s3', 's4', 's5']]" , ToString . toStringOf ( array ) )
assertEquals ( witnessList , tokenList )
assertNull ( dataset )
assertTrue ( job . getConfiguration ( ) . getBoolean ( AvroJob . INPUT_IS_GENERIC , false ) )
Assert . assertTrue ( testMatcher . matches ( examplePath ) )
Assert . assertEquals ( icmsSetado , icms . getIcms90 ( ) )
assertUnderflow ( ( double ) x * ( double ) y , result , x * y )
assertTrue ( filter . matches ( operation , poolInfoMap ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
Assert . assertTrue ( ps1 == ps2 )
assertTrue ( "Latch not fired" , cdl1 . await ( 5000 , TimeUnit . MILLISECONDS ) )
assertEquals ( blockers . size ( ) , 0 )
doubles . assertNotLessThan ( description , null , 8d )
assertEquals ( 6.75 , RestaurantBill . calculateTotal ( mealCharge , tax , tip ) , 0 )
assertThat ( testOutcome . toString ( ) , is ( "App should work:Step two, Grouped steps [Step one, Step two, Step one, Step two]" ) )
assertFalse ( listOutput . isEmpty ( ) )
assertNotNull ( ksl . getResourceDocument ( new StringBufferInputStream ( xml ) ) )
assertEquals ( 15 , list . get ( 0 ) )
Assert . assertEquals ( "John3^Doe" , userId )
assertNotNull ( projectionRef )
assertEquals ( 5 , client . getIdleConnections ( ) )
assertEquals ( OK . getStatusCode ( ) , changes . getStatus ( ) )
Assert . assertTrue ( _c . canConvertTo ( Long . TYPE ) )
assertEquals ( trueConcept , ObsResource1_8 . getValue ( obs ) )
assertThat ( ( Counter ) c1 . delta ( c0 ) , is ( new Counter ( 10L ) ) )
assertNotNull ( prorroga . getId ( ) )
assertSame ( a . getClass ( ) , ObjectUtils . getClass ( a ) )
assertEquals ( group1 . getTitle ( ) , actaul . getTitle ( ) )
assertTrue ( JobUtils . isJobExecutionAbandonable ( jobExecution ) )
assertEquals ( 1 , handlerContainer . onUnbindMethodCalled )
assertTrue ( elements . isEmpty ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert . assertEquals ( 4 , MathArrays . distanceInf ( p1 , p2 ) )
assertThat ( serialisedProblemsDetailsOf ( job ) . value ( ) , hasItem ( rogueAi ) )
Assert . assertEquals ( "Invalid password" , "foobar" , passwordCallback . getPassword ( ) )
assertTrue ( closed . await ( 4 , SECONDS ) )
assertEquals ( false , result )
Assert . assertEquals ( expected , actual )
tester . assertRenderedPage ( page )
assertEquals ( userGroupDao . selectUserGroupByGroupId ( "user1" ) . size ( ) , 2 )
assertEquals ( expected , actual , 0.0 )
assertEquals ( 268 , ret )
assertFalse ( AuthzResolver . authorizedInternal ( session , "test_authorized_groupadmin_voadmin" , Arrays . asList ( createdVo , createdGroup ) ) )
assertEquals ( Long . valueOf ( 1L ) , myTestInstance . updateAsync ( doc , update ) . get ( ) )
assertEquals ( "1" , output . toString ( ) )
assertEquals ( TypeInfoCreator . createBoolean ( ) , orcType )
Assert . assertTrue ( result )
Assert . assertThat ( userStore . size ( ) , is ( 5 + 1 ) )
assertThat ( builder . getPatches ( ) , arrayWithSize ( 5 ) )
assertNull ( response )
assertThat ( effect , is ( 3 ) )
assertThat ( output , is ( equalTo ( "dq\\"a2b\\"dq " + ":d2q\\"a2b\\\\\\"c3b\\"d2q " + "dsds'xyz' de c'azv\\"aeae' 'aa\\\\'aa'
assertEquals ( VendorOptionManager . getInstance ( ) . getDefaultVendorOptionVersion ( ) , field . getVendorOption ( ) )
assertThat ( new ProjectDirectory ( output ) . list ( ) . length , is ( 0 ) )
assertThat ( packet . getSpec ( ) . getServers ( ) , hasItems ( "server1" , "server2" ) )
Assert . assertNotNull ( new Bean80BindMap ( ) )
assertEquals ( "{\\"error\\":{\\"code\\":null,\\"message\\":\\"ErrorMessage\\",\\"details\\":[]}}" , jsonString )
assertEquals ( expectedString , formattedDate )
assertEquals ( "" , result )
assertTrue ( result )
assertFalse ( elPresent )
assertArrayEquals ( new String [ ] { "leftChild" , "root" } , treeContent )
Assert . assertEquals ( childConfig . getUserID ( ) , result . getUserID ( ) )
assertFalse ( game . isGameOver ( ) )
assertThat ( id . get ( ) , is ( "OTHER_THING_0001234" ) )
assertEquals ( 5 , store . count ( ) )
mock . assertIsSatisfied ( )
assertThat ( result , is ( equalTo ( newFile ) ) )
assertEquals ( null , result )
assertThatWorkflowInstanceCompletedAfter ( workflowInstanceKey , "end-2" )
assertEquals ( notAfter , certificate . getNotAfter ( ) )
assertThat ( htmlElement . exists ( ) , is ( true ) )
assertExpression ( jc , "foo.bar" , "123" )
Assert . assertEquals ( 10.555 , v , 1e-10 )
assertThat ( output , containsString ( "DICOM instance search results:" ) )
assertEquals ( exp , z )
assertEquals ( keyExpected , keyBuilt )
assertThat ( subject . shouldProcess ( message ) , is ( false ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertNull ( "Must be null" , ovsdbBridgeAugmentation )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( text ( contents ) , is ( "0a\\t0b\\t0c\\r\\n1a\\t1b\\t1c\\r\\n2a\\t2b\\t2c\\r\\n" ) )
assertTrue ( output . indexOf ( "sayHiArray" ) > - 1 )
assertTrue ( c . isEnabled ( ) )
BeanAssert . assertBeanEquals ( bean , parsed )
assertEquals ( map . get ( "child" ) , map . get ( "child" ) )
assertEquals ( Sets . newHashSet ( "Ke3+" , "Kf4+" , "Kd3+" , "Kf5" ) , moves )
Assert . assertEquals ( expected , actual )
assertThat ( initiativeInfo . hasTotalSupportCountAtLeast ( 25 ) , is ( false ) )
assertThat ( result , is ( "Result From Target Endpoint" ) )
assertEquals ( expected , clusters )
Assert . assertEquals ( 0 , data . getNumEvents ( ) )
assertNull ( reader . overflowAtoms ( ) )
assertNull ( graph )
assertArrayEquals ( expected , check . getRequiredTokens ( ) )
assertThat ( result . fullName ( ) , is ( Object . class . getName ( ) ) )
assertThat ( diff , hasSize ( 0 ) )
assertEquals ( 2 , allViolations . size ( ) )
assertEquals ( "" , result )
assertThat ( PrettyTime . of ( new Locale ( "ar" ) ) . print ( duration , TextWidth . WIDE ) , is ( "؜-佟佶 ؜-伲 爻�丞� �
assertThat ( outputDirectory . getPath ( ) , is ( "target/reports" + FILE_SEPARATOR + "thucydides" ) )
assertThat ( fs . exists ( path2 ) , is ( false ) )
assertFalse ( "Unable to update non existing user" , success )
Assert . assertEquals ( 1 , patients . size ( ) )
assertEquals ( 1 , endpointMapping . getOrder ( ) )
assertEquals ( result . getStrategy ( ) , DYNAMIC )
Assert . assertEquals ( 0 , cache . size ( ) )
assertEquals ( "pred 3 desa钮ro�iami" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( Long . valueOf ( 2 ) , count )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertEquals ( dog , ExternalizableHelper . fromBinary ( binDog , v2 ) )
Assert . assertEquals ( 70 , analyser . getLoadDelivered ( ) . get ( 0 ) , 0.01 )
assertEquals ( childIdx , child . getIndex ( ) )
Assert . assertEquals ( "f1" , ret . toString ( ) )
assertEquals ( 6 , sum . get ( ) )
assertEquals ( "Geometric mean not expected" , u . getGeometricMean ( ) , u . getMean ( ) )
assertEquals ( "toString" , visitor . visit ( sub ) , sub . toString ( ) )
assertEquals ( ByteString . decodeHex ( "72616ec999" ) , data . readByteString ( ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertFalse ( result )
assertEquals ( buf . toString ( ) , expected )
Assert . fail ( )
assertThat ( dispatched , is ( ASYNC_PRIVATE_FLOW_MSG + "." + ASYNC_MAIN_FLOW_THREAD_NAME + "." + ASYNC_PRIVATE_FLOW_NAME + "@" + ASYNC_MAIN_FLOW_THREAD_NAME ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "gifImageTest05.pdf" , sourceFolder + "cmp_gifImageTest05.pdf" , destinationFolder , "diff_" ) )
assertEquals ( expected , actualQuery )
assertEquals ( actual . getUiLayoutClass ( ) , "com.sldeditor.ui.layout.SLDEditorDefaultLayout" )
assertEquals ( "Expected null but exception found" , null , ex )
assertTrue ( "There was no cacheable headers" , HeaderUtils . hasCacheableHeaders ( headers ) )
Assert . assertEquals ( 0.0 , diag . getEntry ( 1 , 2 ) , Precision . SAFE_MIN )
assertEquals ( ( Integer ) 15 , task . join ( ) )
assertEquals ( 0 , result . numFindings ( ) )
assertEquals ( 33 , graph . countEntities ( "Test" ) )
assertFalse ( topic . isPlugable ( ) )
Assert . assertEquals ( descricaoEvento , eventoRetorno . getDescricaoEvento ( ) )
assertThat ( description . toString ( ) , is ( "was not a JSON string that matches {\\n" + "}" ) )
assertXpathNotExists ( "/a:feed/at:deleted-entry" , xmlString )
assertEquals ( val , result )
assertEquals ( 1 , count )
assertTrue ( wrapper . isRunInTx ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( Result . FAIL , name . apply ( item , - 1 ) )
assertNotNull ( dummy )
Assert . fail ( e . getMessage ( ) )
assertEquals ( 1 , result )
assertEquals ( this . object , b . getObject ( ) )
assertEquals ( value , bean . getIPad ( ) )
assertThat ( record . getClassifier ( ) , is ( nullValue ( ) ) )
assertNull ( namedConfig . get ( "key" ) )
assertEquals ( expected , rewrite ( input ) )
assertThat ( output1 , equalTo ( output2 ) )
assertNotNull ( ucioLoaded )
assertTrue ( entity . getVersion ( ) > 0 && entity . getVersion ( ) < 1 )
assertEquals ( false , start )
assertEquals ( expectedMap , map )
assertEquals ( i - 1 , ret )
Assert . assertEquals ( 0 , patientCount )
assertArrayEquals ( expectedResult , actualResult , 0.00001 )
assertEquals ( expected , calc , 1e-5 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff52_" ) )
assertEquals ( "(NP (DT an) (-LRB- -LRB-) (VBG offending) (-RRB- -RRB-) (NN country)\\n" , out . toString ( ) )
Assert . assertEquals ( cana , notaInfo . getCana ( ) )
assertChangeResultsPage ( changeResultsPage )
assertEquals ( "Folder/" , uriTools . relativePath ( base , uri ) . toASCIIString ( ) )
assertTrue ( validated )
assertThat ( EventDispatcher . pending . get ( ) , hasSize ( 1 ) )
assertEquals ( "<html><body><h1>Hello world!</h1></body></html>" , engine . compileMustache ( "minify_html" , "<html><body><h1>Hello world!</h1></body></html>" ) . render ( Minify .
assertEquals ( "foo, bar" , result )
assertEquals ( "No blueprint specified" , response )
Assert . assertFalse ( processor . isComplete ( ) )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) , "rollback" )
assertEquals ( "(= 34 abc)\\n" , found )
assertNotNull ( certificate )
assertEquals ( messageOne . get ( "id" ) , result . get ( "id" ) )
assertThat ( systemOutRule . getLog ( ) , containsString ( "Noop Blaze!" ) )
assertTrue ( testFailed . isEmpty ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( KEY_HANDLE_BASE64 , response . getKeyHandle ( ) )
assertThat ( resizedImage . getHeight ( ) , is ( 788 ) )
Assert . assertEquals ( description , value )
assertEquals ( ( long ) 8 , result . getLongValue ( ) )
assertNotNull ( result )
assertTrue ( params . hasValue ( "a" ) )
assertEquals ( expected , actual )
tester . assertCompleteMatch ( )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertEquals ( sink , actualSink )
assertEquals ( true , Wxs . check ( signature , timestamp , nonce , token ) )
assertEquals ( - 28800000L , timestamp . getTime ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( tree ) instanceof WTreeRenderer )
Assert . assertEquals ( valorTest , valor )
assertTypeImportsAndSpellings ( types , "foo.bar" , ImmutableList . of ( "java.util.List" , "java.util.Map" , "java.util.Timer" , "java.util.regex.Pattern" , "java.math.BigInteger" )
assertArgumentParserException ( args )
assertSame ( gav0 , ReleaseIdComparator . getEarliest ( list ) )
assertEquals ( "Count changed" , 44 , model . getCount ( ) )
files . assertIsEmptyDirectory ( INFO , actual )
assertEquals ( otherKeyTreeMap . size ( ) , empty . size ( ) )
assertEquals ( "SELECT FROM V WHERE PARAMETER = 5" , q . toString ( ) )
assertThat ( model . size ( ) , is ( 0 ) )
assertThat ( result , is ( mockBundle ) )
Assert . assertTrue ( success . get ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
Assert . assertEquals ( format ( "Wrong best order for LimitOrders %s, %s" , a1 , b1 ) , BookSanityChecker . hasErrors ( book ) )
assertThat ( message . toJSON ( ) , is ( ( JsonElement ) json ) )
assertThat ( request . getStagingDirectory ( "product-00" ) , equalTo ( "calvalus.wps.remote.user/product-00" ) )
Assert . assertEquals ( 1 , families . length )
assertEquals ( roadMapping . count ( ) , LANE_COUNT )
assertDeploySucceeded ( build )
assertThat ( matcher , notNullValue ( ) )
assertRendering ( repeat ( "\\\\*a " , x ) + "b" + repeat ( "\\\\*a " , x ) + "b" , "<p>" + repeat ( "\\\\*a " , x ) + "b" + repeat ( " a</p>" , x )
assertEquals ( 2 , tasks . size ( ) )
assertNotNull ( model )
Assert . assertTrue ( verifyRes )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" + "<test><date>20120101</date></test>" , stringifiedTestObject )
assertTrue ( e . getMessage ( ) . contains ( badCell ) )
assertThat ( outputDirectory , not ( containsText ( "javax.validation" ) ) )
assertEquals ( 1 , wiser . getMessages ( ) . size ( ) )
assertTrue ( contentC . isVisible ( ) )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( "field.asInteger()" , p . toString ( ) )
Assert . assertEquals ( "Node{edge=FOO, value=-, edges=[]}" , node . toString ( ) )
assertThat ( writer . toString ( ) , is ( "OK one=two&arg1=one&arg2=2" ) )
assertServletWasInvokedWith ( entity )
assertThat ( log , is ( "" + "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"no\\"?>\\n" + "<dbupdate created=\\"2012-12-01 00:00:00\\">\\n" + "    <
assertTrue ( flag )
assertDefaultStepTimeout ( 1m )
Assert . assertEquals ( response . getStatusLine ( ) . getStatusCode ( ) , HttpStatus . SC_NOT_FOUND , "We should get http not found error" )
assertThat ( response , is ( equalTo ( expected ) ) )
assertThatToolBarAncestorIs ( oldAncestor )
assertEquals ( "classpath config should match ConfigLoader classpath config" , classpathConfig , loadedConfig )
assertEqualsEvenUnderWindows ( "{\\n" + "  \\"from\\" : 0,\\n" + "  \\"size\\" : 10,\\n" + "  \\"query\\" : {\\n" + "    \\"match_all\\" : { }\\n
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertDegenerate ( scan )
Assert . assertEquals ( 5 , loc )
Assert . assertEquals ( "c where a=1 " , SqlObject . removeOrderBy ( sql ) )
TestUtil . assertSuccess ( testResultWriter )
Assert . assertEquals ( "logger" , pl . getPluginName ( ) )
assertNotNull ( National . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "US" ) . read ( ) )
assertEquals ( expResult , result )
assertThat ( formatter . format ( PlainDate . of ( 0 , 1 , 1 ) ) , is ( "BC 0001-01-01 (Q1)" ) )
assertEquals ( getExpectedSchemaAndValue ( Schema . OPTIONAL_BOOLEAN_SCHEMA , expectedValue , expectedName ) , result )
assertEquals ( post , posts [ 2 ] )
assertNull ( output )
assertEquals ( expected , actualQuery )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( PersonGenderCodeType . UNKNOWN , output . getRegularCPRPerson ( ) . getPersonGenderCode ( ) )
assertEquals ( "BasicBean" , basicBean . name ( ) )
assertNoCause ( "message" )
AssertJUnit . assertEquals ( "\\"lijz\\"" , ret )
mockEndpoint . assertIsSatisfied ( )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
TestCase . assertEquals ( 1 , result )
assertEquals ( "Algemene fout." , message )
iterables . assertContainsExactlyInAnyOrder ( info , actual , expected )
assertEquals ( typicalPrice , typicalPriceIndicator . getValue ( i ) )
assertEquals ( "Base for strings is wrong" , "192.168.000.001" , parsed )
assertThat ( actualExceptionLevel , is ( expectedExceptionLevel ) )
assertEquals ( null , acualValue )
assertEquals ( r1 , r2 )
Assert . assertFalse ( seen . contains ( null ) )
assertEquals ( check . getValue ( ) , actual )
assertTrue ( StateHolder . get ( ) . contains ( "Hello" ) )
Assert . fail ( "createErrorProbabilities(null) expected IllegalArgumentException" )
assertTrue ( output , output . matches ( "(?s).*Invalid object name.*" ) )
assertEquals ( expectedAutoExpireDate , drugOrder . getAutoExpireDate ( ) )
assertRoundtrip ( input )
assertThat ( anyTS . isValid ( MILLI_OF_DAY , 86399 ) , is ( true ) )
assertToString ( fromExpr ( "Hello" , f . newMethodInvocationExpression ( Arrays . asList ( Models . toLiteral ( f , "Hello, world!" ) , f . newSimpleName ( "asList" ) , Arrays . asList ( Models . toLiteral ( f , "Hello, world
assertThat ( output , containsString ( "HL7v2 message created:" ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( 0 , dao . findAll ( ) . size ( ) )
assertEquals ( 200 , result . getStatusCode ( ) )
assertNotNull ( ple )
assertThat ( values . size ( ) , is ( 0 ) )
Assert . assertEquals ( TestModuleFactory . class , moduleFactory . getClass ( ) )
assertTrue ( strategy . isCrawable ( url , 1 ) )
assertEquals ( true , CollectionUtils . isEmpty ( coll ) )
assertEquals ( 3 , instance . getNumThreads ( ) )
assertNull ( cause )
assertEquals ( roleListWrapper , userRoleResource . getRoles ( ) )
Assert . assertEquals ( "Unexpected distinct name" , "simple-foo-bar" , ejbJarMetaData . getDistinctName ( ) )
assertEquals ( "<p>Hello</p>" , doc . getElementsByTag ( "div" ) . get ( 0 ) . html ( ) )
assertEquals ( "{\\"100.0\\":10,\\"99.0\\":10,\\"98.0\\":10,\\"80.0\\":10,\\"75.0\\":10,\\"90.0\\":10,\\"80.0\\":10,\\"50
assertFailureKeys ( "expected to be empty" , "but was" )
assertEquals ( frameData , frameData )
assertEquals ( 1 , newSize - initialSize )
Assert . assertTrue ( res . booleanValue ( ) )
assertEquals ( "------------ Request ------------\\n    null\\n\\n------------ Body ------------\\nnull\\n\\n" , result )
assertThat ( engine . evaluate ( TESTSUITE_NAME_ATTRIBUTE , document ) . length ( ) , not ( 0 ) )
assertFalse ( d instanceof Cloneable )
assertNotNull ( e )
assertTrue ( topic . isHasUpdates ( ) )
assertEquals ( 200 , status . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( Resource . RowType . DWC_ROWTYPE_TAXON , resource . getCoreRowType ( ) )
Assert . assertThat ( QueryBuilder . getInstance ( ) . buildFilterQuery ( co , "" , 0 , 1 , 0 , 0 , 0 , null ) , equalTo ( expected ) )
assertEquals ( revision , currentRevision )
Assert . assertEquals ( extractor . generateKey ( host , req1 ) , extractor . generateKey ( host , req2 ) )
assertError ( )
assertEquals ( "<html><head><script></script><noscript></noscript></head><frameset><frame src=\\"foo\\" /><frame src=\\"foo\\" /></frameset></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_1" )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( 77L , frame . getLong ( ) )
Assert . assertTrue ( test . expected , res )
assertThat ( result . getId ( ) , is ( notNullValue ( ) ) )
assertTrue ( Arrays . equals ( expectedResult , buffer . array ( ) ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( hasJsonPath . matchesSafely ( json ) , is ( false ) )
assertEquals ( response . asString ( ) , FAILED , response . get ( OUTCOME ) . asString ( ) )
assertEquals ( comment , newId3tag . getItunesComment ( ) )
assertNoViolations ( constraintViolations )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 4 , 8 , 4 , 8 ) )
assertThat ( markedWord , is ( "louper" ) )
assertEquals ( 1 , observer . getMessageCount ( ) )
assertSame ( mockConnection , instance2 . getConnection ( ) )
assertEquals ( VALUE , value )
assertTrue ( "SecurityConstraint is expected to be deployed as provider" , everrestApplication . getSingletons ( ) . stream ( ) . filter ( e -> e instanceof SecurityConstraint ) . count ( ) == 1 )
assertThat ( cache . getHostname ( ) , is ( EventBuilder . DEFAULT_HOSTNAME ) )
assertThat ( list . size ( ) , is ( 2 ) )
Asserts . check ( targetHosts . size ( ) > 0 , "fail setTargetHostsFromLineByLineText" )
assertThat ( asset , is ( notNullValue ( ) ) )
assertTrue ( timestamp > 0 )
Assert . assertEquals ( cpf , eventoRetorno . getCpf ( ) )
Assert . assertFalse ( "No runs returned" , runs . isEmpty ( ) )
assertNull ( response )
assertThat ( auth . createSaslClient ( credential ) , instanceOf ( ScramSaslClient . class ) )
assertThat ( builder . toString ( ) , is ( "abgh.abgh" ) )
Assert . assertTrue ( "writeOffDunningCandidate should return true" , executed )
assertThat ( t . getName ( ) , is ( "maven-surefire-plugin@NotThreadSafe" ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "2_3" , "
assertEquals ( 100 , results . size ( ) )
assertTrue ( "i=" + i , result )
assertThat ( content . getContent ( ) , is ( notNullValue ( ) ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa must be a number(####)." ) )
assertTrue ( match == null )
assertEquals ( 2 , count )
Assert . assertEquals ( "��" , HtmlToXMLUtil . unescapeToXML ( testString ) )
assertPlanMatches ( expected )
assertEquals ( response . getStatus ( ) , 500 )
assertEquals ( 0.43 , x . getValue ( ) )
assertEquals ( "MyTinyTestType" , typeForTemplate . getName ( ) )
assertEquals ( assertion , matrix )
assertThat ( redis . info ( ) . contains ( "aof_rewrite_in_progress:1" ) , is ( true ) )
assertEquals ( 4 , records . size ( ) )
assertEquals ( "March" , month )
assertEquals ( "text" , db . getMetadataStore ( ) . getDatatypes ( ) . get ( "text" ) . getString ( ) )
assertThat ( this . support . getAllSelectedOptions ( webElement ) , is ( equalTo ( "select1.getSelectedOptions()" ) ) )
assertOnResponseAttachment ( f3gbServer , MAX_SIZE2 )
assertEquals ( "2015-01-03" , DateTimeUtils . getYearMonthDay ( "2015-01-03" , dateTimeZone ) )
assertTrue ( theSelectedPoolsWere ( allPoolsNotOnSameHostAsSource ( ) ) )
assertEquals ( expected , actual )
assertEquals ( "HTTP/1.1 413 Not Found" , sb . toString ( ) . trim ( ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertThat ( steps , is ( notNullValue ( ) ) )
assertEquals ( 3 , persistence . getAllManagers ( ) . size ( ) )
assertEquals ( 1 , deps . size ( ) )
assertEqualsIgnoreLineEnding ( Json . pretty ( rep ) , "{\\n" + "  \\"unboundedInteger\\" : { type : \\"integer\\", properties : { \\"format\\" : null, \\"example\\" : 4321 }\\n" + "}" )
assertEquals ( "Token[, ,]" , result )
assertPostCodegenRules ( mojo )
Assert . assertEquals ( 2 , list . size ( ) )
assertEquals ( 1 , observations . size ( ) )
assertTrue ( descriptor . isTypeConstrained ( ) )
assertTrue ( plots . get ( 0 ) == plot1 )
assertEquals ( new JSONObject ( ) . getJSONArray ( "firstname" ) . getString ( "value" ) , object . getJSONArray ( "firstname" ) . getString ( "value" ) )
assertThat ( this . subject , is ( not ( otherUser ) ) )
assertEquals ( "100000" , String . valueOf ( Integer . parseInt ( result ) + rejected ) )
assertIsAborted ( tx )
assertEquals ( 1 , command . getMcCounter ( ) )
assertNotNull ( uaiCriteria )
Assert . assertEquals ( 4 , generatedTests . size ( ) )
Assert . assertNotNull ( queryVersion )
assertEquals ( Arrays . asList ( "" , "" , "" , "" ) , lines )
Assert . assertTrue ( "Menu bar should contain a seperator" , menuBar . getMenuItems ( ) . get ( 0 ) instanceof WSeparator )
assertTrue ( "No top rated movies found" , results . size ( ) > 0 )
assertEquals ( false , executeTestMethod ( test , Boolean . class , null , false ) . booleanValue ( ) )
assertThat ( date . with ( YEAR_OF_WEEKDATE , 1996 ) , is ( PlainDate . of ( 1996 , 1 , 2 ) ) )
Assert . assertEquals ( 1 , sut . computeInterestingness ( activity ) )
assertEquals ( server . getCalls ( ) . size ( ) , 0 )
assertEquals ( 1 , count . get ( ) )
assertEquals ( "[VALUE1, VALUE2, VALUE3, VALUE4]" , values . toString ( ) )
Assert . assertFalse ( patientService . isIdentifierInUseByAnotherPatient ( patientIdentifier ) )
Assert . assertEquals ( 9 , map . size ( ) )
assertTrue ( "locator not expired from cache" , ! locatorCache . isLocatorCurrentInBatchLayer ( LOCATOR ) )
assertEquals ( "substring(cat.name, indexOf(cat.name) + ?1)" , serializer . toString ( ) )
assertArrayEquals ( new double [ ] { 0.1 , 0.2 , 0.3 , 0.4 , 0.6 } , bo . parameters )
assertEquals ( 1 , testResult )
Assert . assertEquals ( 3 , response . getTotalHits ( ) . value )
assertNotNull ( result )
assertEquals ( 0x0000002d , s . m0_0 ( ) )
Assert . assertNotNull ( vmComponent )
assertEquals ( "next node must be node2" , node2 , currentRouter . getNextNode ( msg ) )
assertEquals ( expectedEnv , env )
assertSame ( expected , CRest . getOAuthInstanceWithRefresh ( "a" , "b" , "c" , "d" , "e" , "f" ) )
assertEquals ( expecting , result )
Assert . assertEquals ( expectedManifest , actualManifest )
assertThat ( "Width of color picker is overridden by " + "explicit caption feature" , width , is ( lessThan ( 148 ) ) )
assertNotNull ( room1 . getId ( ) )
assertEventsEquals ( expectedEvent , getOnlyElement ( events ) )
assertEquals ( expected , bos . toString ( ) )
assertThat ( latch . await ( 1 , TimeUnit . SECONDS ) , is ( true ) )
assertTrue ( session . markRecordAsRead ( epoch + 1 , 2 ) )
assertEquals ( "Root NSEC must be bogus" , SecurityStatus . BOGUS , s )
assertEquals ( _expected , out . toString ( "UTF-8" ) )
assertNotNull ( Alert . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertTrue ( str . contains ( "Hello world!" ) )
assertEquals ( 800000000 , result )
assertTrue ( true )
assertThat ( c . value , is ( "aaa" ) )
assertTrue ( adapter . isOptional ( ) )
assertEquals ( expected , output )
Assert . assertEquals ( "Expect all options to be unselected" , Collections . EMPTY_LIST , multi . getNotSelected ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( RESPONSE , r . getResponseBody ( ) )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertEquals ( Person . class , violations . iterator ( ) . next ( ) . getClass ( ) )
assertEquals ( "[Test] expecting elements:\\n<['Leia']>\\n of \\n<['Yoda', 'Luke', 'Leia']>\\n to be <a Jedi>" , message )
Assert . assertEquals ( 200 , status )
assertTrue ( transform instanceof Modifier . Definr )
assertEquals ( doubleQuotedString , ocsvTransformer . getCellContent ( unQuotedString ) )
assertStat ( result )
assertEquals ( 1403602429000L , getTimeWithoutZoneOffset ( format . parse ( "2014024096" ) ) )
assertTrue ( "Failed to read correct data" , new String ( buf1 , 0 , buf1 . length ) . equals ( new String ( buf2 , 0 , buf2 . length ) ) )
assertEquals ( profile . startPort , result . startPort )
assertNotNull ( probe )
assertEquals ( "Wrong result" , expResult , result )
Assert . assertEquals ( 1 , ( ( Es1 ) es1 . getSystem ( ) ) . getCount ( ) )
assertThat ( augmented . getReverseRelationship ( ) , is ( ordinary ) )
assertThat ( given . getScreenshots ( ) . size ( ) , greaterThan ( 0 ) )
assertEquals ( workflow . getID ( ) , "selectAll" )
assertTrue ( uvp . getFirstData ( ) == 200.0 )
assertEquals ( "{\\"path\\":\\"/move/me/to\\",\\"op\\":\\"add\\an/object\\",\\"path\\":\\"/test/someObject\\",\\"value\\":\\"someValue\\"}" , jsonPatch . toString ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( "Failed on iteration " + i , z1 , z2 )
Assert . assertEquals ( 2 , distinct )
assertEquals ( "{'foo': 0}" , sd . toString ( ) )
assertThat ( actualSubsets , IsIterableContainingInAnyOrder . containsInAnyOrder ( fixture . getExpectedSubsetArrayFromQuery ( ) ) )
assertEquals ( cat + " join|file1|file2|file3" , p2 . render ( ) )
assertTrue ( bw > 0 )
assertEquals ( expResult , result )
assertTrue ( condition . matches ( testEvent ) )
assertSame ( connection , incrementPoolOnTimeoutConnectionAcquiringStrategy . getConnection ( connectionRequestContext ) )
Assert . assertFalse ( myColumn . isFinal ( ) )
Assert . assertEquals ( "abc" , stringAppender . getChars ( ) )
assertNotNull ( result )
assertEquals ( "a" , book . getName ( ) )
assertEquals ( "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-." , dst )
Assert . assertEquals ( 5 , langs . size ( ) )
mongoDbChecker . assertThatConnectionIsPossible ( anyString ( ) , anyInt ( ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
Assert . assertTrue ( lang1 . getFileExtensions ( ) . contains ( ext ) || lang2 . getFileExtensions ( ) . contains ( ext ) )
assertEquals ( "John" , sut . execute ( "John" ) )
assertEquals ( "" , t )
get ( "/" ) . then ( ) . assertThat ( )
assertNotNull ( actualDataFlavour )
assertions . isNotEqualTo ( "some value" )
assertInsert ( INSERT_ARRAY_TYPES_STMT , 1 , schemasAndValuesForArrayTypesWithChanges ( ) )
assertThat ( hijri . with ( CommonElements . weekOfYear ( HijriCalendar . family ( ) , model ) . atFloor ( ) ) , is ( expected ) )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertEquals ( merging , policy . merge ( "map" , entryMerging , entryExisting ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?></a>" , result . getResult ( ) )
assertNull ( node . get ( "entityInfo" ) )
assertIsChecked ( botTestPage . checkBox2WebComponentExtended . getWrappedDriver ( ) )
assertTrue ( result )
assertThat ( findFeature ( features , "ClearCache" ) , is ( instanceOf ( ClearCacheFeature . class ) ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( completedHistoricActivityInstances . size ( ) , is ( 3 ) )
assertEquals ( "aTestString" , classUnderTest . getCatalogFilterInclude ( ) )
assertAssignedRole ( userAfter , ROLE_ADMINISTRATOR_OID )
Assert . fail ( "ClassNotFoundException should be thrown" )
Assert . assertEquals ( "{\\"@context\\":\\"$metadata#ESMixEnumDefCollComp/$entity\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"PropertyEnumString\\":\\"String2,String3\\"," + "\\"Coll
assertTrue ( latch . await ( 15 , TimeUnit . SECONDS ) )
assertTrue ( victim . isIncrementalBuild ( ) )
assertFalse ( testTx . isShortLived ( ) )
Assert . assertEquals ( "Password is not correct" , "" , redisURI . password ( ) )
assertEquals ( expectedValues , actualValues )
assertNotNull ( result )
Assert . assertEquals ( "<th></th>\\n" , title )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "UserFeedData [id=, profilePictureUrl=, userName=, fullName=, website=]" , result )
assertThat ( count , is ( 3L ) )
assertEquals ( WORKER_NUMBER , set . size ( ) )
assertTrue ( "Found route node by name" , rn != null && StringUtils . equals ( routeNodeId , rn . getRouteNodeId ( ) ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPrivileges ( set ( "job1_2_operator" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertSQLException ( ( ) -> statement . execute ( ) )
assertTrue ( file . exists ( ) )
assertThat ( the ( name , be ( equalTo ( "Alex" ) ) . and ( be ( startsWith ( "B" ) ) ) . or ( be ( anything ( ) ) ) ) , is ( true ) )
assertEquals ( lovedTracks , dbLovedTracks )
Assert . assertEquals ( ( Integer ) 443 , port )
Assert . assertEquals ( 3 , allServices . size ( ) )
JsonPathAssert . assertThat ( doc )
assertTrue ( result . get ( 0 ) )
Assert . assertThat ( item . isNullValue ( null ) , is ( false ) )
assertTrue ( builder . build ( ) . getAdaptationConfig ( ) . isAdaptationEnabled ( ) )
this . assertServiceInstanceGetRequest ( serviceInstance , false , "inProgress" )
assertEquals ( tknzn . getTokens ( ) . length , 0 )
Assert . assertEquals ( OBJECT , clone )
assertEquals ( title , d_threeArmModel . getTitle ( ) )
assertEquals ( mTestDir1 . getCapacityBytes ( ) , mTestDir1 . getAvailableBytes ( ) )
assertEquals ( "Locally rewritten value" , ( Integer ) 10 , localState . commit ( globalState ) . deref ( ) )
assertThat ( after , is ( "2->3->3->4->5->8->NULL" ) )
assertEquals ( 3 , FastMath . exp ( chart . getLogPartitionFunction ( ) ) , 1e-3 )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "25-Oct-2013" )
Assert . assertTrue ( "Test isAttributePresent returns true" , element . isAttributePresent ( "someAttribute" ) )
assertEquals ( 0 , loop . next ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertEquals ( response . getStatus ( ) , 200 )
Assert . assertEquals ( "[\\"\\",\\"abc\\",\\"\\\\b\\\\f\\\\n\\\\r\\\\t\\",\\"\\\\\\"\\",\\"\\\\\\\\\\",\\"\\\\u001f\\"]" , writer . toString ( ) )
assertTrue ( cleanupCalled [ 0 ] )
assertEquals ( "unique" , CollectionUtils . getUnique ( col ) )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-domain-managed:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertNull ( lock )
assertEquals ( "http://localhost:" + ourPort + "/fhir/Patient?_revinclude=Provenance%3Atarget&_format=json" , ourRequestUri )
assertThat ( array2 , nullValue ( ) )
assertThat ( renderer . getShortForm ( entity ) , is ( "xsd:unsignedByte" ) )
assertEquals ( "true" , lineArgs . getCleanCacheAfterRowWrite ( ) )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testServerName.json" ) ) )
assertNotNull ( classUnderTest . getObjectInfo ( ) )
assertEquals ( 608512271 , checksum )
assertEquals ( "<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( jsonResponse . getStatus ( ) , JsonResponseStatus . SUCCESS )
assertEquals ( expected , actual )
assertNotNull ( requestToken )
assertEquals ( "incorrect no of objects returned" , 1 , genericManager . deleteAllByPropertyValue ( property , value ) )
assertThat ( stdOutContent . toString ( ) , equalsIgnoringOSSpecificLineSeparators ( "<?xml version=\\"1.7\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>\\n" + "<release-candidate>\\n" + "    <build-
assertThat ( confirmationCode , allOf ( startsWith ( "A" ) , containsString ( "B" ) ) )
Assert . assertFalse ( signatureUtil . signatureCoversWholeDocument ( "Signature1" ) )
assertSame ( expected , actual )
assertNotNull ( certificate )
Assert . assertEquals ( "(nt_string CGAT)" , nt_string . toStringTree ( parser ) )
Assert . assertEquals ( 42. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getEnd ( ) , route ) , 0.01 )
assertEquals ( expected , actual )
assertTrue ( dsg . getSink ( ) instanceof DatasetGraphSink )
Assert . assertEquals ( expectedRanges , actualRanges )
assertEquals ( 0 , new ReadOnlyZeroBitSet ( i ) . cardinality ( ) )
assertEquals ( "Change set number was incorrect" , "0" , changesetNumber )
assertTrue ( errors . equals ( noErrors ) )
assertEquals ( dmatrix [ i ] [ j ] , diag [ i ] [ 0 ] , epsilon )
assertFalse ( "The provider incorrectly handles null values." , instance . canProvide ( ModelAndView . class ) )
assertEquals ( "token 1\\n" , found )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertEquals ( - 112344572362.0f , executeTestMethod ( test , Float . class , null , - 112344572362.f ) . floatValue ( ) , 0.0f )
assertEquals ( reference , output )
assertThatEstablishedConnectorSendsHelloVerifyRequest ( )
assertEquals ( ( Character ) Character . MAX_VALUE , extractedChar )
Assert . assertArrayEquals ( answer , result , 1e-5 )
assertEquals ( 1 , list . size ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertFalse ( "no metadata values found" , metadataElements . isEmpty ( ) )
assertEquals ( 0 , delete . execute ( ) )
assertTrue ( obj instanceof String )
context . assertIsSatisfied ( )
assertEquals ( newArrayList ( new AcceptToken ( "*" ) ) , charsetList )
assertWindowSizeIsIdeal ( from , to , idealWindowSize )
assertEquals ( expResult , result )
assertEquals ( "11.1.10" , result )
assertTrue ( result . contains ( "jentrata/bin" ) )
assertEquals ( val , read )
assertEquals ( "SELECT E1 FROM SalesOrderHeader E1 WHERE E1.soID >= 1234" , jpqlSelectStatementBuilder . build ( ) . toString ( ) )
assertEquals ( "123" , converter . getAsString ( facesContext , new UIPanel ( ) , Long . valueOf ( 123 ) ) )
assertNull ( song . getTrack ( ) )
Assert . assertTrue ( children . size ( ) > 0 )
assertEquals ( "Invalid random bytes" , size , new Random ( ) . randomBytes ( ) . length )
Assert . assertEquals ( expectedIds , actual )
assertEquals ( 2 , builder . build ( ) . getElementValues ( ) . size ( ) )
assertThat ( result , nullValue ( ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . getAllConsentsForPatient ( "P0123456" ) )
assertThat ( resource , is ( equalTo ( method ) ) )
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/page/foo" ) )
assertEquals ( "Mike Tesla" , name )
assertArrayEquals ( new long [ ] { 2 , 2 } , arr . shape ( ) )
Assert . assertNotNull ( "null entries returned" , entries )
assertROIEquivalent ( g , shape , "Checkerboard" )
assertEquals ( "http://ipt.gbif.org/resource?id=ants" , cfg . getResourceGuid ( "ants" ) )
assertThat ( column , is ( nullValue ( ) ) )
assertEquals ( document , mapper . readValue ( JSON_ITEM_STATEMENTS , ItemDocumentImpl . class ) )
assertThat ( getServers ( ) , empty ( ) )
assertEquals ( asSet ( "firstRegion" ) , resolvedIds )
Assert . assertEquals ( 10 , calculator . getCpu ( ) . getRegister ( ) )
assertTrue ( page . getBody ( ) . asText ( ) . indexOf ( "Selected" ) != - 1 )
assertEquals ( "<html><head><title>First parse</title></head><body><id>1</id><涓���></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( 1 , v1 . query ( ) . direction ( Direction . OUT ) . has ( "edgeProp1" ) . count ( ) )
assertDelete ( newZipFile )
assertNotNull ( response . getGetMediaMetadataResult ( ) )
assertQuery ( "//*[(jcr:like(prop, 'aaa%') and jcr:like(prop, 'bbb%') and jcr:like(prop, 'ccc%'))]" , "xpath" , ImmutableList . of ( "/content/two" , "/content/three
assertTrue ( "output does not contain @Retention: " + baos , baos . toString ( ) . contains ( "@Retention" ) )
assertEquals ( "search - Patient ?_id=1 - " , captor . getValue ( ) )
assertEquals ( Arrays . asList ( lengthColumn , objectColumn , randomColumn ) , grid . getColumns ( ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( result )
assertNotNull ( result )
assertFalse ( or . isDefined ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
Assert . fail ( "build listing failure" )
assertTrue ( jobService . getExecutionStatus ( namespace , jobName ) . equals ( ExecutionStatus . STOPPED ) )
assertThat ( unknownUser , is ( not ( present ( ) ) ) )
assertThat ( response . getHeader ( "Server" ) , is ( "server-name" ) )
assertTrue ( inputWriteOperation instanceof MarkLogicInputWriteOperation )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
Assert . assertEquals ( "�驻�� 1 砖��" , t . format ( c ) )
assertThatTestCaseObeysOracle ( 16 )
assertOut ( "var /** @type {number} */ a = Infinity" )
assertEquals ( body . toString ( ) , "123" )
Assert . fail ( "IotHubNotFoundException expected" )
validator . assertTestSuiteResults ( 2 , 0 , 0 , 0 )
Assert . assertEquals ( expected , builder . toString ( ) . replaceAll ( "\\\\s+" , "" ) )
assertEquals ( this . urlConnection . getRealURL ( ) . getPath ( ) , "/rest/v1/" + this . sauceREST . getUsername ( ) + "/tunnels" )
assertEquals ( Arrays . asList ( "http://somelink" , "" ) , new JsonLinkConsumer ( ) . readLinks ( reader , null ) )
assertTrue ( resultSq == Position . NOPOSITION )
Assert . assertEquals ( 0.0 , Alignments . getPairwiseAligner ( query , target , PairwiseSequenceAlignerType . LOCAL , gapP , matrix ) . getScore ( ) , PRECISION )
assertTrue ( "the notification handler must receive the filtered out notification" , handler . getNotifications ( ) . isEmpty ( ) )
assertThat ( Template . parse ( stuff ) . render ( ) , is ( "" ) )
assertTrue ( latch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( "Key" , result )
Assert . assertTrue ( count == 5 )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "Found attributes" , 0 , iteratorSize ( it ) )
assertEquals ( ace , parsed )
Assert . assertFalse ( json . has ( "categories" ) )
this . assertGet ( "relationshiptypeimplementations/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Frelationshiptypeimplementations%252Ffruits/kiwi_implementation
Assert . assertEquals ( "Value" , WebUtil . getContextPath ( ) )
assertTrue ( messageProcessed . await ( 2 , TimeUnit . SECONDS ) )
Assert . assertEquals ( tokens [ i / 2 ] , trie . tokenize ( tokens [ i / 2 ] ) . toString ( ) )
assertSame ( shouldFind , selection . radio ( By . id ( "test" ) ) )
assertTrue ( results . get ( 0 ) . getContentReference ( ) . getSize ( ) > 10 )
assertEquals ( "one" , ( String ) event . getField ( "$.arr[0]" ) )
Assert . assertTrue ( result )
assertTrue ( allMatchingQueryParamsFilter . isEmpty ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( configuration , is ( expectedSelector ) )
Assert . assertEquals ( "Invalid HTTP response received; premature end of headers" , dMsg )
assertEquals ( 1 , vehicles . size ( ) )
assertThat ( binaryDecoder . read ( ) , is ( "0123" ) )
assertEquals ( 2 , query . getResultCount ( ) )
Assert . assertArrayEquals ( encodedValue , byteOutputStream . toByteArray ( ) )
assertThat ( f . format ( m ) , is ( "Amete Mihret, 2008-03-09 09:45 pm +03:00" ) )
assertSame ( validatedResponse , context . getSaajMessage ( ) )
assertEquals ( "(((dependencyBuilder.combine(\\"A\\",\\"B\\").build() || dependencyBuilder.combine(\\"C\\",\\"D\\").build()) && (dependencyBuilder.combine(\\"E\\",\\"F\\").build()))" , inputLogicParser . parse ( root
Assert . isTrue ( roles . size ( ) > 0 )
assertEquals ( 20 , maxResults )
assertEquals ( "Target layout should only have two mutation events (remove field and its caption)" , 2 , mutationEvents . intValue ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertTrue ( verify )
assertEventFired ( DeployDeployment . class , 0 )
Assert . assertNull ( poolStatistics )
assertEquals ( "address may not be null" , constraintViolationException . getMessage ( ) )
assertEquals ( 1 , selectCovered ( mergeCAs . getCas ( ) , type , 0 , 0 ) . size ( ) )
assertTrue ( mconn . isOpen ( ) )
assertEquals ( "a" , render )
assertEquals ( RedditScope . EDIT + ", " + RedditScope . FLAIR , builder . build ( ) )
Assert . assertEquals ( sql , expected . replaceAll ( "#ALIAS#" , EntityMetaDataCache . getMetaData ( RestrictionTestEntity . class ) . getAlias ( ) ) )
assertTrue ( ClassUtils . isSeriazable ( classToTest ) )
assertThat ( list . size ( ) , is ( 0 ) )
assertEquals ( Timestamp . valueOf ( "2013-03-27 23:18:40.123456" ) , jstOi . getPrimitiveJavaObject ( result . get ( "five" ) ) )
assertNotFound ( client . executePost ( "/foo" , "bar" , ContentType . TEXT_PLAIN ) )
assertEquals ( va , vA )
assertTrue ( "syntaxChecker should still be in the registry after move failure" , schemaManager . getSyntaxCheckerRegistry ( ) . contains ( OID ) )
tc . assertEquals ( "Hello World!" , post1 . getContent ( ) )
assertEquals ( Boolean . FALSE , statement . getOnlyUpdate ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertTrue ( exceptionThrown )
assertEquals ( 1 , exts . size ( ) )
assertEquals ( "The line number should be same" , expectedLineNumber , result . indexOf ( "at line " ) )
assertThat ( "default OS" , sut . getOS ( ) , is ( equalTo ( VM . DEFAULT_OS ) ) )
Assert . assertNull ( commands )
Assert . assertNull ( "No error message returned " , geolocErrorVisitor . getErrorMessage ( ) )
assertEquals ( "#test{width:100px}\\n#test2{width:100px}" , minified )
assertFalse ( clientConnection2Closed . isDone ( ) || serverConnection2Closed . isDone ( ) )
assertNotNull ( jobProperties )
assertEquals ( "Clock should've returned fake time" , fakeTime , clock )
assertThat ( name . hashCode ( ) , is ( other . hashCode ( ) ) )
assertEquals ( Locale . getDefault ( ) , rc . client ( ) . getLocale ( ) )
assertTrue ( result . contains ( "\\"1-0-v0\\":{\\"type\\":\\"LCD\\",\\"values\\":[\\"1\\"]" ) )
assertEquals ( V8Value . INT_8_ARRAY , array . getType ( ) )
assertTrue ( resultComparator . compare ( od1 , od2 ) < 0 )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertNotNull ( result )
Assert . assertNotNull ( "No message context" , messageContext )
assertNotNull ( client )
assertArrayEquals ( new long [ ] { 32 , 3 } , point )
Assert . assertEquals ( 3 , result . size ( ) )
assertTrue ( msg , dynAny . type ( ) . equal ( tc ) )
assertTrue ( "Login not successful" , success )
assertFalse ( files . isEmpty ( ) )
assertEquals ( vals , templates )
assertEquals ( to1 , to2 )
assertEquals ( JSON_ARRAY , json )
this . assertGet ( "policytypes/allvisualappearances" , "entitytypes/policytypes/allvisualappearances.json" )
assertEquals ( Status . BACKOFF , status )
assertTrue ( Pattern . matches ( "(?s).*/valueBinding06.jsp PASSED.*" , page . asXml ( ) ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( 64 * 64 , cn . getNumCells ( ) )
assertThat ( builder . getDom ( "test-state" ) . length ( ) , is ( 0 ) )
Assert . assertNull ( caixa )
assertNotNull ( Query . reader ( "UAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertTrue ( c_xml . createCoreXml ( new File ( "classpath:properties/sql.xml" ) ) )
assertThat ( new RsPrint ( response ) . printBody ( ) , containsString ( "identity was not found" ) )
assertThat ( token . image , equalTo ( "user-agent" ) )
assertEquals ( 50 , reader . position ( ) )
assertEquals ( mockCache , dao . findByName ( "delegated" ) )
assertThat ( response , not ( containsString ( "Unreferenced" ) ) )
assertEquals ( "[{}]" , writer . toString ( ) )
Assert . assertEquals ( before + 1 , Context . getProviderService ( ) . getAllProviders ( ) . size ( ) )
assertEquals ( 4 , container . children . size ( ) )
assertEquals ( "{\\"messageType\\":\\"CALL_ERROR\\",\\"callId\\":\\"callId\\",\\"errorCode\\":\\"ErrorCode\\",\\"errorDescription\\":\\"ErrorDescription\\",\\"errorDetails\\":\\"ErrorDetails\\"}" , jsonMessage )
assertThat ( converter . getClass ( ) , is ( typeCompatibleWith ( ReflectionConverter . class ) ) )
assertEquals ( MICRO ( MINUTE ) , u )
assertEquals ( "renderer must have null leaf icon" , null , renderer . getLeafIcon ( ) )
assertTrue ( result . getRightOnly ( ) . contains ( "only.type2.value" ) )
assertThat ( status , is ( 201 ) )
assertEquals ( ptu , ptu . asPrimitiveTypeUsage ( ) )
assertEquals ( 123L , book . getId ( ) )
assertThat ( result , is ( "HI" ) )
assertEquals ( HomeController . HOME_VIEW , view )
Assert . assertEquals ( "employee" , tableName )
assertEquals ( new RawSignResponse ( RawSignResponse . USER_PRESENT_FLAG , COUNTER_VALUE , SIGNATURE_SIGN ) , rawSignResponse )
assertNotNull ( testTx )
Assert . assertEquals ( "(aa_change_extension (aa_point_location (aa_char Ala) 124) (aa_char Thrext) ext * ?)" , aa_change_extension . toStringTree ( parser ) )
Assert . assertEquals ( newHH . getUserName ( ) , hh . getUserName ( ) )
context . assertIsSatisfied ( )
assertEquals ( "a" , i . next ( ) )
Assert . assertEquals ( hash , checksum . getValue ( ) )
Assert . assertEquals ( "(1, 2, 3)" , buffer . toString ( ) )
Assert . assertEquals ( expectedMethod , m )
assertEquals ( "read -  - Patient/1 - " , captor . getValue ( ) )
assertEquals ( expecting , found )
assertNotNull ( TollFree . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "US" ) . read ( ) )
assertThat ( pong , containsString ( "OK" ) )
Assert . assertEquals ( 0 , janus . getServers ( ) . size ( ) )
assertEquals ( user , aux )
Assert . assertFalse ( result . isEmpty ( ) )
assertEquals ( "ranzzz" , Bytes . toString ( res ) )
assertEquals ( true , getLoadLayerDefinitionAction ( ) . isEnabled ( ) )
Assert . assertEquals ( 1L , vm . getStack ( ) . pop ( ) )
assertThat ( rule . match ( sentence ) . length , is ( 1 ) )
assertTrue ( copy . getAreNodeLabelsAcceptedByRM ( ) )
assertEquals ( "om 3 dagar" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertResultsFormularioSonda ( formularioSondaReturn )
Assert . assertEquals ( found . phoneNumber , builder . getPhoneNumber ( ) )
assertEquals ( "select subEntity_1 from Entity entity_0 inner join entity_0.subEntityMap subEntity_1" , query )
assertEquals ( "GBP 2.40" , test . toString ( ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1 , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1 , CORRECT_PASSWORD , SC_OK ) )
assertThat ( options . getCannedAcl ( ) , is ( ConfigurationVariable . CANNED_ACL . defaultValue ( ) ) )
assertThat ( result , equalTo ( false ) )
assertEquals ( nw . getScore ( ) , alignment . getScore ( ) , PRECISION )
Assert . assertNotNull ( result )
Assert . assertNotNull ( writer )
assertEquals ( 1 , count )
assertEquals ( testStyle , classUnderTest . getIdentifierStyle ( ) )
assertThat ( child . getAngle ( ) , IsEqual . equalTo ( 25f ) )
Assert . assertEquals ( "did not get expected data length" , testLen , result . length ( ) )
assertKernel ( kernel , RECT , e )
assertTrue ( extender . getZoomLevel ( ) == zoomLevel )
assertNull ( chain . getForwardURL ( ) )
assertResultIs ( c )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertNotNull ( AvailableAddOn . fetcher ( "XBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expResult , result )
assertEquals ( methodName , "foo" )
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + BASE_URI + "Rooms('1')\\"," + "\\"uri\\":\\"" + BASE_URI + "Rooms('1')\\",\\"type\\":\\"RefScenario.
assertEquals ( previousNumberOfIndividuals - size , 1 )
assertEquals ( "[0.0, 2.0, 4.0, 6.0, 8.0]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertThat ( path1 . equals ( path2 ) , is ( true ) )
assertThat ( generatedType , is ( notNullValue ( ) ) )
assertTrue ( gotException )
assertNotNull ( scriptStatement )
assertThat ( mock . get ( ) , is ( "joo" ) )
assertEquals ( Integer . class , results . getSingleResult ( ) . getEmployeeIntType ( ) )
assertEquals ( "max" , actual )
assertNull ( container . child . get ( ) )
Assert . fail ( "Authorization failure expected" )
assertEquals ( "unquoted" , properties . removeQuote ( "unquoted" ) )
assertEquals ( "Address" , nameStr )
assertEquals ( "" , result )
assertEquals ( actualKeys , expectedKeys )
assertEquals ( 404 , resp . getStatusCode ( ) )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertThat ( war . getEntry ( entry . getName ( ) ) , is ( nullValue ( ) ) )
assertThat ( i , equalTo ( 2 ) )
assertTrue ( result . matches ( ) )
assertThat ( injectedObject , instanceOf ( BusInjected . class ) )
assertEquals ( packet , p )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertEquals ( "filename.thumbnail" , filename )
assertEquals ( 2 , foIndex )
assertThat ( allUsers , hasSize ( 0 ) )
assertArrayEquals ( slices . shape ( ) , new long [ ] { 2 , 3 } )
assertEquals ( "Expenses 9/12/2002\\n" + " \\tDinner\\t$1678\\n" + "\\n" + "Total up expenses $10\\n" + "\\n" + "Expenses 9/12/2002\\n" +
Assert . assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( null , mockResult . included ( "returnPath" ) )
assertEquals ( 310 , screenshotPlugin . getTheatreOfBloodNumber ( ) )
assertThat ( clock . currentTime ( ) . getPosixTime ( ) % 60 , is ( 0L ) )
assertTrue ( egip . compareTo ( egic ) > 0 )
Assert . assertEquals ( ImmutableMap . < String , Object > builder ( ) . put ( "feed" , "alerts" ) . put ( "timestamp" , event . getCreatedTime ( ) . toString ( ) ) . put ( "service" , "test" ) . put ( "host"
assertEquals ( e1 , e2 )
Assert . assertArrayEquals ( new Map [ ] { new HashMap < String , Object > ( ) } , jsonCompressor . compress ( new HashMap < String , Object > ( ) ) )
assertThat ( "getValue" , node . getValue ( ) , is ( 0L ) )
assertEquals ( property . getType ( ) , String . class )
assertThat ( target . TYPE , is ( "InPacketAdded" ) )
assertThat ( method . propertyName ( ) , is ( "name" ) )
assertEquals ( "expected user should equal with result obtained from SCIM REST API" , expectedResponse . getEntity ( ) , result . getEntity ( ) )
assertEquals ( "world" , res )
assertPlanEquals ( expect , plan )
assertions . isNotEqualTo ( actual )
assertFalse ( proxyHttpHeader . isValid ( ) )
assertThat ( target . getFlowId ( nwIf , null ) , is ( nullValue ( ) ) )
assertEquals ( "No error returned" , 0 , error . getErrorCode ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( - 1 , reader . skipItr ( 0 ) )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertNotNull ( response )
assertJson ( "{'value': 1.1}" , serialize ( bean ) )
assertEquals ( expectedResp , resultResp )
assertEquals ( "" , result )
assertTrue ( nicHandle . equals ( nicHandle ) )
assertEquals ( expectedBindingString , relativizedVolumeString )
assertEquals ( "place" + perspective + "," + screens , url )
assertTrue ( isEqual ( expectedStream , actualStream ) )
Assert . assertEquals ( "did not get expected file count" , 2 ,Sizes )
Assert . assertTrue ( responseList . size ( ) <= 1 )
assertEquals ( explainUserKramer , explainUserKramerDuplicate )
Assert . assertEquals ( null , actualValue )
Assert . assertEquals ( expected , hexString )
assertCount ( 0L , "set = ?" , Collections . emptySet ( ) )
assertThat ( text , is ( "Batman" ) )
Assert . assertEquals ( 1 , jobs . size ( ) )
assertThat ( this . graphBuilder , hasNodesAndEdges ( new String [ ] { "\\"groupId:parent:jar:version:compile\\"" , "\\"groupId:child1-1:jar:version:compile\\"" , "\\"groupId:child1-2:jar:version:compile\\""
assertEquals ( "Must be valid quantity (default is one)" , BigDecimal . ONE , item . getQty ( ) )
assertEquals ( 1 , changes . size ( ) )
assertThat ( "default Image Id" , sut . getImageId ( ) , is ( equalTo ( VM . DEFAULT_IMAGE_ID ) ) )
assertTrue ( validator . validate ( sslTermination , PUT ) . passedValidation ( ) )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};" )
Assert . assertEquals ( "1080::8:800:200c:417a" , v )
assertEquals ( 2 , branch_conditions . size ( ) )
Assert . assertEquals ( expResult , result )
assertThat ( reference . getK8sFile ( ) , equalTo ( "start.yaml" ) )
assertEquals ( 10 , camelExchange . getMessage ( ) . getContent ( Integer . class ) )
assertSame ( temporaryQueue , stompJmsSession . createTemporaryQueue ( ) )
assertStat ( result )
assertThat ( errors , hasFieldErrors ( "middleName" ) )
Assert . assertThat ( NumberProcessUtils . toUnsigned31bitsInteger ( i , j ) , is ( j ) )
assertEquals ( expResult , result )
assertNotNull ( paquete . getId ( ) )
assertEquals ( "no return type" , 0 , parsed . returns . length )
assertEquals ( "echoPath/a1/b1/c1" , r )
Assert . assertFalse ( condition . evaluate ( new MockInboundRewrite ( ) , new MockEvaluationContext ( ) ) )
assertEquals ( 10 + ".0" , c . renamedGetValue ( ) )
assertNotNull ( ShortCode . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNumEquals ( 10 , sma . getValue ( 105 ) )
assertEquals ( 1.0 , result , 0.1 )
assertTrue ( pid > 0 )
assertEquals ( "��匕 12 丿�丕卅�" , t . format ( new Date ( 0 ) ) )
assertEquals ( packed , sw . toString ( ) )
Assert . assertNotNull ( "no uri" , actual )
assertEquals ( HttpResponse . SC_FORBIDDEN , response . getHttpStatusCode ( ) )
assertTrue ( true )
Assert . assertEquals ( Container . class , container . context . getBean ( "container" ) . getClass ( ) )
assertNotNull ( templateInfo . getTenantId ( ) )
assertFalse ( displayable )
assertThat ( domainName , is ( queriedDomain ) )
assertFalse ( evaluator . isLoggingScopedEnabled ( ) )
assertArrayEquals ( PASSWORD_BYTE_ARRAY , credentials . getPassword ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( concernedDPC . getId ( ) , concernedDPC2 . getId ( ) )
assertEquals ( 3 , cheeses . size ( ) )
Assert . assertEquals ( attribute , 2L )
assertTrue ( s1 . equals ( s2 ) )
assertNotNull ( flux )
Assert . assertEquals ( "simpleType restricts name" , restriction )
assertEquals ( expected , actual , 0.0001 )
assertEquals ( "SSS:1234trueW:5" , x . toString ( ) )
assertEquals ( " Echo Message = vasu" , response )
assertEquals ( result , "2007-12-03" )
assertEquals ( "getApplicationManifest timeout" , latch . getCount ( ) , 0 )
assertSame ( "daysOfTheWeek must be same" , monthView . getDaysOfTheWeek ( ) , monthView . getDaysOfTheWeek ( ) )
assertEquals ( "<" , writer . toString ( ) )
assertEquals ( "�械�械蟹 3 �邪�邪" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
paths . assertIsEmptyDirectory ( INFO , actual )
Assert . assertEquals ( d , a . select ( rowInd , colInd ) )
assertThat ( tenantIdProvider . dmnParameters . size ( ) , is ( 0 ) )
assertThat ( differences , contains ( ciString ( "dev-MNT-2" ) ) )
MatcherAssert . assertThat ( readTag , is ( tag ) )
assertTrue ( "Document should be in exception routing" , document . isException ( ) )
assertNotNull ( mh )
assertEquals ( EdmSimpleTypeKind . TemporalNull , edmDateType )
assertEquals ( expected , result )
assertThat ( ChronoFormatter . ofPattern ( "yyyy" , PatternType . CLDR , Locale . ROOT , Year . chronology ( ) ) . parse ( "2016" ) , is ( expected ) )
mojos . assertBuildOutputs ( basedir , "target/classes/annotation" )
assertNotNull ( p2 )
assertions . isNotEqualTo ( null )
assertEquals ( base64CipherText , decryptedText )
mockEndpoint . assertIsSatisfied ( )
assertEquals ( response . getHeaders ( ) . get ( "Content-Encoding" ) , "UTF-8" )
Assert . assertEquals ( new URI ( "stuff?some-stuff#fragment" ) , result )
assertEquals ( result , "me" )
Assert . assertEquals ( CREATE_SIZE , response . getThreadDumpsSize ( ) )
assertEquals ( "default" , keyDefinition . getId ( ) )
assertEquals ( "3" , result )
assertThat ( "static int value" , obj , equalTo ( 5 ) )
assertTrue ( rowChange . compareTo ( rowChange2 ) == 0 )
assertCompleted ( "ae" )
Assert . assertTrue ( "null should match null." , sut . matches ( null ) )
assertEquals ( 0 , count )
assertEquals ( "Address" , nameStr )
Assert . assertEquals ( dataInicioAtividade , retorno . getDataInicioAtividade ( ) )
assertTrue ( store1 . getConstraintCollections ( ) . contains ( experiment ) )
assertEquals ( new BigDecimal ( "-0.1" ) , entity . getN73 ( ) )
assertEquals ( actualJsonQuery , testJsonQuery )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "overviewPage" ) , "You arrived at overview page" ) . apply ( driver ) )
assertThat ( result , is ( false ) )
Assert . assertTrue ( secondConceptSet . getSortWeight ( ) > setMember . getSortWeight ( ) )
assertEquals ( "Config" , caller . getResponseBody ( ) )
assertThat ( validator . isValid ( ) , is ( true ) )
assertEquals ( "{ \\"fieldname\\" : { \\"$mod\\" : \\"?\\" } }" , filterParameters . toString ( ) )
Assert . assertEquals ( "PUT: Michael" , result )
assertEquals ( 5 , value . asInt ( 10 ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertThat ( message , containsString ( HOSTNAME ) )
assertNameToken ( ast , "bwahaha" )
assertEquals ( "urn:oid:0.1.2.3" , parsed . getEntry ( ) . get ( 0 ) . getResource ( ) . getId ( ) . getValue ( ) )
assertEquals ( HttpStatusCode . BAD_REQUEST . getStatusCode ( ) , connection . getResponseCode ( ) )
assertEquals ( 5 , d . asByte ( ) )
Assert . assertEquals ( "{\\"alice\\":{\\"bob\\":[\\"charlie\\"]}}" , result . toString ( ) )
assertEquals ( VALUE , value . get ( ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertAllTargetsCount ( 0 )
assertEquals ( 0 , historicIncidents )
assertIsAborted ( tx )
assertThat ( cookieJar . get ( Cookie . class ) . size ( ) , is ( 10 ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertEquals ( "John Doe" , result . trim ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
Assert . assertEquals ( "QCD-1-000003" , generated )
assertEquals ( 1 , kb . getResults ( ) . getMessages ( org . kie . api . builder . Message . Level . ERROR ) . size ( ) )
assertOut ( "org.apache.royale.utils.Language.as(a, b)" )
assertEquals ( AbstractSuperclass . class , test . getStatement ( 1 ) . getReturnClass ( ) )
assertThat ( result . getPayloadAsString ( ) , equalTo ( "cans" ) )
assertEquals ( "Wrong authentication returned" , fakeResult , authentication )
assertEquals ( expectedValue , expression . evaluate ( document ) )
assertThat ( builder , hasToString ( "<a href=\\"https://flattr.com/thing/123546/a-demo-thing?type=small\\">" + "<img src=\\"http://api.flattr.com/thing/123546/a-demo-
assertProcessEnded ( processInstance . getId ( ) )
Assert . assertEquals ( expectedId , id )
Assert . assertEquals ( PropertyValue . create ( "Alice" ) , result . get ( 0 ) . getProperty ( 0 ) )
assertEquals ( result , range . exclude ( other ) )
assertThat ( filteredVersions , arrayContaining ( version ( "1.1.1-SNAPSHOT" ) ) )
assertEquals ( "001111110000000000000000" , value . getDataAsBinaryStr ( ) )
Assert . assertEquals ( 1 , a . getNumberOfFinalMethods ( ) )
assertEquals ( 5 , validationProviders . size ( ) )
assertEquals ( "boolean mapper serialization is wrong" , expected , actual )
assertOut ( "baz: function baz(x) {\\n\\treturn x + 1;\\n}" )
assertEquals ( "A Link1 (" + BASE_URL + "http://xyz/abc) B" , result )
assertEquals ( expResult , result )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_1" )
assertEquals ( expectedDouble , executeAndReturnNumber ( FloatToInt . class ) , 0 )
assertEquals ( p1 , p2 )
assertThat ( p4 . toString ( ) , is ( p5 . toString ( ) ) )
assertThat ( result , is ( "" ) )
assertThat ( event . getRelease ( ) , equalTo ( expectedValue ) )
assertTrue ( selector . evaluate ( source ) )
Assert . assertNotNull ( props )
assertNotNull ( bss )
assertEquals ( "hello world" , content )
assertNotNull ( union )
assertNotNull ( homepage )
assertTrue ( editFilter instanceof LinkIndexUpdaterEditFilter )
Assert . fail ( "Expected to fail, but didn't" )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expResult , result )
assertValiadationResult ( validationMessages )
assertEquals ( EXPECTED . replace ( Integer . toString ( HttpStatusCodes . OK . getStatusCode ( ) ) , Integer . toString ( HttpStatusCodes . OK . getStatusCode ( ) ) ) . replace ( HttpStatusCodes . OK . getStatusCode ( ) , HttpStatusCodes . OK . getStatusCode ( ) ) . replace ( HttpStatusCodes
assertEquals ( "Native and term comparisons are different" , nativeComparison , mapperComparison )
assertEquals ( 0 , cmd . args . size ( ) )
this . assertAnalyzesTo ( _a , "\\"Test tesT2\\"@en" , new String [ ] { "Test" , "tesT2" } , new String [ ] { "word" , "word" } )
Assert . assertTrue ( allRight )
assertEquals ( expectedNumEntries , actualNumEntries )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff_" ) )
assertUnderflow ( ( double ) x - ( double ) y , result , x - y )
assertThat ( "Field is not bound" , sut . fieldIsBound ( field ) , is ( true ) )
assertThat ( issues , is ( empty ( ) ) )
assertEquals ( "foo = bar" , base . toString ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( expecting , found )
Assert . assertEquals ( true , config . isDebug ( ) )
assertTrue ( ( Boolean ) result )
assertNotNull ( Challenge . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "identity" , "sid" ) . fetch ( ) )
assertThat ( panel . getBackgroundPainter ( ) , is ( nullValue ( ) ) )
assertThat ( "Expected the property to not be set" , getSettings ( ) . getString ( "key" ) , nullValue ( ) )
assertEqualsWithoutWhiteSpaces ( "cylinder(h=10, $fn=8, center=true);" , prism )
assertThat ( options . getUploadBufferSize ( ) , is ( 0 ) )
assertNotNull ( result )
assertEquals ( 24 , result )
assertThat ( out . value , is ( new StringOption ( "Hello, world!" . substring ( 0 , 10 ) ) ) )
assertNotNull ( openAPI )
assertNull ( result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertNotNull ( book )
assertArrayEquals ( new String [ ] { } , command )
Assert . assertEquals ( input , field . getValue ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "Method #toString is wrong" , "Object[property]" , property . toString ( ) )
assertThat ( action . execute ( ) , is ( equalTo ( CONTENT ) ) )
assertOut ( "var /** @type {Array} */ a = new Array('Hello', 'World')" )
assertTrue ( replayService . getPlayers ( ) . isEmpty ( ) )
assertTrue ( upstreamCtx . isInvokable ( operatorDef , strategy ) )
assertEquals ( expectedFilename , fileName )
assertEquals ( expectedResult , entityParser . parseDatastream ( json ) )
Assert . assertTrue ( cover . getBoundaries ( ) . getZ ( ) . getMin ( ) < TEST_MODEL . getBoundaries ( ) . getZ ( ) . getMin ( ) )
assertTrue ( "Failed authentication with wrong password was not logged" , loggedFailedAuth ( AUDIT_LOG_FILE , USER ) )
out . assertIsSatisfied ( )
assertQ ( req , "//result[@name='response'][@numFound='1']" , "//result[@name='response']/doc[1]/str[@name='id'][.='1']" )
assertTrue ( instance . isBuilding ( event , project ) )
Assert . assertEquals ( "(A124_C125del2)" , del . toHGVSString ( AminoAcidCode . ONE_LETTER ) )
assertEquals ( "allocation that filled the gap after allocation should have been merged with adjacent allocation" , Lists . newArrayList ( new Allocation ( control , 0 , 5 ) ) , allocations . getAllocations ( ) )
assertTrue ( action . isExecuted ( ) )
assertTrue ( _isOrientationInverted ( vel , q ) )
assertThat ( link . waitForArduinoToBoot ( 3 , DAYS , READY_MESSAGE_ONLY ) , is ( false ) )
assertEquals ( true , result )
assertEqualsIsTransitive ( child1 , child2 , child3 )
assertEquals ( ElasticSearchIndexProvider . ES_KEYWORD_TYPE , type )
assertEquals ( 0 , app . executeApplication ( args ) )
assertEquals ( expectedValue , propertyValue )
assertEquals ( 0 , userList . indexOf ( user ) )
assertNotEquals ( playlist1 , playlist2 )
statusSupport . assertReloadOccured ( )
assertThat ( impl . containsAxiomIgnoreAnnotations ( axiom , ontologyId ) , is ( true ) )
assertEquals ( expected , actual )
assertEquals ( "61 62 63 64 65 66 67 68   69 6a 6b 6c 6d 6e 6f 70 abcdefgh ijklmnop" + EOL , os . toString ( ) )
assertEquals ( "TestValue" , ( ( Context ) context . lookup ( "" ) ) . lookup ( "test" ) )
assertEquals ( "" , output )
assertThat ( target . getMatches ( ) . size ( ) , is ( 2 ) )
assertTrue ( definition . contains ( "CHAR(1)" ) )
assertMappedFieldValueIsNull ( )
TestCase . assertTrue ( result )
Assert . assertNull ( testSubject . subModel ( new ScadGenerationContextFactory ( ) . exclude ( 11 ) . create ( ) ) )
assertMetadata ( is )
Assert . fail ( "create object with wrong MD5 should fail" )
assertEquals ( arr , resultArr )
assertTrue ( builder instanceof NamedClusterConfigBuilder )
assertEquals ( "The hashCode method should generate the same value from the same input" , one . hashCode ( ) , two . hashCode ( ) )
assertEquals ( expected , actual )
assertEquals ( 4 , result . size ( ) )
assertNull ( client . lastBatch )
assertEquals ( "om 3 dagar" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert . assertTrue ( isEqual ( distance , 0.269098 ) )
assertNotEquals ( right , left )
Assert . assertTrue ( "SifAgent should extend agent" , agent instanceof Agent )
assertEquals ( "abc\\n" , found )
assertEquals ( "" , result )
assertEquals ( 0 , SnowcastSequenceUtils . compareTimestamp ( sequence1 , sequence2 ) )
assertEquals ( 1 , result . size ( ) . intValue ( ) )
assertNotNull ( c )
editor . assertProblems ( "learn-bosh|unknown property" , "version|unknown property" )
assertEquals ( "1234567890" , actual )
assertEquals ( "aTestString" , classUnderTest . getClientName ( ) )
assertEquals ( expectedFormKey , actualFormKey )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
assertThat ( slice . events . get ( 0 ) . event , equalTo ( events . get ( 7 ) ) )
assertEquals ( relSet , Iterables . getOnlyElement ( relIterable ) )
assertTrue ( genericObjectPool . validateOnCreate ( ) )
assertThat ( session . getVersionSuffix ( ) , nullValue ( ) )
assertEquals ( "java.lang.String" , name . getImage ( ) )
Assert . assertEquals ( 1 , allMembers ( ) )
assertions . startsWith ( )
assertTrue ( content . contains ( "This is page foo" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "Number of history entries are incorrect" , 2 , changes . size ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertEquals ( adaptee , target . adapt ( ) )
Assert . assertNull ( agent . getClient ( ) )
assertEquals ( true , result )
Assert . assertEquals ( String . format ( msg , r , c ) , expected , actual , 0. )
assertTrue ( url . startsWith ( "https://github.com/" ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\
assertEquals ( expected , found )
assertOutWithMetadata ( outTemplate . replaceAll ( "AppName" , appName ) )
assertEquals ( "The Decoded Data should be the same as the input Data" , data , embedding . getDecodedData ( ) )
Assert . assertEquals ( expectedAfter , actualAfter )
assertJsonEquals ( ImmutableMap . of ( "topic" , "test-topic" , "apns" ) , message )
assertEquals ( 5 , historyService . createHistoricProcessInstanceQuery ( ) . processDefinitionKey ( "result" ) . count ( ) )
assertDocument ( session . getSessionFactory ( ) , "TimberTrading" , "{ '_id' : '" + timberTradingInc . getId ( ) + "' }" , "{ " + "'_id' : '" + timberTradingInc . getId ( ) + "', " + "'
assertEquals ( userCredentials . size ( ) , 5 )
assertThat ( connection2 , not ( is ( connection ) ) )
Assert . assertTrue ( score <= 0 )
assertFalse ( ss . validate ( ) )
assertValidKey ( taskKey )
Assert . assertEquals ( 200 , c . getResponseCode ( ) )
assertEquals ( policyName , policy . getName ( ) )
assertEquals ( "Sales.Pattern" , pattern . toString ( ) )
assertThat ( javaSource , containsString ( "��懈��携" ) )
assertThat ( rf . format ( result ) , is ( sb . toString ( ) ) )
Assert . assertTrue ( DoubleArrays . nextSample ( weights , expected ) == 0 )
assertEquals ( "Base value is not properly parsed" , "09999.9999" , parsed )
Assert . assertEquals ( "Soft line   Hard line\\r\\n" , readText ( decoder ) )
arrays . assertStartsWith ( description , null , new short [ 2 ] )
assertEquals ( expectedQuery , actualQuery )
assertThat ( checkpoint . getCheckpoint ( shardId ) , equalTo ( extendedSequenceNumber ) )
assertEquals ( "Find by start and end time with none in that period is still returning a list with one event" , 0 , events . size ( ) )
assertThat ( testInstance . toList ( ) . size ( ) , is ( 0 ) )
assertThat ( output . toString ( ) , containsString ( "foo,bar" ) )
assertEquals ( expResult , result )
assertEquals ( 1 , fixture . readByte ( ) )
assertEquals ( 6L , statistics . getQueryPlanCacheMissCount ( ) )
strings . assertStartsWith ( mock ( Description . class ) , null , "Yoda" )
Assert . assertEquals ( 8.0 , y [ 0 ] , 1.0e-12 )
assertTimerWithDuration ( "catch" , TIMER_DURATION )
assertThat ( sub . shouldNotify ( dateTime ( "1015" ) , AlertType . ERROR ) , is ( false ) )
Assert . assertTrue ( responseList . size ( ) <= 1 )
Assert . assertNotNull ( irodsFile )
assertEquals ( "(2 1 a)\\n" , found )
assertThat ( reportEntries . size ( ) , is ( 0 ) )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REGEX , v , TERM_FACTORY . getConstantLiteral ( "^Ste(v|ph)en$" ) , TERM_FACTORY . getConstantLiteral ( "i" ) , TERM_FACTORY . getConstantLiteral (
assertEquals ( 0.9 , connPerRoute . getMaxPerRoute ( route ) , 0.001 )
assertThat ( testValue , is ( expectedValue ) )
assertNotEquals ( firstUserWrapper . getUserID ( ) , secondUserWrapper . getUserID ( ) )
assertAnnotationCompletions ( "@Value(\\"#{345${data.prop2<*>}\\")" , "@Value(\\"#{345${else.prop3<*>}\\")" , "@Value(\\"#{345${spring.prop1<*>}\\")" )
assertThat ( count , is ( 2L ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( testValue , outValue , 0.0F )
assertFileExists ( tmp , "src/test/resources/remove/header.txt" )
Assert . assertEquals ( expectedMessage , createString ( out ) )
assertThat ( query . isBriefAbuseContact ( ) , is ( false ) )
assertStatisticalSummaryEquals ( totalStats . getSummary ( ) , aggregatedStats , 10E-12 )
Assert . assertTrue ( success )
assertThat ( matcher . matches ( null ) , is ( true ) )
assertArrayEquals ( expected , Proto . build_filler ( 1 ) )
assertThat ( manager . getApplicationPreferences ( ) , is ( applicationPreferences ) )
assertParsingIsCorrect ( nativeQuery , expectedCacheName , expectedProjections )
assertTrue ( payload . getThreadId ( ) . get ( ) . equals ( "woof" ) )
assertEquals ( "<bar>foo_value</bar>" , elt . getAttribute ( "bar" ) )
assertEquals ( 72D , hours , 0 )
Assert . assertThat ( bolt . getColumnVisibility ( "field" ) , Is . is ( nullValue ( ) ) )
Assert . assertTrue ( result )
assertTrue ( c1 instanceof PublicCloneable )
assertEquals ( "Basic dXNlcjp0ZXN0" , basicAuth ( user , pass ) )
Assert . assertEquals ( "TestA" , name )
Assert . assertEquals ( 5f , vm . getStack ( ) . pop ( ) )
assertEquals ( "Failed to generate foreach loop using a List<String>" , FOREACH_STRING_IN_LIST , foreachWithList )
assertTokens ( new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP , Tokens . FACTORIAL )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertTrue ( messageLatch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( 4 , is . available ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( 7 , tuple . len ( ) )
assertEquals ( "Do you really think we have a different kind of muslim in American .\\n" + "Do you think they follow the Quran and hadith ?" , cleanText )
Assert . fail ( "Should throw BadRequestException" )
assertTrue ( page . getBody ( ) . asText ( ) . indexOf ( "Flash" ) != - 1 )
assertNoViewCalls ( )
Assert . assertNotNull ( json . getString ( "uid" ) )
Assert . assertEquals ( "A_B_C" , s )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( "" , result )
assertCanTake ( manager , 0 , 1 )
assertEquals ( 4 , ( long ) probe . getCount ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( m1 , m2 )
assertEquals ( fileInfo . getFileId ( ) , fileId )
Assert . assertNotNull ( f )
assertEquals ( 0 , resultSet . getColumnCount ( ) )
assertEquals ( "test" , t1 . toString ( ) )
assertNull ( idxConf . getRecordFilter ( ) . getIndexCase ( "myrecordtable" , record ) )
assertEquals ( "String value does not match" , bookmark . getDescription ( ) , loadedBookmark . getDescription ( ) )
assertTrue ( result . isSuccess ( ) )
Assert . assertArrayEquals ( testData32bitFloat , result , 0.0f )
Assert . assertEquals ( "HTML class should have been appended with a space separator" , expected , comp . getHtmlClass ( ) )
assertEquals ( "value from bytes" , 0xFE , zl . getValue ( ) )
assertEquals ( "/dev/" , property )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 0 , historyService . createHistoricDetailQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertSame ( Byte . class , value . getValue ( ) )
assertThat ( mySignalHandler . wasCalled , IsEqual . equalTo ( false ) )
assertThat ( found , is ( false ) )
assertArrayEquals ( new long [ ] { 1 , 2 } , res . getShape ( ) )
assertThat ( r , hasEntry ( "set" , ( Object ) ImmutableList . of ( "cow" ) ) )
assertEquals ( 0 , daemon . getEvents ( ) )
assertEquals ( expected , victim . process ( prefix , nameRequest ( ) . fileNumber ( fileNumber ) ) )
Assert . assertEquals ( "Bill" , cust . getName ( ) )
Assert . assertEquals ( dateString , "2011021513" )
assertEquals ( "3 氓rhundraden sedan" , t . format ( new Date ( 0 ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff22_" ) )
assertEquals ( expected , cls . getCodeBlock ( ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getVolumes ( ) , allOf ( hasPvClaimVolume ( "volume-" + SERVER_NAME ) , hasPvClaimVolume ( "$(SERVER_NAME)-claim" ) ) )
assertTrue ( cache . isCachedDb ( dbName ) )
assertEquals ( ( long ) 8 , ( long ) result . getLongWrapperValue ( ) )
assertThat ( result . statusCode , is ( Response . ACCEPTED ) )
assertTrue ( idxSet . contains ( column . getIndex ( ) ) )
assertFeatureValues ( expected , queryText , Arrays . asList ( "single document test case" , "another document" ) , getChain ( new TFIDFFeatureExtractor ( ) ) , 0 )
assertEquals ( 312L , borrowOrderResult . getBorrowId ( ) )
assertThat ( ( double ) stopwatch . getAverageDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 100 , 50 ) ) )
assertEquals ( "name" , service . getMutatorName ( col ) )
Assert . assertEquals ( _expectedAddress , _frodo . getAddress ( ) )
editor . assertContextualCompletions ( "<*>" , "some-release<*>" , "other-release<*>" )
assertThat ( mfp . getProperty ( ) , equalTo ( "private" ) )
assertEquals ( "Di Fusco" , person . getLastName ( ) )
assertEquals ( HttpStatus . BAD_REQUEST , response . getStatusCode ( ) )
assertFalse ( component . isReducible ( ) )
assertThat ( ( String ) c . value , is ( "ASCENDING" ) )
assertEquals ( "{b=2}" , union . toString ( ) )
assertEquals ( "SELECT g1.e2 FROM g1 WHERE g1.e1 = 'a\\\\'b\\\\\\\\c'" , sqlVisitor . toString ( ) )
Assert . assertEquals ( 64 , FilePermissionHelper . toOctalFileMode ( perms ) )
assertSame ( toTest , toTest . setParamsListSeparator ( "a" ) )
assertNotNull ( entry . getFileId ( ) )
assertNotNull ( strategy )
Assert . assertTrue ( id > 0 )
Assert . assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
assertResultSet ( res )
assertEquals ( 30 , eventListener . getEvents ( ) . size ( ) )
assertNotNull ( adminUsersController )
assertThat ( driver . findElement ( By . id ( "validationForm.errors" ) ) . getText ( ) , is ( "invalid combination of left and right" ) )
assertEquals ( sum , victim . getSum ( ) , EPSILON )
Assert . assertEquals ( infoCancelamento , cancelamento . getInfoCancelamento ( ) )
Assert . assertTrue ( hash < Integer . MAX_VALUE )
Assert . assertFalse ( migrationCheckingState . getStateActionState ( ) instanceof Done )
assertNull ( result )
assertThat ( link , is ( notNullValue ( ) ) )
assertNull ( referenceManager . remove ( new Object ( ) ) )
assertEquals ( "result count mismatch for: " + xquery . toString ( ) , baseResult . size ( ) , results . size ( ) )
assertTrue ( address . getId ( ) != null )
assertQuickViewFields ( new String [ ] { "1" } )
mockery . assertIsSatisfied ( )
assertNull ( doc )
assertEquals ( 3 , notificationService . getCurrentFileTransfers ( ) . size ( ) )
assertions . isNotEqualTo ( new Long ( 6L ) )
assertFalse ( rrc . matches ( context , metadata ) )
Assert . assertEquals ( expected , calculated )
Assert . assertEquals ( dt2 , dt )
assertEquals ( PromptForCity . class , argumentCaptor . getValue ( ) . getClass ( ) )
assertThat ( filters . getResponseFilters ( ) . size ( ) , is ( 2 ) )
assertTrue ( selectedFile . exists ( ) )
assertEquals ( 1 , potentialDeadlocksCount )
assertThat ( mapper . readValue ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><customer><first>John</first><last>Citizen</last></customer>" , String . class , is ( mapper . readValue ( "<
assertEquals ( expResult , instance . toString ( ) )
assertNull ( plugin . getHost ( ) )
assertEquals ( NO_CONTENT_204 , response . getStatus ( ) )
assertSame ( littleEndianBytes . toByteArray ( ) , bigEndianBytes . toByteArray ( ) , "littleEndian" , "bigEndian" )
assertions . isNotLessThan ( null )
assertEquals ( expResult , result )
assertions . isNotLessThan ( expected )
assertTrue ( pattern . matches ( "-.1" ) )
Assert . assertEquals ( expectedUuid , actualUuid )
Assert . assertEquals ( BigInteger . valueOf ( - 9223372036854775807 ) , result )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( 512L , result )
assertEquals ( "failed to generate class definition implementing an interface" , CLASS_IMPLEMENTING_INTERFACE , cls )
assertTrue ( url . endsWith ( "/plugins/servlet/stashbot/build-reporting/repoId/verify-commit/status/successful/buildHead/mergeHead/pullRequestId" ) )
Assert . assertTrue ( "Variant DocumentIF has " + fields . size ( ) + " fields" , fields . size ( ) == 4 )
assertEquals ( expectedAutoGeneratedAllView , result . get ( "all" ) . getMap ( ) )
assertTrue ( vcfFile . exists ( ) )
assertResponse ( response , 403 , "[{\\"Forbidden\\": \\"QUERY API methods are disabled on this KairosDB instance.\\"}]\\n" )
assertEquals ( expectedOrder , result )
assertEquals ( f1 . hashCode ( ) , f2 . hashCode ( ) )
assertEquals ( 10 , calc . last )
assertEquals ( "<a href=\\"" + "https://github.com/danielflower/maven-gitlog-plugin/issues/10\\">Some commit message</a>" , actual )
Assert . fail ( "build listing failure" )
Assert . assertTrue ( this . compressed . length ( ) > compressed . length ( ) )
assertEquals ( 1 , query ( ) . from ( show ) . where ( show . acts . size ( ) > 0 ) . fetchCount ( ) )
assertThat ( storedValue , is ( true ) )
assertEquals ( "223.45" , service . getOrderAmount ( "A-OK-223-45" ) . toPlainString ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertEquals ( "Does not compare " + nv1 + " & " + nv2 , NodeValue . CMP_LESS , NodeValue . compare ( nv1 , nv2 ) )
assertNotNull ( order )
Assert . assertEquals ( 42 , val )
Assert . assertEquals ( 2 , buffer . length ( ) )
Assert . assertTrue ( "file should exist" , target . exists ( ) )
assertNotNull ( configureElytron ( ) )
Assert . assertTrue ( value )
assertEquals ( 3 , read )
assertThat ( subject . location ( ) , is ( nullValue ( ) ) )
assertEquals ( expected , modelWriter . toString ( ) )
Assert . assertThat ( a . isEnabled ( ) , is ( true ) )
assertThat ( copy . getListProperty ( ) , instanceOf ( LinkedList . class ) )
assertThat ( browser . getCurrentUrl ( ) , is ( expected ) )
Assert . assertEquals ( numeroSequencialEvento , eventoRetorno . getNumeroSequencialEvento ( ) , 0 )
assertThatSql ( query , is ( "SELECT nodes.col1,nodes.col2 FROM table1 AS nodes UNION SELECT edges.col3,edges.col4 FROM table2 AS edges" ) )
Assert . assertEquals ( "the dog ran arottweiler" , this . realiser . realise ( _sent ) . getRealisation ( ) )
Assert . assertEquals ( rate , pop . getElitismRate ( ) , 0.01 )
assertNull ( sessionManager . getAttribute ( "1" ) )
assertNotNull ( holePunchScheduler )
Assert . assertTrue ( sut . isWeekday ( cal . getTime ( ) ) )
assertTrue ( entity . getId ( ) > 0 && entity . getCount ( ) == new Integer ( 3456789 ) )
assertThatSql ( query , is ( "SELECT [__ALLNODES__].col1, [__ALLNODES__].col2 FROM [__ALLNODES__]" ) )
assertEquals ( 2 , workspace . get ( ) . stream ( ) . filter ( p -> p instanceof IndexedEntity ) . collect ( Collectors . toList ( ) ) . size ( ) )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertTrue ( Arrays . equals ( payload , response . getPayload ( ) ) )
assertEquals ( DB_NAME , HiveDatabase . create ( udbContext , new UdbConfiguration ( ImmutableMap . of ( ) ) ) . getName ( ) )
assertEquals ( "Expected 1 result!" , 1 , n )
assertThat ( Sets . newHashSet ( viewAttributes ) , equalTo ( Sets . < ViewAttributeBinder > newHashSet ( viewAttributeBinder ) ) )
assertEquals ( 3 , defaultConfig . getParameterNames ( ) . size ( ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( Credential . fetcher ( "CRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expecting , found )
assertEquals ( "Unexpected item total" , "2" , actualCart . getItemTotal ( ) )
assertEquals ( r , pos )
assertEquals ( r1 , r2 )
assertThat ( service . execute ( POST ) , is ( responseEntity ) )
assertEquals ( e1 , e2 )
assertSearchYields ( index , "author:(bob OR ((rose OR tom) AND jones))" , "bm" , "rj" , "tj" )
assertEquals ( "[5, 1, 22, 4, 8, 9, 3, 3, 989]" , res . toString ( ) )
assertArrayEquals ( new long [ ] { 3 , 4 } , arr3 . shape ( ) )
assertEquals ( "scoreHolder.addMultiConstraintMatch(kcontext, new int[] {-1, -2}, new int[] {-3, -4})" , marshaledAction )
assertEquals ( "3�� ��" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertEquals ( "http://www.example.com/service/endpoint/" , uri . toString ( ) )
assertEquals ( typedValue , variableValue )
assertNotNull ( Country . fetcher ( "US" ) . fetch ( ) )
assertThat ( stream . count ( ) , equalTo ( 1L ) )
Assert . assertArrayEquals ( testAgents , buf )
assertEquals ( "Deserialization failed" , 0 , buffer . readableBytes ( ) )
assertEquals ( activityList , resultList )
assertThat ( fileConfig . getTabWidth ( ) , is ( 8 ) )
assertEquals ( BigInteger . valueOf ( 2 ) , actual )
assertThat ( javaPage , notMarked ( "aboutaboutaboutaboutaboutaboutaboutaboutaboutaboutaboutabout" ) )
ImgLib2Assert . assertImageEquals ( source , destination )
assertNull ( column . getParent ( ) )
Assert . assertEquals ( "PayloadTableRow key test" , expectedPayloadTableRowKey , result )
assertEquals ( expected , result )
assertNotNull ( dsp )
assertEquals ( "[{foo:\\"bar\\"}]" , array . toString ( ) )
Assert . assertEquals ( String . format ( msg , s , r , c ) , expected , actual , 0. )
Assert . assertEquals ( expected_derivative , result , 0.0 )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertEquals ( 1 , result . intValue ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 8 , warnings . size ( ) )
Assert . assertEquals ( ( ( SimpleSelect ) tree . ret . ret ) . limit , 42 )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( validationResult , is ( emptyResult ( ) ) )
Assert . assertEquals ( BitTag . SERVICENET_LB . tagValue ( ) + BitTag . SSL . tagValue ( ) + BitTag . SSL_MIXED_MODE . tagValue ( ) , mappedUsage . getTagsBitmask ( ) )
assertEquals ( Writables . strings ( ) , t . getSubTypes ( ) . get ( 0 ) )
assertThat ( uri , is ( equalTo ( "/clients/" ) ) )
assertThat ( statusCode , equalTo ( 500 ) )
assertThat ( customerId , notNullValue ( ) )
Assert . assertTrue ( result )
assertEquals ( SCROLL_VALUE , getScrollLeftValue ( panel ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . FAIL ) )
assertThat ( instanceOne . equals ( instanceTwo ) , is ( false ) )
assertArrayEquals ( new String [ ] { "High" } , ( String [ ] ) filterResult . getValue ( ) )
assertEquals ( "123" , ids )
assertFalse ( result )
Assert . assertEquals ( BooleanNode . FALSE , result )
assertEquals ( 2 , services . size ( ) )
Assert . assertEquals ( "callback_value" , o )
Assert . fail ( )
assertThat ( updatedItem . getQuantity ( ) , is ( item . getQuantity ( ) - increment ) )
assertEquals ( 5 , newses . size ( ) )
assertEquals ( "try(final java.io.OutputStream os = new java.io.ByteArrayOutputStream();" + CRLF + "final java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream(os)) {" + CRLF + "    os.read();" + CRLF + "}" + CRLF
assertResultSet ( res )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 2 , accounts . size ( ) )
assertNoViolations ( constraintViolations )
assertEquals ( cleaned . getDocType ( ) . getContent ( ) , output )
assertThat ( result . endsWith ( "[experimenterId=12345,body=[1,10]]" ) , is ( true ) )
assertNull ( "result should be null" , invoker . invoke ( sayHelloWithAnnotation , new Object [ ] { } ) )
Assert . assertEquals ( expected , actual )
assertOut ( "/**\\n * @export\\n */\\n" + "RoyaleTest_A.prototype.foo = function() {\\n" + "  var self = this;\\n" + "  function localFunction() {\\n" + "    trace(
Assert . assertEquals ( to , actual )
assertEquals ( "1.10" , actual )
assertThat ( filteredVersions , arrayContaining ( version ( "1.1.1.1-sp1" ) , version ( "1.1.1.1-1" ) , version ( "1.1.1.2" ) , version ( "1.1.2.
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
Assert . assertEquals ( "french lexical value@fra" , actualLabel )
Assert . assertEquals ( true , isSuccess )
assertNotEquals ( "func()" , focusedCell . getText ( ) )
Assert . assertTrue ( deal . isAccepted ( ) )
assertFalse ( entity . isValid ( ) )
assertEquivalentMutate ( Arrays . asList ( m1 , m2 ) )
assertEquals ( defaultSourceCodeNamesList , result )
Assert . assertEquals ( splits , splits2 )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( "fcr:acl" , relativizeSubpath ( rootObjectId , resourceId ) )
assertEquals ( res , 1 )
Assert . assertNotNull ( ss1 )
assertEquals ( 1 , graph . getNodeCount ( ) )
assertTrue ( this . pageConfigExtension . getConfigDescriptorValidator ( ) instanceof ValidPageConfigDescriptor )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . OK , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertThat ( redisServer . isActive ( ) , is ( false ) )
assertEquals ( 2 , RecorderTaskListener . getEventCount ( TaskListener . EVENTNAME_UPDATE ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( "Should be a 409 Conflict!" , CONFLICT . getStatusCode ( ) , getStatus ( method ) )
assertFalse ( metaObject . isAssignableFrom ( metaInterface ) )
assertThat ( result , is ( true ) )
assertEquals ( "1" , recorder . getHeader ( "Cache-Control" ) )
assertSame ( mockConnection , conn . getProxiedConnection ( ) )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( element . decremented ( ) ) , is ( PlainDate . of ( 2000 , 12 , 2 ) ) )
Assert . assertTrue ( "Number of unregistered identifiers was different than expected." , numOfUnregisteredPI > 1 )
Assert . assertEquals ( ambiente , protocoloInfo . getAmbiente ( ) )
assertTrue ( result . length ( ) > 0 )
Assert . assertTrue ( errors . isEmpty ( ) )
assertEquals ( 6 , results . size ( ) )
assertThat ( results , contains ( "\\"hello-world\\"" , "\\"hello,world\\"" ) )
assertEquals ( getItem . xmlText ( ) , GetItemHelper . getGetItemsRequest ( ) . xmlText ( ) )
runner . assertAllFlowFilesTransferred ( SelectHive3QL . REL_FAILURE , 1 )
assertArrayEquals ( new double [ ] { 1 , 0 , 0 , 0 } , h . values , 0.001 )
assertInstanceOf ( "Unexpected implementation." , AffineTransform2D . class , transform )
assertTrue ( matches )
assertEquals ( "foo" , x . f1 . get ( ) . get ( ) )
assertEquals ( pubEvt . getBody ( ) . toString ( ) , "Hello" . toString ( ) )
Assert . assertEquals ( expected , impl . getCurrentSize ( ) )
Assert . assertEquals ( true , true )
Assert . assertTrue ( "user object must be a FileTreeDiffEntry" , isFileTreeNode )
assertTrue ( command . valid ( options , optionParser ) )
assertNull ( c . consume ( ) )
assertTrue ( 5.0d == d . asFloat8 ( ) )
assertEquals ( "user1" , echoValue )
assertEquals ( "1" , setting . getUniqueIDPrefix ( ) )
assertNumberOfMappingsIs ( 114 )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( paths . get ( path ) , acl . getPath ( ) )
assertTrue ( testFacet . isInstalled ( ) )
Assert . assertEquals ( "john" , friend . property ( "friend" ) . value ( ) )
assertSame ( conn , foundConnection )
assertThat ( errors , is ( empty ( ) ) )
assertEquals ( VALUE1 , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertEquals ( expResult , result )
assertOutputSameTextFile ( gen , "DefineEventMethods_PM.java.txt" )
assertEquals ( 200 , statusCode )
assertFalse ( t . get ( ) )
assertTrue ( "size must be 1 but it is - " + queryModel . getObject ( ) . size ( ) , queryModel . getObject ( ) . size ( ) == 1 )
assertThat ( ChangeUtil . formatChangeScriptList ( Arrays . asList ( change1 , change3 ) ) , hasItems ( change1 , change3 ) )
assertEquals ( "geDeviceId timeout" , latch . getCount ( ) , 0 )
assertTrue ( containsSymbol ( symbols , "@/postData -- POST" , docUri , 32 , 1 , 32 , 32 ) )
Assert . assertEquals ( 7 , result . size ( ) )
Assert . assertTrue ( true )
assertTrue ( set . contains ( any ( set ) ) )
assertNotNull ( injector )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertNull ( result )
assertSame ( StackLocatorUtilTest . class , reversed . pop ( ) )
assertEquals ( 3.0 , median , 0.0000001 )
assertThat ( isTransactionRelated , is ( false ) )
assertFalse ( helper . isLinkLayer ( file ) )
assertThat ( actual , is ( expected ) )
assertEquals ( 444L , WebClient . create ( address ) . get ( Book . class ) . getId ( ) )
assertNotNull ( jobId )
runner . assertAllFlowFilesTransferred ( PublishKafka_0_10 . REL_SUCCESS , 3 )
assertNotNull ( Activity . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "�注�� 12 �拽�转" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
assertSame ( "Same response should not be ignored." , httpResponse , httpResponseProviderIgnoreAdditionalHeaders . getResponse ( requestCopy ) )
assertEquals ( AddressFormatter . DEFAULT_ADDRESS_FORMAT , shopEntity . getAddressFormatByCountryAndLocale ( ShopEntity . countryAndLocaleNoCfg ( ) ) )
assertEquals ( script , observedScript )
assertEquals ( getMessage ( MessageKeys . LABEL_TR_MENU_MENUMESSAGE ) , driver . findElement ( By . id ( "messagesArea" ) ) . getText ( ) )
assertJson ( "{'vaLUE': 'foo'}" , serialize ( bean ) )
assertEquals ( 1 , LogUtil . findMessage ( "The service method com.alibaba.dubbo.rpc.support.DemoService.echo(String) is DEPRECATED" ) )
Assert . assertEquals ( "(nt_change_misc spl ?)" , nt_change_misc . toStringTree ( parser ) )
Assert . assertEquals ( 10 , result . size ( ) )
assertTrue ( "Expected 0 <= " + numResults , numResults == 0 )
assertMissingOne ( "one" , "set" , 1L )
assertEquals ( SC_OK , response . getStatus ( ) )
assertFalse ( session . isUdpOnly ( ) )
Assert . assertEquals ( Double . valueOf ( config . getDoubleValue ( ) ) , Double . valueOf ( result . getDoubleValue ( ) ) )
assertEquals ( expResult , result )
assertTrue ( response . contains ( getWebContextVarDefinition ( "PENTAHO_ENV_CONFIG" , this . fullyQualifiedServerURL ) ) )
assertTrue ( ruleNames . remove ( "Wrong eval order 1" ) )
assertArrayEquals ( expected , array )
assertEquals ( 11146 , ( int ) ( EarthCalc . vincentyDistance ( buenosAires , kew ) / 1000 ) )
assertExpectationsToDatabase ( apiConnectionThrottle , dbConnectionLimit )
assertEquals ( view , response )
dsUtil . assertTaskParamsMatchEntityProperties ( expectedParams , entity )
Assert . assertEquals ( 1 , compareResult )
assertTrue ( "attempting to persist entity with transactional entity manager and no transaction, should fail with a TransactionRequiredException" + " but we instead got a " + error , error instanceof TransactionRequiredException )
assertEquals ( sapper . getY ( ) , oldYPosition + 1 )
assertEquals ( "Test message ab c" , result )
assertEquals ( expResult , result )
Assert . assertEquals ( 10 , o )
assertEquals ( "Incorrect number of events. Expected 2, actual " + events . size ( ) , 2 , events . size ( ) )
assertTrue ( e . getMessage ( ) , false )
assertThat ( extractor . extract ( sheet . getRow ( 7 ) ) , is ( "A" ) )
assertPerms ( perms )
Assert . assertEquals ( "Invalid result" , 42D , result , 0D )
Assert . assertEquals ( 2 , consumerHolders . size ( ) )
Assert . assertEquals ( "(aa_change_deletion (aa_point_location (aa_char Cys) 123) del)" , aa_change_deletion . toStringTree ( parser ) )
assertEquals ( expectedString , TextUtil . removeNewLines ( html ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertNotNull ( result )
assertEquals ( "No regression here." , destination . getValue ( ) )
assertNotNull ( testObject )
assertEquals ( 1 , notifierManager . internal . size ( ) )
assertNoTaint ( d1 . getDescription ( ) )
assertQuery ( false , "declare namespace n = 'urn:blah'; declare namespace p = 'urn:foo'; declare namespace q = 'urn:blah'; deep-equal(//e1/@n:a, //e2/@p:a)" )
assertNull ( res . getHeader ( "X-woop" ) )
assertEquals ( 0 , entityState . getFieldValues ( ) . size ( ) )
assertEquals ( expectedDate , actualDate )
assertNotNull ( "result cannot be null" , result )
assertTrue ( Tracer . isTraced ( request ) )
Assert . assertNotNull ( pack )
Assert . assertTrue ( expect ( o , true ) )
assertEquals ( new Double ( 20.5 ) , request . getVisitorLongitude ( ) )
assertAllCommandsUsed ( )
Assert . assertEquals ( true , errors . hasFieldErrors ( "code" ) )
assertTrue ( false )
assertThat ( mojo . getClassifierAsString ( ) , is ( nullValue ( ) ) )
Assert . assertEquals ( expected , resultString )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
Assert . assertEquals ( "SELECT DATE_ADD('2009-01-01', INTERVAL 6 / 4 MINUTE_SECOND);" , text )
assertTrue ( selectedCells . isEmpty ( ) )
assertTokens ( Tokens . ID )
Assert . assertEquals ( 40. , route . getActivities ( ) . get ( 0 ) . getEndTime ( ) , 0.01 )
assertEquals ( 3 , postCommentScores . size ( ) )
assertTrue ( today . isAfter ( sinceGraduation ) )
assertEquals ( "helloworld" , b . tr ( "helloworld" ) )
files . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertEquals ( 0 , managementService . createJobQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertEquals ( "--payload" , props . get ( "expression" ) )
assertEquals ( topic . getUnsubscribeLinkForSubscribersOf ( Branch . class ) , "/branches/1/unsubscribe" )
assertEquals ( path , DockerConnectorConfiguration . DEFAULT_DOCKER_MACHINE_CERTS_DIR )
assertEquals ( "3F000000" , value . getDataAsHexStr ( ) )
assertThat ( result , is ( "something else" ) )
assertTrue ( versionedFlowSnapshot . getSnapshotMetadata ( ) . getComments ( ) . isEmpty ( ) )
assertEquals ( wrappedTemplate + " < ?" , test . build ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( "Interceptor should apply" , result )
Assert . assertEquals ( message , o1 . getResultQuality ( ) , mapper . valueToTree ( found . getResultQuality ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expected , parsed )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
assertEquals ( 1 , exceptions . size ( ) )
assertEquals ( "state should be ERROR" , AnalysisState . ERROR , loadedSubmission2 . getAnalysisState ( ) )
assertNotNull ( action )
Assert . assertEquals ( "object" , r . invoke ( null ) )
assertTrue ( resourceExists ( resourceURI ) )
assertEquals ( new Integer ( 10 ) , MethodFixture . getArgNum ( ) )
assertThat ( adds , StreamMatchers . empty ( ) )
assertTrue ( "Incorrect number of statements in the Block" , ( stmt . getStatements ( ) . size ( ) == 5 ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( "Single row insert" , 1 , count )
Assert . fail ( )
assertThat ( PrettyTime . of ( Locale . US ) . print ( dur , TextWidth . WIDE , false , 1 ) , is ( "124 milliseconds" ) )
Assert . assertTrue ( uploadedFile . exists ( ) )
assertEquals ( String . valueOf ( read ) , expected , j )
assertEquals ( count , rows . size ( ) )
assertTrue ( hashSet . contains ( p1 ) )
assertEquals ( "encoded bytes" , 0 , encoded . length )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertEquals ( SchemaOrgConstants . TYPE_PHOTOGRAPH , SchemaOrgTypeFactory . createObject ( fb ) . getTypeName ( ) )
assertThat ( numFound ( query ( "q=10.0.0.0/24" ) ) , is ( 1L ) )
assertEquals ( 5 , d . asInt4 ( ) )
assertEquals ( "org.jivesoftware.util.test-web.Filter" , result )
Assert . assertEquals ( 0 , result . size ( ) )
assertEquals ( 0 , instance . getNeuronsCount ( ) )
assertFalse ( mock . booleanReturningMethod ( 12 ) )
assertTrue ( "Http authentication factory should be created" , ops . exists ( TEST_AUTHENTICATION_FACTORY_ADDRESS ) )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , FooSteps . class )
assertNotNull ( result )
assertEquals ( false , new String ( generatedfile . getContent ( ) , "utf-8" ) . contains ( "testEvent" ) )
assertNotNull ( response )
Assert . assertEquals ( ref , Preconditions . checkNotNull ( ref , "Reference should not be null" ) )
assertEquals ( response , webRespose )
Assert . assertEquals ( expectedResponse , proxy . sayHello ( message ) )
Assert . assertEquals ( functionColumn , ( ( String [ ] ) result ) [ 0 ] )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( p1 , p2 )
assertThat ( FileUtil . combineWithWindowsAbsolute ( parent , absChild ) , is ( absChild ) )
assertNotNull ( con . nativeSQL ( "select 1" ) )
Assert . assertEquals ( "<br/>b" , out . toString ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del (aa_string Cys Cys Arg))" , aa_change_
Assert . assertTrue ( "Syntax was not accepted by TMRAP servlet" , code == 400 )
assertEquals ( Long . valueOf ( 1L ) , r . getId ( ) )
assertTrue ( response . getBody ( ) . contains ( "<ns3:out>test</ns3:out>" ) )
Assert . assertNull ( pdoc . get ( new Path ( "field7" ) ) )
assertThat ( date . get ( PlainDate . axis ( ) . element ( ) ) , is ( date ) )
assertPostFails ( "4" , variant , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertNotNull ( TOKEN )
assertEquals ( 4 , packetIn . getCount ( ) )
assertEquals ( JXList . uiClassID , list . getUIClassID ( ) )
assertEquals ( emptyList ( ) , tags )
assertEquals ( 6 , generators . size ( ) )
assertEquals ( expResult , result , 0.01 )
assertEquals ( pdop , instance . getPositionDOP ( ) , 0.1 )
Assert . fail ( "Failure expected on an unauthorized call" )
assertTrue ( s . execute ( "select * from parts" ) )
assertQ ( req , "//result[@name='response'][@numFound='1']" , "//result[@name='response']/doc[1]/str[@name='id'][.='1']" )
assertThat ( versionedIdsOf ( units ) , hasSize ( 0 ) )
assertEquals ( "xxxxA" , result )
assertEquals ( 200 , response . getResponseCode ( ) )
assertEquals ( 20 , rowCount )
assertThat ( other , LocalTimeMatchers . sameSecondOfMinute ( date ) )
assertThat ( query ( ) . substring ( offset , length ) , is ( "(offset,len)" ) )
assertPermanentCount ( playerA , "Treacherous Pit-Dweller" , 1 )
assertListTEquals ( listDot , 1 , 2 , 3 , 4 , 5 )
assertNull ( e4 . getTarget ( ) )
assertEquals ( "test@elasticinbox.com:123" , key )
assertEquals ( subset . getFields ( ) . size ( ) , 0 )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "abC" ) )
assertThat ( id , equalTo ( tweet . getId ( ) . longValue ( ) ) )
assertEquals ( d1 , d2 )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�尖�
assertEquals ( "{\\"options\\":{}}" , result )
assertEquals ( matchingMtTableList . size ( ) , mtTable1List . size ( ) )
assertNull ( "Intersection between line and point is incorrect" , p )
Assert . assertEquals ( "incorrect number of branches" , 3 , branchesData . size ( ) )
assertTrue ( true )
assertCandidateList ( expectedCandidates , actualCandidates )
assertTrue ( isEqual )
assertThat ( mergedCss . toString ( ) , is ( "div" ) )
assertEquals ( true , active )
assertEquals ( 4.3d , result )
assertEquals ( "SELECT fname . concat ( s ( " " ) ) . concat ( "lname" ) . as ( "full_name" ) FROM tutorial" , statement . toString ( ) )
Assert . assertTrue ( prefix . startsWith ( "org.apache.cassandra.metrics." ) )
assertNotNull ( dealershipDocument . get ( ) . getAutomobiles ( ) )
assertEquals ( "<div xmlns=\\"http://www.w3.org/1999/xhtml\\">HELLO WORLD</div>" , actual . getText ( ) . getDiv ( ) . getValueAsString ( ) )
Assert . assertNull ( header )
assertThat ( propertyGetter . propertyByType ( testInstance , Collection . class ) , nullValue ( ) )
assertNoNotification ( )
Assert . assertNull ( partitions )
Assert . assertTrue ( result . size ( ) == 2 )
assertEquals ( 3 , graph . size ( ) )
assertEquals ( 2 , helper . getFriendsOf ( "test_fest" ) . size ( ) )
assertEquals ( 7 , result )
assertThat ( iterateModel . getIncrement ( ) , is ( 4 ) )
assertTrue ( stack . isEmpty ( ) )
assertNull ( inmemoryDOMDataTreeShardWriteTransaction . cursor ( ) )
assertSchema ( expected , plan . getOutSchema ( ) )
assertTrue ( true )
assertTrue ( ! nnList . isEmpty ( ) )
assertThat ( allRootDescendants ( ) , everyItem ( not ( canBeScheduled ( ) ) ) )
assertTrue ( game2 . isGameOver ( ) )
assertEquals ( b , fileContent [ i ] )
assertTrue ( out . equals ( "G0 A10.12" ) )
assertEquals ( 15 , code )
assertNotNull ( result )
assertNotNull ( kmodule )
assertThat ( softDrink , instanceOf ( Drink . class ) )
assertThat ( source . getModel ( ) , is ( nullValue ( ) ) )
assertTrue ( "Windows icon exists" , icon . exists ( ) )
assertEquals ( "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e94
assertThat ( actualBaseUri , equalTo ( URI . create ( "classpath:/test-classes" ) . toString ( ) ) )
assertEquals ( "DATA" + -- i , new String ( buffer , "UTF-8" ) )
Assert . assertEquals ( 70 , analyser . getLoadDelivered ( ) . get ( 0 ) , 0.01 )
assertNotNull ( envelope )
assertTrue ( content . contains ( "How now brown cow?" ) )
assertEquals ( 1 , handler . recover ( new Object [ ] { "Randell" } , new RuntimeException ( "Planned" ) ) )
assertThat ( t . merge ( t . defaultValuesInMerge ( s ) ) , is ( t . merge ( s ) ) )
assertThat ( "keywordProperties.size()" , keywordProperties . size ( ) , is ( 1 ) )
assertEquals ( 6 , albumsView . getAlbums ( ) . size ( ) )
assertTrue ( getTaint ( path ) != null && getTaint ( path ) != null )
assertThat ( options . toJSON ( ) , is ( ( JsonElement ) json ) )
assertTrue ( Ordering . natural ( ) . isOrdered ( array ) )
assertEquals ( "" , found )
assertTrue ( job . waitForCompletion ( true ) )
Assert . assertEquals ( "Test" , this . cq ( "select name from Customer where id=1" , Customer . class ) . getSingleResult ( ) )
assertEquals ( expResult , result , 0.0001 )
assertThat ( existingProduct , is ( product ) )
Assert . assertEquals ( "value1" , pyObjectValue . get ( ) )
Assert . assertNull ( userValidated )
assertTrue ( diff . conflicts ( diff2 ) )
assertEquals ( new HashSet < String > ( Arrays . asList ( "toplea2" ) ) , resolver . findGoverningEdOrgs ( courseTranscript ) )
assertTrue ( "bar" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) && 1 == c . getVersion ( ) && "/path" . equals ( c . getPath ( ) ) )
assertNull ( "unexpected result returned from getAsync()" , result )
assertThat ( count , is ( 3 ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<app:complexType xmlns:atom=\\"http://www.w3.org/2005/Atom\\" " + "xmlns:app=\\"http://www.w3.org
assertMockEndpointsSatisfied ( )
assertThat ( selected . entrySet ( ) , is ( empty ( ) ) )
Assert . fail ( "Should have Assert.failed on the first parameter to 'contains' not being" + "bound." )
assertEquals ( "http://example.com/fhir/Patient?family=matches&_format=json" , capt . getAllValues ( ) . get ( idx ) . getURI ( ) . toString ( ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_1" )
Assert . assertEquals ( date2 . getTime ( ) , date3 . getTime ( ) )
assertThat ( actual . get ( ) , equalTo ( "hello world!" ) )
assertEquals ( outputProperties , writeOperation . getOutputProperties ( ) )
assertThat ( result , is ( jsonNull ( ) ) )
Assert . assertEquals ( 1 , locations . getLocations ( ) . size ( ) )
Assert . assertEquals ( 160 , getValue ( map , "?t" ) . intValue ( ) )
assertEquals ( 25 - 2 , execute ( Painting . class , parsed1 ) . size ( ) )
authRule . assertScenario ( scenario )
assertEquals ( 850953600000L , date . getTime ( ) )
assertEquals ( "false" , out . toString ( ) )
assertThat ( result , equalTo ( emailMessage ) )
assertEquals ( "01" , year )
assertThat ( command . accept ( state ) , is ( true ) )
assertEquals ( proxyPort , sut . getProxyPort ( ) )
Assert . assertEquals ( "Hello, World!" , response )
assertEquals ( true , result )
assertEquals ( expectedPatient . getGender ( ) , patient . getGender ( ) )
assertTrue ( failure )
assertNull ( "Last Task in the list should not have a 'next' task" , nextTask )
assertEquals ( "Ten, Ten" , route . getRouteShortName ( ) )
assertEquals ( - 1 , BufferTools . indexOfTerminator ( buffer , 0 , 2 ) )
assertCreateUser ( userB )
assertThat ( statement . createStatement ( ) , is ( "ALTER TABLE testTable ADD COLUMN \\"field1\\" string, \\"Entity\\" object" ) )
assertThat ( plugin . out , is ( equalTo ( new URL ( "http://halp/" ) ) ) )
assertEquals ( Double . valueOf ( 5 ) , Double . valueOf ( value . asDouble ( 10.0 ) ) )
JsonAssert . assertJsonEquals ( "{id:id,error:{message:'test.futureException'}}" , getOutput ( ) )
assertTrue ( "Equivalent set criteria don't compare as equal: " + c1 + ", " + c2 , c1 . equals ( c2 ) )
Assert . assertEquals ( notaInfo , nota . getInfo ( ) )
assertEquals ( "Did not find 1 statement in named graph" , 1 , m . size ( ) )
assertEquals ( ESeverity . NORMAL . toString ( ) , JsonUtils . toJson ( severity ) )
assertEquals ( allExpected [ i ] , actual )
assertThat ( sublist , is ( nullValue ( ) ) )
Assert . assertEquals ( 2 , s . x )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( Arrays . asList ( ) , c1 . indentBounds ( ) )
assertEquals ( rpcsid . toString ( ) , "RPC_SID{Revision:1, SubAuthorityCount:3, IdentifierAuthority:[0, 0, 0, 0, 0, 0]}" )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><World" + " xmlns=\\"http://www.w3.org/2005/07/scxml" + " xmlns:xsi=\\"http://www.w
assertSame ( DefaultParamProcessor . INSTANCE , actual )
Assert . assertEquals ( "doubleNestedString" , found . getName ( ) )
assertNotNull ( LibUsb . getDefaultContext ( ) )
assertEquals ( 3 , counter . getBeforeFileTreeWalkCount ( ) )
Assert . assertEquals ( 2 , synonyms . size ( ) )
assertTrue ( result . length ( ) > 0 )
assertEquals ( testString , testObject . getLabel ( ) )
assertThat ( query , is ( queryTmpl ) )
mojos . assertBuildOutputs ( new File ( basedir , "target" ) , "classes/proc/Source.class" )
assertEquals ( "test" , echo . echo ( "test" ) )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.b = function() {\\n  var self = this;\\n  function c(s, f) {\\n  };\\n  function d() {\\n  };\\n
assertThat ( target . readValue ( value ) , is ( true ) )
assertEquals ( 7100 , ceosReader . readB4 ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 3 , new Calculator ( ) . add ( 1 , 2 ) )
assertOut ( "goog.provide('foo.bar.baz.A');\\n\\n/**\\n * @export\\n */\\nfoo.bar.baz.A = function() {\\n};" )
assertEquals ( 5 , g . size ( ) )
Assert . assertEquals ( toArray ( "json" , "aaa" ) , merged )
assertEquals ( Avros . doubles ( ) , t . getSubTypes ( ) . get ( 0 ) )
Assert . assertEquals ( expectedCount , EvaluationData . countEvaluationDatas ( ) )
assertNotNull ( "A valid configuration was returned" , configuration )
assertNotNull ( ExecutionTime . forCron ( parser . parse ( "0/1 * * * * *" ) ) )
assertEquals ( "3 ���� ��" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( simpleJson , outStream . toString ( ) )
assertThat ( chargingSchedule . getDuration ( ) , equalTo ( anInteger ) )
Assert . assertEquals ( "MixedMode" , client . testEnhancedRest ( param0 ) . getOut ( ) )
Assert . fail ( "Remote invocation on a local view " + LocalEcho . class . getName ( ) + " was expected to fail" )
CompileUtils . assertCompiles ( "QEntity" , writer . toString ( ) )
assertThat ( testOutcome . getSuccessCount ( ) , is ( 1 ) )
assertEquals ( true , result )
assertOut ( "switch (i) {\\n  case 1:\\n    break;\\n}" )
assertNotSame ( l0 , l1 )
assertEquals ( t1 , UUIDUtils . min ( t1 , null ) )
assertOut ( "var /** @type {number} */ a = 1" )
assertNthArgumentGeneratesXPath ( 0 , nth0XPathExpression )
assertMockEndpointsSatisfied ( )
assertTrue ( isEqual ( d1 , d2 ) )
assertTrue ( appValidationService . validate ( "AAA" , ApplicationType . task ) )
assertFalse ( retryCommandSpy . shouldShowUsage ( ) )
Assert . assertTrue ( "did not find null" , foundNull )
assertEquals ( numberOfExceptions , 4 )
assertAnnotations ( 4 , Quantity . class , new TestQuantity ( 0 , "300 m" , 300 , "metres" , 300 , "meters" , 300 , "m^2" , "area" ) , new TestQuantity ( 1 , "1m" , 1 , "m
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\\"$or\\":[{\\"username\\":{\\"$ne\\":\\"Mistic\\"}}]}" )
assertEquals ( params , repoType . marshallize ( ) )
assertEquals ( "getSongsAndSongs" , Names . resourceMethodName ( resource , method ) )
assertEquals ( 40.0 , Solutions . bestOf ( solutions ) . getCost ( ) , 0.1 )
Assert . assertFalse ( r . isSuccess ( ) )
assertEquals ( result , subject . unmodifiableSet ( ) )
assertEquals ( "{\\"d\\":{\\"isScrumTeam\\":false}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( expected , output )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 42.0 , 42.0 )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) <= 'literal'" ) )
assertFiltersDefined ( configurationUnit , filter ( "Name field filter" , "name" ) )
assertEquals ( person , findOne )
Assert . assertEquals ( oid , commit . getId ( ) )
assertEquals ( "456/i_have_spaces.log" , tokenId )
assertSerializedEquals ( c )
assertEquals ( "S.a\\n" , found )
assertEquals ( "TestPassword" , envVars . get ( "COVERITY_PASSPHRASE" ) )
assertEquals ( expectedResult , entityParser . parseObservedProperty ( json ) )
assertEquals ( "Conversion did not match" , value , to )
Assert . assertEquals ( dataString . trim ( ) , outString )
assertFalse ( ProtocolConstants . StatusCodes . Create . Follow . FOLLOWED_EXISTING . equals ( this . jsonResponse . get ( ProtocolConstants . STATUS_MESSAGE ) ) )
assertThat ( fOk . get ( ) , equalTo ( 4 ) )
assertEquals ( "(| (& [* fo.*] [* .*oo]) [= bar])" , m . toString ( ) )
assertNull ( array )
arrays . assertDoesNotHaveDuplicates ( description , actual )
Assert . assertEquals ( URL , url )
assertEquals ( getNumberNode , renderNode ( SideEffects . theOutput ) )
assertThat ( method , not ( nullValue ( ) ) )
assertNull ( p . getText ( ) )
assertEquals ( 201 , result )
assertNotNull ( fixture )
assertEquals ( HttpStatus . OK , response . getStatusCode ( ) )
assertEquals ( ImmutableList . of ( String . class , BigDecimal . class , Double . class , Float . class , Integer . class , Short . class , Byte . class , Character . class , LocalDate . class , Boolean . class , DateTime . class , Double . class , Short . class , Byte . class
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "" , "--password" , password } ) )
assertEquals ( expectedMap , map )
Assert . assertEquals ( expected , actual )
assertEquals ( new File ( HOLMES_HOME . getValue ( ) , "sub" ) , FileUtil . getHolmesHomeSubDir ( uiPath , "sub" ) )
assertNull ( person . getPersonVoidReason ( ) )
Assert . assertEquals ( true , tableColumnMeta . isAutoUpdated ( ) )
Assert . assertArrayEquals ( VALUE . toArray ( ) , dataItems . toArray ( ) )
assertThat ( issues , is ( empty ( ) ) )
Assert . assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.processing.runtime.fieldselector.FieldSelectorRuntime" ) )
assertTrue ( isDynamicCSVFormat )
assertTrue ( this . testBulkMapRequestHandlerAdvice . executeLatch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( 90. , violation , 0.01 )
assertEquals ( extractedYAML , expectedYAML )
assertFalse ( "our member-group shouldn't have set our attribute" , retAttr . contains ( attributes . get ( 0 ) ) )
Assert . assertEquals ( fieldsCountExpected . get ( clazz ) . intValue ( ) , fieldsMetadata . getFields ( ) . size ( ) )
assertEquals ( 1 , links . size ( ) )
assertOperationLog ( decisionDefinition )
assertThat ( readString , is ( not ( nullValue ( ) ) ) )
Assert . assertEquals ( "did not get expected data length" , fileLengthInBytes , bytesRead )
assertEquals ( map , map2 )
assertionHelper . assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile , ( File ) targetFile )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertNotNull ( adder )
assertThat ( noOfSolutions , is ( 741642 ) )
assertTrue ( Files . exists ( gfs . getPath ( "/test_file.txt" ) ) )
assertEquals ( "_cat/segments" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( 5 , result )
assertArrayEquals ( data , value . getData ( ) )
assertEquals ( expectedSignature , signature )
assertTrue ( "'destroy sub-branch not accepted" , filter . accept ( "destroy sub-branch \\"esmalling_branch\\" of branch" , "/main/sit_r6a/11" ) )
Assert . assertEquals ( actual , expected , "Returned an invalid property value." )
assertEquals ( 4 , list . size ( ) )
Assert . assertEquals ( query , interpretedQuery )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( doc1 , io . getDocument ( q1 ) )
assertTrue ( result . isUndefined ( ) )
Assert . assertNull ( entry )
assertEquals ( "1" , textualToken . getToken ( ) )
assertNotNull ( x509Attestation . getCAReferencesFinal ( ) )
assertThat ( expectedResult , is ( actualResult ) )
assertEquals ( iqEntityTimeHandler . getTimeZone ( ) , TimeZone . getTimeZone ( "GMT" ) )
assertTrue ( constraintValidator . isValid ( Money . of ( 1 , "EUR" ) , null ) )
assertTrue ( resultSq == Position . NOPOSITION )
assertTrue ( holder . fileManager . getAllFilesForUser ( email ) . size ( ) > 0 )
maps . assertContainsOnly ( info , actual , expected )
assertTrue ( impl . isApiToken ( ) )
Assert . assertEquals ( 1 , lifeMembers ( ) )
assertEquals ( a1 , a2 )
assertSame ( shouldFind , selection . fileSelect ( By . id ( "test" ) ) )
assertEquals ( 100 , array . length )
assertEqualsJson ( expected , actual )
Assert . assertEquals ( expectedSpec , actualSpec )
assertEquals ( "baz/\\n" + "  foo/\\n" + "    bar/\\n" + "      wooz 0 (S_IFREG)\\n" + "    rooz -> bar/wooz\\n" , sw . toString ( )
assertEquals ( ( double ) 8 , result . getDoubleValue ( ) , 0.0 )
Assert . fail ( )
assertThat ( out . toString ( ) , is ( String . format ( "Same cell%s" , sep ) ) )
assertThatCellReaderWasCalled ( )
assertMap ( expected , result )
Assert . assertEquals ( "Num tasks not correct" , 1 , job . getTasks ( ) . size ( ) )
Assert . assertNotNull ( view )
Assert . assertEquals ( 1 , handler . count )
assertNotNull ( applicationContext . getBean ( "rewardNetwork" ) )
Assert . assertEquals ( true , isDiscountApplied )
Assert . assertEquals ( originStat + FILE_LEN , sStatistics . getBytesWritten ( ) )
assertEquals ( "message" , result )
Assert . assertTrue ( outContent . toString ( ) . startsWith ( "Usage: java -jar swagger-diff.jar " ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( output , containsString ( "Dataset deleted:" ) )
assertThat ( time . with ( PlainTime . COMPONENT . setToNextFullHour ( ) ) , is ( PlainTime . of ( 0 , 1 ) ) )
Assert . assertArrayEquals ( EXPECTED , data )
Assert . assertEquals ( expectedOne , actual )
assertThat ( extension , is ( nullValue ( ) ) )
assertTrue ( info . isEmpty ( ) )
assertNull ( changeEvent [ 0 ] )
assertTrue ( psa . getLegend ( ) instanceof UniqueSymbolPoint )
assertTrue ( futureDigest . digest ( ) . keyDigest ( ) . isEmpty ( ) )
assertSame ( mockTodolist , ret )
assertFalse ( topic . hasTopic ( ) )
assertThat ( list . size ( ) , is ( 1 ) )
assertEquals ( expectedMaxExpansionSize , actualDestLen )
assertFalse ( hasPermission )
assertNoViolations ( violations )
assertEquals ( "" , result )
assertEquals ( "Invalid argument passed" , value , supportedArgument )
assertEquals ( AnsiEscapeCode . values ( ) . length , codes . size ( ) )
assertEquals ( "test" , msg . getText ( ) )
assertParseTree ( rootNode ( "hello world" , stringNode ( "greeting" , "hello world" , stringNode ( "hi you" , "hi you" ) ) ) , tree )
assertEquals ( "something == x" , result )
assertArrayEquals ( Arrays . toString ( d . getResult ( ) ) , refar , d . getResult ( ) )
assertThat ( report , is ( not ( nullValue ( ) ) ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pause>" + "before" + "<Child>content</Child>" + "after" + "</Pause>" , builder . build ( ) . toXml ( ) )
assertThat ( downstream , hasSize ( 0 ) )
assertEquals ( "<string>foo</string>" , sw . toString ( ) )
Assert . fail ( )
assertEquals ( "create-question-btn" , createTopicBtnDto . getLabel ( ) )
assertEquals ( "file content of 2" , previous . getHash ( ) )
assertEquals ( count , expectedCount )
assertEquals ( NumericOperandType . INTEGER , instruction . getReceiver ( ) . getType ( ) )
Assert . assertNull ( header )
Assert . assertFalse ( result )
assertThat ( end , closeTo ( 5000 , 0.1 ) )
assertEquals ( expected , actual )
assertNotSame ( oldPipelineFactory , b . getPipelineFactory ( ) )
assertEquals ( "? hello ?" , s . sql ( ) )
assertTrue ( Arrays . equals ( getPacketData ( "34 00 10 00 F8 FF 3C 00 10 0E 08 08 00" ) , request . serialize ( ) ) )
assertEquals ( expected , actual )
assertEquals ( "failed to generate variable declaration using a literal initialization and type inference" , "String n = 10;" , declaration )
assertSchemaValue ( subject , version , 1 , "{\\"type\\":\\"record\\",\\"name\\":\\"myrecord\\"," + "\\"fields\\":[{\\"name\\":\\"f1067572235\\",\\"type\\":\\"string\\"}]}" , false , schemaValue
assertEquals ( "QWERTY" , converted )
Assert . assertEquals ( 2 , ddf2 . getNumRows ( ) )
Assert . assertEquals ( 10 , controller . getCurrentRunLevel ( ) )
assertDtos ( expected , actual )
assertThat ( taskService . createTaskQuery ( ) . taskId ( task . getId ( ) ) . count ( ) , is ( 1L ) )
assertEquals ( NO_ERRORS_STATUS , getStatus ( ) )
assertThat ( t . getName ( ) , is ( "java.lang.Object" ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( 0 , messages . size ( ) )
assertThat ( new SelectBest ( ) . selectSolution ( Arrays . asList ( sol1 , sol2 ) ) , is ( sol2 ) )
assertEquals ( expectedResult , actualResult )
assertEquals ( rightsString , fr . getFeedRights ( ) )
assertEquals ( "<font size=-1>test</font>" , largeSizeDecorator . toDisplay ( ) )
Assert . assertNull ( valueWrapperResult )
Assert . assertEquals ( datum . get ( ) , fromJson . get ( ) )
Assert . assertEquals ( 10 , this . sqlgGraph . traversal ( ) . V ( ) . count ( ) . next ( ) , 0 )
assertFileExists ( file )
assertEquals ( expResult , result )
Assert . assertEquals ( 2.5f , rad , EPSILON )
test . assertResult ( )
assertThat ( user , is ( notNullValue ( ) ) )
assertThat ( status , is ( ApplicationLauncher . LAUNCH_ERROR ) )
softly . assertThat ( skipInstallationChecker )
assertEquals ( CSV_FILE , writer . toString ( ) )
Assert . assertEquals ( "1 2 3" , formatted )
assertEquals ( "false" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertEquals ( "output must be empty array" , 0 , output . length )
assertEquals ( "echo:" , result )
assertEquals ( uri , f . getBaseUrl ( ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
Assert . assertEquals ( config . getEnumValue ( ) , result . getEnumValue ( ) )
assertEquals ( "git upload-pack 'bob'" , fc . toString ( ) )
assertThat ( fsm . messages . size ( ) , equalTo ( 1 ) )
assertEquals ( male , repository . getSingleResult ( query ) )
Assert . assertTrue ( end - start > 500 )
assertEquals ( "^/cntrl/([^/]+)/actn$" , pattern )
assertEquals ( "modified basic form" , formUpdate . getName ( ) )
assertEquals ( expected , blockJsonValue )
assertEquals ( 60f , a . intersectionArea ( b ) , 0.0001 )
assertThat ( cf . getClientProperties ( ) . size ( ) , is ( 0 ) )
assertThat ( serialisedBatches , hasItem ( "id1:Arthur Putey" ) )
assertEquals ( expected , ByteUtil . allBytePairs ( i , j ) . intValue ( ) )
assertTrue ( personInformationStructure . size ( ) > 0 )
assertThat ( request1 . equals ( request2 ) , is ( false ) )
assertThat ( distribution . getDistribution ( ) . size ( ) , is ( newReplicaCount ) )
assertDrlHasCompilationError ( drl1 , 1 )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
Assert . assertEquals ( "Value is incorrect" , map ( TIME_2_STRING , "test" ) , value )
assertions . isNullOrEmpty ( )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( remoteClientOID . getServiceID ( ) ) )
UnitTestUtils . assertEquals ( new double [ ] { - 1 , 1 , 1 , 1 } , b . toArray ( ) , 1.0e-12 )
Assert . assertEquals ( 0 , this . mocker . getComponentUnderTest ( ) . reindexErrors . size ( ) )
Assert . assertFalse ( config1 . equals ( config2 ) )
assertTrue ( result )
assertTrue ( result1 == result2 )
assertNull ( "Unexpected value in outputTriple" , outputTriple )
assertEquals ( "Count of customer" , 1 , res )
Assert . assertEquals ( SECRET + "-test" , secret . get ( "serverKeystorePass" ) )
assertEquals ( "mystring" , result )
Assert . fail ( "this test should execute based on Runner logic" )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 1 ) )
assertAllCommandsUsed ( )
Assert . assertEquals ( "travelInTime(0).travelInWorld(0).createNode().readVar(root).println('{{result}} avec echap \\\\'')" , t . toString ( ) )
assertEquals ( expected , actual )
assertFlowState ( ACCEPTED_FIRST_MONTH_FAILED )
Assert . assertEquals ( ServerParse . RENAME , sqlType )
Assert . assertEquals ( "abcd" , stringAppender . toString ( ) )
assertEquals ( "Hello, World!" , value . evaluateAttributeExpressions ( createFlowFile ( attributes ) ) . getValue ( ) )
assertMessagesEquals ( expected , actual )
assertTrue ( verifyProps ( a , LIST_AB ) )
Assert . assertTrue ( EqualsBuilder . reflectionEquals ( expected , store . findVirtualServer ( "www" ) , true ) )
assertXpathExists ( "/a:entry/m:properties" , xmlString )
assertTrue ( uuid . length ( ) == urlToken . length ( ) )
assertEquals ( "gerrit approve --project projectname --message \\"Error message\\" --code-review -1 1,2" , command )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertEquals ( lastReadPostList . size ( ) , 0 )
assertEquals ( 2 , ctx . getParameterDescriptors ( ) . size ( ) )
Assert . assertEquals ( expectedRegex , pattern . compiled ( ) . toString ( ) )
assertThat ( rubyVersion , equalTo ( "1.9.3-p125" ) )
Assert . assertArrayEquals ( new String [ ] { ".sql" } , language . getFileSuffixes ( ) )
assertEquals ( "InputStreamTest" , toString ( stream ) )
assertEquals ( GitSCM . class , whitelist . loadClass ( GitSCM . class . getName ( ) ) )
assertEquals ( "from SURVEY SURVEY\\njoin table(functionCall()) as fc\\nwhere SURVEY.NAME is not null" , query . toString ( ) )
assertFalse ( constraint . fulfilled ( iContext ) )
Assert . assertEquals ( "SELECT 'Monty!' REGEXP '.*';" , text )
assertEquals ( expectedValue , propertyValue )
assertEquals ( "wrong number of enumerated values... test should be examined and updated" , 7 , ParseMessage . values ( ) . length )
assertEquals ( assertion , sigmoid )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes WHERE (nodes.col1 IS NOT NULL AND nodes.col2 IS NOT NULL)" ) )
assertTrue ( readVrp . getJobs ( ) . get ( "1" ) . getRequiredSkills ( ) . containsSkill ( "skill2" ) )
assertFalse ( new SrConditionalCapitalization ( ) . hasZeroParts ( ) )
assertOut ( "var /** @type {Array} */ a = new Array(30)" )
Assert . assertEquals ( "(aa_change_deletion (aa_point_location (aa_char Cys) 123) del 1)" , aa_change_deletion . toStringTree ( parser ) )
assertEquals ( "GBP 5.83" , test . toString ( ) )
Assert . assertEquals ( count + 2 , nowcount )
assertClosed ( toClose )
assertEquals ( entry . getValue ( ) , actual )
assertThat ( expected . equals ( document ) , is ( true ) )
assertEquals ( vars , variablesTyped )
Assert . assertTrue ( Arrays . equals ( entry . getBytes ( ) , fmt . toBytes ( e ) ) )
Assert . assertTrue ( score > 0 )
Assert . assertNotNull ( dbRangerPolicy )
assertEquals ( "Accurev" , descriptor . getDisplayName ( ) )
assertEquals ( future , underTest . collectDefaultCollection ( futures , collector ) )
assertEquals ( 1 , x )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( L3vpnMcastRoute . class ) )
Assert . assertNotNull ( resultEntity )
modularLauncher . assertServiceStarted ( HostnameServiceType . class )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 4 objectClass: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntry" +
Assert . assertEquals ( expectedUuid , datatype . serialize ( location ) )
assertEquals ( 2 , Foo . class . getDeclaredMethods ( ) . length )
assertEquals ( "package org.kissmda.test.junit;\\n" + "import org.kissmda.AException;\\n" + "import org.kissmda.BException;\\n" + "import org.kissmda.
assertThat ( subDao . getById ( co . getId ( ) ) , equalTo ( co ) )
assertThrows ( IllegalArgumentException . class , ( ) -> AccumuloInputFormat . configure ( ) . clientProperties ( clientProps ) . store ( new JobConf ( ) ) )
assertEquals ( size , buffer . capacity ( ) )
assertThat ( manager . evaluate ( selectorConfiguration , variableSource ) , is ( false ) )
Assert . assertEquals ( new URI ( "http://localhost:80/user:password" ) , result )
assertThat ( message , equalTo ( INTERPOLATED_EXAMPLE_MESSAGE ) )
assertConnection ( sqlInputs , 1 , "jdbc:oracle://localhost:30/dbName" , null )
assertTrue ( "Comparaison de fichier PDF en erreur" , comparator . compare ( ) )
assertNotNull ( solution )
context . assertIsSatisfied ( )
assertEquals ( timesToIterate , underTest . called )
assertions . doesNotContain ( values )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertNotNull ( codes )
assertThat ( client . getNamesOfRepositories ( ) , hasItems ( "Aircraft" , "Cars" ) )
assertEquals ( "Incorrect add news" , 3 , news . size ( ) )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertSame ( "control" , choice . get ( ) )
assertEquals ( Lists . newArrayList ( "value1" , "false" , "1.02" , "1,-1" ) , Pql . getRowStringValues ( row ) )
Assert . assertEquals ( "PK2222" , result )
assertEquals ( 0. , absFixedCosts . getCosts ( context ) + relFixedCosts . getCosts ( context ) , 0.01 )
assertTrue ( ex . canBeDividedby3 ( "33" ) )
assertEquals ( 3 , list . size ( ) )
assertEquals ( expecting , found )
assertEquals ( true , mapping . isIndexOnlyField ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( "John,Doe" , result . trim ( ) )
this . assertGet ( "relationshiptypeimplementations/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Frelationshiptypeimplementations%252Ffruits/kiwi_implementation
Assert . assertTrue ( command instanceof AuditConnectionCommand )
assertFalse ( connectionManager . isConnected ( ) )
assertEquals ( expectedEntry , result )
Assert . assertNull ( jurl . getResponseJson ( ) )
assertTrue ( result )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertThat ( ip . toString ( ) , is ( "10.0.0.1" ) )
assertTrue ( result . hasMore ( ) )
assertEquals ( 3 , container . size ( ) )
assertNotNull ( error )
assertThat ( label , is ( "<<b>bold text</b>\\n<i>italic text</i>\\n<u>underlined text</u>\\n<font color=\\"red\\" size=\\"20\\">intermediate text</font>\\n"
assertEquals ( "abc, def\\n" , found )
assertTrue ( lhs . equals ( rhs ) )
assertThat ( log , instanceOf ( Log4J2Impl . class ) )
assertTotalDocs ( )
assertThat ( verifyModelVersionsSaved ( ) , is ( ImmutableMap . of ( "foo" , "1.2" , "bar" , "1.1" , "wibble" , "2.0" ) ) )
assertEquals ( "Failed at index " + i , assertions [ i ] , arr )
assertFalse ( violated )
assertEquals ( Object . class , converter . getTargetType ( ) )
assertEquals ( valueOf ( v ) , s . serialize ( ( HttpPartSchema ) null , v ) )
assertEquals ( "Has one child with jssonns:ns" , 1 , numChilds )
assertEquals ( expected , average , 1 )
assertEquals ( 0 , triggeredBy . size ( ) )
assertEquals ( "" , formatter . format ( ) )
Assert . assertEquals ( "Invalid result" , "text" , result )
Assert . assertFalse ( "Authenticated" , authenticated )
Assert . assertTrue ( errors . hasFieldErrors ( "states" ) )
assertThat ( data , is ( test ) )
assertThat ( last , equalTo ( childLast [ 0 ] ) )
Assert . assertNotNull ( tasks )
assertThat ( studies . size ( ) , is ( 1 ) )
assertNotEquals ( array , result )
assertEquals ( "Incorrect unsigned byte value" , MAGIC , s . u8 . shortValue ( ptr ) )
context . assertIsSatisfied ( )
assertEquals ( Sets . newHashSet ( a . groupName ( ) , a . group ( ) ) , groups )
assertNull ( "Got an unexpected number of rows - no data should be returned with the NoDataFromScan coprocessor. Found: " + r , r . list ( ) )
assertEquals ( Order . sellAt ( 0 , NaN , NaN ) , uncoveredTrade . getEntry ( ) )
assertThat ( channelCaptor . getValue ( ) , is ( "slackbot" ) )
assertAnnotations ( 2 , MilitaryPlatform . class , new TestEntity < > ( 0 , "HMJS Troutbridge" , "HMJS Troutbridge" ) , new TestEntity < > ( 1 , "H.M.P.N.G.S. Hidden
assertEquals ( request . toHexString ( ) , "000000008e3039708fdd9f488f9665426d0d9c5702000000020000001a001a00000002001c00040002000d000000000000000d000000410064006d0069
assertEquals ( "FAIL:Failure Demonstration" , result )
assertNotNull ( at . convert ( null , null , "foo" ) )
assertTrue ( loader . load ( "scrypt" , true ) )
assertEquals ( "earliest child" , testVal , testVal . getEarliestChild ( ) )
result . assertIsSatisfied ( )
assertEquals ( "http://example.com:4510/my_db/my_doc?startKey=test&endKey=test" , uri . toString ( ) )
assertTrue ( Arrays . equals ( data , ( boolean [ ] ) deserialize . readObject ( ) ) )
assertThat ( rows . get ( 0 ) . get ( "data" ) . get ( 0 ) . get ( "account_id" ) . toString ( ) , is ( ordered_data ) )
assertThat ( DateUtil . toDate ( date . getTime ( ) ) , is ( cal . getTime ( ) ) )
assertFalse ( match )
assertEquals ( vr . getValidity ( ) , Validity . INVALID )
assertEquals ( 1 , change1 )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
assertEquals ( 4 , route . getTourActivities ( ) . getActivities ( ) . size ( ) )
assertTrue ( true )
assertEquals ( - 2762 , int0 )
assertEquals ( str , quote ( ExampleBuilder . SAMPLE_EMAIL_PROPERTY_VALUE ) )
assertThat ( list . toString ( ) , is ( copy . toString ( ) ) )
Assert . assertTrue ( success )
Assert . assertEquals ( expected , actual )
assertEcssEquals ( ".menu{background-position:\\"#{notemptya4jSkin.menu1?a4jSkin.menu2:''}\\";}" , convertFragment ( xcss ) )
assertThat ( task , is ( nullValue ( ) ) )
Assert . assertNotNull ( notification )
Assert . assertEquals ( expected , actual )
arraysWithCustomComparisonStrategy . assertContainsExactlyInAnyOrder ( someInfo ( ) , actual , expected )
assertNodeTriggered ( processInstance . getId ( ) , "Start" )
Assert . assertEquals ( DefaultJobPriorityProvider . DEFAULT_PRIORITY_ON_RESOLUTION_FAILURE , job . getPriority ( ) )
assertArrayEquals ( new int [ ] { 0 , 3 } , findFusionStartIndices ( schedulingStrategies ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "A" } , { "B" } , { "C" } } ) ) )
assertEquals ( machine , MACHINE_NAME_USED . getValue ( ) )
assertEquals ( ( i / 3 ) + " : " + testData [ i ] + ", " + testData [ i + 1 ] , expectedResult , actualResult )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( 0 , map . size ( ) )
assertEquals ( 0 , stream . skip ( 4 ) )
assertEquals ( "20060725224801143085000000" , d . getId ( ) )
assertTrue ( "Timeout reached. Message latch value: " + messageLatch . getCount ( ) , messageLatch . await ( 5 , TimeUnit . SECONDS ) )
assertThat ( htmlDriver . runIfHtmlUnit ( ) , is ( true ) )
Assert . assertEquals ( 1024.0 , a . divide ( b ) . doubleValue ( ) , 1.0e-15 )
assertEquals ( t , HttpURL . toAbsolute ( absURL , s ) )
assertEquals ( "kHz" , khz . toString ( ) )
assertEquals ( " WHERE (\\"NAME\\" LIKE ? OR \\"AGE\\" > ?)" , QueryBuilder . getWhereStringForFilters ( filters , sh ) )
assertEquals ( post . getUnsubscribeLinkForSubscribersOf ( PostSubClass . class ) , "/topics/1/unsubscribe" )
assertEquals ( BatchStatus . FAILED , jobExecution . getBatchStatus ( ) )
assertNotEquals ( 0 , results . size ( ) . intValue ( ) )
assertEquals ( ( long ) 8 , result . getLongValue ( ) )
assertTrue ( reset . await ( 10 , TimeUnit . SECONDS ) )
assertFlowState ( ACCEPTED_FUNCING )
assertEquals ( offset , options . getOffset ( ) )
assertEquals ( 500 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( "Failed to generate two dimensional object array" , "new Object[][] { { 1, 2 } }" , s )
assertThat ( plugin . getClass ( ) , is ( equalTo ( TimelineFormatter . class ) ) )
assertEquals ( 255 , m . getMean ( ) , .1 )
Assert . assertNotNull ( token )
assertEquals ( concepts , Collections . emptyList ( ) )
assertArrayEquals ( plaintext , correctPlaintext )
assertEquals ( ValidationResult . Result . OK , result . getStatus ( ) )
assertEquals ( 4 , fixture . mark ( ) )
assertContentEquals ( style , Arrays . asList ( ) )
assertTrue ( page . asXml ( ) . contains ( "UIViewRoot" ) )
assertEquals ( b1 , b2 )
assertThat ( termCollection , is ( empty ( ) ) )
Assert . assertEquals ( orig , clone )
Assert . assertEquals ( "9999999999.9999" , cide . getValorAliquota ( ) )
Assert . assertNotNull ( "null free tagging service" , freeTaggingService )
assertEquals ( "startkey=foo&debug=false&group=false&reduce=false&startkey=foo" , query . toQueryString ( ) )
assertTrue ( LibUsb . getDeviceList ( deviceList ) >= 0 )
assertEquals ( val , null )
assertEquals ( metadata . getEntityLocks ( ) . size ( ) , 1 )
assertEquals ( 1 , result . getSize ( ) )
assertThat ( unit . shouldGenerateInvocationId ( ) , is ( false ) )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm:ss" , result ) )
assertTrue ( callback . convert ( reply ) . toList ( ) . isEmpty ( ) )
assertEquals ( 0 , profileEntries . size ( ) )
assertEquals ( "\\"a,b,c\\"" , ctxName )
Assert . assertNotNull ( imposto . toString ( ) )
assertSame ( test . with ( Month . JUNE ) , test )
Assert . assertTrue ( ctx . getResult ( ) )
assertEquals ( nestedMap . get ( "key1" ) , complexPojo . getNestedSimplePojo ( ) . get ( "key1" ) )
assertNotNull ( result )
assertEquals ( "hell" , service . getNamespaceName ( ) )
assertEquals ( Arrays . asList ( str ) , metadata . getGroupBy ( ) )
assertNotNull ( result )
assertEquals ( Permissions . TASK_PERMISSIONS , engine . getOptions ( ) . getDefaultTaskPermissions ( ) )
Assert . assertEquals ( expect , socketIoData )
assertEquals ( "GET:testGetRequestWithParameters-parameters-age=120&gender=Male" , responseBody )
assertNotNull ( fieldInjectable . getInjectionTarget ( ) )
assertTrue ( state . getErrorMessages ( ) . contains ( "invalid alias @p1" ) )
assertEquals ( expResult , result )
assertTrue ( Arrays . equals ( message , output ) )
Assert . assertEquals ( 2 , nbConceptsAlignedToMyThes . longValue ( ) )
assertFalse ( fencer . fence ( MOCK_TARGET ) )
assertIsOutputEqualTo ( "Using table annotated name 'name' for parameter position 0" )
assertEquals ( 0. , violation , 0.01 )
Assert . assertFalse ( "Failure expected true" , r . getLeft ( ) )
this . assertGet ( "patternrefinementmodels/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fpatternrefinementmodels/myExample_w1-wip1/" , "entitytypes
Assert . assertEquals ( 40 , analyser . getLoadAtBeginning ( ) . get ( 0 ) , 0.01 )
assertEquals ( map . getTerrain ( ) , DuneTerrain . TERRAIN_ROCK )
assertEquals ( "HELLO" , engine . compileMustache ( "overwrite_helper" , "HELLO" ) . render ( new Hammer ( ) ) )
Assert . assertArrayEquals ( "Wrong data" , data , builtByFactory . getData ( ) )
assertThat ( withResult ( TestResult . ERROR ) . matches ( testOutcome ) , is ( false ) )
assertEquals ( "<html><head></head><body><span class=\\"foo\\">bar</span></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertNotNull ( ft . getHeaderText ( ) )
assertEquals ( Arrays . asList ( "myForm:outerOutput" , "myForm:table:0:nestedOutput" , "myForm:table:1:nestedOutput" ) , trackingVisitCallback . getVisitedIds ( ) )
assertTrue ( false )
assertEquals ( messagePage . getContent ( ) . size ( ) , pageSize , "Incorrect message count." )
assertFalse ( lockAquired )
assertThat ( edges . size ( ) , is ( 0 ) )
assertDice ( 0 , 0 , 0 , 2 , 0 , 4 , 1 , 1 , 1 , 3 , 2 , 0 , 2 , 2 , 4 , 3 , 1 , 3 , 4 , 0 , 4 , 2 , 4 , 4 )
assertNotEquals ( column1 , column2 )
Assert . assertTrue ( clickMe . getText ( ) . contains ( buttonText ) )
Assert . assertNotNull ( persistentNameIdentifier )
assertNotNull ( json )
assertSimilarXml ( TestUtils . getResource ( "/org/sonar/plugins/groovy/codenarc/exportProfile/exportProfile.xml" ) , writer . toString ( ) )
assertEquals ( 2 , mapper . get ( e ) . other . size ( ) )
assertEquals ( HttpMethod . GET , HttpMethod . of ( request ) )
assertEquals ( 2 , result . getPoints ( ) . size ( ) )
Assert . assertEquals ( "select SUM(STUDENT.ID) from student" , getSql0 ( node ) )
assertThat ( fetchCount ( ) , is ( 1L ) )
assertEquals ( "+a -a/b" , s . getPattern ( ) )
assertEquals ( 1 , result . intValue ( ) )
assertThat ( errorResponse1 , is ( not ( errorResponse2 ) ) )
assertPutFails ( name , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertThat ( result . getName ( ) , is ( "Mircosoft涓���" ) )
assertWaitUntil ( ( ) -> received . length ( ) == 2048 )
assertEquals ( asList ( listener1 , listener2 ) , listeners )
assertEquals ( "" , result )
assertEquals ( "om 3 m氓neder" , t . format ( new Date ( 2629743830L * 3L ) ) )
assertThat ( results , is ( new String [ ] [ ] { { "A" , "B" } } ) )
assertThat ( controller , is ( equalTo ( method ) ) )
assertEquals ( "Continue" , x . getDescription ( ) )
assertNotNull ( response )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=closeToTermination&minSupportCount=0" ) )
assertEquals ( 1 , results . length )
context . assertIsSatisfied ( )
assertThat ( applicationSettings . getAccountCreationSetting ( ) , is ( ACCOUNT_CREATION_ALLOWED ) )
assertThat ( instance . getPipeline ( ) , is ( returnedPipeline ) )
assertThat ( index , is ( 0 ) )
assertThat ( planet . isPresent ( ) , is ( false ) )
assertContains ( "Footer is here" , content )
Assert . assertEquals ( 1 , sut . getWeekdayCountBetweenDates ( start , end ) )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2007 , 5 , 15 ) , OFFSET_PONE ) , t )
assertNotEquals ( left , right )
assertThat ( result , is ( expected ) )
assertEquals ( "bar\\nbazlala" , template . render ( new HashMap < > ( ) ) )
assertThat ( result , is ( equalTo ( expected ) ) )
assertThat ( isValid , is ( true ) )
assertThat ( geometry . getArea ( ) , is ( 0.0 ) )
assertEquals ( 0 , BulkImport . filterInvalid ( files ) . size ( ) )
assertEquals ( player . getHand ( ) . get ( 0 ) . getCardId ( ) , shifter . getSourceCard ( ) . getCardId ( ) )
assertEquals ( expected , actual )
assertThat ( plugin . isNoOutput ( ) , equalTo ( false ) )
assertEquals ( MessageProgramState . Status . DISABLED , state . getStatus ( ) )
Assert . assertSame ( sampleHandler , challengeHandler )
assertAllCommandsUsed ( )
assertEquals ( 1 , swapStore . list ( "proj" ) . length )
assertThat ( "empty offers detected" , validation . hasErrorAbout ( "no" , "offerers" ) )
assertThat ( result , is ( packetStatus ) )
assertEquals ( expected , actual )
assertThat ( location , is ( Constants . DEFAULT_FILE_LOCATION ) )
assertTrue ( text . matches ( "(?s).*<head.*alert\\\\(\\\\'ok\\\\'\\\\);.*</head.*" ) )
assertArrayEquals ( new String [ 0 ] , args )
assertThat ( interval . isEmpty ( ) , is ( false ) )
assertEquals ( expected , actual , delta )
assertEquals ( "unknown class path" , 1 , bcp . path . size ( ) )
Assert . assertTrue ( response . contains ( blogTitle ) )
assertEquals ( ctxVars . get ( "logLevel" ) , node . getDictionary ( ) . findValuesByID ( "logLevel" ) . getValue ( ) )
assertStat ( result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( found )
Assert . assertEquals ( m , support . convert ( m ) )
assertEquals ( DecodeQualification . INTENDED , plugIn . getDecodeQualification ( path ) )
assertEquals ( ints , ints2 )
assertEqual ( "&< >" , query . execute ( ) )
Assert . assertTrue ( mClusterResource . get ( ) . getClient ( ) . getStatus ( new AlluxioURI ( "/" ) ) . mkdirs ( ) )
Assert . assertEquals ( expected1 , predicted )
assertNull ( KeyValueStoreRW . get ( vutDiv , vutKey1 ) )
assertNotNull ( ShortCode . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertNotNull ( Config . get ( request . getSession ( ) , Config . FMT_LOCALE ) )
Assert . assertEquals ( "Copy of Sample Sheet" , sheets . getData ( ) . get ( 0 ) . getName ( ) )
assertEquals ( previous , size )
assertEquals ( expected , d_smd . getCohenVariance ( ) , 0.0001 )
Assert . assertEquals ( expResult , result )
assertEquals ( "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12" , checksum )
assertThat ( attributeValueNs , is ( "true" ) )
assertPlaces ( places )
Assert . assertEquals ( "{/var}" , e . toString ( ) )
Assert . assertEquals ( STRING , s )
assertThat ( sampledValue . getContext ( ) , equalTo ( readingContext ) )
assertEquals ( expected , actual )
assertEquals ( testString , avroField . convertToKettleValue ( map , schema , mock ( Schema . class ) , false ) )
Assert . assertTrue ( HttpStatus . SC_OK != result . getCode ( ) )
assertThat ( builder . getPatches ( ) , hasItemsInOrder ( "REMOVE /status/messages/0" , "ADD /status/messages/- {'message':'old and broken','message':'new and hot'}" ) )
assertEquals ( "<bar><legend foo=\\"foo:\\"><input type=\\"text\\" name=\\"text\\" value=\\"text\\" />\\n" + "<br><input type=\\"text\\" name=\\"X\\" value=\\"text\\" />\\n" + "<br><
Assert . assertEquals ( dataHoraProcessamento , retornoConsultaCadastroDados . getDataHoraProcessamento ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
Assert . assertTrue ( cli . getProgramArguments ( ) . isEmpty ( ) )
assertTrue ( validator . validate ( EntityNames . STUDENT_SECTION_ASSOCIATION , associations ) . equals ( associations ) )
assertEquals ( "<shopping>\\n" + "    <category type=\\"groceries\\">\\n" + "        <item>Luxury Chocolate</item>\\n" + "        <item>Luxury Coffee</item>\\n"
assertEquals ( 2 , numberUsersWithPreference )
assertThat ( valueModel . getSize ( ) , is ( size ) )
assertEquals ( expected , pu . getCharsetProperty ( "sun.stderr.encoding" ) )
Assert . assertEquals ( 1L , rs . at ( 0 ) . getLong ( 0 ) . longValue ( ) )
assertEquals ( "abc\\n" , found )
Assert . assertEquals ( jdkHands , acHands )
assertTreeEquals ( top , result )
assertNull ( output )
assertEquals ( "void dest7(int, @A @B @C int, @B @C @D int, @C @D @E int)" , toString ( dest ) )
assertTrue ( handler instanceof DisruptorBasedRelatedContentSearchRequestProcessorHandler )
Assert . assertTrue ( tempFontFile . exists ( ) )
assertResultSet ( res )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertThat ( testSupport . getNumCalls ( ) , equalTo ( 0 ) )
assertNull ( dataset . getDatacentre ( ) )
context . assertTrue ( ex instanceof IllegalArgumentException )
assertTrue ( result . getException ( ) instanceof FlowExecutionException )
Assert . assertEquals ( 0 , norm , 6.0e-13 )
assertEquals ( newEndingDateTime , topic . getPoll ( ) . getEndingDate ( ) )
assertThat ( Type . getTypeDefaultValue ( args [ i ] ) , is ( equalTo ( expected [ i ] ) ) )
Assert . assertEquals ( "3�� ��" , t . format ( new Date ( 2629743830L * 12L * 3L ) ) )
assertTrue ( translator . isMethodSupported ( "refreshServiceAcl" ) )
Assert . fail ( "'MustUnderstand headers' exception should be thrown." )
assertEquals ( "Wrong child index" , - 1 , handler . indexOfChild ( parent , child ) )
assertThat ( domain . isLogHomeEnabled ( ) , is ( false ) )
assertTrue ( errorsContainer . equals ( errors ) )
assertTrue ( "static Base64.encodeBase64Chunked() test-" + i , b )
assertEquals ( expectedLayer , actualLayer )
assertFalse ( victim . accept ( request ) )
assertThat ( result , is ( new String [ ] [ ] { { "Hello, world!" } } ) )
assertEquals ( TEST_CLUSTER_NAME , hadoopFileOutputMeta . getNamedClusterURLMapping ( ) . get ( TEST_FILE_NAME ) )
assertEquals ( key . length , Sodium . crypto_aead_xchacha20poly1305_ietf_keybytes ( ) )
assertEquals ( "a,b,c" , actual )
assertThat ( ruleManager . getAllGlobalsOfType ( "java.util.Random" ) . size ( ) , is ( 2 ) )
assertEquals ( "ext" , Util . stripFileExtension ( fullName ) )
assertThat ( actual , is ( "codedTextDescTest1a" ) )
assertTrue ( futures [ 0 ] . isClosed ( ) )
assertFalse ( actualAfterProcess . equals ( wrongAfterProcess ) , "Values which seems to be encoded should not be decoded." )
assertEquals ( before , update . toThrift ( ) )
assertEquals ( childName , mappedStart . getTo ( ) )
assertThat ( true , equalTo ( result ) )
Assert . assertNotNull ( clientLayers )
assertEquals ( "validating the bean" , obj , new TestBean ( ) )
assertEquals ( "{\\"kind\\":\\"youtube#videoListResponse\\",\\"etag\\":\\"79S54kzisD_9SOTfQLu_0TVQSpY/mYlS4-ghMGhc1wTFCwoQl3IYD
assertEquals ( edit , hadoopClusterDelegate . editNamedCluster ( iMetaStore , namedCluster , shell ) )
assertEquals ( "http://example.com/fhir/Patient?name=james" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertEquals ( "seekAfterOrAt should return the correct offset" , kv . getKeyOffset ( ) , offset )
assertFalse ( result . passedValidation ( ) )
assertNotNull ( injector )
assertEquals ( BASE_URI + "/2" , newUserLocation . toString ( ) )
Assert . assertEquals ( userRepo , settings . getLocalRepository ( ) )
assertEquals ( parent . models . size ( ) , 1 )
assertEquals ( 1 , permMissingElem . solution ( array ) )
assertTrue ( gotException )
Assert . assertEquals ( "Unexpected principal name returned" , "user1" , echoValue )
assertEquals ( 1 , pResult . getValues ( ) . size ( ) )
assertFalse ( result )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
assertEquals ( "unexpected errors: " + equeue , 0 , equeue . errors . size ( ) )
assertFalse ( panelManager . mapPanelDefinitionToPresenter . containsKey ( customPanel ) )
assertTrue ( "Inner transaction's transient state" , flag )
assertTrue ( victim . find ( ) . isEmpty ( ) )
assertEquals ( "helloWorld" , result )
assertEquals ( 1 , parser . getEditorInterface ( ) . get ( 0 ) . getParameterCount ( ) )
assertEquals ( "Index is 3" , "3" , _index . toString ( ) )
assertFalse ( OTPUtil . isOtpFormat ( otp ) )
assertTrue ( mockListener . propertyChangedFired )
Assert . assertFalse ( context . getResult ( ) )
assertNotNull ( gx . getExtensionElement ( ) )
assertSelectResults ( results , one , two , three )
Assert . assertTrue ( ( Boolean ) result )
assertEquals ( DEFAULT_TEXT_SEARCH_CONFIG , s . getTextSearchConfig ( ) . getTextSearchDefault ( ) )
assertEquals ( "unable to fetch rule by name" , mock , rs . getRuleByName ( "name" ) )
assertThat ( action . remove ( server ) , is ( true ) )
assertThat ( "ssh key" , sut . getSshKey ( ) , is ( equalTo ( sshKey ) ) )
assertEquals ( "Dest should have all the fields altered" , new FourLongs ( 1 , 2 , 3 , 4 ) , dest )
assertThat ( HiveCliEmulator . INSTANCE . preProcessor ( ) . script ( hiveSql ) , is ( "set x=1;" ) )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( ( a , b ) -> x + a + b ) . intValue ( ) )
assertEquals ( firstInvocation , secondInvocation )
assertEquals ( 3 , adaptiveGrid . occupiedHypercubes ( ) )
assertNull ( edmProvider . getEntityContainerInfo ( null ) )
Assert . assertEquals ( 16. , analyser . getDistanceAtActivity ( route . getActivities ( ) . get ( 2 ) , route ) , 0.01 )
Assert . assertEquals ( "That monkey." , this . realiser . realiseSentence ( sentence_1 ) )
assertEquals ( asList ( sampleShortAlbum , aLoveSupreme ) , result )
assertTrue ( "unknown ID should have no class" , classdb . getClass ( "id3" ) . isEmpty ( ) )
assertThat ( argument . getValue ( ) . getName ( ) , is ( "step_with_parameters: <span class='step-parameter'>Joe</span>" ) )
assertThat ( warningHandler . checkTimeout ( eventSource ) , is ( true ) )
assertTrue ( FileUtil . gitDirectoriesAreEqual ( getResource ( "/canCloneARepository/state/testproj" ) , testprojDir . toPath ( ) ) )
Assert . assertTrue ( cache . get ( id ) == user )
assertThat ( ( String ) FieldAccessUtil . getFieldVal ( interceptor , "profile" ) , is ( "testProf" ) )
assertEquals ( "result" , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
assertEquals ( myByte , adapter . getByte ( index ) )
context . assertIsSatisfied ( )
assertEquals ( "getSkipLines() did not return the same value as the previous setSkipLines()" , skipLines , element . getSkipLines ( ) )
assertEquals ( "foo,bar,1,3}" , engine . compileMustache ( "stringArray" , templateContents ) . render ( data ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( expected , elements )
Assert . assertEquals ( codigoStatusReposta , eventoRetorno . getCodigoStatusReposta ( ) , 0 )
Assert . assertTrue ( myRecordV3 . equals ( result ) )
assertEquals ( 2 , bucket . getCurrentTokenCount ( ) )
assertEquals ( "on failure" , pp . getValue ( ) )
assertCandidateEquals ( candidate , SerializationUtils . clone ( payload ) . getCandidate ( ) . getValue ( ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( mockResponse , testResponse )
Assert . assertEquals ( key1 , key2 )
assertEquals ( "FRED" , entityManager . createQuery ( query ) . getResultList ( ) . get ( 0 ) . getName ( ) )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
Assert . assertTrue ( isActive )
assertions . isNotLessThan ( expected )
assertEquals ( crossoverProbability , crossover . getMutationProbability ( ) , EPSILON )
assertNull ( response . getHeaders ( ) . get ( "foo" ) )
assertNotNull ( resp )
assertEquals ( 4 * diffusioncoefficient * timelag , res , 0.01 )
assertFalse ( matcher . matches ( mockElement ) )
TestCase . assertTrue ( result )
assertNull ( position )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( expected , actual )
assertTrue ( Arrays . equals ( password , entity . getPassword ( ) ) )
Assert . assertTrue ( _c . canConvertTo ( Float . TYPE ) )
assertEquals ( "id:int,stringColumn:chararray" , PigUtility . getColumns ( writable ) )
Assert . assertEquals ( "\\"bob\\"" , writer . toString ( ) )
Assert . assertEquals ( 1 , a . rank ( ) )
Assert . assertEquals ( " VALUES (3, 'baby')" , sql )
assertThat ( exit , is ( 0 ) )
assertEquals ( json , new ObjectMapper ( ) . readTree ( json ) . get ( "organization" ) . asText ( ) )
assertEquals ( 2015 , CalendarUtils . get ( midJune , CalendarUtils . YEAR_IN_DECADE ) )
assertEquals ( "foo != bar" , result . toString ( ) )
assertThat ( request . getStatus ( ) , equalTo ( chargePointStatus ) )
assertThat ( target . delLink ( link ) , is ( false ) )
Assert . assertTrue ( ! CompareUtil . compareArraysAndNull ( instance , copy ) )
assertTrue ( fired [ 0 ] )
assertTrue ( alice . getFriends ( ) . isEmpty ( ) )
assertTrue ( pathElement . isValid ( ) )
assertThat ( ( Float ) converter . convert ( formattedValue , float . class , bundle ) , is ( equalTo ( theValue ) ) )
assertSame ( error , stream . getError ( ) )
assertEquals ( ( double ) 8 , result . getDoubleValue ( ) , 0.0 )
assertEquals ( 3 , dynamicProperties . size ( ) )
assertPagination ( ( ) -> caseClient . getCaseInstancesByData ( CONTAINER_ID , statusFilter , numberOfItems ) , 2 )
assertTrue ( response != null && CollectionUtils . isEmpty ( response . getObservations ( ) ) )
assertNotNull ( content )
assertEquals ( 2 , list . size ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertScore ( serviceDocumentRenderer , AbstractRenderer . MAXIMUM_FORMAT_SCORE )
assertEquals ( 1 , analysis . getIssues ( ) . size ( ) )
assertThat ( getBranchInstrumentor ( ) . getLinePosition ( gtNode ) , equalTo ( 4 ) )
assertFalse ( Files . exists ( root . toPath ( ) ) )
Assert . assertEquals ( 2 , list . size ( ) )
assertEquals ( expected , actual )
assertThat ( serverSocket . isBound ( ) , is ( true ) )
assertSame ( expectedOutput , result )
assertEquals ( generatedJavascript , expectedJavascript )
TestUtil . assertEquals ( exp , spans )
Assert . assertSame ( component , table . getHeader ( ) )
assertEquals ( new ModelId ( "com" , "Test" , "1.0.0" ) , ModelId . fromPrettyFormat ( modelId ) )
assertTrue ( statement . execute ( "SHOW PRIVILEGE" ) )
assertTrue ( skills . containsSkill ( "skill1" ) )
Assert . assertTrue ( "The file" + fileName + "doesn't contain expected content." , checkFileContains ( path , "foo" ) )
Assert . assertTrue ( food instanceof MockEMF )
assertStatementCanBeDeparsedAs ( select , statement )
assertEquals ( relative , da . getDocType ( ) )
assertNotNull ( rs )
Assert . assertEquals ( "FROM Person T0 ORDER BY T0.lastName" , query . toQuery ( ) )
arrays . assertStartsWith ( description , null , sequence )
Assert . assertTrue ( verifyTest ( builder ) )
assertEquals ( rcll , ServiceProviders . load ( ServiceProvidersTestAbstractProvider . class , NO_HARDCODED , cl , ACCESSOR ) )
assertEquals ( 10 , impl . getMaxSamples ( ) )
assertThat ( target . getData ( ) , is ( value ) )
Assert . assertEquals ( expected . trim ( ) , output . trim ( ) )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 1E-1 )
assertArrayEquals ( bytes , field . getBytes ( ) )
assertEquals ( RNC_NAME , name )
assertNotNull ( mpd . getMusicDatabase ( ) )
assertFalse ( "equals(null)" , a1 . equals ( null ) )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( previousUsername , getAttribute ( "j_username" ) )
Assert . assertEquals ( 1 , sc . getAttribute ( "number-of-annotations" ) )
assertEquals ( null , target . referenceField )
assertEquals ( "https://us-phoenix-1.oraclecloud.com" , endpoint )
assertThat ( repairedRepositories . size ( ) , is ( 1 ) )
Assert . assertEquals ( dRequest , eRequest )
assertMaps ( new HashMap < String , String > ( ) , pairs )
assertEquals ( reader , readerResult )
Assert . assertTrue ( allowedCRUDL )
Assert . assertTrue ( fielderror . getCode ( ) == errorCode )
assertEquals ( 3.5d , e . evaluate ( ) , 0.0 )
assertEquals ( 1 , routingResult . getRouteHandlerMatches ( ) . size ( ) )
assertSame ( tt2 , tt )
assertEquals ( "Common exception" , ms . getText ( ) )
assertTrue ( isBundle )
assertEquals ( mclass . toString ( ) , 0.0 , ref3 . minus ( m3 ) . getRMS ( ) , TOLERANCE )
assertEquals ( agentFcd2 . sinkConfig , ans2 )
assertFalse ( MethodChecksUtils . hasTestMethodKeyword ( parentNode ) )
assertEquals ( true , result )
Assert . assertNotNull ( entity )
Assert . assertEquals ( "rows in db" , 40 , outputOperator . getNumOfEventsInStore ( TABLE_POJO_NAME ) )
assertEquals ( item , point . getData ( ) . get ( 0 ) )
assertTrue ( "Precedence rules violated" , content . getContent ( ) . indexOf ( "default1osml2inline3external4" ) > 0 )
Assert . fail ( "Expected WSSecurityException is not thrown " )
assertTrue ( "header height must be > 0" , xTable . getTableHeader ( ) . getPreferredSize ( ) . height > 0 )
assertEquals ( "ti酶n.txt" , objectMetadata . getFilename ( ) )
assertStatus ( 3 , expectedNumRows , expectedNumBytes , expectedReadBytes , queryId )
Assert . assertEquals ( "{type=static,name=Java,url=https://www.java.com}" , result )
Assert . assertEquals ( 0 , resultList . size ( ) )
Assert . assertEquals ( expResult , result )
Assert . assertFalse ( englishTagFound )
Assert . assertEquals ( this . list1Realisation , realised . getRealisation ( ) )
assertThat ( result . properties ( ) . size ( ) , is ( 0 ) )
assertEquals ( expected , actual )
assertEquals ( "�械泄�邪�" , t . format ( new Date ( 6000 ) ) )
assertEquals ( - 1 , x . dot ( y ) , 1e-10 )
assertEquals ( "Start console" , true , config . startConsole ( ) )
assertEquals ( "A" , customDecimalFormat . format ( 0L ) . toString ( ) )
assertValidKey ( taskKey )
assertEquals ( "\\"collection@" + pcollectionImpl . hashCode ( ) + "@" + jobPrototype . hashCode ( ) + "\\";" , dotfileWriter . formatPCollection ( pcollectionImpl , jobPrototype ) )
assertTrue ( store . confirmToken ( TEST_USERNAME , TEST_TOKEN ) )
assertEquals ( 1 , x . size ( ) )
assertTrue ( binary . exists ( ) )
Assert . assertEquals ( 2 , a . getCbo ( ) )
assertTrue ( result )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( 0 , tasks . size ( ) )
assertFalse ( connectFuture . isConnected ( ) )
assertEquals ( new Customer ( "Person" , new BigDecimal ( 90 ) ) , customer )
assertTrue ( sprinkler1 . isOn ( ) )
Assert . assertEquals ( 3 , termCount )
assertImmutableList ( components )
assertEquals ( "result1" , results . getResult ( ) )
Assert . assertEquals ( "澶�����璇�锛�" , sqltrue , sqlnew )
assertEquals ( "Expected 0 results!" , 0 , count )
assertTrue ( atomArray . length * ( atoms . length - 1 ) / 2 == withSpatialHashing )
assertNull ( item . getList ( ) )
assertTrue ( a . get ( "a" ) )
assertEquals ( "GET&http%3A%2F%2Fexamplemultiple.com&a[1]=2" , sbs . generate ( ) )
assertFalse ( "Cache believes cache is up to date when a classpath changed" , reloadedCache . isUpToDate ( sourceFile ) )
assertEquals ( "!Proxy!" + servletName + "JSESSIONID=1234;path=" + servletPath , rsp . getHeaderField ( "Set-Cookie" ) )
Assert . assertEquals ( "TEST" , object . getContent ( ) )
assertEquals ( redirectUrl , "redirect:/topics/recent" )
assertFalse ( strategy . isActive ( state , user ) )
assertEqualsIgnoreWhitespace ( expected , drl )
assertNotNull ( move )
assertEquals ( expected , actual )
assertEquals ( "One folder" , 1 , holder . sourcePath . size ( ) )
assertEquals ( seconds , item . getSeconds ( ) )
assertTrue ( "Cache believes a known, changed file is up to date" , cache . isUpToDate ( sourceFile ) )
assertEquals ( Collections . emptySet ( ) , result )
assertTrue ( thrown )
assertEquals ( "2e8f55ee8489308b6d3b3e6d640774c3b857c9f5" , payload . getParentSha ( ) )
assertTrue ( res )
assertNotNull ( generator )
assertEquals ( 1 , mapQuerySubQueries . size ( ) )
assertArrayEquals ( data , ( long [ ] ) deserialize . readObject ( ) )
assertNull ( Deencapsulation . getField ( deviceRegistrationState , "lastUpdatedDateTimeUtcDate" ) )
assertNotSame ( stub , service )
assertThat ( writer . toString ( ) , equalTo ( "{\\"queries\\":[{\\"results\\":[{\\"name\\":\\"group1\\",\\"tags\\":{\\"foo\\":\\"fi\\",\\"tag1\\":[\\"tag1Value\\"],\\"tag2
assertThat ( bodyWriter . getValue ( ) . objectsWriter , instanceOf ( ObjectsStreamPDFBodyObjectsWriter . class ) )
assertEquals ( mockedProvisioningConnectionString , resultConnectionString )
assertEquals ( "SGVsbG8gV29ybGQ=" , b64 . encode ( "SGVsbG8gV29ybGQ=" ) )
assertEquals ( networkView , ev3 . getSource ( ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertFalse ( result )
assertFalse ( result . passedValidation ( ) )
assertEquals ( "CycleItselfInArr[c={CycleItselfInArr@" + hash + "}]" , logAdapter . asString ( value ) )
assertNotNull ( method )
Assert . assertEquals ( 1 , routes . size ( ) )
assertEquals ( one , two )
assertEquals ( "GET / Hello" , captured . getRequestLine ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff44_" ) )
assertEquals ( expected , actualQuery )
assertEquals ( "First Page" , page . getTitle ( ) )
assertOut ( "this[new QName(new Namespace('ns'), 'knownMember')]" )
descriptor . assertValid ( )
assertThat ( buf . writeUTF ( code ) , is ( code ) )
response . then ( ) . log ( ) . ifValidationFails ( ) . assertThat ( )
assertEquals ( ImmutableList . of ( ) , ids )
assertSame ( "base" , res )
assertNotNull ( target . getSetter ( ) )
assertFalse ( ( Boolean ) result . get ( "successful" ) )
assertEquals ( "Mismatched reported user name" , expected , actual )
Assert . assertTrue ( "Should be displaying the dialog" , driver . getPageSource ( ) . contains ( expectedText ) )
Assert . assertEquals ( getElement ( "SH.1" ) , handler . getSendingApplication ( ) )
Assert . assertNotNull ( schema )
assertSearchYields ( fooIndex , "foo:aaa" , "foo" )
assertTrue ( HAUtil . isSandbox ( getRegCenter ( ) ) )
Assert . assertEquals ( expected , component )
assertNotNullOrEmpty ( "Questions should never be null." , questions )
assertThat ( results , equalTo ( asList ( "hdfs://hostname.test.com:8020/user" , "hive" , "warehouse" , "break" , "b" , "the spaces" , "c" , "in PartKeys" , "With fun
Assert . assertEquals ( "" , printCircular . printCircular ( array ) )
Assert . assertTrue ( ( scopePath . findScopeByName ( "test" ) != null ) && ( scopePath . findScopeByName ( "properties" ) != null ) && ( scopePath . findScopeByName ( "class" ) != null ) && ( scopePath . findScopeByName ( "
assertTrue ( extension . isActive ( ) )
assertEquals ( expectedMap , map )
Assert . assertEquals ( 1 , list . size ( ) )
assertTrue ( md . isCommitted ( emptyMetadata ) )
assertEquals ( NOT_DECODED , color , object . getColor ( ) )
assertEquals ( expResult , result )
assertEquals ( minutes + ( ( hours * DateUtils . MILLIS_PER_HOUR ) + ( ( days - 1 ) * DateUtils . MILLIS_PER_DAY ) ) / DateUtils . MILLIS_PER_MINUTE , testResult )
assertThat ( highlightPhrase , allOf ( containsString ( "<b>" ) , containsString ( "<b>" ) , containsString ( "<b>" ) , containsString ( "<b>" ) , containsString ( "<b>" ) ) )
assertEquals ( 123 , config . getMinConnectionsPerPartition ( ) )
Assert . assertNull ( entity )
assertThat ( ifCounterDataIndexable . matchesPojo ( this . counterData ) , is ( false ) )
assertThat ( steps . getPages ( ) , is ( pages ) )
assertTrue ( result . get ( RETURN_RESULT ) . toLowerCase ( ) . startsWith ( "com.fasterxml.jackson.core.jsonparseexception" ) )
assertObjectEquals ( "{f1:'f1b'}" , bs . getClassMeta ( B2 . class ) . getExample ( bs ) )
Assert . assertEquals ( "someTableName" , overriddenTableName )
assertEquals ( expResult , result )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Stream>" + "<Parameter name=\\"name\\" value=\\"value\\"/>" + "</Stream>" , elem . toXml ( ) )
assertTrue ( "multiLineSubstitutionFailure3" , "prefix {\\nPI} suffix" . equals ( result ) )
assertThat ( entities . getTotalElements ( ) , equalTo ( 1L ) )
Assert . assertEquals ( "employing" , word . getLexeme ( ) )
rule . assertScenarioEnded ( )
Assert . assertEquals ( expected , component )
Assert . assertEquals ( "" , mainAttributes . get ( new Attributes . Name ( "Import-Package" ) ) )
Assert . assertEquals ( 1 , count )
assertFalse ( vs . exists ( ) )
assertNotNull ( receivedResp )
assertEquals ( expected , stashes . get ( 0 ) )
assertNotNull ( validator )
Assert . assertTrue ( exceptionMatches )
assertSame ( this , theProperty . getOwner ( ) )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertEquals ( asList ( "2" , "4" , "6" ) , getStringsFromElements ( elements ) )
assertTrue ( firstMessageFound && secondMessageFound )
context . assertIsSatisfied ( )
Assert . assertEquals ( expected , actual )
iterablesWithCaseInsensitiveComparisonStrategy . assertDoesNotContainSubsequence ( someInfo ( ) , actual , subsequence )
assertThat ( xray . getConstructors ( ) , hasSize ( 1 ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertEquals ( expected , actual )
assertThat ( "getChildCount" , node . getChildCount ( ) , is ( 0 ) )
assertTrue ( gw . lines . isEmpty ( ) )
Assert . assertEquals ( PhenoTips . XPhenotypeMapping . class , result . getPhenotypeMapping ( ) . getClass ( ) )
assertThat ( prover . getProvisionedClasspath ( ) , is ( notNullValue ( ) ) )
assertEquals ( SendRequest . to ( PARAMS , key , SATOSHI . subtract ( 12 ) ) , req )
assertTrue ( true )
Assert . assertEquals ( leaderElector . getLeader ( ) , "hi" )
assertEquals ( result , expecting )
assertThat ( days . get ( forwhile ) , is ( "Monday" ) )
assertThat ( bodyCapture . getLength ( ) , is ( greaterThanOrEqualTo ( System . currentTimeMillis ( ) - start ) ) )
Assert . assertEquals ( clusterTbl . getClusterName ( ) , clusterName )
assertEquals ( "It shall return null value" , "1" , name . getValueAsString ( evalCtx ) )
Assert . assertEquals ( tag . getType ( ) , TagType . INT )
assertEquals ( 209 , sum )
assertTrue ( "Same cost solution (2.0 == 2.0) should not be accepted" , schrimpfAcceptance . acceptSolution ( memory , createSolutionWithCost ( 2.0 ) ) )
assertEquals ( 13 , value )
assertEquals ( "34 abc\\n" , found )
assertEquals ( sizeBefore + 1 , dico . size ( ) )
Assert . assertTrue ( versionProperty . getPropertyNames ( ) . isEmpty ( ) )
assertEquals ( "Type=" + type , value , actual )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
assertFalse ( ste . isEmpty ( ) )
assertEquals ( "noventa e nove" , actual )
assertEquals ( request , result )
assertThat ( resource , is ( equalTo ( method ) ) )
assertSame ( MyClock . class , ClockFactory . getClock ( ) . getClass ( ) )
assertEquals ( expected , actual )
assertOut ( "\\"\\\\\\"" )
assertEquals ( "http://example.com/" , con . request ( ) . url ( ) . toExternalForm ( ) )
Assert . assertEquals ( "SELECT DAYOFMONTH('2001-11-00'), MONTH('2005-00-00');" , text )
assertTrue ( "address read from hibernate session is 99 Purkynova REDHAT BRNO CZ" , "99 Purkynova REDHAT BRNO CZ" . equals ( st . getAddress ( ) ) )
Assert . assertNotEquals ( "Paths must be different!" , mapOut . getParent ( ) , mapOutIdx . getParent ( ) )
assertMetric ( "mmv.v2.metric.that.is.longer.than.63.characters.v2.metric.that.is.longer.than.63.characters" , is ( "v2.metric.that.is.longer.than
assertThat ( metrics . toString ( ) , is ( "Global[sentBytes=0, sentCount=0, receivedBytes=0, receivedCount=0, " + "lastLatency=0 ms, totalLatency=0 ms]\\n" ) )
assertEquals ( expectedTouchzs , attributes . getTouchzs ( ) )
assertEquals ( expResult , result )
assertEquals ( "hello world" , s )
Assert . assertEquals ( inet , inet3 )
Assert . assertTrue ( check . equals ( o ) )
assertTrue ( found )
assertTrue ( type . equals ( type2 ) )
assertEquals ( 1 , tokens . length )
this . assertOneMatcher ( is ( instanceOf ( HeaderRequestMatcher . class ) ) )
assertThat ( getHandlerFieldValue ( ) , nullValue ( ) )
assertThat ( newSyncPoint , is ( equalTo ( loadSyncPoint ) ) )
assertThat ( ( String ) commands . get ( asList ( "test" ) ) . getHint ( PLAIN ) , is ( "help" ) )
assertEquals ( ValidateGBIDsEnum . INVALID , GcdUtilities . validateGbids ( invalidGbids , gcdGbId , validGbids ) )
assertTrue ( "Text field should have focus" , textField . isFocusOwner ( ) )
assertEquals ( actualAfterProcess , expectedAfterProcess )
assertThat ( FullHalfPair1 . equals ( FullHalfPair2 ) , is ( false ) )
assertThat ( foundItem , is ( this . existingItem ) )
assertNull ( containerRequest . evaluatePreconditions ( now ) )
assertThat ( mockLogger . isLogpCalled ( ) , is ( false ) )
assertThat ( actual , containsInAnyOrder ( expected . toArray ( ) ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( d , result )
assertEquals ( 0 , records . size ( ) )
assertExpectedMinMax ( )
assertTrue ( actual )
Assert . assertThat ( i , is ( 22 ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
Assert . assertTrue ( config . isEnabled ( ) )
assertEquals ( "java.util.Collection<de.test.Company>" , tp . toString ( ) )
assertFalse ( currentData . isPresent ( ) )
Helpers . assertJson ( querySpecification . toJson ( ) , "{\\"query\\":\\"select * from enrollments where validWhere and group by validGroupBy\\"}" )
assertEquals ( 204 , response . statusCode ( ) )
assertSame ( "OutputStream is not set correctly." , outputStream , entrancePi . getOutputStream ( ) )
assertEquals ( - 66L , result )
assertEquals ( "bcd" , new String ( out . toByteArray ( ) ) )
assertTrue ( commiters . isEmpty ( ) )
assertEquals ( 1305 , result )
assertTrue ( isEqual ( distance , expected ) )
Assert . assertTrue ( "The re-generated and the read record do not match." , k1 . equals ( k2 ) && v1 . equals ( v2 ) )
assertEquals ( "file:/foo/bar/" , moduleDir )
assertEquals ( "PONG" , response )
assertStandardTestCase ( issueMethod , finishedGood_QtyOrdered , component_QtyIssued , true )
assertEquals ( true , sut . isMale ( ) )
Assert . assertEquals ( 1 , reservation . getAllocatableDates ( ) . size ( ) )
Assert . assertEquals ( "Session Application-Id should be the same as indicated." , SLh_APPID , sessionAppId )
runner . assertTransferCount ( QueryRecord . REL_FAILURE , 1 )
Assert . assertEquals ( "There be no error diagnostic" , 0 , diags . size ( ) )
assertThat ( newStart , equalTo ( IntraDayDate . create ( new LocalDate ( 2009 , 1 , 19 ) , hours ( 1 ) ) ) )
assertTrue ( fileExists )
assertEquals ( Rect . centeredRect ( 10 , 20 , 30 , 40 ) , g . getBounds ( ) )
assertThat ( isValid , is ( true ) )
assertEquals ( UriStatus . VALID_UNVERSIONED , manager . validateRenderingUri ( uri ) )
assertEquals ( expResult , result )
assertNull ( tuple . getSet ( "field" ) )
Assert . assertEquals ( 1 , exchange . getResponse ( ) . getPayloadString ( ) . split ( "\\n" ) . length )
assertEquals ( "scenario name" , runner . getDescription ( ) . getName ( ) )
assertEquals ( "Response components should be equal to the mocked components" , mockedComponents , responseComponents )
assertEquals ( expected , elements )
assertNotNull ( mqttAsyncClient )
assertEquals ( expected , actual )
assertWindowUpdateFrame ( frame , streamId , windowSizeIncrement )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isDebugEnabled ( ) )
assertTrue ( factory instanceof AsyncClientFactory )
assertEquals ( body . toString ( ) , "error 4 test error" )
assertTrue ( queue . isEmpty ( ) )
assertTrue ( writtenCount == TEST_SIZE )
assertRequestDoesNotMatch ( "foo" )
assertEquals ( Status . WARN , jxm . getStatus ( ) )
assertThat ( map . size ( ) , is ( 0 ) )
assertThat ( this . rbenvRubyRuntimeLocatorService . isInstalled ( ) , equalTo ( true ) )
TestUtils . assertPropertyChangeEvent ( report , "draggedDistance" , Integer . valueOf ( 10 ) , header . getDraggedDistance ( ) )
assertOut ( "a = '' + 2 + '' + '' * 4" )
Assert . assertThat ( message , containsString ( "contained" ) )
assertThat ( f . getAbsolutePath ( ) , startsWith ( filter . getAbsolutePath ( ) ) )
assertEquals ( State . UNCHECKED , result )
assertEquals ( 0 , result )
assertThat ( "Expceted principal not found" , mapped , is ( KERMIT_PRINCIPAL ) )
assertTrue ( "Helper 'lcmc-gui-helper' should be loaded in the file" , new File ( testFile ) . exists ( ) )
assertOut ( "var /** @type {string} */ a = escape('http://whatever.com')" )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertEquals ( - 1234f , ConfigUtils . getFloat ( config , 0 , "some-number" ) , 0.1f )
assertThat ( optionsByType . get ( Timeout . class ) , is ( timeout ) )
assertEquals ( Arrays . asList ( expectedOpts . toArray ( new String [ 0 ] ) ) , result )
assertEquals ( 0 , historicIncidents )
assertTrue ( result , result . contains ( lineSeparator + "fieldName=id" + lineSeparator + "id=true" + lineSeparator ) )
assertThat ( actual . length , is ( 2 ) )
assertEquals ( "PersonName" , personName . getName ( ) )
assertEquals ( "Expected 1 result!" , 1 , n )
assertSeen ( visible , s2 , s3 )
assertTrue ( matched )
assertTrue ( state . getExcludedScopes ( ) . isEmpty ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 10" ) )
assertEquals ( isTouched , true )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . ACTIVITIES_UPDATE , ScopePathType . ORCID_WORKS_UPDATE , ScopePathType . ORCID_WORKS_CREATE , ScopePathType . FUNDING_UPDATE , ScopePath
Assert . assertTrue ( sbWidthEnd > sbWidthStart )
assertTrue ( result instanceof java . util . concurrent . Callable < ? > )
assertEquals ( np . getDefaultLayer ( ) , upperLayer )
assertEquals ( "Mismatched data" , expected , res )
assertNotNull ( DnsNameResolver . maybeChooseServiceConfig ( choice , new Random ( ) , "localhost" ) )
assertTrue ( TextFileUtils . fileEndsWithNewlineChar ( file0 ) )
assertTrue ( "package not build" , new File ( "target/test-classes/test.deb" ) . exists ( ) )
Assert . assertFalse ( res . isPresent ( ) )
assertEquals ( expResult , result )
assertEqualsIgnoreWhitespace ( expected , drl )
assertThat ( count , is ( equalTo ( 2L ) ) )
assertThat ( duration . dividedBy ( 2 ) , equalTo ( TimeDuration . ofSeconds ( 0.5 ) ) )
assertNotEquals ( ref , oid )
assertEquals ( TargetType . PILLAR_PCRE , target . getType ( ) )
Assert . assertEquals ( "Alignment 1" , afpChain1 . toString ( ) , afpChain2 . toString ( ) )
assertFalse ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( conf . getRest ( ) . get ( 0 ) . getResource ( ) . get ( 0 ) . getType ( ) . toString ( ) , "Patient" )
Assert . assertEquals ( expectedResult , result )
assertSnake ( "       \\n" + "   ��   \\n" + "   ��   \\n" + "   ��   \\n" + "       \\n" + "       \\n
assertEquals ( expected , arguments . profilers )
Assert . assertEquals ( expected , sortBy . sort ( testIndex . index ( ) ) . values ( ) )
assertEquals ( ( Long ) ( long ) 10L , ObjectInspector . get ( testMbs , "test:name=bean1,type=TestJmx" ) )
assertEquals ( "MS" , task . getDurationFormat ( ) )
assertDtos ( expected , actual )
assertResultsEqual ( node , 42.0 )
assertTrue ( output . contains ( "'TIMEZONE'='GMT+1'" ) )
Assert . assertEquals ( csvString , "\\"col1\\",\\"col2\\"\\n\\"val1\\",\\"val2\\"\\n\\"val3\\",\\"val4\\"\\n" )
assertEquals ( "The count of open popups should be one" , 1 , count )
Assert . assertNotNull ( mat )
assertTrue ( entity . getId ( ) > 0L && ! entity . isAwesome ( ) )
Assert . assertEquals ( b , a . rotate ( ) )
assertTrue ( validator . isValid ( integer ( max , min ) + "" , null ) )
Assert . assertEquals ( "/base{/group_id,id}/pages{/page,lang}{?format,q}" , uri )
assertThat ( s , is ( "Hello" + nl + "Hello" + nl + "Hello" + nl + "Hello" + nl + "Hello" + nl + "Hello" + nl + "Hello" + nl + "Hello" + nl + "Hello" + nl + "
Assert . assertNull ( actualNode )
assertEquals ( expectedString , actualString )
assertEquals ( "Results were not in the order of the provided keys" , keys . get ( index ) , bytes )
assertEquals ( expected , bos . toString ( ) )
assertTrue ( sw . toString ( ) . contains ( needleToFind ) )
assertFalse ( c . remove ( "sadsdf" , null ) )
assertThat ( method . invoke ( obj , new Object [ ] { } ) , is ( ( Object ) new Object [ ] { } ) )
assertEquals ( new String ( Base64 . decodeBase64 ( ANDROID_CONFIG_CONTENT ) , Charsets . UTF_8 ) , content )
assertEquals ( "provides X.Y with Z1.Z2, Z3.Z4\\n" , modelWriter . toString ( ) )
assertEquals ( 14 , availableProperties . size ( ) )
GwtAssertions . assertThat ( a )
assertEquals ( "FRED" , s )
assertEquals ( violation . getMessage ( ) , "Message is {escaped}" )
assertTrue ( XMLUnit . compareXML ( result ( "xquery/string.xml" ) , zapResult ) . similar ( ) )
assertEquals ( field . getSqlName ( ) , "Table.field" )
assertThat ( result . size ( ) , is ( 2 ) )
assertTrue ( permissionEvaluator . hasAnyProjectPermission ( authentication , Permission . EDIT_PAGE ) )
assertThat ( zWaveRawSerialPort . receiveData ( data ) , is ( true ) )
assertEquals ( 5 , cap . get ( 0 ) )
Assert . assertEquals ( 2L , ( long ) sut . execute ( new UsageMetricDailyStreamInfoRequest ( new Date ( apri8th2011 ) , streamScopeId ) ) )
assertEquals ( expectedPlan , actualPlan )
assertTrue ( test1 . compareTo ( test2 ) < 0 )
assertXMLIdentical ( new Diff ( result , combineWithKeys ( Lists . newArrayList ( "id" , "name" ) , Lists . newArrayList ( recessive , dominant ) ) , true )
assertNotNull ( assertionDocument )
assertTrue ( actual . isEmpty ( ) )
assertEquals ( expOut , a . slice ( 0 ) . slice ( 0 , 5 ) )
assertEquals ( v21Educations1 , v21Educations2 )
assertArrayEquals ( expectedFamilies , actualFamilies )
assertEquals ( nominalLabelDTO . getName ( ) , modelNominalLabelDTO . getName ( ) )
assertEquals ( 403 , status . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( matches )
assertEquals ( 200 , response . statusCode ( ) )
assertEquals ( 1 , invalidValues . length )
logSpy . assertInfoWasLogged ( "SomeMessage" , null )
assertFalse ( interceptor . preHandle ( request , null , null ) )
assertThat ( violations . size ( ) , is ( 1 ) )
assertEquals ( this . tlv , builder . getTlv ( 0 ) )
assertEquals ( "string 1" , summaryString )
assertThat ( found , notNullValue ( ) )
assertAllGoodAfterRemovePauses ( )
assertTrue ( Cells . isEmpty ( cell ) )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expected , actual )
Assert . assertEquals ( 3 , annots . size ( ) )
assertThat ( output . readKeyValuesToMap ( ) , equalTo ( expectedOutput ) )
Assert . assertTrue ( processor . getSupportedAnnotationTypes ( ) . contains ( AlexaIntentListener . class . getTypeName ( ) ) )
assertThat ( errors , not ( hasFieldErrors ( "familyName" ) ) )
assertEquals ( 0x00FFFF , result . getVoxel ( 5 , 15 , 5 ) , .01 )
assertTrue ( ml . isEmpty ( ) )
assertEquals ( JreVersion . Unsupported , version )
assertThat ( ( Integer ) dest . get ( "aaa" ) , is ( 1000 ) )
assertEquals ( expected , actual )
assertSame ( INITIATIVE_PUBLIC , result )
assertEquals ( 1 , recordListener . getRecordsRead ( ) )
assertEquals ( "message" , httpClientStub . statusCode )
assertFalse ( solution . equals ( newSolution ) )
assertFalse ( infoValidator . validate ( info ) )
assertNonLLStar ( g , altsWithRecursion )
assertEquals ( catalog . getCommands ( ) , commands )
assertEquals ( "[* foo.*]" , m . toString ( ) )
Assert . assertTrue ( queue . isEmpty ( ) )
Assert . assertTrue ( written . contains ( "DummyBasicMockRule" ) )
assertScoreAndParse ( content , null , 2 )
assertFalse ( "Unable to update non existing user" , success )
Assert . assertEquals ( "GET" , s )
assertThat ( WorkflowStatus . statusType ( stageInProgress ) , is ( StatusType . NOT_BUILTIN ) )
assertTrue ( BufferedImageComparer . isRGBSimilar ( sourceImage , img ) )
assertTrue ( equals )
assertEquals ( blogObject . getTitle ( ) , blog . getTitle ( ) )
assertThat ( config . getUserAgent ( ) , equalTo ( userAgent ) )
assertThat ( result , is ( "GRS imported" ) )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertThat ( uri , equalTo ( url + ".json" ) )
Assert . assertEquals ( icmsSetado , icms . getIcmsst ( ) )
assertEquals ( millis , tracker . getOpened ( ) )
assertEquals ( "Hello ^^^^ there" , ResponseBodyInterpolator . interpolate ( "Hello ^^^^ there" , req ) )
assertThat ( stateStore . size ( ) , equalTo ( 1L ) )
arrays . assertIsSorted ( description , null )
assertTrue ( checker . isFormat ( handle ) )
assertEquals ( 3 , lines . size ( ) )
assertEquals ( expected , result )
assertEquals ( 1 , constraintViolations . size ( ) )
assertEquals ( "[1,2,null,null,foo]" , logAdapter . asString ( array ) )
Assert . assertNotNull ( CheckAttributeFactory . checkList )
assertLogContains ( "Tests summary: 1 suite, 2 tests" )
assertTrue ( reference instanceof SoftReference )
assertEquals ( asList ( "kyle" , "stuff" , "crap" , "bingo" , "blah" , "kingo" ) , mp . getParameters ( ) )
assertEquals ( sessionInfo . getIdentity ( ) . getIdentifier ( ) , username )
assertEquals ( "X-NaN-02-01" , dateSortString )
assertFalse ( result . isEmpty ( ) )
assertEquals ( hashCode , "253ac1b8" )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertE ( "2   " + "    " + "4   " + "    " )
assertEquals ( assertion , base )
assertTrue ( "Boolean attribute should be displayed as a checkbox" , cb . getValue ( ) . equals ( attribBoolean . getValue ( ) ) )
assertNull ( event . get ( ) )
assertEquals ( - 10 , testApp . executeApplication ( args ) )
assertTrue ( result . hasErrors ( ) )
assertEquals ( expected , new String ( actual ) )
assertSame ( root , transform ( root ) )
assertEquals ( ImmutableVariantScore . of ( ReadType . ALT , 10 ) , SamRecordScoring . getVariantScore ( alt , SNV ) )
assertEquals ( 2 , surveyDatumList . size ( ) )
assertEquals ( "true is true" , aviatorBoolean . add ( aviatorString , null ) . getValue ( null ) )
assertTrue ( "Path for added property is wrong: actual=" + listener . getEvents ( ) . get ( 0 ) . getPath ( ) + ", expected=" + propPath , containsPath ( listener , propPath ) )
Assert . assertEquals ( numeroControleFCI , produto . getNumeroControleFCI ( ) )
Assert . assertEquals ( Object . class , t . getType ( ) )
assertEquals ( "null" , formatWithNullString . getNullString ( ) )
assertTrue ( propertiesManager . getPropertyChangeListeners ( ) . isEmpty ( ) )
Assert . assertEquals ( entity . getFieldValues ( COMPANY ) . get ( 0 ) , getEntity . getFieldValues ( COMPANY ) . get ( 0 ) )
assertEquals ( "" , subject . getCurrentState ( ) . getID ( ) )
assertThat ( result , equalTo ( SUN . ordinal ( ) ) )
assertPlanMatches ( expected )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 " + "INNER JOIN table2 AS t2 ON t1.c0 = t2.c0" ) )
assertEquals ( 1_000_000 , ix . totalPages ( ) )
assertEquals ( null , reconnectCohort )
assertThat ( readElements , is ( setOf ( new User ( "alex" , "soto" ) ) ) )
assertEquals ( "Input " + v + " does not match output " + o , v , o )
assertEquals ( command1 . hashCode ( ) , command2 . hashCode ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( 5 , products . size ( ) )
Assert . assertEquals ( expectedJsonString , actualJsonString )
assertEquals ( other , file . getLastModified ( ) )
assertEquals ( 2 , s . getRequiredSkills ( ) . values ( ) . size ( ) )
assertEquals ( "r03" , archivePath )
assertEquals ( expectedString1 + expectedString2 , statistic . toString ( ) )
assertThat ( step . getResult ( ) , is ( TestResult . PENDING ) )
assertThat ( result . toBase64Encode ( ) , is ( "wasabi_admin@admin_wasabi" ) )
assertThat ( result , is ( true ) )
assertEquals ( "[1,2]" , p )
assertEquals ( statistic . getName ( ) , statistic . getName ( ) )
assertTrue ( downloader . waitForReportReady ( ) )
Assert . assertEquals ( "HTTP/1.1 200 OK" , adapter . toString ( ) )
runner . assertAllFlowFilesTransferred ( PutSolrContentStream . REL_SUCCESS , 1 )
assertEquals ( expected , this . output . toString ( ) )
assertThat ( "Some elements were not added." , index . getSize ( ) , equalTo ( 2 ) )
assertFalse ( messageSent )
assertThat ( hybrid . getDefinition ( ) . property ( "uuid" ) , is ( notNullValue ( ) ) )
Assert . assertNotNull ( builderFactory . createArrayBuilder ( ) )
assertEquals ( expected , actual )
Assert . assertFalse ( artifactFilter . match ( getArtifact ( ) ) )
assertEquals ( timeFrameEditor . isFirstMonthAvailable ( ) , false )
assertNotNull ( result )
assertThat ( returned , is ( result ) )
assertTrue ( peerAcceptanceUtil . isPeerInterestedOnRemoteClient ( clientID . getServiceID ( ) ) )
assertEquals ( "Failed Matching" , VersionMatchResult . REJECTED , p . matches ( info ) )
assertEquals ( "MOD_SS.MOD13A2" , typeString )
assertEquals ( 2 , solution . getRoutes ( ) . iterator ( ) . next ( ) . getActivities ( ) . size ( ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
Assert . assertEquals ( actualDependencies , expectedDependencies , "Unexpected dependencies for process: " + outputFeedToTest )
assertEquals ( "file transfer request" , shadowDialog . getIcon ( ) . getText ( ) )
assertEquals ( "rule-a" , routingRuleCache . getRoutingRuleId ( repository ) )
Assert . assertEquals ( "http://example.com/{?foo*}" , template . getTemplate ( ) )
assertThat ( gtx . get ( Hoge . class , hoge . getKey ( ) , 1 ) , is ( notNullValue ( ) ) )
assertThat ( regionalBreweries , hasItems ( containsString ( "Brew" ) ) )
assertTrue ( isPropertyValueSet )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertNotNull ( informe . getId ( ) )
assertEquals ( "Expected 1 results!" , 1 , count )
assertTrue ( vRoute . getStart ( ) . getLocation ( ) . getId ( ) . equals ( "start" ) )
assertEcssEquals ( ".menu{left:\\"#{notemptyrichSkin.menu1?'10px':''}\\";}" , convertFragment ( xcss ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( expected , elements )
assertEquals ( Constants . KB , info . getLength ( ) )
assertEquals ( "Java" , orElseFramework . name )
assertThat ( result , is ( "http://localhost:8080/test" ) )
assertNotSame ( result , one )
assertEquals ( 0 , v . getSize ( ) )
assertEquals ( "7WWD36NF4WCpPaYtK47mM4o0a5CCeOt01JXSuMayv5g" , thumbprint )
assertThat ( pattern . matchAsInclusive ( "Test.class" , null ) , is ( true ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , contains ( stringContainsInOrder ( "variable" , "ADMIN_NAME" , "spec.clusters[0].serverPod.env" , "is" ) ) )
assertTrue ( sf . getSocketCreated ( ) )
statusChecker . assertContainsMatch ( Status . ERROR , "File property must be set before triggeringPolicy " )
assertNotNull ( Country . reader ( ) . read ( ) )
assertEquals ( "The authenticated user should be authenticated." , SUPER_USER_INSTANCE . getUserID ( ) , session . getUserID ( ) )
Assert . assertNotNull ( object )
assertEquals ( "--index" , expr . getParameterValue ( ) )
Assert . assertEquals ( 2 , m2Fields . size ( ) )
Assert . assertTrue ( Sid . validate ( ExtensionConfiguration . Type . EXTENSION_CONFIGURATION , validExtensionConfiguration ) )
assertEquals ( country , request . getVisitorCountry ( ) )
assertTrue ( cleanExit )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( 2.0 , mo . mean ( X [ 3 ] ) , epsilon )
assertEquals ( expected , actual )
assertThat ( BondBasedConfiguration . configurationOf ( g , 0 , 1 , 2 , 3 ) , is ( Configuration . DoubleBond . TOGETHER ) )
assertNull ( deserializedDate )
assertThat ( resultedQuery , is ( expectedQuery ) )
assertThat ( encryptor . checkPassword ( singleCharacterPwd , encryptedPasswordPass1 ) , is ( true ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFInfoEventoCartaCorrecao ( ) . toString ( ) )
assertEquals ( asList ( "test1" ) , testQueue )
assertEquals ( map , map2 )
assertThat ( this . resolver . resolve ( Type . class ) , is ( sameInstance ( resolved ) ) )
assertThat ( g . atom ( 4 ) . label ( ) , is ( "a holo-carrier protein" ) )
assertEquals ( A , bite )
assertEquals ( instance , entities . get ( 0 ) )
Assert . assertNotNull ( geocodingServlet )
assertEquals ( expected , d_riskRatio . getError ( ) , 0.00001 )
assertThat ( this . start . plus ( period ) , is ( this . end ) )
assertTrue ( hasReset )
assertEquals ( TestUtil . HTTP_TEST_PROXY , result . get ( 0 ) )
assertSame ( shouldFind , selection . fileSelects ( By . id ( "test" ) ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( "test message action1" , harness1 . getValue ( "THISWILLGETCLOBBERED" ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertEquals ( 3000 , res . get ( "port" ) )
assertEquals ( "text/html; charset=Big5" , headers . get ( "Content-Type" ) . iterator ( ) . next ( ) )
assertEquals ( "user_id userId,user_name userName,pwd pwd" , t . getColumnsSql ( ) )
assertEquals ( EPS , sum , 1e-1 )
assertEquals ( buildValue ( i ) , new String ( value . getBytes ( ) , 0 , value . getLength ( ) ) )
assertTrue ( listMultipartFormDataMessageBodyReader . isReadable ( type , genericType , new Annotation [ 0 ] , null ) )
assertEquals ( UNAUTHORIZED_401 , response . getStatus ( ) )
Assert . assertEquals ( value , writeTest ( kernelServices , "max-heap-size" , value ) )
assertEquals ( "failed with seed: " + seed , expected , actual )
assertEquals ( "10" , value )
assertTemplateEvaluatesTo ( "one" , "two" , "three" )
assertNull ( new TaskSpec ( inputBlock , outputBlock ) . getEpilogue ( ) )
assertFalse ( new BytecodeAnnotationBuilder ( true ) . sanityCheckInline ( instrAaload ) )
assertEquals ( 0.5 , comp . compare ( "12345678" , "12345678" ) )
assertActive ( player1 )
Assert . assertTrue ( "The list is not ordered ascending" , sortedAges . equals ( ages ) )
assertEquals ( ConnectionProgressStatus . SEND_PROGRESS , status . getCallbackType ( ) )
Assert . assertNull ( retinaCookieValue )
Assert . assertEquals ( "this is my salt" , a . forVlues ( 1 , Integer . MAX_VALUE ) . toString ( ) )
assertThat ( result . isEmpty ( ) , is ( true ) )
assertEquals ( expResult , result , 0.0 )
Assert . assertTrue ( true )
assertions . isNotEqualTo ( actual )
assertTrue ( result )
assertCollectionDataIntegrity ( collection )
Assert . assertTrue ( result . isKeep ( key ) )
assertThat ( valueModel . size ( ) , is ( 0 ) )
assertTrue ( "Repository should contain newly added statement" , testCon . hasStatement ( bob , name , nameBob , false ) )
assertNull ( writer )
assertNull ( loaded )
assertEquals ( 5 , result . length )
assertEquals ( cos ( Math . E * Math . cos ( Math . E ) ) * Math . E , e . evaluate ( ) , 0d )
assertThat ( RpslObjectFilter . diff ( original , updated ) , is ( "@@ -1,2 +1,4 @@\\n" + " mntner:         UPD-MNT\\n" + "-description:    updated\\n" + "-mnt-by:
assertTrue ( filter . allow ( event , listener ) )
Assert . assertEquals ( "SELECT MID(YEARWEEK('2000-01-01'), 5, 2);" , text )
assertEquals ( expResult , result )
assertEquals ( expected , stats )
assertEquals ( ValidationResult . Result . OK , vr . getStatus ( ) )
assertSame ( expected , result )
Assert . assertEquals ( 2 , result . size ( ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 6 )
assertNotNull ( "Sendout is null" , entity )
assertNotNull ( startTime )
assertEquals ( Collections . singletonList ( knownSpan . getSpanId ( ) ) , context . getSpanIds ( ) )
assertThat ( results . subList ( 0 , 5 ) , is ( Arrays . asList ( ProcessHadoopScriptHandler . CLEANUP_STAGE_CLASS , "tbatch" , "tflow" , "texec" , context . getArgumentsAsString ( ) ) ) )
Assert . assertEquals ( THIRTEEN_DOUBLE , pi . getThirteenDouble ( ) , 0.0001 )
assertEqualsQR ( Ar , qr . factor ( new DenseMatrix ( Ar ) ) )
assertThat ( definition . getTenantId ( ) , is ( TENANT_ONE ) )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , "test; UUID=" + uuid . toString ( ) )
assertNotNull ( oAuth2AccessToken )
Assert . assertEquals ( expectedXML , actualXML )
assertEquals ( 1 , map . size ( ) )
assertTrue ( fhtest . isRemoved ( ) )
assertThat ( fromType , is ( equalTo ( new QName ( "java:java.lang.String" ) ) ) )
assertNotNull ( waitOn ( browser , 6000 ) . untilRemoved ( By . id ( "wait-if" ) ) )
assertPermanentCount ( playerA , "Harvest Mage" , 1 )
assertRelativeEffectEqual ( expected , actual )
assertEquals ( "foo=bar" , capt . getAllValues ( ) . get ( 0 ) . getFirstHeader ( "Cookie" ) . getValue ( ) )
assertTrue ( violations . hasNext ( ) )
assertTrue ( Arrays . equals ( getPacketData ( "AA 00 02 01 04 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Assert . assertNull ( foo )
assertThat ( processors , nullValue ( ) )
assertEquals ( "000000000000000000000000000000000000ffff7f000001208d" , Utils . HEX . encode ( pa . bitcoinSerialize ( ) ) )
Assert . assertEquals ( "https://tfs2013:8080/" , actual )
assertFalse ( ex . canBeDividedby3 ( "-" ) )
assertEquals ( expected , sw . toString ( ) )
assertEquals ( 30 , points )
assertThat ( provider , instanceOf ( KerberosSchemeFactory . class ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
Assert . assertTrue ( isValid ( resp , FORMAT_STRING , true , 1 ) , "Response is not valid" )
assertTrue ( pn . getVertices ( ) . size ( ) > 0 )
Assert . fail ( "Expected " + c + " to fail" )
assertEquals ( expectedSchema , AvroTypeConverter . convertToAvro ( TalendType . DOUBLE , null ) )
Assert . assertEquals ( 1 , size )
assertTrue ( tickler . isValid ( ) )
Assert . assertEquals ( asDTO . getAnalyzedCount ( ) , 500 )
MatcherAssert . assertThat ( new SingleFormLexeme ( dude ) . returnArgument ( ) . string ( ) , CoreMatchers . equalTo ( dude ) )
Assert . assertEquals ( expectedHash , computedHash )
Assert . assertEquals ( "SELECT CHARSET('abc');" , text )
Assert . assertEquals ( TestHelper . getPoint ( 30 , 10 ) , result . getValue ( ) )
assertNotNull ( r )
assertEquals ( "Incorrect bytes written" , fileString , new String ( rbytes , 0 , fileString . length ( ) ) )
assertEquals ( "ABCDEF" , lambda . apply ( 1 ) )
assertEquals ( "1/one/two" , facets . get ( 1 ) )
assertEquals ( new Values ( true , null , null , true , true , true , false , null ) , v )
assertTrue ( "Expected [" + expectedQuery1 + "] or [" + expectedQuery2 + "] but was " + newQuery , ( expectedQuery1 . equals ( newQuery ) || expectedQuery2 . equalsIgnoreCase ( newQuery ) ) )
assertNotNull ( result )
assertEquals ( "field.asSet()" , p . toString ( ) )
Assert . assertEquals ( beforeNumTasks , getDefaultQueue ( ) . fetchStatistics ( ) . getNumTasks ( ) )
assertTrue ( d1 instanceof PublicCloneable )
assertThat ( ByteUtil . toPrimitiveByte ( i ) , is ( ( byte ) 1 ) )
Assert . assertTrue ( Math . abs ( vega - vegaFiniteDiffAnalytic ) < 1E-02 )
assertNotNull ( project )
assertEquals ( "" , result )
assertEquals ( Arrays . asList ( "Outer" , "Nested" , "Field" ) , parents )
assertTrue ( exceptionThrown )
assertNotNull ( entity . getId ( ) )
assertTrue ( isValid )
assertNull ( found )
assertTrue ( EXPECTED_DS_INDEX_MSG + " instead got " + e . toString ( ) , e instanceof DatastoreNeedIndexException )
assertTrue ( cygnusGroupingRules . getRules ( ) == null )
Assert . assertEquals ( null , ( Long ) a . v )
assertThat ( result , equalTo ( v + "-" + s ) )
assertArrayEquals ( ordered , result . toArray ( new String [ 0 ] ) )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"record\\":{\\"url\\":\\"http://sendme.com/tropo\\",\\"beep\\":true,\\"allowSignals\\":[\\"exit\\",\\"stopHold\\
Assert . assertEquals ( "password/change" , view )
assertIs ( 1 , count )
assertTrue ( latch . await ( 2 , SECONDS ) )
assertThat ( "Count of customer" , res , is ( 0 ) )
Assert . assertFalse ( this . manager . disconnectAll ( this . family1 ) )
assertNull ( accClientConf . get ( Property . GENERAL_SECURITY_CREDENTIAL_PROVIDER_PATHS ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( result . getUserID ( ) . isEmpty ( ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "One\\nTwo\\nThree" ) ) )
assertTrue ( kb . hasErrors ( ) )
assertEquals ( "Http redirect failed" , "/mockResource?id=1" , finalRedirectUrl )
assertThat ( authorities . stream ( ) . map ( a -> a . getAuthority ( ) ) . collect ( Collectors . toList ( ) ) , containsInAnyOrder ( WebSecurityConfiguration . ADMIN_GRANT ) )
assertTrue ( filter . contains ( testCard ) )
assertEquals ( "Latitude is not properly parsed" , 5d , mapper . readLatitude ( columns ) , 0 )
assertThat ( foo . getBar ( ) , sameInstance ( bar ) )
Assert . assertFalse ( types . isEmpty ( ) )
assertThatClassExpressionIsTranslatedAs ( classExpression , initialStateAsserted , expectedPropertyValue )
assertEquals ( null , result )
Assert . assertEquals ( projectorForward . getTranscriptStartingAtCDS ( ) , resultTranscript )
assertEquals ( "POINT(426418.89 4957737.37)" , g1 . toString ( ) )
MatcherAssert . assertThat ( new BasicTemplateBody ( one , two ) . fillUp ( Mockito . mock ( TemplateBody . class ) , Mockito . mock ( TemplateBody . class ) ) . string ( ) , CoreMatchers . equalTo ( "Hey dude" ) )
assertAllTargetsCount ( 0 )
assertEquals ( "brie" , declaration . getValue ( null , brie ) )
assertThat ( httpGetRoot , isAllowed ( ) )
assertFalse ( property . toStringValues ( ) . isEmpty ( ) )
assertEquals ( 0 , array . size ( ) )
assertTrue ( "MyApp.app folder is missing in AppstoreUploadFile." , files . length == 1 && files [ 0 ] . getName ( ) . equals ( "MyApp.app" ) )
assertFalse ( obs . isDirty ( ) )
assertEquals ( "[1080:0:0:0:8:800:200c:417a]:80" , StringUtils . formatSocket ( socket ) )
assertThat ( log , instanceOf ( CommonsLoggingImpl . class ) )
assertNotNull ( "Title Photos is empty for " + imdbId , result )
assertEquals ( 2 , found . size ( ) )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertEquals ( "This test thing" , out )
assertEquals ( EXPECTED_JSON_WITH_PINS , actualJsonCode )
assertEquals ( ChargingCapability . V_240V_3_PHASE_32A , ChargingCapability . fromConnector ( connector ) )
assertOut ( "a.setSeconds(10)" )
assertEquals ( register , newRegister )
assertEquals ( "Incorrect query result" , "ex://x/?o" , result )
Assert . assertTrue ( textArray . contains ( string ) )
assertEquals ( "{" + newLine ( ) + "    with ($p) { name = \\"Luca\\" };" + newLine ( ) + "}" , printConstraint ( expression ) )
Assert . assertEquals ( "joe" , decoded . getName ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( res , "" )
Assert . assertArrayEquals ( cmpAlignAndMeet , outAlignAndMeet )
assertEquals ( "Buffer[size=1 contents=a1b2c3d4e5f61a2b3c4d5e6f10203040]" , buffer . toString ( ) )
Assert . assertEquals ( 18 , count )
assertThat ( mustache . render ( Arrays . EMPTY_OBJECT_ARRAY ) , is ( "label.hello" ) )
assertThat ( damageComponent . getDamage ( ) , IsEqual . equalTo ( 560f ) )
assertRecord ( record )
editor . assertCompletionWithLabel ( "- name: docker-git" , "resources:\\n" + "- name: <*>" )
Assert . assertEquals ( "Get what?!?!" , responseResult . getText ( ) )
assertThat ( changeListBuilder . build ( ) , is ( notNullValue ( ) ) )
Assert . assertTrue ( ! result . isEmpty ( ) )
assertEquals ( expected , actual )
assertFalse ( originalEdgeValue . hashCode ( ) == decodedEdgeValue . hashCode ( ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertNotNull ( result )
assertTrue ( rootNode . exists ( ) )
runner . assertValid ( )
assertArrayEquals ( new Item [ ] { new Item ( 1 , "A" ) } , ArraysUtils . subtract ( items , 1 , 2 ) )
assertThat ( inputsJson , contains ( expectedJson ) )
assertEquals ( expected , actual )
assertEquals ( 1 , search . getSize ( ) )
assertViewName ( mav , "redirect:/topics/1" )
Assert . assertEquals ( 1 , first . compareTo ( second ) )
assertThat ( "The quick brown fox jumps over..." , not ( validateStrongPasswordHash ( manipulatedIterationsHash , passwordHash ) ) )
Assert . fail ( "Test encountered an unexpected exception." )
assertTokenSurfacesEquals ( Arrays . asList ( "iPhone4 S" ) , tokenizer . tokenize ( input ) )
assertThat ( configuration . getThreads ( ) , equalTo ( 7 ) )
assertThat ( ListNumbers . binarySearchValueOrLower ( values , 2 ) , equalTo ( 4 ) )
assertNotNull ( driver )
assertEquals ( drilldownSeries . getId ( ) , outputDrilldown . getId ( ) )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertSame ( expr . accept ( visitor ) , visitResult )
assertNotNull ( d )
Assert . assertNotNull ( info )
Assert . assertEquals ( "Invalid HUs retrieved" , Arrays . asList ( warehouse01 . getM_HU_ID ( ) ) , huSelectModel . createHUQueryBuilder ( ) . list ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "vtTo" ) )
assertNotNull ( result )
Assert . assertEquals ( 1 , events . size ( ) )
assertThat ( d . getFamilies ( ) , contains ( family ) )
assertThat ( control . matches ( "/clientsWhatever" ) , is ( equalTo ( true ) ) )
MatcherAssert . assertThat ( deps , Matchers . hasSize ( 1 ) )
assertEquals ( 1 , index . estimateTotalCount ( ) )
assertEquals ( os [ 0 ] , ArrayValidator . validateNotEmpty ( os ) )
assertOverflow ( new BigDecimal ( x ) . divide ( new BigDecimal ( y ) ) , result , x / y )
assertRequest ( DataMockery . createOPTIONSRequest ( ) , request )
assertEquals ( "scoreHolder.addSoftConstraintMatch(kcontext, -1)" , marshaledAction )
assertEquals ( result . size ( ) , 1 )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.common.action.rev130731.actions.grouping.Action " + "output
assertNotNull ( model . getObject ( ) . getPerson ( ) . getAdresses ( ) . iterator ( ) . next ( ) )
assertEquals ( "blue" , proxy . getColor ( ) )
assertThat ( resolved , contains ( "a:A" , "b:B" , "c:C" ) )
assertEquals ( howdy , iface . greeting . codec . fromEnum ( Greeting . howdy . ordinal ( ) ) )
assertNotNull ( ui . getErrorFrame ( new JPanel ( ) ) )
assertEquals ( "34 + 2\\n" , found )
assertNull ( item . getItemProperty ( "other1" ) . getValue ( ) )
assertEquals ( actualCountOfPosts , resultOfGetTopics )
assertNull ( result )
assertEquals ( 10 , ZippelGCD ( aL , bL ) . size ( ) )
assertEquals ( "abrakadabra" , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
Assert . assertNull ( nullURL )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "p" , URI . class ) ) . and ( binds ( "pLabel" , Literal . class ) ) )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEqualObjects ( cpuOut . get ( 0 ) , gpuOut . get ( 0 ) )
assertEquals ( "Hallo Test" , I18N . tr ( "helloParam" , "Test" ) )
assertArrayEquals ( writeBytes , readBytes )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . APPLICATION_XML ) . get ( ) . getStatus ( ) )
assertTrue ( cookieStore . getUseCookies ( ) == true )
assertTaskEvents ( task , 2 , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_CREATE )
assertEquals ( meta1 , meta2 )
assertEquals ( "{" + newLine ( ) + "    delete($person);" + newLine ( ) + "}" , printConstraint ( expression ) )
Assert . fail ( "Should have thrown LpException" )
assertNotNull ( "AO1 not found" , adminObject1 )
Assert . assertEquals ( "a =b, " , KeyValueFormatter . format ( params , true ) )
assertEquals ( SUCCESS_FACTORY_RESPONSE , handleResponse )
AvroAssertTestUtil . assertEqualsWithJsonIgnoreOrder ( outputDirPath , jsonOutputFile , DocumentMetadata . class )
assertEquals ( 1 , result . size ( ) )
assertUnionObjectDelta ( userDeltaUnion )
assertFalse ( command . equals ( new String ( ) ) )
Assert . assertEquals ( 2 , terms . size ( ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "Option value" , false , commandLine . hasOption ( "noSimpleOption" ) )
assertArrayEquals ( new int [ ] { 1 , 3 , 4 } , out . read ( queue , e ) . getInts ( ) )
assertEquals ( expected , drugList )
authRule . assertScenario ( scenario )
assertThat ( subject . getAgeOfExactOrNextExistingSerial ( "AS1" ) , is ( - 1 ) )
assertEquals ( "To is not properly parsed" , new Date ( 5 ) , mapper . readTo ( columns ) )
Assert . assertEquals ( 6. , analyser . getDistanceAtActivity ( route . getActivities ( ) . get ( 0 ) , route ) , 0.01 )
assertEquals ( Lists . newArrayList ( 1 ) , listBad )
assertNotNull ( e )
assertSuccess ( validationResult )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
Assert . assertEquals ( "<?xml" , r . get ( String . class ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?><alice xmlns=\\"http://some-namespace\\">bob</alice>" , result . toString ( ) )
Assert . assertEquals ( 0 , result . size ( ) )
assertArrayEquals ( new double [ ] { 1d } , StatisticUtils . determineStandardDeviationDoubles ( subSingleBenchmarkResultList , averageScore , subSingleBenchmarkResultList . size ( ) ) , DELTA )
assertEquals ( expected , result )
assertEquals ( expectedOffset , offset )
Assert . assertEquals ( "<semData><tpData>0</tpData></semData>" , entregaSemDataDefinida . toString ( ) )
assertions . containsSequence ( sequence )
assertDateEquals ( new DateTime ( 2013 , 12 , 31 , 23 , 59 , 59 , 999 ) , date )
assertAxisEquals ( - 10.0 , - 1.0 , new double [ ] { - 10.0 , - 9.0 , - 8.0 , - 7.0 , - 6.0 , - 5.0 , - 4.0 , - 3.0 , - 2.
assertStatus ( 3 , expectedNumRows , expectedNumBytes , expectedReadBytes )
assertEquals ( OTHER_GRAPHITE_URL , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( childProject1 . getCustomWorkspace ( ) , childWorkspace )
assertEquals ( "3 氓rhundraden sedan" , t . format ( new Date ( 0 ) ) )
assertEquals ( ComponentElementGetValue . FIELD_VALUES [ 1 ] , labelChangeValue . getText ( ) )
assertThat ( testOutcome . getTestFailureCause ( ) . getMessage ( ) , is ( "Test failed" ) )
assertThat ( tileXml , equalTo ( "<notification count=\\"1\\" title=\\"Sample\\" backBackgroundImage=\\"http://sample.com/image.png\\" backTitle=\\"Random \\"asdf<><>;'a\\"/>" ) )
Assert . assertFalse ( component . isValid ( ) )
Assert . assertEquals ( 0 , loadIO . list ( ) . size ( ) )
Assert . assertNotNull ( "URL not null" , resurl )
assertEquals ( b1 . hashCode ( ) , b2 . hashCode ( ) )
assertEquals ( AuthenticationMechanismOutcome . AUTHENTICATED , outcome )
assertEquals ( "a/b(@a != 123)/c" , SelectorStepBuilder . toString ( steps ) )
assertEquals ( "[foo] did not satisfy [" + startsWith ( "d" ) + ']' , expected . getMessage ( ) )
assertEquals ( user . getUserName ( ) , "admin" )
assertNotNull ( "HousingComplex is null" , entity )
assertEquals ( ref , tokens )
assertEquals ( e1 . evaluate ( new Object ( ) ) , e2 . evaluate ( new Object ( ) ) )
assertEquals ( 0.0f , entry . getEffectiveDurationHours ( ) , Float . MIN_NORMAL )
assertThat ( context , is ( notNullValue ( ) ) )
assertEquals ( created , actual )
assertEquals ( files . size ( ) , Iterables . size ( s ) )
assertPermanentCount ( playerA , "Titanic Growth" , 1 )
assertEquals ( value1 , value2 )
assertEquals ( "text/html" , get ( url ) . contentType ( ) )
assertEquals ( 4 , properties . getLength ( ) )
assertTrue ( Arrays . equals ( new int [ ] { 0 , 0 } , coordinate ) )
assertEquals ( 2762 , int0 )
assertNotNull ( url )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 500 , balance , 0.0 )
assertEquals ( "Hello World!" , sample . helloWorld ( ) )
assertEquals ( "Exp. to get the capability" , capability , capability . getSupport ( ) )
assertFalse ( result . passedValidation ( ) )
Assert . assertNull ( "paint should return null" , horizontalRule . doPaint ( null ) )
assertThat ( codes , containsInAnyOrder ( "43343-3" , "47239-9" ) )
assertThat ( exclusions , containsInAnyOrder ( "that key" ) )
Assert . assertEquals ( newContent , retrievedContent )
assertEquals ( "CN=server,O=OPS4J,C=PL" , server . getName ( ) )
assertEquals ( "aTestString" , classUnderTest . getClientVersion ( ) )
assertTrue ( new File ( "target/excludedClasses/com/querydsl/apt/domain/query3/QAnimalTest_Animal.java" ) . exists ( ) )
assertEquals ( BOLD . foreground ( RED ) , style )
Assert . assertNull ( lineToBeCopied . getActualText ( ) )
assertEquals ( 2 , BlobListenerAnalyser . getBlobs ( ) . size ( ) )
assertEquals ( new HashSet < String > ( Arrays . asList ( "1000A" , "NM1" , "41" ) ) , cf . getSegmentQuals ( ) )
assertEquals ( "2013-03-01T12:30:00" , format )
assertNotNull ( "Check context" , context )
Assert . assertEquals ( 3 , issues . length )
Assert . assertEquals ( this . user , result )
assertEquals ( "Hello" , message . get ( ) )
assertTrue ( builder . hasErrors ( ) )
Assert . assertEquals ( "x = " + x , FastMath . sin ( x ) , actual [ i ] , 0.0 )
Assert . fail ( "Expected exception for incorrect person" )
assertEquals ( Collections . EMPTY_SET , nullFieldProblems )
assertEquals ( times , victim . getTotalResources ( ) )
assertNull ( profile . getTokenExpiration ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 2 , warnings . size ( ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertTrue ( true )
assertEquals ( tft , expected )
assertEquals ( "zero" , actual )
Assert . assertTrue ( table . isNullable ( ) )
Assert . assertEquals ( expected , actual )
assertSame ( pathMock , context . getPropertyValuePath ( "propertyPath" ) )
assertEquals ( Collections . singleton ( UUID . fromString ( "aura:additioning" ) ) , x )
assertEquals ( lines . get ( 0 ) , testString )
assertEquals ( "A2" , cache . get ( "a" ) )
assertEquals ( 77 , result )
assertEquals ( 2 , executor . run ( adultUnit ) )
assertFalse ( "Should have failed to create a GroupBy command without a key function." , built )
Assert . assertTrue ( serviceTags . getTags ( ) . size ( ) == 0 )
assertThat ( leftMost , equalTo ( asList ( statefulRegion2 , statefulRegion5 ) ) )
assertArrayEquals ( splitString , testString6ExpectedSplit )
Assert . assertTrue ( result . contains ( "Si猫cle" ) )
assertEquals ( 8 , stringTokenizer . countwords ( ) )
assertThat ( newCode , is ( equalTo ( code ) ) )
assertEquals ( expected , actual )
assertEquals ( DISABLED , status )
assertTrue ( "File not written" , f . length ( ) > 0 )
assertNotNull ( entryRelationship )
assertEqualsIgnoreWhitespace ( expected , drl )
runner . assertNotValid ( )
assertEquals ( expectedXml , actualXml )
assertTrue ( a1 instanceof PublicCloneable )
assertThat ( event . getPlayer ( ) , nullValue ( ) )
assertThat ( algorithm . computeDigest ( ) , is ( emptyDigest ) )
assertEquals ( mockEnc , uit . getEncoder ( ) )
assertArrayEquals ( after , Elements . slice ( before ) )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
Assert . assertEquals ( "userName1" , userName )
Assert . assertThat ( rec , Matchers . allOf ( LogMatchers . hasMatchingArguments ( Matchers . arrayContaining ( ( Matcher ) Matchers . equalTo ( "a" ) , ( Matcher ) Matchers . equalTo ( "b" ) , ( Matcher ) Matchers . equalTo
assertEquals ( expected , elements )
assertTrue ( in . markSupported ( ) )
assertVariable ( "character_set_client" , "utf8" )
assertNotNull ( entity . getId ( ) )
assertThat ( rendering , is ( "AB" ) )
assertThat ( isMismatch , description ( theDescription ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertNotNull ( response )
assertTrue ( passwordEncoder . checkpw ( plaintext , encoded ) )
Assert . assertNull ( RequestObjectHelper . getReturnKeys ( json ) )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , FooSteps . class )
assertEquals ( 39 , chargeCount )
assertEquals ( "%s" , instance . formatMessage ( record ) )
assertEquals ( expected , test . adjustInto ( base ) )
assertEquals ( DosingType . FREE_TEXT , drugOrder . getDosingType ( ) )
Assert . assertTrue ( fi1 . sameFormatAs ( fi2 ) )
assertThat ( co . getCachedSize ( ) , is ( actualCachedSize ) )
assertNull ( latestRelease )
assertSame ( conf , table . getConfiguration ( ) )
assertEquals ( "logo11w.png" , fileName . toString ( ) )
Assert . assertFalse ( errors . hasFieldErrors ( ) )
Assert . assertEquals ( STRING , nextHop . getString ( ) )
assertEquals ( "http://kanta.fi/StructureDefinition/fiphr-device" , fiphrDevice . getId ( ) )
assertEquals ( 1 , defaultList . size ( ) )
assertEquals ( res [ i ] , v )
assertRowsEqual ( expected , primaryData )
assertEquals ( 61750L , m . getLastMillisecond ( ) )
assertTrue ( instance . getTotalNetworkError ( ) < maxError )
assertSame ( "managedConnection must be retrievable after set" , mockManagedConnection , handler . getData ( ) . getManagedConnection ( ) )
assertEquals ( copy ( value ) , ra . get ( ) . get ( ) )
assertThat ( proxyRecipe . isFeatureEnabled ( ) , is ( equalTo ( true ) ) )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertThat ( chargingProfile . getStackLevel ( ) , equalTo ( zero ) )
assertTrue ( k . getValue ( ) . equals ( FILE_ABSOLUTE ) )
assertEquals ( 0 , hits . totalHits )
assertEquals ( 0.0 , coverage , deltaFloatEquality )
assertNotNull ( entity . getId ( ) )
assertTrue ( violations . size ( ) == 0 )
AssertAnnotations . assertPOS ( posMapped , posOriginal , select ( jcas , POS . class ) )
assertNull ( i . getParent ( ) )
assertTrue ( "Got prefix lookups" , interpolator . getPrefixLookups ( ) . isEmpty ( ) )
assertSame ( cause , ex1 . getCause ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( pis , imposto . getPis ( ) )
assertEquals ( graduate , result )
assertEquals ( byteBuffer0 , byteBuffer1 )
assertEquals ( 71 , pathMap . size ( ) )
assertEquals ( Integer . valueOf ( 0 ) , mailbox . state ( ) )
assertEquals ( "msg" , sut . getMessage ( ) )
assertSequence ( visitor . getNodes ( ) , "a" , "b" , "c" , "d" , "e" )
Assert . assertEquals ( 5 , example . evaluate ( 5 ) . size ( ) )
assertEquals ( asList ( "/root[1]/node[1]" , "/root[1]/node[1]/node[1]" , "/root[1]/ns:node[1]" , "/root[1]/ns:node[1]" , "/root[1]/nested1[1
assertEquals ( source , builder . getPropertyState ( ) )
assertThat ( actual . getIdentifier ( ) , containsString ( "<td>Identifier</td><td>testSearchByResourceChain01</td>" ) )
assertThat ( editor . getValue ( ) , is ( ( Object ) ReadPreference . preferSecondary ( ) ) )
assertTrue ( calledExceptionHandler . isProtectedHandlerCalled ( ) )
assertEquals ( strList , StringArrayUtils . toSet ( "1" ) )
assertEquals ( getJson ( downloadDetails ) , writer . toString ( ) )
assertTrue ( result . get ( RETURN_RESULT ) . toLowerCase ( ) . startsWith ( "com.fasterxml.jackson.core.jsonparseexception" ) )
Assert . assertEquals ( sp . getSinkIds ( ) , sp2 . getSinkIds ( ) )
assertThat ( bic1 . hashCode ( ) != bic2 . hashCode ( ) , is ( false ) )
Assert . assertTrue ( got . contains ( "Created device: {" ) )
assertThat ( repository . findOne ( id ) , is ( notNullValue ( ) ) )
assertEquals ( expected , contentSummary . toString ( true ) )
assertResultSet ( res )
assertEquals ( 1234 , config . getTimeout ( ) )
assertEquals ( TRANSACTIONTYPE_FAT_MONO , tx . transactionType )
assertEquals ( "#/nested-query" , link . getUri ( ) . toString ( ) )
Assert . assertTrue ( errors . hasFieldErrors ( "concept" ) )
Assert . assertEquals ( "QueueInfo children weren't properly converted" , returned . getQueueChildren ( ) . size ( ) , 1 )
assertEquals ( dc . name ( ) , "123" )
Assert . assertEquals ( "\\"SELECT \\n  mydatabase.mydbschema.mytable.ID1, \\n  mydatabase.mydbschema.mytable.NAME1\\nFROM mydatabase.mydbschema.mytable\\"" , result )
assertTrue ( resMap . getResourcesReader ( ) != null )
assertEquals ( expResult . trim ( ) , result . trim ( ) )
assertEquals ( "00FF" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertNotNull ( siteInfoData )
assertTrue ( cs . isAccepted ( ) )
assertEquals ( 1 , shacl . nbResult ( gg ) )
assertThat ( PathUtil . getRelativePath ( root , child ) , is ( "/" ) )
assertEquals ( "IDX1" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( deltaFiniteDifference , deltaAAD , 0.005 )
Assert . assertEquals ( "(aa_change_frameshift (aa_point_location (aa_char Ala) 124) (aa_char Thr) fs * 23)" , aa_change_extension . toStringTree ( parser ) )
Assert . assertEquals ( expected , actual )
assertEquals ( expect , actual )
assertTrue ( String . format ( "Expected error to contain string [%s]. Actual error: %s" , expected , ex . getMessage ( ) ) , ex . getMessage ( ) . contains ( expected ) )
assertThat ( "Failed to list resources: " + result , Operations . isSuccessfulOutcome ( result ) , is ( true ) )
Assert . assertTrue ( edOrgRights . isEmpty ( ) )
assertEquals ( "Hello world!" , page . getContent ( ) )
assertNull ( action . getIconFileName ( ) )
assertEquals ( "authId1" , target . getAuthId ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( date ) , mapper . readBitemporalDate ( columns , "vtFrom" ) )
assertEquals ( "Response Processor " + ( i + 1 ) + " received wrong message content" , "This is the status of /resource" + ( i + 1 ) , coapResponse . getContent ( ) . toString ( Charset . forName ( "UTF-8" ) ) )
assertTrue ( ret )
assertTrue ( defaultDispatchStackEdit . isDirty ( ) )
assertTrue ( a == b )
assertTrue ( sets . contains ( message1 ) )
assertFalse ( branchFilterByRemote . isLinkedTo ( branch ) )
assertFalse ( definedInContext )
assertEquals ( 0 , artworkList . size ( ) )
assertEquals ( want , doc . body ( ) . html ( ) )
assertEquals ( 42 , impl . getMedian ( ) )
assertThat ( createdPlayer == defensivePlayerWithDjAndJavaDevSkills , is ( true ) )
assertEquals ( "SyntaxError: Unexpected token 'a'" , e . getJSMessage ( ) )
Assert . assertEquals ( expected , real )
Assert . assertArrayEquals ( expected , actual )
assertArrayEquals ( new String [ ] { "AWS" , "UAT" , "FWS" } , result )
assertThat ( ( Integer [ ] ) editingContext . getIgnoredObjects ( ) , is ( new Integer [ 0 ] ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "test" , this . parser . getResourceName ( ) )
assertEquals ( expectedScriptNode , actualScriptNode )
assertThat ( "childGroup" , childGroup . getSubGroups ( ) . size ( ) , equalTo ( 0 ) )
assertEquals ( 0L , result )
assertEqualsIgnoreWhitespace ( expected , real )
assertTrue ( syncClient instanceof ZooKeeperSyncClientImpl )
assertObject ( args )
Assert . assertTrue ( IsoMatcher . isomorphic ( o , OCCUPATION ) )
assertTrue ( cache . size ( ) > 0 )
assertEquals ( "Timestamp(0, 1010101)" , element . getValueAsString ( ) )
Assert . assertEquals ( 0 , errors . size ( ) )
Assert . assertTrue ( results . size ( ) == 0 )
assertEquals ( expected , actualQuery )
assertEquals ( 1 , res . join ( ) )
assertEquals ( 1 , result )
Assert . assertFalse ( mPos . has ( e ) )
assertEquals ( 100 , vrp . getJobs ( ) . values ( ) . size ( ) )
Assert . assertEquals ( filterName , victim . getName ( ) )
assertThat ( b . getConsole ( ) , Matchers . containsString ( "Running in" ) )
Assert . assertEquals ( EXPECTED_XML , actualXml )
assertThat ( byKey , is ( rpslObject ) )
assertThat ( ByteTypeValidator . INSTANCE . validate ( parameters , "aaa" ) , is ( nullValue ( ) ) )
assertEquals ( "{\\"errorMessage\\":\\"User data must contain password.\\"}" , output )
assertOut ( "<Group id=\\"myGrp\\"><Label id=\\"myLabel\\"></Label></Group>" )
assertMockEndpointsSatisfied ( )
assertEquals ( 3 , processorsFactory . getPostProcessors ( ) . size ( ) )
assertEqualsWithoutWhiteSpaces ( "translate([-30, 0, 0]) (empty)" , ts )
assertTrue ( pos . index == calc . altIndex ( altIndex , pos . tag ) )
assertThat ( output , containsString ( "DICOM store deleted." ) )
assertEquals ( 140 + 4 * winScore - loosePenalty , scores . getScore ( ) )
Assert . assertEquals ( Integer . valueOf ( 0 ) , result )
assertEquals ( 0.0 , Evaluator . evaluate ( ex ) )
assertThat ( testValue . keywordName ( TestValueType . NAME . of ( "AGE" ) ) , equalTo ( "AGE" ) )
assertEquals ( "6.10351563e+003" , victim . readNumber ( ) )
assertEquals ( Joiner . on ( "\\n" ) . join ( expected ) , result )
assertThat ( classes . size ( ) , Matchers . equalTo ( 2 ) )
assertEquals ( ChatState . composing , stateHandler . getLastChatState ( ) )
assertEquals ( expResult , result )
assertThat ( result . getViewOriginalText ( ) , is ( VIEW_EXPANDED_TEXT ) )
Assert . assertEquals ( "heh" , resultValue )
Assert . assertEquals ( BitTag . SERVICENET_LB . tagValue ( ) , mappedUsage . getTagsBitmask ( ) )
assertTrue ( lines . contains ( "\\"country\\":\\"Equestria\\"" ) )
Assert . assertTrue ( getSettings ( ) . getSocketSettings ( ) . getSocketTimeout ( TimeUnit . MILLISECONDS ) == 1100 )
Assert . assertTrue ( testPinpointClient1 . isConnected ( bindPort ) && testPinpointClient2 . isConnected ( bindPort ) )
assertThat ( pyPiRestoreBlobData . create ( restoreBlobDataFactory ) , is ( pyPiRestoreBlobData ) )
Assert . assertEquals ( jobParams , retrievedParams )
Assert . assertEquals ( "Link: <http://example.com/things>; rel=\\"next\\"; thing" , affordance . toString ( ) )
assertEquals ( rendered , expected )
assertNotNull ( text )
assertThat ( result . isEmpty ( ) , is ( true ) )
assertEquals ( testneuron3 , lst . get ( 1 ) )
assertNotNull ( "Title Plot is empty for " + imdbId , result )
assertEquals ( "cap end" , cmd . getType ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
Assert . assertTrue ( permissions . toString ( ) , permissions . size ( ) == 1 )
assertNotNull ( percentage )
assertNotNull ( result )
assertArrayEquals ( new byte [ ] { ( byte [ ] ) 0 , ( byte [ ] ) 1 , ( byte [ ] ) 0 , ( byte [ ] ) 1542812190 , ( byte [ ] ) 0 , ( byte [ ] ) 1 } , serialize )
assertNull ( result )
assertInterval ( 2 , 3 , 5 , 8 , 13 , 21 , bounds )
assertNotEquals ( 0 , socket . getLocalPort ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "http://localhost:8080/events/" + "topic/cg/cid?filter=filter" , url )
assertTrue ( result )
Assert . assertTrue ( "We should have 2 schemas" , totalSchemas == 2 )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertEquals ( "the artifact must be downloaded" , true , new File ( localRepo , "ant/ant/1.5.1/ant-1.5.1.jar" ) . exists ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( textField ) instanceof WTextFieldRenderer )
assertThat ( iterationState . next ( ) . getChangeType ( ) , is ( ASSERTED ) )
assertNotNull ( parser )
authRule . assertScenario ( scenario )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertEquals ( 3 , Nd4j . getBlasWrapper ( ) . iamax ( linspace ) )
assertEquals ( expResult , result )
Assert . assertNotNull ( c )
assertEquals ( postId , postStatistics . getTopic ( ) . getId ( ) )
assertThat ( MomentInterval . parseISO ( "2012092T1415Z/2012096T1600" ) , is ( expected ) )
assertEquals ( name , loaded . getName ( ) )
assertTrue ( skuWarehouseDTO . getSkuWarehouseId ( ) > 0 )
BeanAssert . assertBeanEquals ( bean , array )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertTrue ( jsonNode . get ( "errors" ) . size ( ) == 0 )
Assert . assertEquals ( Long . valueOf ( 1 ) , handler . convertIdentifier ( v ) )
assertEquals ( "param=value" , response . getBody ( ) )
assertThat ( anyTS . isValid ( NANO_OF_SECOND , null ) , is ( false ) )
assertEquals ( "ABC" , buf . getPrefixedString ( decoder ) )
assertTrue ( resultComparator . compare ( dc1 , dc2 ) < 0 )
assertEquals ( PARENS_STREET_NAME , step . streetNameNoParens ( ) )
assertThat ( "system-input-def-objects.xml" , systemInputDef , matches ( new SystemInputDefMatcher ( expected ) ) )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { assetDocument , "jexlexpression" , "*" , repoToContainedGroupMap } , null ) , is ( true ) )
assertSame ( inputPortBinding , scufl2Tools . processorPortBindingForPort ( port , profile ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( Calendar . MONDAY , calendar . getInternalCalendar ( ) . getFirstDayOfWeek ( ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Object" ) )
assertTrue ( collector . isFitting ( frag ) )
assertThat ( specification . getUnits ( ) , is ( MILLI ( SECOND ) ) )
assertThat ( coverArt . getBackImage ( ) , is ( nullValue ( ) ) )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( 2 , application . tenantLinks . size ( ) )
assertEquals ( dynamicResult , staticResult )
assertEqualsWithoutWhiteSpaces ( "(model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 1 ) . exclude ( 12 ) . create ( ) ) )
assertThat ( commandsIterator . next ( ) , startsWith ( String . format ( "rake %s" , bundleExecFlag ) ) )
given ( ) . body ( delegate . toString ( ) ) . put ( delegate1 ) . then ( ) . assertThat ( )
assertTrue ( plot . getRangeMarkers ( 99 , Layer . FOREGROUND ) . contains ( yMarker1 ) )
assertThat ( anyTS . isValid ( MICRO_OF_SECOND , 1000000000 ) , is ( true ) )
Assert . assertArrayEquals ( p , VP8Util . predictDC ( above , left ) )
assertEquals ( "_all/_search" , search . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertThat ( entity , is ( notNullValue ( ) ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertTrue ( Arrays . equals ( result , expectedOutput ) )
assertThat ( "getValue" , node . getValue ( ) , is ( false ) )
assertEquals ( script , observedScript )
assertNotNull ( process )
assertNoSpans ( )
assertEquals ( result , 200 )
assertEquals ( "************" , client . getStringStack ( ) [ client . getStringStackSize ( ) - 1 ] )
assertThatResultContainsCorrectClassesExactlyInOrder ( result )
ReaderAssert . assertThat ( NegraExportReader . class , NegraExportReader . PARAM_SOURCE_ENCODING , "UTF-8" , NegraExportReader . PARAM_LANGUAGE , "de" , NegraExportReader . PARAM_SOURCE_LOCATION , "src/test
assertMessage ( "<type>EXITED</type>" , 4 )
Assert . assertEquals ( Arrays . asList ( binaryOne , binaryTwo ) , binaries . getBins ( ) )
assertEquals ( actualPage , expectedPage )
Assert . assertEquals ( "Verify same protocol instance was registered" , protocol , protocol . getProtocol ( ) )
assertTrue ( content . contains ( "sample-docx2" ) )
Assert . assertEquals ( expResult , result , 0.006 )
assertEquals ( false , result )
Assert . isTrue ( response == false )
assertEquals ( 2 , groupsView . getGroups ( ) . size ( ) )
assertTrue ( items . size ( ) > 0 )
assertEquals ( expectedPath , actualPath )
assertEquals ( "2" , result . getXdmValue ( ) . getUnderlyingValue ( ) )
assertOut ( "a(org.apache.royale.utils.Language.string(b.child('child'))" )
Assert . assertEquals ( 0 , builder . akibanInformationSchema ( ) . validate ( AISValidations . BASIC_VALIDATIONS ) . failures ( ) . size ( ) )
Assert . assertEquals ( 1 , updates . size ( ) )
assertThat ( impl . isPermitted ( "repoName" , "repoFormat" , BreadActions . READ , variableSource ) , is ( false ) )
assertThat ( mdcValueStr , is ( userName ) )
Assert . assertEquals ( HttpStatus . SC_NOT_FOUND , hubResponseCode )
assertFalse ( glass . accept ( point , WIDTH / 2 - 1 , 2 ) )
assertTrue ( action . register ( ) )
assertEquals ( validationLogic , resourceEditProperty . getValidationLogic ( ) )
Assert . assertEquals ( "Gen.1.1" , unmap ( "Gen.1.1" ) )
assertThat ( result , is ( new String [ ] [ ] { { "c" } } ) )
assertTrue ( comparator instanceof LexicographicalComparatorHolder . PureJavaComparator )
Assert . assertEquals ( 3 , coveredGoals . size ( ) )
assertEquals ( this . distribution , distributionDetector . getDetectedDist ( ) )
assertEquals ( ENCODED_PASSWORD , result )
assertEquals ( "/workflow" , wf . toString ( ) )
assertEquals ( 1 , count )
assertEquals ( "1. Listener not invoked for removed item" , "" , getLogRow ( 0 ) )
assertTrue ( delete . isSuccess ( ) )
assertThat ( ( Integer ) ms . get ( "aaa" ) , is ( 1 ) )
assertEquals ( "%d{ISO8601} [%t][%c] %-5p %properties %ndc: %m%n" , layout . getConversionPattern ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
Assert . assertTrue ( value > 0 )
Assert . assertThat ( result , IsEqual . equalTo ( input ) )
assertTrue ( shutdown . get ( ) )
assertEquals ( expResult , result )
assertEquals ( "Join_Column_Name" , colName )
assertEquals ( result . getActionResult ( ) , result . getMessages ( ) . get ( 0 ) )
assertEquals ( "_cat/shards" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertTrue ( "unexpected value" , value )
Assert . assertEquals ( "2017-09-20" , dateStr )
assertEquals ( "/a" , a . matches ( b ) )
assertEquals ( 207 , testResult . getError ( ) . getCode ( ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
Assert . assertTrue ( this . manager . connectFromAll ( Arrays . asList ( this . family1 , this . family2 , this . family3 ) , this . person1 ) )
assertThereIsAFieldBindingFor ( "$f" )
assertTrue ( geoserverCatalog . getCatalogMode ( ) == GEOSERVER_COMMON_MODE )
Assert . assertEquals ( PseudoAuthenticationHandler . class , filter . getAuthenticationHandler ( ) . getClass ( ) )
assertTrue ( "" , types != null && types . size ( ) == 1 && types . contains ( ProfileType . INDUSTRY ) )
Assert . assertEquals ( expected , errorCode . getUserMessage ( ) )
context . assertIsSatisfied ( )
assertEquals ( 0.0 , diff . getValue ( METERS ) , 500 )
assertEqualsJFiglet ( asciiArt )
assertEquals ( expectedParsedResult , actualParsedResult )
assertTrue ( "Group empty" , constraintViolations . size ( ) == 1 )
assertEquals ( "305419896" , value . getDataAsBinaryStr ( ) )
assertThat ( irsApplicable , equalTo ( true ) )
assertEquals ( "b" , m . get ( "a" ) )
assertThat ( ( ( AtomicInteger ) packet . get ( ProcessingConstants . REMAINING_SERVERS_HEALTH_TO_READ ) ) . get ( ) , is ( 0 ) )
Assert . assertEquals ( "Result is not 10" , new Integer ( 10 ) , o )
assertEquals ( NOT_ACCEPTABLE . getStatusCode ( ) , getStatus ( get ) )
Assert . assertEquals ( IsolationLevels . READ_COMMITTED , connection . getIsolationLevel ( ) )
Assert . assertNull ( this . component . requestTerm ( QUERY_STRING , null ) )
assertSameFileContents ( reference , fileResult )
Assert . assertEquals ( 0 , reactor . createStagedExam ( ) . getReplicas ( ) . size ( ) )
assertEquals ( expected , sb . toString ( ) )
assertEquals ( expected , archive . classNames ( ) )
assertThat ( result . getId ( ) , is ( notNullValue ( ) ) )
assertNotNull ( ImportSession . iImportSession )
Assert . assertEquals ( Sets . newHashSet ( 3 ) , parser . getSecureResultIndices ( ) )
Assert . assertNotNull ( result )
assertFalse ( matchResult )
Assert . assertEquals ( expected , HtmlSanitizerUtil . sanitize ( input ) )
assertEquals ( "select entity_0.code, subEntity_1.name from Entity entity_0 inner join entity_0.subEntities subEntity_1" , select . getQuery ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( "generator-set-0.xml" , generatorSet , is ( expected ) )
assertThat ( PlainTimestamp . of ( 2 , 2 , 13 , 35 , 132 ) . normalize ( dur ) , is ( Duration . ofPositive ( ) . years ( 2 ) . months ( 3 ) . days ( 4 ) . build ( ) ) )
assertEquals ( "{\\"@context\\":\\"$metadata#GetEntitySetCountUriInfo(&count=true)\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\"," + "\\"@type\\":\\"RefScenario.EntitySetCountUriInfo(
assertEquals ( javaTimestamp , DateTimeUtil . getMonth ( TEST_DATETIME ) )
Assert . assertEquals ( infoManifestacaoDestinatario , infoEventoManifestacaoDestinatario . getManifestacaoDestinatario ( ) )
Assert . assertNull ( getMetric ( ) . calculate ( getSession ( ) ) )
assertEqualHQL ( "allen love dandan " , sb . toString ( ) )
assertResultSet ( res )
Assert . assertNull ( link . getDescription ( ) )
assertEquals ( 1 , dbHandler . getDataElementCount ( ) )
assertTrue ( organisationSupport . validateOrganisationInProductionMode ( action , organisation ) )
Assert . assertEquals ( new BigDecimal ( "12.3456" ) , value )
Assert . assertNotNull ( asientoRecibido )
assertNull ( ( test . entry ) . getDatabaseName ( ) )
assertThat ( clientBackend . get ( HelloWorldTestService . TEST_KEY ) , is ( "accepted" ) )
assertTrue ( r . isResourceType ( DefaultResourceTypeDefinition . NODE ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertNull ( new RequestImpl ( m ) . selectVariant ( list ) )
assertEquals ( aNumber , result , 1E14 )
assertEquals ( supply1 . getInverse ( ) , supply2 . getInverse ( ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . ORCID_PATENTS_CREATE )
assertEquals ( expected , actual )
assertEquals ( author , result . getCommit ( ) . getAuthorIdent ( ) )
assertEquals ( inputSpace , hyperparameterSpace )
assertEquals ( "qwe" , collector . getMessage ( ) )
assertEquals ( "SELECT a FROM db.g1 INNER JOIN /*+ MAKEIND(MAX:300 no join) */ db.g2 ON a = b" , QueryParser . getQueryParser ( ) . parseCommand ( sql , new ParseInfo ( ) ) . toString ( ) )
assertThat ( target . matchExactly ( action ) , is ( true ) )
assertThat ( commandsIterator . next ( ) , containsString ( bundleExecFlag ) )
arrays . assertDoesNotContain ( description , actual , value , Index . atIndex ( - 1 ) )
assertThatTestCaseObeysOracle ( 0 )
assertEquals ( results1 . size ( ) , results2 . size ( ) )
Assert . assertEquals ( policy1 . getIdentifier ( ) , policy2 . getIdentifier ( ) )
assertTrue ( baseCalendars . baseCalendars . size ( ) == previous )
assertFalse ( hasReset )
assertEquals ( wsos , wsis . getOutputPeer ( ) )
assertThat ( renderer . getShortForm ( entity ) , is ( "rdf:PlainLiteral" ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( padded ( OBJECT_OVERHEAD + BOOLEAN + CHAR + FLOAT + DOUBLE + BYTE + CHAR + INT + DOUBLE + LONG ) , ThreadTrackingContext . getBytes ( ) )
assertEquals ( expected , elements )
assertEquals ( "OK" , rc . post ( "/a02" , "OK" ) . run ( ) . getBody ( ) . asString ( ) )
assertEquals ( "Village_pump_(technical)" , output . get ( 0 ) )
assertEquals ( "12 ���� ��" , t . format ( new Date ( 0 ) ) )
Assert . assertTrue ( jsonEqual ( expResult , EntityFormatter . writeEntityCollection ( entity ) ) )
assertThat ( taskService . createTaskQuery ( ) . taskAssignee ( "demo" ) . count ( ) , is ( 1L ) )
assertEquals ( e1 , e2 )
Assert . assertArrayEquals ( expected , processed )
assertFalse ( timeouts . getTimeout ( AWSTimeouts . DEFAULT_TIMEOUT_MS ) . isPresent ( ) )
assertEquals ( expected , actual )
Assert . assertArrayEquals ( byteArrayStream1 . toByteArray ( ) , byteArrayStream2 . toByteArray ( ) )
assertNull ( result )
assertEquals ( 1 , i )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertTrue ( result . isValid ( ) )
assertThat ( exitStatus , is ( 42 ) )
assertThat ( outcome . getStartTime ( ) . isAfter ( afterDate ) , is ( true ) )
Assert . assertFalse ( deal . isAccepted ( ) )
Assert . assertFalse ( result )
assertEquals ( 0 , actual . size ( ) )
assertThat ( http . getWaitTime ( ) , is ( 0L ) )
Assert . assertEquals ( diffusioncoefficient , result [ 0 ] , 0.1 )
assertEquals ( expected , result )
Assert . assertTrue ( maxAbsDeviation < 1E-3 )
assertEquals ( expectedMessage , result )
TestCase . assertTrue ( new File ( targetDir , "mainTest/results.txt" ) . exists ( ) )
assertEquals ( interactive , interactive1 )
assertOut ( "var /** @type {RegExp} */ a = /test-\\\\d/i" )
assertEquals ( "value" , configSource . getProperty ( "hammock.external.config" ) )
assertNotNull ( "linkList cannot be null" , linkList )
assertNonNullTaint ( MultiTainter . getTaint ( y ) )
Assert . assertEquals ( 1 , sut . getWeekdayCountBetweenDates ( start , end ) )
assertEquals ( 10 , result . getTotalCount ( ) )
Assert . assertNotNull ( cdf )
Assert . assertEquals ( 1 , result )
assertThat ( frontController . processTimeZone ( request ) , is ( TimeZone . getDefault ( ) ) )
assertOutputResult ( "testDump2.result" , new String ( bos . toByteArray ( ) ) , new String [ ] { "${table.timezone}" } , new String [ ] { "${table.timezone}" } )
Assert . assertEquals ( json , writer . toString ( ) )
assertEquals ( 8 , hyperLogLog . cardinality ( ) )
assertThat ( target . equals ( obj ) , is ( false ) )
assertTrue ( ss . contains ( "'123-abc'" ) )
assertThat ( actualResource2 , IsSame . sameInstance ( actualResource ) )
Assert . assertEquals ( false , retval )
assertNotNull ( in )
Assert . fail ( ex . getMessage ( ) )
assertFalse ( Files . exists ( file ) )
assertFalse ( result . isPresent ( ) )
assertThat ( domain . getSpec ( ) . isLogHomeEnabled ( ) , is ( false ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\" ?>\\n" + "<job name=\\"testXml\\" method=\\"post\\">\\n" + "    <description>description</description>\\n" + "
Assert . assertEquals ( "THIS IS PARTA!!!" , 2 , z . getUlong ( ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "Patient.names.required.given.family" ) )
assertEquals ( "___DRI" , properties . getRepositoryLocation ( ) )
Assert . assertSame ( configuration , RobeHibernateBundle . getInstance ( ) . getConfiguration ( ) )
assertEquals ( "The sequence number of the recoverd.edits and the current edit seq should be same" , lastestSeqNumber , editCount )
assertFalse ( products . isEmpty ( ) )
assertTrue ( expectedOrder . isOrdered ( toSort ) )
assertEquals ( 11 , rs . get ( 0 ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfAnnotationReplaceText.pdf" , sourceFolder + "cmp_xfdfAnnotationReplaceText.pdf" , destinationFolder , "diff_" ) )
assertEquals ( s , sb . toString ( ) )
assertBeanValidation ( json , "start_date may not be null" )
assertTrue ( ci1 . getValue ( series . getEndIndex ( ) ) . doubleValue ( ) < LOW_CHOPPINESS_VALUE )
assertEquals ( "Expected 0 results!" , 0 , count )
assertEquals ( 2 , Double . parseDouble ( builder . toString ( ) ) , 0 )
assertNotNull ( "Task is null" , entity )
context . assertIsSatisfied ( )
assertThat ( predicate . test ( Integer . class ) , is ( true ) )
Assert . assertEquals ( "test1, test2" , string )
assertDelivered ( q , 0 )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
assertThat ( html , containsString ( "a\\nb\\nc" ) )
assertTrue ( value [ 0 ] > 0 )
Assert . assertEquals ( run1 , run2 )
assertThat ( gitClient . getRemoteSymbolicReferences ( repoRoot . getAbsolutePath ( ) , Constants . HEAD ) . keySet ( ) , hasSize ( 0 ) )
assertEquals ( 2 , m . keySet ( ) . size ( ) )
assertEquals ( HttpStatusCode . NOT_IMPLEMENTED . getStatusCode ( ) , response . getStatusCode ( ) )
assertEquals ( wayLessInEuros , actualValue )
assertEquals ( guid , new GuidTypeNode ( testBinaryReaderBuilder . putGuid ( guid ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) )
assertTrue ( a1 . compareTo ( a2 ) < 0 )
assertEquals ( new NormalVersion ( new String [ ] { "1.0.0" } ) , version )
assertEquals ( "newLable" , updatedNode . getVersionLabel ( ) )
assertEquals ( allMethods , allMethods1 )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertNotNull ( context . getBean ( "snsOutboundGateway.snsExecutor" , SnsExecutor . class ) )
assertIsNotIdentity ( transform )
assertEquals ( inMap , map )
assertTrue ( success )
Assert . assertEquals ( expectedURL , attr . get ( "xlink:href" ) )
assertNull ( clazz )
assertFilesPresent ( singleSpecification . getPath ( ) )
assertArrayEquals ( new int [ ] { 1 , 1 , 1 , 1 , 1 } , difference )
assertEquals ( "Samsung Galaxy" , galaxy . getPrefLabel ( ) )
assertEquals ( "read link" , linkName , volume . readLink ( userCredentials , linkName ) )
assertEquals ( object1 . getId ( ) , object2 . getId ( ) )
Assert . assertEquals ( results , importer . getAdm ( query ) )
assertEquals ( expected , actual )
assertEquals ( "folder1/folder2/resource-99ef8ae827896f2af4032d5dab9298ec86309abf.css" , result )
Assert . assertEquals ( 2 , operation . operations . size )
Assert . assertEquals ( violations . size ( ) , 0 )
Assert . assertFalse ( "The handler should not have been initialized" , TestHandler . INITIALIZED )
assertEquals ( expecetedTableName , builtTableName )
assertEquals ( "<p>Hello <em>there</em> <em>now</em></p>" , doc . body ( ) . html ( ) )
Assert . assertEquals ( expected , MustacheTemplatePrefixExpander . expand ( input ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertNoCause ( "value of: myObject.child\\nmessage" )
Assert . assertEquals ( EntityConfig . NOT_FOUND , ec )
assertNotNull ( output )
assertThat ( s . getValue ( ) , is ( minValue ) )
assertEquals ( 1 , $ ( mycustomlabel . class ) . all ( ) . size ( ) )
context . assertIsSatisfied ( )
assertEquals ( pp . getValue ( ) , new Payload < > ( "2 final" ) . getValue ( ) )
assertTrue ( got . contains ( "Deleted service account:" ) )
assertThat ( actual , is ( existingContent ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoFormaPagamento ( ) . toString ( ) )
context . assertEquals ( "€" , buf . toString ( ) )
assertThat ( cut . apply ( select ) , is ( false ) )
assertEquals ( "<!-- � � -->" , doc . body ( ) . html ( ) )
assertEquals ( "the artifact must be downloaded" , true , new File ( localRepo , "ant/ant/1.5.1" ) . exists ( ) )
assertTrue ( p . isWriteable ( Object . class , null , null , null ) && p . isWriteable ( String . class , null , null , null ) && p . isWriteable ( StreamingOutput . class , null , null , null ) )
assertEquals ( list , result )
assertTrue ( filter . isCalled ( ) )
assertContains ( e . getMessage ( ) , "'id'" )
assertThat ( cut . apply ( pageObject ) , is ( true ) )
assertNull ( actualObj ( ) . get ( "mykey" ) )
assertNotNull ( "Valid class must be returned" , factory . getSerializer ( LongWritable . class ) )
assertEquals ( "https://api.tinify.com/portal/user" , user )
assertEquals ( schema , openAPI . getComponents ( ) . getSchemas ( ) . get ( "Schema" ) )
assertThat ( grid . getDataCommunicator ( ) , sameInstance ( specificDataCommunicator ) )
assertEquals ( expected , uri . getRawPath ( ) )
Assert . assertEquals ( "P4ssW0rD" , obj . getPassword ( ) )
assertStreamEquals ( expectedBackoffs , backoffs )
assertNotNull ( doc )
Assert . assertEquals ( server , result . getFirstHeader ( "Server" ) . getValue ( ) )
assertTrue ( loadingTypes . apply ( Triple . ALL ) )
assertTrue ( ! result )
assertEquals ( sensorType , header . getSensorType ( ) )
assertEquals ( 0 , result . numFindings ( ) )
assertTrue ( result . equals ( "sign doc verify" ) )
assertTrue ( "no exception was thrown" , exception )
assertThat ( arbitraryObject , should ( matcher ) . inCase ( itemToMatchCondition , condition ) )
assertTrue ( "Init failed" , net . isNestedNetwork ( n1 . getId ( ) ) )
assertEquals ( 1 , orgUnits . size ( ) )
Assert . assertTrue ( s . startsWith ( "No message will be sent to " ) )
assertThat ( definition . dataTableType ( ) . transform ( emptyTable . asLists ( ) ) , is ( asList ( asList ( "converts_table_cell_to_string=a" , "converts_table_cell_to_string=b" , "converts_table
assertEquals ( expResult , result )
assertEquals ( expected , actual )
Assert . assertNotNull ( result )
assertNotNull ( getRealm ( ) )
Assert . assertEquals ( "<!--james-->" , stringWriter . toString ( ) )
assertEquals ( frameData . hashCode ( ) , frameDataAgain . hashCode ( ) )
assertHelpLines ( "Option    Description" , "------    -----------" , "--apple              " , EMPTY )
assertTrue ( ! result )
assertEquals ( false , result )
assertEquals ( 0 , coverage . getHashLength ( ) )
Assert . assertEquals ( "test/path/test" , value )
assertEquals ( "token 1\\n" , found )
assertEquals ( value , actualValue )
assertTrue ( "Incorrect mapping of variable to send to peer" , actual . indexOf ( "variable: var1=value1\\r\\nvariable: var2=value2\\r\\n" ) >= 0 )
assertEquals ( Arrays . asList ( "com.module1" , "com.module1/module2" ) , complete ( "co" ) )
assertEquals ( expected , members )
assertSuccess ( result )
Assert . assertTrue ( response . contains ( "<ack>Success</ack>" ) )
assertEquals ( "{ \\"field name\\" : { \\"$bitsAllSet\\" : \\"?\\" } }" , filterParameters . toString ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expResult , result )
assertEquals ( "Stromgol" , lastName )
Assert . assertArrayEquals ( encodedValue , byteOutputStream . toByteArray ( ) )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "shouldInPriceDescOrder.json" , result )
assertNull ( page . getEvaluation ( ) )
assertFalse ( valid )
assertEquals ( "1" , o )
assertTrue ( plot . getDomainMarkers ( 99 , Layer . FOREGROUND ) . contains ( xMarker1 ) )
assertThat ( result . replaceAll ( "\\\\s+" , "" ) , equalTo ( expectedOutput . replaceAll ( "\\\\s+" , "" ) ) )
assertEquals ( new RetrieveImagingDocumentSet ( ) , result )
Assert . assertTrue ( urlResponse . status == 401 )
assertEquals ( future , underTest . collect ( futures , collector ) )
assertEquals ( expResult , result )
assertEquals ( "Iterator is wrong" , Arrays . asList ( columns . iterator ( ) ) , columnList . iterator ( ) )
Assert . assertEquals ( 3 , ( boolean ) equalsMethod . invokeExact ( mapBlock , null ) )
assertAllCommandsUsed ( )
assertEquals ( 9 , author . getId ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "Expected 3 results!" , 3 , n )
Assert . assertNotNull ( jis . getManifest ( ) )
assertEquals ( "one thousand and thirty-one" , actual )
assertTrue ( called . compareAndSet ( false , true ) )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'true',h:'123'}" , r )
Assert . assertTrue ( propsMap . size ( ) == 0 )
assertNull ( value . getValue ( 99L ) )
assertTrue ( "syntax should still be in the registry after delete failure" , getSyntaxRegistry ( ) . contains ( OID ) )
assertEquals ( selector1 . hashCode ( ) , selector2 . hashCode ( ) )
assertEquals ( NFLDR + 1 , docs ( ) )
assertEquals ( 0 , address )
assertEquals ( cleanText ( handler . getOutput ( ) ) , result )
assertThat ( array2 , equalTo ( new long [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) )
assertNotNull ( td )
assertTrue ( rowsRead . execute ( ) )
assertEquals ( OTHER_GRAPHITE_URL , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( expected , exts )
Assert . assertEquals ( 1 , f . evaluate ( null ) . intValue ( ) )
assertEquals ( "test value" , mongoStore . get ( name , sessionId , String . class ) )
assertEquals ( "Incorrect string written" , "This is a test string" , sw . toString ( ) )
assertEquals ( "failed to generate abstract class with abstract methods" , CLASS_WITH_ABSTRACT_METHODS , cls )
Assert . assertEquals ( "Result is not 42" , new Integer ( 42 ) , o )
assertTrue ( "Must have a writeble ledgerDir" , writeDirs . size ( ) > 0 )
assertEquals ( pattern [ 1 ] , result )
assertEquals ( "om 3 uger" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertEquals ( expected , array . toString ( ) )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
assertThat ( value . getLeft ( ) , is ( "1800" ) )
assertEquals ( "3 谐芯写懈薪懈 �芯屑�" , t . format ( new Date ( 0 ) ) )
assertEquals ( "incorrect number of mappings found for nhsno" , 2 , userMappings . size ( ) )
assertNotNull ( result )
assertEquals ( 1 , results . size ( ) )
assertEquals ( - 1 , t . indexOfUnquoted ( str , ">>" ) )
arrays . assertContains ( description , actual , other )
assertEquals ( "text" , componentState . getFieldValue ( ) )
assertTrue ( verifier . verify ( input ) )
assertEquals ( r1 , r2 )
assertEquals ( origWriteSet , reorderSet )
assertEquals ( "Hello" , ObjectUtils . quote ( o ) )
maps . assertEndsWith ( someInfo ( ) , actual , emptyMap ( ) )
Assert . assertEquals ( expect_sql , sql )
assertEquals (2011-02-23T14:35:42.005Z" , parsed . toString ( ) )
assertThat ( ids , contains ( locId ) )
assertEquals ( expected , actual )
Assert . assertEquals ( preClusterUuid , afterClusterUuid )
assertEquals ( 0 , clusters . size ( ) )
assertEquals ( 0 , result . size ( ) . intValue ( ) )
assertEquals ( "{\\"foo\\":\\"bar\\",\\"grandchild\\":{}}" , result . toString ( ) )
Assert . assertEquals ( uuid , uuid2 )
assertTrue ( aNumber == Double . POSITIVE_INFINITY )
assertEquals ( "java.lang." , t . getCompilationUnitPackage ( ) )
assertEquals ( "True has to be returned in this case" , replication , inf . getBlockReplication ( ) )
assertEquals ( seaCloudsApplicationData . getToscaDam ( ) , seaCloudsApplicationDataById . getToscaDam ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( expectedText , testText )
Assert . assertEquals ( new TransactionIdentifier ( object ( ) . getIdentifier ( ) , null ) . getHistoryId ( ) , clientSnapshot . getIdentifier ( ) . getHistoryId ( ) )
assertThat ( answer , allOf ( containsString ( "Michail" ) , endsWith ( "invocationId was 123" ) ) )
assertEquals ( first , ( ( BasicMonthViewUI ) monthView . getUI ( ) ) . getFirstDisplayedMonth ( ) )
assertThat ( selectionModel . getSelectedClass ( ) , is ( Optional . empty ( ) ) )
assertResourceHasMapRepresentationWithProperty ( "key" , "" )
Assert . assertArrayEquals ( doubleArray , decompressedArray . array ( ) , 0.0000001 )
assertEquals ( exp , zF )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
Assert . assertEquals ( Double . toString ( x ) , expected , actual , tol )
assertTrue ( configurationDeserialized )
assertEquals ( 404 , response . getStatus ( ) )
Assert . assertEquals ( "password" , codec . decode ( "70617373776F7264" ) )
assertNotNull ( Reservation . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( 3 , deleter . deletedVersions . size ( ) )
Assert . assertEquals ( 1 , model . getId ( ) . intValue ( ) )
assertEquals ( TimeValue . ofSeconds ( 10 ) , impl . getFreshnessLifetime ( entry ) )
arrays . assertStartsWith ( description , actual , newArray ( true , false ) )
assertThat ( os , instanceOf ( Slf4jOutputOutputStream . class ) )
Assert . isTrue ( parent . getChildrens ( ) . size ( ) > 0 )
assertThat ( violations . size ( ) , is ( 1 ) )
Assert . assertFalse ( item . matches ( divNode ) )
Assert . assertTrue ( "no users returned" , users . size ( ) > 0 )
Assert . assertEquals ( retirada , notaInfo . getRetirada ( ) )
assertEquals ( assertion , prepend )
assertTrue ( wordLineCounts . get ( "." ) . firstObject ( ) == 6 )
assertEquals ( singletonList ( SimpleClass . class ) , actual )
assertEquals ( "[Object released]" , v8Object . toString ( ) )
assertEquals ( ace , parsed )
assertThat ( document . execute ( ) . isEmpty ( ) , is ( false ) )
assertTrue ( mapper . getConfiguration ( ) . get ( HIHOConf . INPUT_OUTPUT_DELIMITER ) instanceof ',' )
assertEquals ( "" , data . getData ( ) )
assertNull ( contextResult )
assertEquals ( "42" , method . invoke ( foo ) )
assertEquals ( 16 , memo . get ( 2 ) . intValue ( ) )
assertNumberOfViolations ( constraintViolations , 0 )
assertEquals ( value , testee . resolveExpressions ( value ) )
assertTrue ( writeLatch . await ( 5 , TimeUnit . SECONDS ) )
assertThat ( result , is ( "1.7" ) )
assertEquals ( "hello" , function . execute ( "hello" ) )
assertThat ( sut . getTotalPrice ( ) , is ( 1d ) )
assertThat ( HiveObjectUtils . getParameter ( table , AVRO_SCHEMA_URL_PARAMETER ) , is ( "test" ) )
assertEquals ( newHashSet ( "hello" , "world" ) , result )
Assert . assertEquals ( 16 , result )
assertIdentical ( "/simple_materializing.owl" , reasoned )
assertEquals ( "{\\"id\\":123,\\"name\\":\\"Arthur Dent\\"}" , getStringFromInputStream ( in ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 3 , warnings . size ( ) )
assertEquals ( "123,456" , response )
assertThat ( IntegerUtil . toPrimitiveInt ( i ) , is ( 1 ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , firstOutbound )
assertEquals ( 5 , i )
TestCase . assertTrue ( result )
assertEquals ( "The value is not correct." , DecimalUtils . toDecimal ( date . toEpochSecond ( ) , date . getNano ( ) ) , value )
assertProcessInstanceFinished ( processInstance , ksession )
assertEquals ( new Sequence ( 2015 , 0 , 20 ) , sequence )
assertThat ( err . isPresent ( ) , is ( false ) )
assertEvent ( "org/osgi/framework/ServiceEvent/REGISTERED" , FilterUtils . eq ( "service.objectClass" , "org.knowhowlab.osgi.testing.it.testbundle.service.Echo" ) , 2 , TimeUnit . SECONDS )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_UNBOXING ) )
assertNull ( descriptor )
assertTrue ( "isRandomBranchNameAllowed should return true" , BranchUtils . isRandomBranchNameAllowed ( randomBranchName ) )
assertTrue ( isHoliday )
assertEquals ( args , ImmutableList . of ( "-y" , "-v" , "error" , "-i" , "input" , "-s" , "320x240" , "output" ) )
Assert . assertEquals ( "Hello World!\\nHello World!\\nHello World!\\n" , text )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
Assert . assertFalse ( isValid )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "stuff\\"more\\";stuff" , result )
assertEquals ( expected , result )
Assert . assertEquals ( Permission . NO , providerPermission )
assertTrue ( found )
assertEquals ( OptionalLong . empty ( ) , queue . checkTimeout ( ticker . read ( ) ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( "((hello == 'stringgoodbye') and (key1 == 'boolean1'))" , jexl )
assertEquals ( 1 , classes . size ( ) )
assertEquals ( REVERSE , reversedString )
assertEquals ( 6.1234 , mhu . getAbsoluteHumidity ( ) , 0.1 )
spliterators . assertHasCharacteristics ( INFO , actual , DISTINCT )
assertEquals ( 0 , lintresult . getIssues ( ) . size ( ) )
assertEquals ( actualCountPostsToTopicsInFBranch , listCountPostsToTopicsInFBranch )
assertEquals ( ModelState . DRAFT . getName ( ) , savedModel . getState ( ) )
assertFalse ( frameData . equals ( "8" ) )
assertEquals ( "wrong tree" , expected , parser . getParseTree ( ) )
assertEquals ( "notNull()" , buffer . toString ( ) )
assertEquals ( "stream: input" , IOUtils . toString ( result ) )
Assert . assertEquals ( i , obj )
assertEquals ( "JSON serialization is wrong" , json1 , json2 )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "[Test] expecting elements:\\n<['Leia']>\\n of \\n<['Yoda', 'Luke', 'Leia']>\\n to be <a Jedi>" , message )
assertFalse ( filter . allow ( event , listener ) )
assertSingleNotificationType ( EventType . FAILED_AUTHENTICATION )
Assert . assertEquals ( 0. , analyser . getTimeWindowViolation ( route ) , 0.01 )
Assert . assertTrue ( content . contains ( "imports-cleaner" ) && content . contains ( "src" ) )
assertTrue ( g1 instanceof PublicCloneable )
assertThat ( unmarshal ( sb ) , hasEntry ( "excluded key" , "retained mdc value" ) )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( expected , actual )
assertEquals ( VisitStatus . RESERVE_TREE , visit ( node ) )
Assert . fail ( "Exception should be Thrown" )
assertFalse ( connection . isConnected ( ) )
assertEquals ( kv1 , kv2 )
assertEquals ( "demo" , new String ( m . magic ( ) ) )
Assert . assertTrue ( true )
assertXPathEquals ( before , result )
Assert . assertSame ( "Same request was not returned as expected." , request , request2 )
assertTrue ( err . contains ( "No such user" ) )
assertEquals ( "doc" , result . get ( RETURN_RESULT ) )
assertEquals ( 0 , timestamps . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
assertNotNull ( result )
assertEquals ( DecisionTableInterpreter . class . getName ( ) , LivingDoc . getInterpreter ( "Calculate" ) . getClass ( ) . getName ( ) )
responseObserver . assertThatNoErrors ( )
assertEquals ( N , a . length ( ) )
assertEquals ( new Date ( nowDate ) , job . getNextRun ( ) )
Assert . assertTrue ( downlodedFile . exists ( ) )
assertCustomerWithLinksSample ( )
assertSqlCanBeParsedAndDeparsed ( stmt , false , parser -> parser . withSquareBracketQuotation ( true ) )
assertThat ( threads . size ( ) , is ( 1 ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" + "<fields templateEngineKind=\\"Velocity\\" >" + "<description><![CDATA[A description...]]></description>" + "<field name=\\"de
assertTrue ( result instanceof RawRequestSourcePreProcessor )
assertTrue ( Math . abs ( total - MIN ) < MAX )
assertEquals ( "Wrong class" , CLS_NAME , ConfigurationUtils . loadClass ( CLS_NAME ) . getName ( ) )
assertEquals ( expectedTokens . get ( i ) , token )
assertThat ( systemOutRule . getLog ( ) , containsString ( "test help" ) )
assertTrue ( buf instanceof CompositeBuffer )
assertTrue ( "The content-type is not correct" , contentType . getValue ( ) . contains ( expectedformat . getContentType ( ) ) )
assertEquals ( "DotCi" , username )
assertOrder ( true , query ( ) . sortAscending ( "one" ) )
assertEquals ( "3 ��� ��" , t . format ( new Date ( 0 ) ) )
assertThat ( unmarshal ( sb ) , hasEntry ( HACK_ATTEMPT , "some value" ) )
assertFalse ( data . isExceptionAtThisTime ( ) )
Assert . assertNotNull ( order )
assertThat ( dialect , instanceOf ( PostgreSQLDialect . class ) )
assertEquals ( expectedDateTime , parsedTime )
Assert . assertNotNull ( objectNode )
Assert . assertEquals ( "/300" , result )
Assert . assertTrue ( "Details row should match" , result . indexOf ( "test" ) >= 0 )
assertEquals ( ( byte ) 255 , result )
assertEquals ( expResult , result , 0.0 )
assertEquals ( "This   has  name.pdf" , new PrefixTypesChain ( prefix ) . process ( prefix , nameRequest ( "bookmark_name" ) . originalName ( "name.pdf" ) . bookmarkName ( "name.pdf" ) . text ( "  This
assertEquals ( "test" , echo . echo ( "test" ) )
assertArrayEquals ( packet , Handshake . loadFromPacket ( packet ) . toPacket ( ) )
Assert . assertEquals ( "correctreplacement.appendix" , result )
assertEquals ( "GBP 0.93" , test . toString ( ) )
assertEquals ( "transaction TX:sessionId:99 sessionId BEGIN unique-qualifier 100\\r\\n" , new String ( buf . array ( ) ) )
assertEquals ( "Should have 4 players" , 4 , players . size ( ) )
assertEquals ( 3 , resetCount )
Assert . assertEquals ( 1 , actionService . list ( ) . size ( ) )
assertEquals ( 5l , d . asInt8 ( ) )
assertEquals ( expResult , result )
assertEquals ( JulianDate . of ( 2012 , 6 , 23 ) , test )
assertEquals ( WsAgentHealthStateDto . Status . NOT_FOUND , result . getStatus ( ) )
assertNotNull ( test )
assertEquals ( WebDriverTargets . window ( "test" ) , targetLocator . getCurrentTarget ( ) )
assertThat ( HtmlFormEntryUtil . getFullNameWithFamilyNameFirst ( name ) , is ( "Mr. Mark, Mr.Brutus, de. Cameroon, Smith, Jr.Esq." ) )
assertTrue ( v1 . compareTo ( v2 ) < 0 )
assertEquals ( "http://example.com/fhir/Patient?name=james" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertResultSetOrderAgnostic ( resultSet , expectedRows )
Assert . assertEquals ( expected , s , 1e-15 )
assertEquals ( "Unexpected primary style name" , "v-form-layout" , state . primaryStyleName )
assertFalse ( conv . canConvert ( SubTriggerContext . class ) )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( expected , actual )
assertFalse ( service . publish ( "message" ) )
assertEquals ( Math . sqrt ( 18 ) , FrontUtils . distanceToClosestPoint ( point2 , front ) , EPSILON )
assertEquals ( object . booleans , result . booleans )
assertProcessInstanceCompleted ( processInstance )
assertTrue ( true )
Assert . assertEquals ( "Go to <a href=\\"http://www.company.com/\\">http://www.company.com/</a> <br>Enjoy!" , value )
Assert . assertEquals ( expectedMul , multiplied )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertEquals ( "<blah>b</blah>" , result . toString ( ) )
Assert . assertEquals ( "name" , field . getName ( ) )
assertEquals ( expResult , result )
assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.simplefileio.runtime.SimpleFileIODatasetRuntime" ) )
assertThat ( responseWithPath , is ( EXPECTED_CONTENT ) )
assertEquals ( snapshot , lastEscalation . getSnapshot ( ) )
assertEquals ( "repoName" , op . repo )
assertNotNull ( "calendar must be invariant to monthView" , calendar )
assertEquals ( Sets . newHashSet ( "ru.kfu.itis.cll.uima.commons.DocumentMetadata" , "ru.kfu.itis.issst.evex.Person" , "ru.kfu.itis.issst.evex.
assertNotNull ( cb . getLabelElement ( ) . getAttribute ( "class" ) )
assertDataFrame ( frame , streamId , false , data )
assertTrue ( graphElementMock . getGraphIds ( ) . isEmpty ( ) )
assertEquals ( y , pradf . getNextLineOffset ( x ) )
assertFalse ( instance . validate ( file ) )
Assert . assertEquals ( mockA , a1 )
assertEquals ( 12 , jpegBitsPerSample ( "test16signed-J2KI.dcm" ) )
Assert . assertEquals ( "word\\tlemma\\ttag" , Files . toString ( outFile . toFile ( ) ) . trim ( ) )
Assert . assertNotNull ( "null result from rule execution" , result )
assertThat ( rendering , is ( "Two days ago" ) )
assertEquals ( "{\\"store\\":{\\"book\\":[{\\"category\\":\\"reference\\",\\"author\\":\\"Nigel Rees\\",\\"title\\":" + "\\"Sayings of the Century\\",\\"price\\":8.95},{\\"category\\
assertThat ( formatter . parse ( "April, Heisei 29" ) , is ( expected ) )
assertStoppedEventOnValidValue ( table , 0 , throwOnEmpty , false )
assertTrue ( failure . cause ( ) instanceof ShutDownException )
assertEquals ( post . getUnsubscribeLinkForSubscribersOf ( TopicSubClass . class ) , "/topics/1/unsubscribe" )
Assert . assertTrue ( copyFrom . equals ( builder . offset ( 11 , 10 ) . build ( ) , EqualCondition . COLUMN_WIDTH ) )
assertEquals ( new BigDecimal ( "19.00" ) , maximum )
assertBeanValidation ( json , "query.metric[0].aggregators[0].percentile may not be zero" )
ImgLib2Assert . assertIntervalEquals ( new FinalInterval ( size ) , imgFactory . create ( size ) )
assertEquals ( Arrays . asList ( mockPath ) , modulePathIds )
assertNotNull ( s )
Assert . assertFalse ( ipList . isEmpty ( ) )
assertEquals ( 6d , dt . intValue ( ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 2 , two . intValue ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , not ( hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) ) )
assertThat ( dialect . addOptimizerHints ( sql , hints ) . toString ( ) , is ( "SELECT /* SQL_ID */" + System . lineSeparator ( ) + " * FROM PUBLIC.TEST_1" + System . lineSeparator ( ) + " USE INDEX (test1_ix, test2
Assert . assertNotNull ( list )
assertFalse ( cs . communicationAllowed ( ) )
assertThat ( orders , is ( equalTo ( expected ) ) )
assertSame ( attr , forward . getAttributes ( ) )
Assert . assertTrue ( true )
assertTrue ( "audit should contain change of institutionsCountries" , msgs . get ( 0 ) . getMessage ( ) . contains ( "friendlyName=<institutionsCountries>" ) )
assertEquals ( "Outer class instance variable is 779" , 779 , ret )
assertSame ( expected , result )
assertEqualsIgnoreWhitespace ( expected , drl )
assertEquals ( expResult , result )
assertThat ( query . tenantIdIn ( TENANT_ONE ) . count ( ) , is ( 1L ) )
arrays . assertDoesNotContain ( description , actual , other )
assertThat ( anyTS . getMinimum ( MILLI_OF_SECOND ) , is ( 0 ) )
Assert . assertEquals ( msg , expected , actual , delta )
assertNull ( result )
assertEquals ( "predicate names not recorded properly in grammar" , expectedPreds , preds )
assertTrue ( matcher . find ( ) )
assertThat ( driver . getCurrentUrl ( ) , is ( wsr . getBaseURL ( ) + "/index.html?x=a" ) )
assertEditorClosed ( )
assertFalse ( branch . getSubscribers ( ) . contains ( user ) )
assertEquals ( 1 , executeSolrQuery ( "firstname_s:John lastname_s:Doe" ) . size ( ) )
assertFalse ( validator . validate ( Meta , POST ) . passedValidation ( ) )
assertEquals ( 0 , esperEventProcessor . getEventTypeAttributes ( ) . size ( ) )
assertNotNull ( result )
assertEquals ( true , deadClient . getClient ( ) . isBroken ( ) )
assertEquals ( String . valueOf ( i ) , masterJedis . get ( key ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( captor . getValue ( ) . isBypass ( ) , is ( true ) )
assertEquals ( 0 , highest )
assertEquals ( pbs , pbs2 )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "2012-08-09 28:00:00" , runtime )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertTrue ( errors . hasGlobalErrors ( ) && errors . getGlobalError ( ) . getCode ( ) . equals ( PermissionsValidator . ERROR_CODE_EMPTY_SELECTED_IDS ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 3456.098F , r )
Assert . assertNotNull ( dbRangerServiceList )
Assert . assertNotNull ( exception )
assertEquals ( 0 , imports . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertThat ( notifier . notify ( notice ) , is ( 200 ) )
assertEquals ( Sets . newHashSet ( role1 , role2 ) , sentryStore . getRolesByGroups ( SEARCH , twoGroups ) )
assertThat ( issues , is ( empty ( ) ) )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertEquals ( FilterReply . NEUTRAL , filter . decide ( event ) )
assertTrue ( "Handler wasn't run" , ran . get ( ) )
assertThat ( references . size ( ) , equalTo ( 0 ) )
assertEquals ( streams , streamsName )
assertTrue ( envVars . size ( ) == 0 )
assertThat ( table . toString ( ) , is ( String . format ( "TinyTables[size=3]\\n%n" ) ) )
assertEquals ( context , classLoaderContextStr . get ( ) )
assertExec ( "Classes name of super interface" , Classes . class , "superInterface__Ljava_lang_String_2Ljava_lang_String_2" , exp )
assertEquals ( 1L , result )
assertEquals ( 100L , ( Long ) proxy )
assertThat ( goModFromProject , equalTo ( goModAsString ) )
Assert . assertNotNull ( targetHours )
assertEquals ( Arrays . asList ( testWriters . toArray ( ) ) . toString ( ) , Arrays . asList ( Arrays . copyOf ( movie . getWriters ( ) . toArray ( ) , 1 ) ) . toString ( ) )
assertEquals ( alpha , res , 0.01 )
Assert . assertTrue ( "did not find expected error message" , false )
assertFalse ( response . contains ( "ConcurrencyException" ) )
assertEquals ( map1 , map2 )
assertNotNull ( javaxSchema )
assertThat ( result , is ( "def" ) )
Assert . assertFalse ( "foo[a] should not match" , compare . doCompare ( ) )
assertMatchAnyMethodsCalled ( "SFF_0" )
assertEquals ( firstWord , futureWord . get ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( beforeTableName , properties . beforeFormFinishMain ( repo ) )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( 9985358552565094607L , h )
assertTrue ( keyValueTableView . getItems ( ) . size ( ) == 3 )
context . assertIsSatisfied ( )
assertThat ( result . getConnectorId ( ) , is ( nullValue ( ) ) )
assertTrue ( result . contains ( "FOOTER" ) )
assertEquals ( page2 , wizard . navigateToFirst ( ) )
assertEquals ( expected , actual )
Assert . assertFalse ( unsubscribeContext . deleteSubscriptions ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( querys , is ( contains ( Arrays . asList ( "SELECT /* sqlid_test/select_product_custom */" , "\\t*" , "FROM" , "\\tPRODUCT" , "WHERE 1 = 1" , "ORDER BY PRODUCT_ID" ) ) ) )
assertEquals ( "\\"/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~" , encodeStr )
assertThat ( routing . route ( request , "/abc/path" ) , is ( "/abc?path=" + URLEncoder . encode ( "path" , "UTF-8" ) ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( 3 , artifact . getComment ( ) . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 01" ) )
mockery . assertIsSatisfied ( )
assertNotNull ( Sim . reader ( ) . read ( ) )
assertEquals ( expectatedMessage . trim ( ) , e . getMessage ( ) . trim ( ) )
assertEquals ( "prefix_hello_suffix" , template . format ( getResolver ( ) ) )
assertThat ( page1 , is ( not ( page2 ) ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "12.3" ) )
assertThat ( base . thenApplyCaughtFailed ( failedFn , cause ) , is ( new ImmediateFailed < > ( caller , other ) ) )
Assert . assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertFalse ( isMappingModelExists ( ) )
assertEquals ( expResult , result )
assertEquals ( maxSize , cacheManager . getMaximumSizeMB ( ) , 1e-9 )
Assert . assertFalse ( json . has ( DATA_NAME ) )
assertFalse ( constraintValidator . isValid ( Money . of ( 0 , "EUR" ) , null ) )
assertEquals ( exp , act )
assertFalse ( lhs . equals ( rhs ) )
assertNull ( graph )
assertTrue ( readers . toArray ( ) . length > 0 )
assertResult ( "checking multiple root branches with no skip" )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertThat ( t , matchesKey ( "(" ) )
assertEquals ( token . serialise ( ) , result . serialise ( ) )
assertEquals ( true , result )
assertTrue ( url + ": " + dataURL . toString ( ) , dataURL . isValid ( ) )
TestUtils . assertEquals ( "preMultiply(Vector) returns wrong result" , diagResult , denseResult , 0d )
assertThat ( e . hasMoreElements ( ) , is ( false ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertSame ( expected , result )
assertEquals ( Status . OK , status )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testTagValue.json" ) ) )
assertTrue ( join . getWindowing ( ) instanceof Time )
assertEquals ( val . getDiscountRate ( ) , Rate . of ( 0.03 ) )
Assert . assertEquals ( expected , actual )
assertEquals ( tempFileName , appender . getFileName ( ) )
assertEquals ( Constants . CT_FHIR_XML_NEW , ourContentTypes . get ( 0 ) )
assertEquals ( expected , actual )
assertEquals ( "Date parsed by DateParser(\\"dateLong\\")" , dateToCompare , date )
assertEquals ( dataQuality . get ( p2 ) , params . get ( p1 ) , 0.05 )
assertListTEquals ( listT , 42 , 24 )
assertNotNull ( tf )
assertThat ( encoded , stringContainsInOrder ( "{" , "\\"resourceType\\": \\"Patient\\"," , "\\"contained\\": [" , "{" , "\\"resourceType\\": \\"Condition\\"," , "\\"id\\": \\"1\\"" , "}" , "]," , "\\"extension
assertMockEndpointsSatisfied ( )
assertEquals ( expected , builder . buildUssdStreamEvent ( expected ) )
assertEquals ( null , def )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( 5 , tuple . len ( ) )
editor . assertProblems ( "%Y<*>\\n" + "#leading comment\\n" + "---\\n" + "resources:\\n" + "- name: my-repo\\n" + "  type: git\\n" + "  source:\\n" + "    uri
assertEquals ( Date . valueOf ( 0 ) , toml . getDate ( "d" , Date . valueOf ( 0 ) ) )
Assert . assertEquals ( ImmutableList . of ( ThresholdFilterHeaderExtender . FILTER_GT_MIN_GQ ) , annotator . getFiltersFor ( gt ) )
assertNotNull ( "Unread messages are not null" , messages )
assertEquals ( 500 , page . getWebResponse ( ) . getStatusCode ( ) )
assertThat ( request , is ( request2 ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
Assert . assertEquals ( getClass ( ) . getPackage ( ) . getName ( ) , packageName )
assertFalse ( next )
assertEquals ( "BAR" , options . syntaxModule ( ) )
assertUpdatedVasyaAndPetya ( all )
assertTrue ( domain , domain . contains ( "Horizontal component of 3D system" ) )
Assert . assertTrue ( resources . getResourceNames ( ) . isEmpty ( ) )
assertEquals ( 1 , listing . getChildren ( ) . size ( ) )
assertEquals ( "a composer" , id3v2Tag . getComposer ( ) )
assertTrue ( PolyElement . hasCommonNode ( secondPolyElement ) )
assertFalse ( HttpMessageUtils . isJson ( message ) )
assertEquals ( "savePreferences after column changed" , true , simpleTable . savePreferences ( ) )
assertEquals ( 1 , list . size ( ) )
Assert . assertEquals ( expectedInstanceTypes , instanceTypes )
assertTrue ( h == null )
assertEquals ( 200 , responseEntity . getStatusCode ( ) )
Assert . assertEquals ( "MDC is wrong" , "bar" , mdc . getString ( "foo" ) )
assertTrue ( response . isSuccess ( ) )
Assert . assertFalse ( games . getProperty ( "500006.debug" ) . equals ( "" ) )
scope . assertMetrics ( TestHelper . constructDatum ( "summaryDataName" , StandardUnit . COUNT , 10.0 , 2.0 , 4.0 , 3.0 , MILLISECONDS ) )
assertEquals ( InterpreterResult . Code . ERROR , ret . code ( ) )
Assert . fail ( "should have thrown exception" )
assertEquals ( Sets . newHashSet ( ) , backend . getPrivileges ( Sets . newHashSet ( "not-a-group" ) , ActiveRoleSet . ALL ) )
Assert . assertEquals ( PersistenceState . NOT_PERSISTED . toString ( ) , fileInfo . getPersistenceState ( ) )
Assert . assertNotNull ( authorModel . getProvider ( ) )
assertFalse ( sf . getCache ( ) . containsEntity ( AnnotatedEntity . class , 0L ) )
assertNull ( myDtoClass )
Assert . assertSame ( follower , newBehavior )
assertNotNull ( result )
Assert . assertTrue ( sparkRestClient . killJob ( ) . withSubmissionId ( "driver-20151008145126-0000" ) )
assertThat ( matcher . matchesSafely ( reason ) , is ( false ) )
assertThat ( result , is ( jsonString ( "office" ) ) )
assertEquals ( "?p1=v1&p2=v2" , query . toString ( ) )
Assert . assertEquals ( expected . trim ( ) , output . toString ( ) . trim ( ) )
assertEquals ( Result . PASS , ok . apply ( item ) )
assertEquals ( "REALLY_labelled" , mm . get ( m . expandPrefix ( "p:thing" ) ) )
TestUtils . assertEquals ( new Array2DRowFieldMatrix < > ( testDataPlus2 ) , m . scalarAdd ( Dfp25 . of ( 2 ) ) )
assertArrayEquals ( new String [ ] { "root" } , treeContent )
assertFalse ( "RM never turned active" , - 1 == cluster . getActiveRMIndex ( ) )
assertEquals ( 2 , Iterables . size ( list ) )
assertNull ( x . getValue ( ) )
assertThat ( estimator . getCardinality ( ) , is ( 50L ) )
assertEquals ( ( Byte ) Byte . MAX_VALUE , extractedByte )
Assert . assertEquals ( "A 11." , output )
assertEquals ( "<p><strong>123</strong></p>" , result )
assertEquals ( insets , classUnderTest . getBorderInsets ( mockComponent ) )
rule . assertScenarioEnded ( )
assertEquals ( V8_ARRAY , v8Object . getType ( "key" ) )
assertThat ( queriesString , is ( "type=BasicFlow" ) )
assertThat ( rasterNames , equalTo ( expected ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( expected , actual )
assertSignalEventDefinition ( "end" , "signal" )
assertEquals ( 6 , g . getTopologies ( ) . length )
Assert . assertEquals ( hourToRollup , mockedJobState . getHourToRollup ( ) )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
assertEquals ( 1 , result . getFailures ( ) . size ( ) )
Assert . assertEquals ( TEST_BLOCK_SIZE * 2 , buf . readableBytes ( ) )
assertEquals ( "/topic" , m_callback . getTopic ( ) )
assertTrue ( resultFuture . isDone ( ) )
assertEquals ( "Stratio Decision" , name )
Assert . assertEquals ( 1 , numUdocs )
assertTrue ( "If iframe src does not contain filename " + IframeIsOpenedInNonIOS . FILE_NAME , containsFileIframe )
Assert . assertEquals ( "1: " + logMessage + "\\n" , log )
assertStreamOpenedExactlyOnce ( )
assertContentEquals ( style , Arrays . asList ( "MessagePresenter" , "Hello World" ) )
Assert . assertTrue ( "Expected: 'Hello John Doe' Actual: " + hi . getName ( ) , "Hello John Doe" . equals ( hi . getName ( ) ) )
assertOut ( "var /** @type {string} */ a" )
Assert . assertTrue ( servlet . isDebugMode ( ) )
assertThat ( actionProgress . getActionName ( ) , equalTo ( null ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( 2 , issueTrackerService . getIssueTrackerTasks ( ) . size ( ) )
assertEquals ( suggestedName , hive2DatabaseMeta . generateColumnAlias ( columnIndex , suggestedName ) )
assertEquals ( 5 , fields . size ( ) )
assertTrue ( detail )
assertEquals ( true , cluster . getDataNodes ( ) . get ( 0 ) . isBPServiceAlive ( cluster . getNamesystem ( ) . getBlockPoolId ( ) ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , secondOutbound )
assertEquals ( VersionState . UNCHANGED , toscaDiff . getState ( ) )
assertTrue ( validScrollRange . contains ( getGridVerticalScrollPos ( ) ) )
Assert . assertEquals ( Sets . newHashSet ( "testing-reference-counting" , "testing-reference-counting" ) , takenEvents )
assertEquals ( 1 , branch_conditions . size ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertTrue ( HttpTestUtils . semanticallyTransparent ( originResponse , result ) )
assertSame ( myContextActivity , resolvedContextActivity )
assertNonAccessibleDefaultAccessControl ( result )
assertTrue ( testFailed . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "/" , r . matches ( Collections . < String , String > emptyMap ( ) ) . render ( ) )
assertNotNull ( result )
assertTrue ( result )
assertEquals ( 4. , pickup . getArrTime ( ) , 0.01 )
assertEquals ( ( ( ObjectWithOptions ) options . optOp ) . required , 10101 )
Assert . assertEquals ( createEmbedding ( v0 , e0 , v1 , e1 , v2 , v3 , e2 , v4 , e3 , v5 , e4 , e5 ) , result . get ( 0 ) )
assertEquals ( 20f , w . getValue ( ) , 0.01 )
assertEquals ( tstName , rel . getName ( ) )
assertEquals ( 1 , numOutputs )
Assert . assertEquals ( 3 , popNoeudsToCompare . size ( ) )
assertFalse ( "More than expected readahead timeout" , iterator . hasNext ( ) )
assertServiceResource ( resource )
assertThat ( component . execute ( ) , is ( expected ) )
assertions . doesNotContain ( 'd' , index )
assertThat ( arguments . get ( 0 ) . getValue ( ) , is ( nullValue ( ) ) )
assertEquals ( expResult , result )
assertEquals ( null , vlr . getTripId ( ) )
Assert . assertEquals ( "First Tab\\nSecond Tab\\nThird Tab" , resultPage . getText ( ) )
assertTrue ( "Unexpected cause: " + cause , cause instanceof SocketTimeoutException )
assertTrue ( Futures . getUnchecked ( collector ) )
assertEquals ( jaasConfigService , inputMeta . getJaasConfigService ( ) . get ( ) )
assertEquals ( t , new HttpURL ( s ) . toString ( ) )
assertEquals ( "1" , mustache . render ( new Gson ( ) ) )
assertEquals ( "a" , object . getStringValue ( ) )
Assert . assertEquals ( hmacExpected , hmac )
assertThat ( other , LocalDateTimeMatchers . sameSecondOfMinute ( date ) )
assertEquals ( startTime , Deencapsulation . getField ( jobsParser , "startTime" ) )
assertTrue ( this . reconnectManager . isValidTask ( task ) )
assertEquals ( asList ( 21 , 22 , 33 , 33 ) , list )
assertThat ( server1 , not ( equalTo ( server2 ) ) )
assertEquals ( "public static void main(String[] args) {}" , actualContent )
assertEquals ( 4 , occ . getLocation ( ) . getBeginLine ( ) )
assertTrue ( messageLatch . await ( 1 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "b" , input . getValue ( ) )
assertEquals ( Integer . valueOf ( 2 ) , parseResults . get ( FILE_PATH ) . getHitsByLine ( ) . get ( BRANCH_LINE ) )
Assert . assertEquals ( "true" , "true" )
assertNull ( e . getRenderingEngine ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "[1, 2, 3, 4, 6, 7, 5]" , result . toString ( ) )
assertTrue ( new File ( stitchedProductFileParentDirectory , "target_product_1.nc" ) . exists ( ) && new File ( stitchedProductFileParentDirectory , "viscal_1.nc" ) . exists ( ) )
Assert . assertTrue ( newFileBackedCache . readCacheFile ( ) . length ( ) > 0 )
assertThat ( regExp , equalTo ( UUIDUtil . REG_EXP ) )
assertEquals ( view . asWidget ( ) , presenter . asWidget ( ) )
assertTrue ( lineArgs . isRequestsHelp ( ) )
Assert . assertEquals ( key3 , actual )
assertNull ( nbr1 )
assertEquals ( Boolean . TRUE , result )
assertFalse ( filter . isDetected ( ) )
Assert . assertTrue ( result . isSuccessful ( ) )
assertTrue ( "Chars not written" , new String ( buf , 0 , buf . length ) . equals ( testString ) )
assertLife ( playerA , ANY_LIFE_TOTAL )
assertThat ( decodedValue , is ( actualValue ) )
assertTrue ( logger . isInfoEnabled ( ) )
assertThat ( this . appRegistryService . find ( null , ApplicationType . sink ) . getFoo ( ) , is ( "maven://org.springframework.cloud.stream.app:log-sink-rabbit:1.2.0.RELEASE" ) )
assertEquals ( true , result )
assertEquals ( expected , result , .000001 )
assertThat ( list , ( Matcher ) contains ( new Object [ ] { "1" , "1" } , new Object [ ] { "1" , "1" } ) )
assertEquals ( "bar" , result )
assertEquals ( extractedYAML , expectedYAML )
assertArrayEquals ( new String [ ] { "value1" , "value2" } , strings )
assertEquals ( "[[John], [Jane], [Rocky], [Total]]" , results . toString ( ) )
assertEquals ( Tuple3 . of ( "^foo" , "bar" ) , xtriple ( sf , xint ( ) , xstring ( ) , xfloat ( ) ) . extract ( "foo;bar" ) )
assertNode ( "/" , "mode:root" )
assertEquals ( expectValue , actualValue )
assertEquals ( "BEGIN\\n" + "UPDATE table1 SET a = 'xx' WHERE b = 'condition1';\\n" + "UPDATE table1 SET a = 'xx' WHERE b = 'condition2';\\n" + "END;" , stmts . toString ( ) )
assertEquals ( "&" , unescaped )
Assert . fail ( "Did not throw IllegalStateException because the cached config is not available" )
assertEquals ( "New Test room" , room . getName ( ) )
Assert . assertEquals ( "Exception handled" , response . body )
assertEquals ( expr , printConstraint ( expression ) )
Assert . assertEquals ( Status . OK . getStatusCode ( ) , resp . getStatus ( ) )
Assert . assertEquals ( result_backward_with_cats_and_prefix , result )
assertTrue ( result )
assertTokens ( Tokens . RP , Tokens . RP )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertThat ( arbitratorField . get ( subject ) , instanceOf ( ProxyBuilder . class ) )
assertThat ( role . getCommunicationChannels ( ) . size ( ) , is ( 1 ) )
assertThat ( Util . intValue ( "foo" , scope ) , is ( 42 ) )
assertEquals ( TEST_2007_07_15_PONE , t )
Assert . assertEquals ( expected , filterResult )
assertThat ( target , is ( notNullValue ( ) ) )
assertEquals ( 0 , consumerPrefetch . retriesAttempted )
assertThat ( keyspace . getCqlStatement ( ) , is ( equalTo ( "CREATE KEYSPACE IF NOT EXISTS test WITH DURABLE_WRITES = false" ) ) )
assertThat ( results , is ( Arrays . asList ( "Hello, world!" ) ) )
assertEquals ( arr , dup )
assertEquals ( filterOriginal , filterable . getFilter ( ) )
assertThat ( "generator-set-2.xml" , generatorSet , is ( expected ) )
assertEquals ( 6 , numberOfTicks . calculate ( series , t ) , TATestsUtils . TA_OFFSET )
Assert . assertTrue ( version1 . compareTo ( version2 ) < 0 )
assertEquals ( false , result )
assertThat ( scoping . getEagerSingleton ( ) , is ( true ) )
assertEquals ( "baz/\\n" + "  foo/\\n" + "    bar/\\n" + "      wooz 0 (S_IFREG)\\n" + "    rooz -> bar/wooz\\n" , sw . toString ( )
assertEquals ( NodeValue . FALSE , r )
Assert . assertEquals ( "io.selendroid.testapp.MultipleWebViewsActivity" , driver ( ) . getContext ( ) )
assertEquals ( 1 , executor . getParallelism ( ) )
assertThat ( properties . getPropertyNames ( ) , empty ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Registered alias should be found." , "/testAlias" , OSGiCleanMapper . map ( "/testAlias.html" , true ) )
assertEquals ( - 10. , c , 0.01 )
assertArrayEquals ( new String [ ] { "Wyalusing State Park" , "Mill Bluff State Park" , "Roche-A-Cri State Park" , "Willow River State Park" , "Amnicon Falls State P
Assert . assertEquals ( expected , actual )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "test" , t . name )
assertThat ( fe , notNullValue ( ) )
assertThat ( "String schema" , combined , matches ( new SchemaMatcher ( expected ) ) )
assertEquals ( playlist1 , playlist2 )
assertEquals ( 1 , pagedResult . getTotalPages ( ) )
assertEquals ( 2 , tasks . size ( ) )
assertTrue ( Initialize . checkInit ( fs , sconf , conf ) )
assertFalse ( interfaceType . isPrimitive ( ) )
assertEquals ( "SELECT Account.Id, (SELECT Account.Id FROM ChildAccounts) FROM Account WHERE Account.Name = 'x'" , visitor . getQuery ( ) . toString ( ) . trim ( ) )
assertEquals ( "getSkipLines() did not return SKIP_LINES_DEFAULT" , VariablesFromCSV . SKIP_LINES_DEFAULT , element . getSkipLines ( ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemProduto ( ) . toString ( ) )
TestCase . assertFalse ( attribute . match ( t ) )
Assert . assertNotNull ( appStatsCenter )
assertEquals ( "Expected response not seen." , "No Application" , response )
Assert . assertNull ( "Value should not be found." , value )
assertEquals ( Lists . newArrayList ( Interval . of ( 1 , 3 ) , Interval . of ( 2 , 6 ) , Interval . of ( 8 , 10 ) , Interval . of ( 15 , 18 ) ) , intervals )
assertThat ( read ( format , written ) , contains ( new BigDecimal ( "3.14" ) ) )
Assert . assertEquals ( String . class , clazz )
assertThat ( "should be a problem" , monitor . isProblemWith ( REPO ) , is ( true ) )
assertFalse ( allDbs . isEmpty ( ) )
assertEquals ( newValue , nsae . getValue ( ) )
assertTrue ( checkPoint )
Assert . assertEquals ( StatusCodes . NOT_FOUND , result . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "with SURVEY (ID, NAME) as (select survey2.ID, survey2.NAME\\n" + "from SURVEY survey2)\\n\\n" + "from dual" , q . toString ( ) )
assertThat ( other , DateMatchers . sameSecondOfMinute ( date ) )
assertEquals ( expResult , result )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( 50.0 , wnd . rate ( ) , 0.0001 )
assertThat ( target . matchExactly ( match ) , is ( false ) )
assertThat ( loader . get ( 1 ) , is ( 1 ) )
assertEquals ( "test-index-pattern" , defaultPattern )
assertRequest ( "POST" , "Subaccount/" )
Assert . assertEquals ( 0 , a . length )
Assert . assertEquals ( "Invalid conditions returned" , Arrays . asList ( condTrue1 , condTrue2 ) , orTest . getConditions ( ) )
assertArrayEquals ( aSub . toArray ( ) , bSub . toArray ( ) )
assertThat ( unitsIn ( result ) . size ( ) , is ( 0 ) )
assertEquals ( results . size ( ) , 2 )
assertEquals ( expectedResult , tomcatReinforcement . invoke ( audit ) )
assertEquals ( objects , root )
assertEquals ( "Should return SUCCESS" , "success" , jsonObj . get ( "status" ) . getAsString ( ) )
assertEquals ( true , result )
testContext . assertNull ( returnedExpireValue )
assertEquals ( "" , result . getParameters ( ) . get ( "date" ) . getAsString ( ) )
assertCorrectVariableInitialisation ( new long [ ] { length } , array )
Assert . assertEquals ( a * FastMath . cos ( w * v + p ) , f . value ( v ) , 0 )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REPLACE , v , TERM_FACTORY . getConstantLiteral ( "^Ste(v|ph)en$" ) , TERM_FACTORY . getConstantLiteral ( "" ) ) , translation )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "defaulLabel,defaulLabel" , executeSqlCommand )
Assert . assertThat ( value , hasItem ( remoteRepository ) )
assertThat ( this . url , is ( equalTo ( "/context/dispatcher/method" ) ) )
assertEquals ( IOTester . VALUE_OUT_PAYLOAD , buf . toString ( ) )
assertEquals ( expected , result )
assertEquals ( s3 , unassigned . iterator ( ) . next ( ) )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
Assert . assertEquals ( Sets . newHashSet ( 2 ) , parser . getSecureBindIndices ( ) )
assertEquals ( "{\\"id\\":0,\\"name\\":\\"name\\",\\"meta\\":[{\\"key\\":\\"value\\"},{\\"type\\":\\"string\\",\\"adate\\":\\"datedate\\",\\"meta\\":[{\\"name\\":\\"
assertThat ( view . relativeUrl ( ) , is ( expectedUrl ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertNotNull ( object )
assertEquals ( "Result" , 2 , map . size ( ) )
assertTrue ( "Directory not created" , hasGzippedFile . matches ( files ) )
assertEquals ( actual , service . service ( word0 , word1 ) )
assertTrue ( builder == newBuilder )
assertEquals ( obj . toString ( ) , "PolicyDomainInfo{domainName:\\"Test\\", getSid:[0, 1, Sid:[0, 0, 0, 0, 5], gid:32}" )
Assert . assertEquals ( expected , actual )
assertEquals ( "Status code should be OK" , Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( HttpStatusCode . OK . code , response . getStatus ( ) )
DelegationTestUtil . assertDelegationToSpy ( traceeMessageProducer , queueSender )
assertHeader ( header , name , value )
assertEquals ( ChrisProductReaderPlugIn . class , plugIn . getClass ( ) )
assertEquals ( 2 , context . getTableCount ( ) )
Assert . assertEquals ( 1 , resultsSize ( rc ) )
assertTrue ( processInstance . isEnded ( ) )
assertEquals ( markerName , value )
assertEquals ( expectedExecutionTime , actual )
assertEquals ( "this is test string" , Util . inputStream2String ( new ByteArrayInputStream ( string . getBytes ( Charsets . US_ASCII ) ) ) )
assertEquals ( searchSupportRest , searchSupportResource . getContent ( ) )
assertNull ( activity . getParent ( ) )
assertEquals ( "sekrit" , c . get ( Property . INSTANCE_SECRET ) )
assertThat ( result , equalTo ( false ) )
assertTrue ( elementsEqual ( aEdges , expected ) )
assertThat ( generator , is ( equalTo ( expected ) ) )
assertThat ( resp . statusCode , is ( Response . NOT_FOUND ) )
assertThat ( description . getTitle ( ) , is ( "A step" ) )
assertEquals ( "Wrong mapper found for RuntimeException2" , RuntimeExceptionMapper2 . class , exceptionMapper . getClass ( ) )
assertFalse ( iter . hasTop ( ) )
assertThat ( result , nullValue ( ) )
Assert . assertNotNull ( app )
assertEquals ( 3 , structure . getNumGroups ( ) )
assertNull ( result )
Assert . assertEquals ( null , p . getValue ( ) )
Assert . assertEquals ( "�肩��|灏辫�|��|浜�" , words )
assertEquals ( "$${test}" , p . getCurrentValue ( ) )
assertEquals ( String . class , targetType )
assertEquals ( "00000000" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
assertEquals ( expectedParsedResult , actualParsedResult )
assertNotNull ( "JobSubmission is null" , entity )
assertEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertResponse ( DataMockery . createREQMODWithGetRequestNoBodyResponse ( ) , response )
Assert . assertTrue ( originalId . equals ( packetExternal . getID ( ) ) )
assertTrue ( BitsInt . test ( v , false , 63 ) )
Assert . areEqual ( "1" , hs . get ( "count" ) . toString ( ) , "select count(*) as count from test1 where (test1.colu2 not in('DB_D','DB_E')) and 1=1 " )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertEquals ( "a {\\n" + "  width: 2px;\\n" + "}\\n" , compilation . getValue ( ) )
assertTrue ( AcceptanceTestUtil . isInterested ( component , remoteWorkerStub . getDeploymentID ( ) . getServiceID ( ) , rmwOD . getDeploymentID ( ) ) )
Assert . assertEquals ( "(nt_change_substitution (nt_point_location (nt_base_location (nt_number 123))) c (nt_point_location (nt_base_location (nt_number A))))" , nt_change_substitution . toStringTree ( parser
assertEquals ( vr . getValidity ( ) , Validity . VALID )
assertArrayEquals ( new long [ ] { 5 } , result )
assertEquals ( "myTestId" , history . getId ( ) . getIdPart ( ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( "Wrong class" , MATCH_CLASS , provider . determineConfigurationClass ( decl , Collections . singleton ( params ) ) )
assertEquals ( name . getName ( ) , request . getLogName ( ) . getName ( ) )
Assert . assertEquals ( 2 , ( int ) person . getPersonAttributeId ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( assertion , viewTest )
assertEquals ( "</6>,</6/0>,</6/0/0>,</6/0/1>,</6/0/2>,</6/0/3>,</6/0/4>,</6/0/5>" , strLinks )
assertThat ( Util . booleanValue ( "ok" , scope ) , is ( true ) )
assertHandCount ( playerA , 0 )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
assertEquals ( 2 , accounts . size ( ) )
assertNotNull ( builder )
assertArrayEquals ( splitString , testString3ExpectedSplit )
assertThat ( PrettyTime . of ( Locale . GERMANY ) . withReferenceClock ( clock ) . printRelative ( PlainTimestamp . of ( 2014 , 9 , 5 , 14 , 0 ) . atUTC ( ) , ZonalOffset . UTC ) , is ( "yesterday" ) )
assertEquals ( 30 , age )
assertNull ( next )
assertEquals ( "1" , e . eval ( ) . toPlainString ( ) )
Assert . assertEquals ( "a" , lc . getLoginIPHeadLikeOr ( ) )
assertNotNull ( result . getRows ( ) )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertEquals ( 0.0 , error , 1.0e-6 )
assertEscalationEventDefinition ( "subProcessStart" , "myEscalationCode" )
assertSame ( GBP_2_34 , test )
assertTrue ( System . currentTimeMillis ( ) - st >= config . getBufferSize ( ) )
assertEquals ( ( byte ) 8 , ( byte ) result . getByteWrapperValue ( ) )
Assert . fail ( "Did not throw expected exception for " + o )
assertEquals ( "HTTP/1.1 200 OK" , conn2 . getHeaderField ( 0 ) )
assertNotNull ( module )
assertEquals ( test1 . hashCode ( ) , test2 . hashCode ( ) )
assertCollectionSerialization ( expected , collection )
assertTrue ( Files . isSameFile ( p1 , p2 ) )
assertTrue ( page . asXml ( ) . contains ( "{}" ) )
assertThat ( response . getErrorMessages ( ) , contains ( new ErrorMessage ( new Message ( Messages . Type . ERROR , "NotAuthorizedException" ) ) ) )
Assert . assertEquals ( "GetRequestForGroupMembershipRequest" , result )
assertEquals ( aMessage , res )
assertEquals ( 1 , postDTOs . size ( ) )
assertAuthenticationResult ( getCurrentTestName ( ) , s . auth ( ) , false )
assertEquals ( 0 , GlobalTransaction . getCurrentTransactionStack ( ) . size ( ) )
assertEquals ( "Hello World!" , config . helloWorld ( ) )
assertEquals ( getSubject ( ) . getEnabledGroup ( ) , GROUPS [ 0 ] )
assertArrayEquals ( "Invalid change affected alignments" , defaultAlignments , t . getColumnAlignments ( ) )
Assert . assertEquals ( versao , protocolo . getVersao ( ) )
assertEquals ( expectedNode , actualNode )
assertEquals ( 0 , hits . totalHits )
assertNull ( output )
assertEquals ( "Privacy policy generated not equal to the original policy" , cisPolicy . toXMLString ( ) . replaceAll ( "[ \\n\\t]" , "" ) , privacyPolicy . replaceAll ( "[ \\n\\t]" , "" ) )
assertNotNull ( provider )
assertThat ( host , is ( equalTo ( "2001:638:700:20d6::1:3a" ) ) )
assertEquals ( "value" , property . getProperty ( "name" ) )
assertEquals ( exception , exceptionArgumentCaptor . getValue ( ) )
assertThat ( eqler . queryCnt ( ) , is ( - 33 ) )
Assert . assertEquals ( expected , s , 1e-15 )
Assert . assertSame ( managerFactory , AbstractDecorator . getOriginalDecoratedObject ( victim . getManagerFactory ( ) ) )
assertMeasure ( measure , CommitsPerClockHourMeasure . class , 4 )
assertEquals ( testSesameTripleSubjectObjectBNode , tripleAsStatement )
assertTrue ( "Wrong template: " + template , this . compiler . matches ( template ) )
assertEquals ( expResult , result )
assertEquals ( "h2" , actual )
assertEquals ( HttpStatusCodes . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 1024 , cli . getOptionValue ( "block size" ) )
assertEquals ( "0: General use CPU\\n" + "1: Thread[engine,5,main] alive=true\\n" + "2: Thread[main,5,main] alive=false\\n" + "3: Thread[main,5,main] alive=
assertEquals ( "Incorrect qualifyFreq" , 6000 , ( int ) response . getQualifyFreq ( ) )
assertNotNull ( "Vertex should be found as close behavior was set to rollback" , oid . get ( ) )
assertEquals ( presenter . getLastSearch ( ) , null )
Assert . assertEquals ( 2 , retireable . getRetiredBy ( ) . getId ( ) . intValue ( ) )
assertEquals ( "From Server 30" , client . testPrimitiveTypes ( request ) . getOut ( ) )
assertFalse ( "adapter supports unsupported return type" , result )
assertSame ( a1 , a2 )
files . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( DecodeQualification . SUITABLE , decodeQualification )
assertEquals ( message . toString ( ) , sb . toString ( ) )
assertThat ( result , instanceOf ( type ) )
assertNotNull ( crs )
assertThat ( Files . size ( path ) , is ( 1_024 * 1_024 ) )
assertThat ( response , is ( String . format ( "" + "{\\n" + "  \\"link\\" : {\\n" + "    \\"type\\" : \\"locator\\",\\n" + "    \\"href\\" : \\"http://localhost:%d/test
assertEquals ( 2L , count )
assertThat ( result , is ( instanceOf ( DerivedAllocation . class ) ) )
assertEquals ( i , num )
assertThat ( view . elementIsDisplayed ( By . id ( "some-element" ) ) , is ( false ) )
assertTrue ( true )
assertEquals ( new Integer ( 1 ) , ticket . getTicketId ( ) )
Assert . assertEquals ( ValidationResult . Result . ERROR , sink . validate ( null ) . getStatus ( ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0x1F , ( byte ) 0xB7 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x
assertEqualsIgnoreWhitespace ( expected , real )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( header , fixture . getHeaders ( ) . get ( "header1" ) )
assertEquals ( webSocketHandler . calculateHeaderSize ( WebSocketHeader . PAYLOAD_LARGE_MAX ) , WebSocketHeader . MAX_HEADER_LENGTH_MASKED )
assertThat ( washingMachine . state ( ) , equalTo ( WashingMachineState . CLOSED ) )
Assert . fail ( )
assertNotNull ( mch . getMondrianXmlDocument ( new StringBufferInputStream ( xml ) ) )
assertTrue ( params . isEmpty ( ) )
assertEquals ( expResult , result , 0.000001 )
assertNotNull ( result )
assertResultsEqual ( renderChild ( net , add1 ) , 101.0 )
assertThat ( b , is ( true ) )
assertThat ( supported , is ( false ) )
assertThat ( cursor . proceedTo ( 'c' ) , is ( true ) )
assertTrue ( capabilities . hasLayer ( "Layer1" ) )
assertEquals ( 3 , item . getInt ( ) )
assertTrue ( result . size ( ) == 2 )
Assert . assertEquals ( "[6, 2, 8, 1, 4, 3, 5]" , values . toString ( ) )
assertNull ( out )
assertEquals ( jv1 . toString ( ) , jv2 . toString ( ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertEquals ( "foo" , handler . invoke ( "foo" , new Object ( ) ) )
assertEquals ( "rf-dg-body" , ( ( HtmlElement ) dataGrid . getFirstByXPath ( "tbody[@id='dataGrid2:dgb']" ) ) . getAttribute ( "class" ) )
assertThat ( objectMessages . hasErrors ( ) , is ( false ) )
assertNotNull ( path )
assertEquals ( "world" , result . getString ( "hello" ) )
assertErrorEventDefinition ( "end" , "myErrorCode" , null )
assertEquals ( expected , actual )
assertElementPresent ( By . className ( "v-datefield-popup" ) )
assertEquals ( "OK" , result . getResult ( ) )
assertSame ( p3 , result )
assertSame ( stringMessageBodyWriter , applicationProviders . getMessageBodyWriter ( String . class , null , null , TEXT_PLAIN_TYPE ) )
assertTrue ( uploadResult . isUploaded ( ) )
assertThat ( students . size ( ) , equalTo ( 3 ) )
assertThat ( underTest . map ( parser , context ) , nullValue ( ) )
assertThat ( axioms , hasItem ( axiom ) )
assertArrayEquals ( "Arguments" , null , new ConciergePlatformBuilder ( m_bundleContext , "version" ) . getArguments ( m_platformContext ) )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( "SELECT something\\nFROM tbl_name\\nWHERE DATE_SUB(CURDATE(), INTERVAL 30 DAY) <= date_col;" , text )
assertEquals ( current . < String > getAs ( field . name ( ) ) , format . format ( new Date ( currentTimeMillis ) ) )
assertEquals ( "void dest1()" , toString ( dest ) )
assertThat ( typeMapping . getNumericType ( 19 , 0 ) , is ( BigInteger . class ) )
assertArrayEquals ( new String [ ] { "a" , "b" } , commandInvocation . args ( ) )
assertThat ( errors . getAllErrors ( ) , hasSize ( 0 ) )
assertEquals ( 1 , sensor . count ( new MetricName ( "test1.total" , "grp1" ) ) )
assertEquals ( before , after )
assertArrayEquals ( stringBytes , outputStream . toByteArray ( ) )
assertEquals ( 5 , lns . length ( ) )
Assert . assertTrue ( row . matches ( guess ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( file , expected , html . trim ( ) )
Assert . assertNotNull ( merchantAuthenticationType )
assertEquals ( expected , asmResult )
assertEquals ( 1 , processorsFactory . getPreProcessors ( ) . size ( ) )
assertTrue ( page . asXml ( ) . contains ( "Great! You are now in the correct destination view." ) )
assertFuzzy ( min , result , createFromGiven ( 20.0 , 10 ) )
assertEquals ( connMock , connection )
assertTrue ( className . equalsIgnoreCase ( Number . class . getSimpleName ( ) ) )
Assert . assertNotNull ( testSession )
assertNull ( fileInfo )
assertFalse ( "unexpected value" , value )
assertTrue ( job . isSuccessful ( ) )
assertEquals ( logLine , "log line" )
Assert . assertEquals ( "could not find class" , TestClassWithNoPackage . class , c )
Assert . assertFalse ( ranTask . get ( ) )
assertProcessInstanceAborted ( processInstance )
Assert . assertNotNull ( tested . prepareESBulkRequestBuilder ( ) )
assertEquals ( player . getMinions ( ) . size ( ) , 0 )
assertEquals ( expected , links )
Assert . assertTrue ( success )
assertThat ( option . isNull ( ) , is ( true ) )
Assert . assertNull ( identifierType )
Assert . assertEquals ( ste . toString ( ) , frame . toString ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "THE REASON" , retireable . getRetiredBy ( ) . getName ( ) )
assertEquals ( "From is not properly parsed" , lsdf . parse ( "2015-02-28" ) , mapper . readFrom ( columns ) )
Assert . assertTrue ( maxError < 1.0 )
Assert . assertTrue ( hostname . equals ( "m2" ) )
assertThat ( main . getMarkdownFile ( ) , nullValue ( ) )
assertEquals ( expecting , result )
assertSame ( 0 , ids . size ( ) )
assertNull ( p2 )
assertThat ( InterfaceWrapperHelper . getModelTableNameOrNull ( testModelRef ) , is ( nullValue ( ) ) )
assertTrue ( ns . isNameOp ( ) )
assertThat ( e . hasMoreElements ( ) , is ( false ) )
Assert . assertNotNull ( "The TestRuns should not be null" , actualTestRun )
Assert . assertEquals ( "Incorrect Compare Type" , AbstractCompare . CompareType . EQUAL , compare . getCompareType ( ) )
assertEquals ( 4L , count )
assertEquals ( expected , result )
Assert . assertTrue ( docIn == docOut )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  ok " ) )
assertEquals ( "the_string" , obj )
Assert . assertFalse ( result . isEmpty ( ) )
Assert . assertEquals ( 3 , resourceList . size ( ) )
assertTrue ( ! result )
assertEquals ( "llvalue1" , result )
assertEquals ( 1 , rulesFired )
assertFalse ( prefs . matches ( t ) )
assertOut ( "var a:URIError = new URIError()" )
assertTrue ( history . isStepBackAllowed ( ) )
assertThat ( this . shop . getProducts ( ) . get ( 0 ) , is ( bread ) )
assertEquals ( 4 , ns . size ( ) )
assertEquals ( ( ( ObjectWithOptions ) options . optOp ) . required , 10101 )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertThat ( description . toString ( ) , is ( "got <2> row(s) on sheet \\"Sheet1\\"" ) )
assertNotNull ( pwd )
assertThat ( built . getId ( ) , is ( "John Smith" ) )
assertEquals ( expected , sb . toString ( ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response5 . getResponseObject ( ) )
assertThat ( response . getStatus ( ) , equalTo ( 200 ) )
assertEquals ( result , "John,Jane,Adam,Tom" )
assertTrue ( TestService . LIFECYCLE . contains ( "serverStatusChange" ) )
assertThat ( list . size ( ) , is ( 1 ) )
assertEquals ( "V2 Comment" , wrapper . getComment ( ) )
assertThat ( encodedURL , equalTo ( ENCODED_URL_VALUE ) )
assertEquals ( "bar" , cl . getOptionValue ( "foo" ) )
assertEquals ( padded ( OBJECT_OVERHEAD + OBJECT_REF ) , ThreadTrackingContext . getBytes ( ) )
assertEquals ( expecting , found )
assertThat ( response . getBody ( ) , equalTo ( "Hello World" ) )
Assert . assertNull ( devBean )
assertEquals ( "rgba(255, 235, 156, 1)" , parseFormula ( value ) )
assertEquals ( "two" , actual )
assertOut ( "<Button />" )
assertEquals ( "submission was not properly returned" , 100.0f , percentageComplete , DELTA )
assertEquals ( 0 , service . getRoles ( ) . size ( ) )
assertFalse ( "result should be false" , result )
assertEquals ( "LIMIT 5" , statement . toString ( ) )
assertEquals ( Result . FAIL , nogroup . apply ( item ) )
assertEquals ( "<p>This is a paragraph\\n\\n--------------------------</p>\\n" + "<p>This is a paragraph after a horizontal rule</p>" , result )
Assert . assertEquals ( 401 , statusCode )
assertEquals ( 1 , visitedInstructions . size ( ) )
assertEquals ( 0 , grid . getSelectedRows ( ) . size ( ) )
assertNotNull ( pi )
Assert . assertEquals ( 0 , nics . size ( ) )
Assert . assertEquals ( "5.6.7" , version )
assertEquals ( toPercentage ( scale + ZOOM_INCREMENT ) , zoomUI . getPercentageZoom ( ) )
Assert . assertNull ( this . manager . get ( this . family1 ) )
assertEquals ( renderGroupIdArtifactIdVersionOptionalResult ( ) , result )
assertNotNull ( result )
Assert . fail ( "Container resource was not deleted" )
assertJustDelta ( alpha )
Assert . assertEquals ( "41 �拽�转" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
assertNotNull ( dataCollectionState )
assertEquals ( 5 , vowelCount )
Assert . assertEquals ( 4 , decomposition . size ( ) )
assertTrue ( ref . isEnqueued ( ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( books , hasItems ( new Book ( 1L , 1L ) , new Book ( 2L , 2L ) , new Book ( 3L , 3L ) , new Book ( 4L , 4L ) ) )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( expecting , found )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( l ) . intValue ( ) )
assertEquals ( BGP_OPERATIONAL_STATE_NOT_FOUND , this . output . toString ( ) )
assertTrue ( result >= 33f && result <= 42f )
assertFalse ( monitorEvent . isPresent ( ) )
assertTrue ( entity . getId ( ) > 0 && entity . getDate ( ) == null )
assertEqualsIgnoreLineEnding ( Json . pretty ( rep ) , "{\\n" + "  \\"int64\\" : 4321,\\n" + "  \\"example\\" : 4321\\n" + "}" )
assertThat ( result , isFailedCommand ( ) )
Assert . assertThat ( i , is ( 15 ) )
assertTrue ( aNumber == result )
assertEquals ( new Float ( 0 ) , minPreference )
assertOut ( "var /** @type {number} */ a = parseInt(\\"666\\", 10)" )
Assert . assertEquals ( configNew , configOld )
assertEquals ( HttpStatusCode . NO_CONTENT . code , response . getStatus ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
given ( ) . port ( jettyPort ) . log ( ) . all ( ) . when ( ) . get ( "/openapi" ) . then ( ) . log ( ) . all ( ) . assertThat ( )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( r . size ( ) , 0 )
assertEquals ( LockMode . WRITE , mComposite . getLockMode ( ) )
assertEquals ( "no-transform" , cc . toString ( ) )
Assert . assertNotEquals ( choice1 , choice2 )
assertEquals ( AbstractSuperclass . class , fr2 . getSource ( ) . getVariableClass ( ) )
assertThat ( page . getTitle ( ) . getText ( ) , is ( "Thucydides Test Site" ) )
assertNull ( scanner . parse ( "0.12" ) )
assertEquals ( "hdfs://uri1:8200/blah" , uri . getName ( ) )
assertEquals ( "california street, ca" , real )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertTrue ( true )
assertSame ( platformTransactionManager , configuration . getTransactionManager ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertEquals ( NAME_NODE , action . getNameNode ( ) )
Assert . assertFalse ( policy . isResponseCacheable ( "GET" , response ) )
assertTrue ( "Chars not written" , new String ( buf , 0 , buf . length ) . equals ( testString ) )
assertDirectoryNotEmpty ( CSS_LOCATION )
assertEquals ( splits . size ( ) , allRecordNum )
assertEquals ( "[x=10.0][y=0.0]" , s . getDeliveryLocation ( ) . getId ( ) )
FactorDecompositionTest . assertFactorization ( lPoly , decomposition )
assertTrue ( meta . pofClassAttribute == null )
Assert . assertEquals ( expectedLoginId , loginId )
assertSame ( "Must return self" , editor , result )
assertTrue ( "Wrong result" , f . getRelationshipTo ( p2 ) instanceof Friendship )
assertE ( "         " + "         " + "         " + "         " + "         " + "         " + "    xxx   " + "  oxoox  " + "oxooooox " )
assertEquals ( "bar" , result )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertNotNull ( personStructure )
assertEquals ( "test" , beanWrapper . getPropertyValue ( "hiddenProperty" ) )
assertEquals ( "[{\\"groupName\\":\\"SomeCounterGroupName1\\",\\"counters\\":[{\\"counterNam" + "e\\":\\"3\\",\\"value\\":4},{\\"counterName\\":\\"SomeCount" + "erName\\",\\"value\\
assertExec ( "Load resource" , Resources . class , "loadClazz__Ljava_lang_String_2ZLjava_lang_String_2ZLjava_lang_String_2ZLjava_lang_String_2" , exp )
Assert . assertTrue ( readable )
assertThat ( messageIdLocalPart , is ( "No-Message-Id." ) )
assertEquals ( CLUSTER , broker . get ( ) )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue')" , transformed )
assertTrue ( false )
assertFalse ( ca . isStrokeEnabled ( ) )
assertTrue ( e . getMessage ( ) . contains ( "Error during BackPropagation" ) )
Assert . assertTrue ( processesList . size ( ) > 0 )
context . assertIsSatisfied ( )
assertSuccessOrCancelled ( response )
assertThat ( editor . getValue ( ) , is ( ( Object ) ReadPreference . preferSecondary ( BuilderFactory . start ( ) . add ( "a" , 1 ) ) ) )
assertOut ( "var /** @type {number} */ a = 0, /** @type {number} */ b = 0, /** @type {number} */ c = 0" )
assertArrayEquals ( expected , set . toArray ( ) )
assertEquals ( 6 , services . size ( ) )
Assert . assertFalse ( verifyTest ( builder ) )
assertPlanMatches ( sort )
assertEquals ( ImmutableList . of ( $2 ( 4 , "foot" ) , $2 ( 4 , "ball" ) , $2 ( 6 , "bazzar" ) ) , Lists . newArrayList ( out . materialize ( ) ) )
Assert . fail ( "build listing failure" )
Assert . assertEquals ( testDN , actual . getUserDN ( ) )
assertEquals ( "ORACLE" , rootNode . getProperty ( StandardDdlLexicon . PARSER_ID ) )
assertNull ( count )
Assert . assertTrue ( marshalled . contains ( Namespace . CURRENT . getUriString ( ) ) )
assertArrayEquals ( getEncoded ( expectedCsr ) , csr . getEncoded ( ) )
assertFalse ( alive )
Assert . assertEquals ( content , result )
assertEquals ( "Should get a 404 response" , HttpStatus . NOT_FOUND , mongodbFeedSource . getFeed ( getFeedRequest ) . getResponseStatus ( ) )
Assert . assertTrue ( salBulkFlowService . flowRpcAddMultiple ( flowRpcAddMultipleInput ) . isSuccessful ( ) )
assertEquals ( format ( "%s should have been valid=true but was valid=%s" , name , expectedResult , result ) , expectedResult , result )
Assert . fail ( "ProtocolException should have been thrown" )
Assert . assertNull ( "Should be null, as it is also null in the original process instance on the server." , returnedProcessInstanceId )
assertEquals ( "Expected 0 results!" , 0 , n )
assertions . isNotEqualTo ( expected )
assertThat ( result , is ( jsonBoolean ( true ) ) )
assertThat ( subject . toFilterExpression ( ) , is ( "(osgi.os=null,osgi.arch=null)" ) )
assertNotNull ( "Configuration for todo/123/user REST must not be null." , configuration )
assertThat ( cause . getMessage ( ) , containsString ( "ReadLockException: duke" ) )
assertThat ( actual , is ( expected ) )
assertEquals ( 0 , list . size ( ) )
rule . assertScenarioEnded ( )
Assert . assertFalse ( ldap . authenticate ( "user" , "password" ) )
assertEquals ( expected , actual )
assertThat ( NamespaceManager . get ( ) , is ( "aaa" ) )
assertEquals ( "PT14M" , microdata . getFirstProperty ( "cookTimeValue" ) )
assertEquals ( expected , producer . generateSubtests ( testSet ) )
assertEquals ( ONT2 , shortForm )
assertEquals ( "Successfully registered applications: [foo, bar]" , result )
Assert . assertEquals ( "did not get expected packing instruction" , b . toString ( ) , copy . getParsedTags ( ) )
Assert . assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/" )
assertTrue ( now . getValue ( ) . before ( then . getValue ( ) ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Leave/>" , elem . toXml ( ) )
assertPotentialOwnerIsNotPresent ( )
assertThat ( actionUrl , is ( equalTo ( "/context/mvc/anything" ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( 1 , r )
assertThat ( request , instanceOf ( VaadinHttpServletRequest . class ) )
assertThat ( examples . exists ( ) , is ( true ) )
assertEquals ( documento , documentoModificado )
assertEquals ( Integer . parseInt ( EVSE_ID . getId ( ) ) , unlockConnectorArgument . getValue ( ) . getConnectorId ( ) )
assertEquals ( Sets . newHashSet ( Role . SYS_ADMIN , Role . MODEL_CREATOR ) , user . getRoles ( ) )
assertEquals ( 4 , resources . size ( ) )
assertEquals ( "1. Enter button pressed" , getLogRow ( 0 ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( "answer=42" , actual )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
assertEquals ( ImmutableMap . of ( "foo" , newArrayList ( "bar" ) ) , response . getStringHeaders ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( elements . size ( ) , dto . getElements ( ) . size ( ) )
assertEquals ( Integer . valueOf ( HttpServletResponse . SC_OK ) , status . get ( ) )
assertThat ( newerBundleInfo . isNewerVersionThan ( olderBundleInfo ) , is ( true ) )
Assert . assertEquals ( 1 , lines . length )
Assert . assertTrue ( response . getStatus ( ) == NO_CONTENT . getStatusCode ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_" + file , destinationFolder , "diff_" ) )
Assert . assertEquals ( 1 , list . size ( ) )
Assert . assertEquals ( "" , result )
assertEquals ( 1 , testMap . keySet ( ) . size ( ) )
assertThat ( result , is ( "/mode:something/jcr:else" ) )
assertEquals ( HttpStatus . SC_MOVED_PERMANENTLY , response . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( conf . get ( DistCpConstants . CONF_ROOT_PATH ) , is ( "/foo" ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"
assertEquals ( "Unexpected announcement message" , newMessage , announcementMessage )
assertEquals ( "3" , MessageController . get ( cell ) )
assertThat ( "shall have a default provider" , sut . getProvider ( ) , is ( not ( nullValue ( ) ) ) )
assertValid ( "//xsd:element[@name='s'][@type='xsd:string']" , wsdls )
assertEquals ( DropdownField . FIELD_TYPE , f . getFieldType ( ) )
assertEquals ( expected , actual )
assertTrue ( "Reloading not performed" , strategy . reloadingRequired )
assertTrue ( pages . contains ( gwtPagePresenter ) )
assertThat ( subject . isValid ( invalidUrl ) , is ( false ) )
assertEquals ( "UPDATE person SET first_name = ?, favourite_number = ? WHERE last_name = ? AND first_name LIKE ? AND first_name LIKE ?" , sql . trim ( ) )
assertEquals ( 100L , frame . getLong ( ) )
Assert . assertEquals ( input , HtmlSanitizerUtil . sanitize ( input ) )
assertNotNull ( result )
assertThat ( renderer . getShortForm ( entity ) , is ( "rdfs:isDefinedBy" ) )
Assert . assertEquals ( 2 , keys . length )
ModelTestBase . assertIsoModels ( expected , y )
a . assertStringNode ( "/sos:GetObservation" )
assertTrue ( fieldDefinitionName . isUnique ( ) )
assertDateEquals ( new DateTime ( 2013 , 5 , 20 , 15 , 30 , 20 , 999 ) , date )
assertOut ( "public interface IA extends IB, IC, ID {\\n}" )
assertEquals ( "" , found )
assertNotSame ( "old manager was replaced" , oldManager , appender . getManager ( ) )
$ ( "#s" ) . assertThat ( )
assertTrue ( comparePomFiles ( reactorProjects ) )
rule . assertScenarioEnded ( )
assertEquals ( 2 , Solutions . bestOf ( solutions ) . getRoutes ( ) . size ( ) )
Assert . assertTrue ( "should not get error" , gotError )
assertEquals ( 0 , runtimeService . createEventSubscriptionQuery ( ) . count ( ) )
assertEquals ( "1,2,3" , decoder . encode ( BigDecimal . valueOf ( 11 , 1 ) , comma ) )
assertEquals ( "_cat/allocation/testNode" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertThat ( output . getValue ( ) , equalTo ( "This is a test!" ) )
assertThat ( Files . exists ( Paths . get ( stringFromStdout ) ) )
assertArrayEquals ( ArrayConverter . concatenate ( clientRdm , preMasterSecret ) , secret )
Assert . assertEquals ( 1 , result )
assertEquals ( bytesString , bodyString )
Assert . assertNotEquals ( firstConfig , secondConfig )
Assert . assertNotNull ( "null translated query" , translatedQuery )
Assert . assertTrue ( "We should have a complete header" , bufPos != - 1 )
Assert . assertEquals ( - 1L , ( long ) response . getBodySize ( ) )
assertEquals ( witness , node )
Assert . assertEquals ( expectedPath , normalizedPath )
child . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertEquivalent ( bufferB , snapshot )
assertThat ( condition . isSatisfied ( ) , is ( true ) )
assertEquals ( mockHexBinaryValue , result )
assertNotNull ( "Must not be null" , testResult )
assertEquals ( 14 , metrics . size ( ) )
assertThat ( value , equalTo ( "set_VALUE_get" ) )
assertThat ( $ . url ( ) , endsWith ( "WithoutJSTest_2.html?aName=aValue" ) )
assertThat ( data . getMessage ( ) , is ( "Sample error" ) )
assertEquals ( hsr1 , hsr2 )
arrays . assertDoesNotContain ( description , actual , values )
assertEquals ( "select length(entity_0.code) from Entity entity_0" , select . getQuery ( ) )
assertEquals ( fieldDefinition , res )
UnitTestUtils . assertEquals ( 0.1 , FastMath . sqrt ( sample . length ) * FastMath . pow ( sample . length , 1.3 ) / sample . length , 0.1 )
assertEquals ( projectName , newName )
Assert . assertEquals ( generatedStrPath , expectedStrPath )
assertTrue ( impl . isApiToken ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertNull ( array )
assertTrue ( rt . getEventType ( ) . equals ( EventType . FSERVER_ZK_NODE_CLOSING ) )
assertTrue ( nullCap == null )
assertTestDeleteDataStore ( )
assertThat ( PlainTime . axis ( ) . getBaseUnit ( DIGITAL_HOUR_OF_DAY ) , is ( unit ) )
assertEquals ( expectedValue , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertImageEquals ( imageA , imageB )
assertNotNull ( loop )
assertThat ( command . accept ( state ) , is ( true ) )
assertTrue ( actual . isEmpty ( ) )
assertLog ( Log . DEBUG , "test debug" )
assertEquals ( "Data was not removed" , 1 , appDataTestInstanceRemoved . getValues ( ) . size ( ) )
assertThat ( ints . length , is ( 10 ) )
assertThat ( parameters , is ( "?searchView=own&offset=5&limit=10&orderBy=leastTimeLeft&show=running&minSupportCount=50" ) )
assertEquals ( sa , result )
assertEquals ( Arrays . asList ( v2 , v3 , v4 ) , path )
Assert . assertTrue ( intersect instanceof EmptyRange )
assertTrue ( schedulerLatch . await ( DELAY_MS , TimeUnit . MILLISECONDS ) )
assertTrue ( page . asText ( ) . contains ( "true" ) )
assertThat ( ctrl . createMock ( ToMock . class ) , is ( ToMock . class ) )
assertIncrementalReasoner ( incrementalReasoner )
assertThat ( properties . size ( ) , is ( 2 ) )
assertEquals ( 0.5 , m , 1e-3 )
assertThat ( httpStack , notNullValue ( ) )
assertTrue ( i1 . contains ( new DiscreteInterval ( 1 , 4 ) ) )
Assert . assertEquals ( new URI ( url + suffix ) , UriUtils . buildNewURI ( new URI ( url ) , suffix ) )
assertEquals ( result , range . exclude ( other ) )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 1 ) )
assertEquals ( expectedReference , summary . getReference ( ) )
assertNotNull ( result )
assertTrue ( p . matcher ( tags ) . matches ( ) )
assertEquals ( jobResult , mockedJobResult )
assertNotNull ( result )
assertThat ( tupleComparator . compare ( new Tuple ( - 1 , 1 ) , new Tuple ( 1 , 1 ) ) , is ( 1 ) )
assertEquals ( BuilderFactory . start ( ) . addMinKey ( "a" ) . build ( ) , doc )
assertObjectEquals ( "[null,null,{f:'a'},{f:'b'},{f:'c'}]" , p . run ( bs , in , sa ) )
assertThat ( caughtException ( ) , instanceOf ( TaxServiceUnavailableException . class ) )
assertTrue ( provided instanceof HTableFactory . HTableFactoryImpl )
assertEquals ( expected , built )
runner . assertNotValid ( serviceImpl )
assertNotNull ( op )
assertNotNull ( injector )
Assert . assertEquals ( "URI don't match and Hnadshake  exception is not thrown" , true , exThrown )
assertEquals ( Code . UNKNOWN , statusCaptor . getValue ( ) . getCode ( ) )
assertInState ( STATE . STOPPED , services )
assertEquals ( expResult , result )
assertTrue ( lastRefLog . getComment ( ) . startsWith ( "branch: Created from branch" ) )
Assert . isTrue ( orders . get ( 0 ) . getOrderId ( ) . equals ( 50000280834672L ) )
assertEquals ( "(1,2,3,4,5)" , asSequenceStr ( result ) )
Assert . assertEquals ( false , dataModelLoadBalancer . getHalfClosed ( ) )
assertTrue ( satisfiesPrecondition ( cu ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , empty ( ) )
assertTrue ( i + ", " + file . getAbsolutePath ( ) , file . delete ( ) )
assertEquals ( 2 , count )
assertNull ( mdxBaseComponent . prepareQuery ( "select * from table" ) )
Assert . fail ( "Message too large" )
quote . assertIsSatisfied ( )
assertResultMap ( target )
Assert . assertTrue ( "Queue name not encoded correctly into job history file" , jobHistoryFile . contains ( QUEUE_NAME_WITH_DELIMITER_ESCAPE ) )
assertThat ( builderAnnotated . picoContainer ( ) , sameInstance ( picoContainer ) )
Assert . assertEquals ( expected , actual )
assertNotNull ( result )
assertThat ( info . getServerService ( SERVER ) , nullValue ( ) )
assertEquals ( 0 , findings . size ( ) )
assertEquals ( "Option value" , "-Dhttp.port=80" , commandLine . getOption ( "simpleOption" ) )
Assert . assertEquals ( expectedCarIds , actualCarIds )
assertEquals ( "USER" , dataSet . applyCaseInsensitivity ( "uSeR" ) )
assertOut ( "var /** @type {Object} */ a = function(foo:int, bar:String = 'goo'):int {\\n\\treturn -1;\\n}" )
Assert . assertEquals ( 111L , runEnv . removeNextStepPosition ( ) )
assertContains ( indels , 100 , "GNNNNNN" , "G" )
assertFalse ( problem )
assertEquals ( sayHi , dr . getName ( ) )
Assert . assertNotNull ( is )
assertThat ( intersection . size ( ) , equalTo ( 3 ) )
Assert . assertArrayEquals ( expected , AnnotationUtils . getAnnotatedAnnotations ( null , Element . class ) )
assertEquals ( Set2 . EXERCISE_10 , set2 . detectEcb ( EX_10_CIPHERS , 16 ) )
assertThat ( afterStartAction , instanceOf ( CustomAfterStartActionInstantiator . class ) )
assertArrayEquals ( expectedFileModes , fileModesFromString )
assertTrue ( model . getObject ( ) . getAdresses ( ) . isEmpty ( ) )
assertVersionAndValue ( ref , initialVersion , initialValue )
assertDefaultDirectories ( "foo" , "bar" )
assertNull ( fieldName )
assertFalse ( proxyHttpHeader . isValid ( ) )
assertEquals ( null , e . getMessage ( ) )
Assert . assertEquals ( xmlEsperado , medicamento . toString ( ) )
assertEquals ( 0 , selected . size ( ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\\\t" } } ) ) )
Assert . assertEquals ( 200 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( this . textEditor , defaultEditorAdapter . getTextEditor ( ) )
assertEquals ( EXPECT . getConfigLocation ( ) , value )
Assert . assertEquals ( 2 , messagesReceived . get ( ) )
assertEquals ( "4" , result )
assertEquals ( object . _id , result . _id )
assertArrayEquals ( sourceData , destination . get ( ) , DELTA )
resp . assertContentEquals ( "Exception caught" )
assertNull ( epp . getTransport ( ) )
assertNotNull ( "Unread messages are not null" , messages )
Assert . assertEquals ( "testValue" , deerletRedisClient . get ( "testKey" ) )
assertNotNull ( projectId )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Refer>" + "<genericTag key=\\"value\\">" + "someText" + "</genericTag>" + "</Refer>" , elem . toXml ( ) )
assertTrue ( ImageAssert . compareImages ( "lineGraph2D.linear.highlightFocusValue" , image , BufferedImage . TYPE_3BYTE_BGR ) )
assertEquals ( "SQL query does not match" , result , test )
Assert . assertEquals ( 2 , skys . size ( ) )
assertNotNull ( firstTask )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> strings . set ( 2 , "out of bounds" ) )
assertThat ( copy . get ( Calendar . HOUR_OF_DAY ) , is ( 1 ) )
assertEquals ( 1 , rules )
assertTrue ( "Component should be focused" , isFocused ( ) )
Assert . assertEquals ( "�注�� 12 �拽�转" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
assertThat ( Functions . blobstoreUrl ( url ) , is ( notNullValue ( ) ) )
assertTrue ( wc . get ( Boolean . class ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertNotNull ( "No configuration" , config . getConfiguration ( "unknown config" ) )
assertEquals ( "a comment" , testSet . getPlan ( ) . getComment ( ) . getText ( ) )
assertEquals ( "HZG-1042" , group20 . getId ( ) )
Assert . assertEquals ( "Count should be same" , count , resultNotes . size ( ) )
Assert . assertNotNull ( expr )
assertEquals ( "a" , peek . peek ( ) )
assertEquals ( result , testResult )
assertEquals ( expectedSplits , new TreeSet < > ( createdSplits ) )
assertEquals ( expecteds , actuals )
assertSame ( exIn , exOut )
Assert . assertEquals ( "Double decode brackets not correct" , out , WebUtilities . doubleDecodeBrackets ( in ) )
assertSame ( results , uriTools . resolveUri ( HELLOWORLD_URI . resolve ( "out/results" ) , wfBundle ) )
assertTrue ( m . nextShort ( ) > - 1 )
assertEquals ( "SQL query does not match" , result , test )
assertEquals ( out . get ( ) , LARGE_NUM + 1 )
assertEquals ( "cn-north-1" , awsClient . getRegion ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( "testurl" , doc . getContentField ( "url" ) )
assertThat ( equal , equalTo ( true ) )
assertArrayEquals ( expected , actual )
assertFalse ( result )
assertEquals ( "http://java.example.com:8080/foo/bar/qux/quux" , got . toString ( ) )
assertThat ( columns , is ( expected ) )
assertEquals ( newName , instrument . getFriendlyName ( ) )
assertEquals ( "Wrong IMDB ID" , test . getImdb ( ) , result . getImdbId ( ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertEquals ( CollectionUtils . list ( "SETUP" , "CONSUME" ) , s . history )
assertEquals ( foo1 , foo2 )
assertEquals ( "OK" , reply )
assertTrue ( converter . canConvert ( IndexQuote . class ) )
assertEquals ( result , one )
assertEquals ( "SELECT Contacts.Name FROM Contacts WHERE Contacts.Name IN ('x', 'y')" , visitor . getQuery ( ) . toString ( ) . trim ( ) )
assertEquals ( 4 , instance . getFeatures ( ) . size ( ) )
Assert . assertNotNull ( str )
assertArrayEquals ( expectedCreateSchemaStmts , statements . getLockCreateSchemaStatements ( 2 ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) LIKE $literal" ) )
assertThat ( ff . parse ( "20160504" ) , is ( PlainDate . of ( 2016 , 5 , 4 ) ) )
Assert . assertFalse ( exclusion1 . equals ( exclusion2 ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "myInvisibleButton" , element . getCssValue ( "display" ) )
assertions . isNotEmpty ( )
assertEquals ( CloseReason . NO_ACCEPTABLE_VERSION , pair . clientRecorder . q . take ( ) )
assertEquals ( 6. * 3600. + 12. * 3600. , sec , 0.01 )
Assert . assertEquals ( "John Doe" , nameOfCustomer1 )
Assert . assertEquals ( 10 , metrics . size ( ) )
Assert . assertTrue ( readable )
assertEquals ( out , frame2 )
assertEquals ( 0 , runtimeService . createProcessInstanceQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertEquals ( "C" , letterGrade )
assertTrue ( attributeDesc . isVersion ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertTrue ( drl . indexOf ( "name == \\"limburger\\"" ) > 0 )
Assert . assertEquals ( "SELECT * FROM " + TestSetBasedEntity . class . getSimpleName ( ) + " WHERE " + TestSetBasedEntity . class . getSimpleName ( ) + " IS NOT NULL" , sql )
assertEquals ( expResult , result )
assertEquals ( newValue , wrapped . get ( key ) )
assertFalse ( paths . contains ( contextPath ) )
assertThat ( mt . minus ( 999999999 , SI . NANOSECONDS ) , is ( MachineTime . ofSIUnits ( - 1 , 1 ) ) )
Assert . assertEquals ( 183 , mapper . updateByPrimaryKeyAll ( new Country ( ) ) )
assertEquals ( "default" , filter . getIdResultName ( ) )
Assert . assertTrue ( "Failed to adaptive regularization test" , udtf . adaptiveRegularization ( featureVectors , ys ) )
assertFalse ( selected )
assertEquals ( parse ( "1694989 + 336131*a + 4996260*a^2 + 91*a^3 + a^4" , domain , LEX , raiseFactors ) , r )
assertThat ( this . state . getSortColumn ( ) , is ( equalTo ( sortColumn ) ) )
Assert . assertEquals ( result , expected )
assertFalse ( evaluator . shouldProxyHost ( "127.0.0.1" ) )
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
Assert . assertEquals ( 5 , vertices . size ( ) )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( model . weekOfMonth ( ) . incremented ( ) ) , is ( PlainDate . of ( 2000 , 12 , 9 ) ) )
assertEquals ( "{\\"length\\":20,\\"person\\":\\"����\\",\\"person\\":\\"���\\",\\"wdith\\":12.36}" , strategy . write ( new Hello
assertEquals ( "Conversion did not match" , value , to )
assertComparisonFailure ( "Fichier produit en erreur : " + toFilePath ( "FileAssertWithMergeRegion_expected.xls" ) )
Assert . assertEquals ( "FLOOR (x >= 100.5 AND x <= 2.5)" , stormSqlExpression . asString ( ) )
Assert . assertEquals ( "token" , RequesterContextHolder . getContext ( ) . getToken ( ) )
Assert . assertEquals ( "��浜�甯�" , result . toStringUtf8 ( ) )
assertEquals ( 2 , post . getComments ( ) . size ( ) )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
assertEquals ( expected , actual )
assertTrue ( this . userService . getObject ( ) != null )
assertEquals ( tropo . text ( ) , "{\\"tropo\\":[{\\"ask\\":{\\"choices\\":{\\"value\\":\\"[1 DIGIT]\\"},\\"say\\":[{\\"value\\":\\"Please say a digit\\"}],\\"bar
Assert . assertEquals ( 1 , orders . size ( ) )
assertSame ( val , ConfigUtils . getMap ( config , val , "no-value" ) )
assertTrue ( rule . getCondition ( ) . matches ( event ) )
assertEquals ( expected , ColumnRanges . rangeAtNode ( compare ) )
assertThat ( byValue . getSingleResult ( ) . getF ( ) , equalTo ( f1 ) )
assertThat ( id , greaterThan ( 0 ) )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
editor . assertNoHover ( "@UpdateMapping(\\"/greetings\\")" )
assertFalse ( classUnderTest . next ( ) )
Assert . assertEquals ( "Injection points are equal" , dronePoint , dronePoint1 )
assertEquals ( CambriaConstants . kBasePath + "topic/cg/cid?timeout=100" , url )
assertEquals ( Syntax . html , doc . outputSettings ( ) . syntax ( ) )
assertThat ( comment , equalTo ( "Parameter comment on class C" ) )
assertThat ( modified , is ( expectedResult ) )
assertNull ( cursor . next ( ) )
Assert . assertEquals ( 2 , _registry . getTransformSequence ( ) . size ( ) )
assertEquals ( sort . getOrder ( ) , "delete" )
child . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertThat ( lines , contains ( "this is the first line" , "this is the second line" ) )
Assert . assertEquals ( jsonString , JsonUtil . toJsonString ( aclStatusBuilder . build ( ) ) )
assertEquals ( false , result )
Assert . assertEquals ( 2.2 , StatUtils . calcSampleVariance ( x ) , MathUtils . EPSILON )
assertEquals ( expectedResult , entityParser . parseThing ( json ) )
assertEquals ( count , insert ( survey ) . columns ( survey . id , survey . name , param ) . select ( query ( ) . from ( survey2 ) . select ( survey2 . id . add ( 20 ) , survey2 . name ) ) . execute ( ) )
assertEquals ( request . getRequestHeaders ( ) , headers )
Assert . assertEquals ( - 1.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
Assert . assertEquals ( "...(2)" , result )
Assert . assertTrue ( p . match ( "The quick brown fox jumps over the lazy dog." ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertEquals ( OK . getStatusCode ( ) , updateResponse . getStatusCode ( ) )
assertSame ( copied , obj )
assertFalse ( "Deployment export file should not exist" , exportedFile . exists ( ) )
Assert . assertEquals ( option1 , option2 )
assertEquals ( "pred 3 desa钮ro�iami" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( result , cohort )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
Assert . assertEquals ( endereco , retorno . getEndereco ( ) )
assertEquals ( 2 , context . getTableCount ( ) )
Assert . assertEquals ( id , builder . getMessageId ( ) )
assertTrue ( page . asText ( ) . contains ( "MESSAGE 1 MYPARAM" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( res . getStatus ( ) , Response . Status . CONFLICT . getStatusCode ( ) )
assertEquals ( resource , mockHttpRequestBuilder . build ( ) . getResource ( ) )
assertThat ( readBytes ( testee , 4 ) , is ( "Hello|" ) )
assertEquals ( 5 , count )
Assert . assertSame ( managerFactory , AbstractDecorator . getOriginalDecoratedObject ( victim . getManagerFactory ( ) ) )
Assert . assertEquals ( 40. , analyser . getServiceTime ( route ) , 0.01 )
Assert . assertTrue ( dao . insert ( person ) )
assertTrue ( profileSpec . getResources ( ) . size ( ) == 4 )
assertEquals ( resolvedClassPaths , asList ( classpathDirectory . getAbsolutePath ( ) , wildcard ) )
assertTrue ( sph . tryAcquire ( 10 , TimeUnit . MILLISECONDS ) )
assertFalse ( result . passedValidation ( ) )
assertEquals ( masterRoot , fs . getFileSystem ( ) . getUri ( ) )
assertTriggered ( messageCountAlertCondition , result )
Assert . fail ( "should have thrown SQLFeatureNotSupportedException" )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "4.3 million tonnes" , 4.3 , "tonnes" , 4.3 * uk . gov . dstl . baleen . annotators . regex . Weight . POUNDS_
assertEquals ( 6 , tokens . size ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "Unassigned field _staticAssVal equals 3." , 3 , unAssVar )
assertions . isNotEqualTo ( actual )
assertEquals ( chaincodeCollectionConfigurationFromProto , chaincodeCollectionConfiguration )
assertTrue ( correctForms . size ( ) == 6 )
Assert . assertEquals ( "Delete_rows_event_old" , actual )
Assert . assertEquals ( expected , rows . next ( ) . toString ( ) )
editor . assertProblems ( "sts4|Duplicate resource name" , "sts4|Duplicate resource name" , "utils|Duplicate resource name" )
Assert . assertFalse ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , this . right , this . documentReference ) )
Assert . assertEquals ( found . size ( ) , 4 )
assertEquals ( 0 , results . size ( ) )
Assert . assertEquals ( "Test this string" , stringConstant . evaluate ( null ) )
Assert . assertFalse ( json . has ( DATA_NAME ) )
longs . assertLessThan ( description , actual , expected )
assertEquals ( 77 , frame . getInt ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( dropdown ) instanceof WMultiDropdownRenderer )
assertThat ( sut . getIndexOfCode ( 30 ) , is ( 1 ) )
Assert . assertTrue ( ShareUserSearchPage . checkSearchResultsWithRetry ( drone , ADV_FOLDER_SEARCH , searchText , "House my 1" , true ) )
assertEquals ( 10 , content . split ( "\\n" ) . length )
Assert . assertEquals ( - 1 , i )
Assert . assertTrue ( scorer . scoreSplit ( a , b ) > 0.5 )
assertTrue ( d . isUsingStatisticsManager ( ) )
assertEquals ( commit , gfs . getStatusProvider ( ) . commit ( ) )
assertTrue ( hv > 0.65 )
assertThat ( xoManager . find ( D . class , "1" ) . iterator ( ) . next ( ) , equalTo ( a1 ) )
assertOut ( "public final class A extends B implements IA, IB, IC {\\n}" )
assertTrue ( peerAcceptanceUtil . isPeerInterestedOnAllWorkers ( ) )
assertTrue ( componentSet . size ( ) == componentList . size ( ) )
assertEquals ( encoded1 , encoded2 )
assertEquals ( "{\\"number\\":null,\\"string\\":null,\\"raw\\":null}" , writer . toString ( ) )
assertEquals ( "Failed to generate for do while loop with simple expression (no operator and rhs) and chained lhs" , DOWHILE_SIMPLE_EXPRESSION , s )
assertEquals ( "Base value is not properly parsed" , "f1a2b3" , parsed )
Assert . assertEquals ( 1 , violations . size ( ) )
assertThat ( tags , contains ( TAG1 , TAG2 ) )
assertEquals ( "Incorrect size" , 2 , testv . size ( ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertEquals ( "{\\"foo\\":\\"bar\\",\\"xyz\\":[{\\"sub1\\":\\"sub2\\"},{\\"sub1a\\":\\"avalue\\"},{\\"def\\":[{\\"abc\\":\\"xyx\\"}]},{\\"xyz\\":
assertTrue ( params . hasValue ( "a" ) )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertEquals ( contentSize , objFile . length ( ) )
Assert . fail ( "Connection succeeded, but impersonation should be disabled." )
assertEquals ( "GS" , child . getName ( ) )
assertEquals ( "{message=Hello Spring MVC}" , response . getContent ( ) )
Assert . assertEquals ( sorted , sortedRules )
assertOut ( "width=\\"1.5\\"" )
assertInvocations ( invocations )
assertEquals ( expectForbid , newForbid )
assertTrue ( "Different start times" , time1 != time2 )
Assert . assertEquals ( "SHOW GLOBAL STATUS LIKE 'Key%';" , text )
assertSame ( camundaDatasourceMock , getDataSourceFromConfiguration ( ) )
assertTrue ( dest . getServerPolicy ( ) == policy )
assertNull ( messageOut . getType ( ) )
assertThat ( vi . getValue ( ) , is ( "xyz" ) )
assertEquals ( sanitized , rewrite ( gadget , markup , set ( "img" ) , set ( "src" ) ) )
assertEquals ( "Value change not fired" , "null" , getValue ( ) )
assertThat ( values , containsInAnyOrder ( "example.test1" , "example.test2" ) )
assertEquals ( 250 + 100 , scores . getScore ( ) )
runner . assertValid ( service )
assertEquals ( button . getText ( ) , "Compute Sum" )
assertEquals ( "<TimePosition frame=\\"http://my.big.org/TRS/calendars/japanese\\" indeterminatePosition=\\"Before\\" value=\\"0025-03\\"/>" , xmlWriter . getOutput ( ) )
Assert . assertNull ( reified )
assertThat ( conversionService . getConvertedObject ( this . sourceType , targetType ) , is ( equalTo ( this . convertedObject ) ) )
assertMsg ( )
assertTrue ( "Expected the DependencyCheck report to be generated" , report . exists ( ) )
assertTrue ( cause . getMessage ( ) . startsWith ( "No key found in" ) )
assertEquals ( "aTestString" , classUnderTest . getVersion ( ) )
assertEquals ( expected , buf )
assertEquals ( VALUE , secondVictim . getValue ( KEY ) )
assertEquals ( value , maxByColumns [ 0 ] , LARGEST_MIN_MAX_ERROR )
Assert . assertEquals ( getUuid ( ) , PropertyUtils . getProperty ( content , "instructions" ) )
Assert . assertFalse ( ValidationUtils . isNullOrEmpty ( message ) )
assertEquals ( "Wrong number of elements in the saved config" , conf . getInt ( "element2" ) , checkConfig . getInt ( "element2" ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
assertEquals ( 0 , distincted . size ( ) )
assertNotNull ( user )
Assert . assertEquals ( 0 , trimmed . size ( ) )
assertEquals ( hashCode1 , hashCode2 )
assertNull ( metadata . getPatientBirthDate ( ) )
assertNotEquals ( 0 , tokenLists . size ( ) )
Assert . assertEquals ( expected , xml )
AssertAnnotations . assertLemma ( lemmas , select ( jcas , Lemma . class ) )
assertTrue ( metaUncle . isAssignableTo ( metaChild ) )
assertThat ( description . toString ( ) , is ( "SomeClass {\\n" + "  foo(): was <42>\\n" + "  baz(): SomeClass {\\n" + "    foo(): was <42>\\n" + "  }\\n" + "
assertEquals ( entry . getValue ( ) , DBValue )
assertions . isNotEmpty ( )
assertEquals ( testPlatform . getName ( ) , pValue . getName ( ) )
Assert . assertEquals ( "Unexpected message" , "rubbish" , test . getMessage ( ) )
Assert . assertEquals ( sampleSize , result . size ( ) )
Assert . assertEquals ( "first 0:a 1:b 2:c last" , html )
assertTrue ( ns . isAnyUpdate ( ) )
assertThat ( target , is ( instanceOf ( FlowAction . class ) ) )
assertEquals ( renderWithConflictShowingVersionResult ( ) , result )
assertTrue ( detector . isKnsEnabled ( ) )
assertNotNull ( taskTO )
assertEquals ( "Line1 Line2 Line3" , stringBuilder . toString ( ) )
assertEquals ( "onTargetsChanged should have updated targets list" , createUrlFromTargetName ( healthInfoInstances . get ( 0 ) . Service . Address ) , targetProvider . provideTarget ( ) )
Assert . assertEquals ( 200 , status )
assertEquals ( "A1=a, A2=b" , selectionValue )
assertEquals ( exp , res . getDouble ( i ) , 0.01 )
Assert . assertEquals ( new URI ( "http://stuff@localhost/stuff?param=stuff#fragment" ) , result )
assertNotNull ( order )
assertArrayEquals ( array ( ' ' , '\\n' , 'a' , 'b' , 'c' , '\\n' , '\\t' ) , results )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertEquals ( "text/plain" , contentType ( resp ) )
assertThat ( options . getStorageClass ( ) , is ( storageClass ) )
assertEquals ( headers , newHeaders )
assertXpathExists ( "Absent certificate element" , "/SOAP-ENV:Envelope/SOAP-ENV:Header/wsse:Security/ds:Certificate" , document )
assertEquals ( false , result )
assertEquals ( 0 , tasks . size ( ) )
Assert . assertNull ( "Distinct name was expected to be null" , ejbJarMetaData . getDistinctName ( ) )
assertTrue ( underTest . run ( ) )
assertNotNull ( "Failed to get stream" , in )
assertTrue ( easyCriteria . count ( ) > 0 )
Assert . assertNull ( "No se deber�a haber encontrado la aplicaci�n" , aplicacion )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( individual ) )
Assert . assertEquals ( "xxx" , name )
Assert . assertEquals ( "Date " + date + " was not correctly truncated to hours" , dateTruncExpected , dateTruncActual )
Assert . assertNull ( job )
assertOut ( "a(false)" )
assertEquals ( Status . BACKOFF , listener . status . getCode ( ) )
Assert . assertNotSame ( cfg , newCfg )
assertEquals ( 6 , parsers . size ( ) )
Assert . assertEquals ( ";text;stuff\\n" , writer . toString ( ) )
assertEquals ( o1 , o2 )
Assert . assertTrue ( provider . isKeyword ( "SELECT" ) )
assertEquals ( 627 , result )
assertTrue ( result1 == result2 )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertNotNull ( actual )
assertEquals ( 31 , videoCapture . getiExceptionCount ( ) )
assertThat ( content , containsString ( "1 + 1 = 2" ) )
assertEquals ( "true" , actual )
assertEquals ( Order . sellAt ( 1 , NaN , NaN ) , newTrade . getExit ( ) )
Assert . assertTrue ( testConfig . getPartitionWeightMap ( ) . equals ( Collections . emptyMap ( ) ) )
assertNotNull ( ontology )
assertEquals ( writeOperation , writer . getWriteOperation ( ) )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertTrue ( rec_cnt == 3 )
org . junit . Assert . assertEquals ( expected , actual )
assertThat ( model . get ( "k" ) , is ( equalTo ( ( Object ) "v" ) ) )
assertEquals ( "Wrong # of approvers found" , 2 , approvers . size ( ) )
assertNotNull ( "The list of DataObject2 should not have been nulled out" , dataObject . getDataObject2 ( ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "type was not correct" , stepType , actualType )
Assert . assertNull ( to )
assertEquals ( 400 , clientResponse . getStatus ( ) )
Assert . assertEquals ( tz , pid . getInputTimeZone ( ) )
assertFalse ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertThat ( builder . getPatches ( ) , hasItemsInOrder ( "REMOVE /status/conditions/0" , "ADD /status/conditions/- {'message':'hello','reason':'ok now','type':'Available'}" , "ADD /status/conditions/- {'
assertTrue ( Arrays . equals ( s , multiEntry ) )
Assert . assertEquals ( expected , result )
softly . assertAll ( )
assertThat ( driver . findElement ( By . id ( "item1" ) ) . getText ( ) , is ( "" ) )
assertEquals ( expectedMap , iteratedMap )
assertTrue ( stems . isEmpty ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertThat ( optionsByType . get ( Timeout . class ) , is ( fiveMinutes ) )
assertFalse ( result )
assertEquals ( ids . getExternalIdentifier ( ) . get ( 0 ) . getNormalized ( ) . getValue ( ) , "normalized-value" )
assertBeanBinding ( camelctx )
assertEquals ( true , outcome . isFound ( ) )
assertEquals ( expectedQuery , actualQuery )
assertFalse ( property . toStringValues ( ) . isEmpty ( ) )
assertThat ( result , is ( 3 ) )
assertEquals ( result , "John,Jane,Adam,Tom" )
assertEquals ( "Expected another stopwords" , TurkishAnalyzer . getDefaultStopSet ( ) , stopwords )
assertNotNull ( row )
assertThat ( ex , not ( nullValue ( ) ) )
Assert . assertEquals ( account1 . toString ( ) , account2 . toString ( ) )
assertEquals ( "application/octet-stream" , contentType )
Assert . assertEquals ( "Delete_rows_event_old" , actual )
assertEquals ( 5F , strategy . getMedian ( evenNumberOfFloatBandValues ) , 0.0001 )
Assert . assertFalse ( result )
assertThat ( status . getStoragePolicy ( ) , is ( LAZY_PERSIST_POLICY_ID ) )
Assert . assertThat ( i , is ( 10 ) )
assertEquals ( 2 , attemptRulesByActionName . size ( ) )
mini . assertReadFile ( mini . getLocalFs ( ) , fileSpec , "1;one" , "2;two" )
assertions . doesNotContain ( values )
assertSkipped ( myTasks , 2 , 3 )
Assert . assertEquals ( "Not null string" , expectedBinaryString , bitmaskInBinaryString )
assertEquals ( 0 , results . getMessages ( ) . size ( ) )
assertThat ( info . getServerService ( SERVER ) , sameInstance ( currentService ) )
assertEquals ( Integer . of ( 1 ) , result )
assertEquals ( "true" , response . getRefreshToken ( ) )
assertTokens ( new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP , comment ( "test" ) )
assertEquals ( "esting" , removeSentenceDecorator . toDisplay ( ) )
assertEquals ( false , result )
assertFalse ( isEnabled )
assertEquals ( exp , TokenProvider . DEFAULT_EXPIRATION )
Assert . assertFalse ( Arrays . equals ( cmpAlignAndMeet , outAlignAndMeet ) )
assertFalse ( subject . isForceAllEnabled ( ) . isPresent ( ) )
assertThat ( new String ( baos . toByteArray ( ) ) , equalTo ( data ) )
assertThat ( tuple . getCollection ( "field" ) , equalTo ( value ) )
assertThat ( "Returned value is sum of provided ones, not sum of values defined in deactivated code." , response , containsString ( expected ) )
assertTrue ( "Identity realm should be created" , ops . exists ( TEST_IDENTITY_REALM_ADDRESS ) )
Assert . assertFalse ( "Ids should not be the same: " , deterministicId . equals ( deterministicId2 ) )
assertEquals ( expected , baseString )
assertThat ( emailAddress , matchesRegularExpression ( "^\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+" ) )
Assert . fail ( "Missing required input" )
Assert . assertEquals ( "user_id=test" , ctx . getSqlStatement ( ) )
assertThat ( s , equalTo ( ( r ) ) )
assertNotNull ( target )
assertSame ( state , actualState )
assertEquals ( "8 tahun yang lalu" , t . format ( new Date ( 0 ) ) )
assertThat ( client . getScope ( ) . contains ( SystemScopeService . OFFLINE_ACCESS ) , is ( equalTo ( true ) ) )
Assert . assertEquals ( String . class , TestUtils . getPropertyValue ( router , "resultType" , Class . class ) )
assertEquals ( null , CollectionUtils . getByPath ( input , "-1" ) )
assertEquals ( true , isPersistent )
Assert . fail ( "Expected an exception" )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertTrue ( service . getFormatters ( ) . size ( ) > 0 )
assertEquals ( Type . High , filterResult . getValue ( ) )
assertEquals ( AbstractPanel . class , renderer . getComponentClass ( ) )
assertEquals ( 2 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( LocalDate . of ( 1972 , Month . JANUARY , 30 ) , firstDayOfMonth )
assertNotNull ( result )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 ) ) )
log . assertContent ( "" )
assertEquals ( 1L , query ( ) . from ( employee ) . where ( where ) . fetchCount ( ) )
assertTrue ( op . quiet )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertFalse ( v1 . equals ( v2 ) )
assertThat ( cls , is ( nullValue ( ) ) )
assertTrue ( startsWithHttp )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertEquals ( 0L , volumeStates . documentCount . longValue ( ) )
assertTrue ( connection . toString ( ) + " is not transaction aware" , connection . toString ( ) . startsWith ( "Transaction-aware proxy for target Connection  from DataSource [Mock for DataSource" ) )
Assert . assertEquals ( revisions . get ( 0 ) . getId ( ) , 2 )
assertFalse ( "Got a listener" , listener . gotEvent ( ConfigurationBuilderEvent . RESET ) )
Assert . assertFalse ( accept )
Assert . assertEquals ( message , 0.0 , error , 1E-10 )
assertEquals ( 1 , sizeWithUnfilteredQuery ( ) )
assertThat ( client . getHost ( ) , equalTo ( "localhost" ) )
assertEquals ( "http://localhost/" , client . getBasePath ( ) )
assertEquals ( 265463 & 342 , executeTestMethod ( test , Integer . class , null , 265463 ) . intValue ( ) )
assertEquals ( 1 , deleteCount )
Assert . assertEquals ( "<p /&gt;\\n<p /&gt;</p>\\n" , writer . toString ( ) )
assertScoreAndParse ( content , null , 1 )
assertTrue ( squaresCache . containsKey ( 6 ) )
assertEquals ( 0 , list . size ( ) )
assertThat ( f . apply ( good_uris ) , equalTo ( asList ( new URL ( "http://example.com/example_a" ) , new URL ( "http://example.com/example_b" ) , new URL ( "http://example.com/example_c
comparator . assertLinesMatch ( )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( want , sql )
assertEquals ( "ext" , sub . getExtension ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( ImmutableList . of ( category1 , category2 ) , categories . getValues ( ) )
assertEquals ( 5 , results . length )
assertEquals ( 2 , tasks . size ( ) )
assertTrue ( dtoProductTypeAttr . getProductTypeId ( ) > 0 )
Assert . assertEquals ( "Some Privilege" , privilege . getPrivilege ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertEquals ( "fra 1 ora" , t . format ( new Date ( 1000 * 60 * 60 * 1 ) ) )
assertThat ( headlineOf ( view ) , is ( "1 build has failed since Ben, Connor and Daniel committed their changes" ) )
assertEquals ( read ( pom ) , "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<project>\\n" + "    <!-- Repositories --> \\n" + "    <repositories>\\n" + "        <repository>\\
assertNull ( "Got a value" , value )
editor . assertProblems ( "color|Duplicate" , "name|Duplicate" )
assertEquals ( 2 , context . getTableCount ( ) )
assertThat ( commercialFeaturesArgument , is ( nullValue ( ) ) )
Assert . assertEquals ( 65. , tdCosts . getBackwardTransportTime ( loc ( "from" ) , loc ( "to" ) , 100. , null , null ) , 0.01 )
assertEquals ( "Wrong timeout" , expectedTimeout , clientOptions . getServerSelectionTimeout ( ) )
assertFalse ( valid )
assertEquals ( BuildState . SUCCESS , state )
assertThat ( result . toString ( ) , is ( equalTo ( "HELLO" ) ) )
Assert . assertEquals ( 200 , resp . getStatus ( ) )
assertEquals ( result , expecting )
assertTrue ( "permission was not granted." , updateUserPermission . isAllowed ( auth , 1L ) )
assertThat ( m . get ( key ) , sameInstance ( "val1" ) )
assertTrue ( mainServices . isSuccessfulBoot ( ) )
assertTrue ( "Hash is invalid" , Arrays . equals ( SHA256_DIGEST . getBytes ( ) , result . getBytes ( ) ) )
assertEquals ( "[(AppNode:test:0>4)>(file:8>11)]" , sn . stringify ( true ) )
assertEquals ( 12.5664 , perims [ 0 ] , .01 )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( 1 , results . length )
Assert . assertNotNull ( "null entries returned" , entries )
assertEquals ( parent . models . size ( ) , 1 )
Assert . assertEquals ( validator . validate ( EntityNames . STUDENT , studentIds ) . size ( ) , studentIds . size ( ) )
assertEquals ( 2 , map . size ( ) )
assertEquals ( "Read timeout" , 0 , arc . out . size ( ) )
Assert . assertEquals ( 4 , layer . getNeuronsCount ( ) )
assertDegenerate ( scan )
assertEquals ( exp , array1 )
Assert . assertEquals ( "{}" , result )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Unexpected size observed" , 1 , fail . value )
assertEquals ( TEST_DATETIME , DateTimeUtil . getUTCDateTime ( datum ) )
assertEquals ( expectedValue , value . getValue ( 101L ) )
assertEquals ( 100. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertThat ( nameCollection . stream ( ) . anyMatch ( predicate ) , is ( false ) )
assertFalse ( aNumber . equals ( bNumber ) )
assertTrue ( proxy . isClosed ( ) )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "code" ) )
Assert . assertEquals ( reply , receivedReply )
assertEquals ( nodeName , node . getName ( ) )
assertEquals ( null , val )
assertThat ( configuration . isCsvEnabled ( ) , is ( true ) )
assertEquals ( "\\t\\tcontext.checking(new Expectations(){{\\r\\n
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
Assert . assertEquals ( 2 , index )
assertEquals ( "Unexpected locale from component" , COMPONENT_LOCALE , locale )
assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( "1234/123456789" ) )
Assert . assertEquals ( "DUMMY" , Browser . get ( PageWithParameterizedURL . class ) )
assertEquals ( expected , actual )
assertEquals ( 664 , size )
Assert . assertEquals ( "Unexpected result" , 0 , result . size ( ) )
assertEquals ( 5 , paragraphElement . getElementCount ( ) )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "actors/Keanu" ) )
assertEquals ( "Value not set" , VALUE , config . getString ( testKey ) )
Assert . assertEquals ( 1 , ( int ) System . identityHashCode ( System . err ) )
assertThat ( Datastore . stringToKey ( encodedKey ) , is ( key ) )
assertThat ( renderEngine , instanceOf ( TcpRenderEngine . class ) )
assertTrue ( "marker is replaceable when it when timestamp after expiry" , marker . isReplaceableBy ( 101L , null , null ) )
assertEquals ( HttpStatus . BAD_REQUEST , result . getStatusCode ( ) )
assertThat ( TreeNodeHelper . inorderTraversal ( root ) . getChildCount ( ) , is ( 7 ) )
Assert . assertEquals ( "should have returned the user" , addedUser . getName ( ) , actualUser . getName ( ) )
assertPermanentCount ( playerA , anthem , 1 )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . PEER_REVIEW_READ_LIMITED )
assertArrayEquals ( data , value . getData ( ) )
assertNotNull ( AtlasMapUtil . find ( file . toURI ( ) . toURL ( ) ) )
assertEquals ( count . longValue ( ) , 1 )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "connectionNameList" , MULTIPLE_ACTIVEMQ_BROKERS ) )
Assert . assertTrue ( defaultIsolationLevel == IsolationLevel . TRANSACTION )
Assert . assertEquals ( BarcodeDataMatrix . DM_ERROR_EXTENSION , result )
assertOut ( "var /** @type {*} */ a = (a + b)" )
Assert . assertTrue ( stop . get ( ) )
assertEquals ( "Barry" , id )
assertEquals ( new ExtendedPanId ( "123456789abcdef" ) , dongle . getZigBeeExtendedPanId ( ) )
assertTrue ( result instanceof V8Function )
assertNotNull ( account )
assertIntersect ( ranges , "b" , "l" , "j" )
assertEquals ( "[true,1.0,1.0f,1.0,1.0,123,{\\"hi\\":null,\\"abc\\":123},1,2,3,{\\"a\\":{}}]" , a . toString ( ) )
assertTrue ( list instanceof LinkedList )
assertThat ( att , is ( notNullValue ( ) ) )
assertEquals ( "test" , empty . getMessageType ( ) )
Assert . assertEquals ( 1 , a . getCbo ( ) )
assertEquals ( "1" , idCaptor . getValue ( ) . getIdPart ( ) )
assertTrue ( validation . isSuccessful ( ) )
assertEquals ( geo , expResult )
Assert . assertEquals ( monitor1 , monitor2 )
assertEquals ( "First Value After Reset Is e" , 'e' , ( char ) _textReader . read ( ) )
assertTrue ( runtimeTestComparator . compare ( runtimeTest1 , runtimeTest2 ) < 0 )
assertEquals ( expected , actual )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response6 . getResponseObject ( ) )
Assert . assertFalse ( matcher . acceptAll ( ) )
assertEquals ( "id" , portResult . getComponent ( ) . getId ( ) )
Assert . assertEquals ( "password/change/expired" , view )
assertThat ( table . asString ( ) , equalTo ( tableAsString ) )
assertTrue ( future . get ( ) )
assertEquals ( o , mockUser )
assertThat ( numbers , arrayContaining ( 10 , 15 , 20 ) )
assertEquals ( toString ( expected ) , toString ( actual ) )
Assert . assertTrue ( runner . contains ( task ) )
assertThat ( renderedProjectName , startsWith ( "test_projectname" ) )
Assert . assertArrayEquals ( result . toArray ( ) , str . toCharArray ( ) )
assertPaths ( executionPaths , executionPath ( JCSwitch . class , JCBlock . class , JCBlock . class , JCExpressionStatement . class , JCReturn . class ) )
paths . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertEquals ( "slaveName" , helper . nextFreeIdentifierForResourceEditRelations ( relations , 21 , StringUtils . EMPTY ) )
assertFalse ( service . publish ( "message" ) )
assertNotFound ( client . executePost ( "/foo" , "{\\"key_a\\":\\"incorrect\\"}" , ContentType . APPLICATION_JSON ) )
assertEquals ( "tableName" , database . escapeTableName ( null , null , "tableName" ) )
context . assertTrue ( result . isEmpty ( ) )
Assert . assertEquals ( ResultSet . TRANSACTION_READ_COMMITTED , connection . getTransactionIsolation ( ) )
Assert . assertEquals ( Integer . valueOf ( 10 ) , value )
runner . assertAllFlowFilesTransferred ( SplitText . REL_FAILURE , 1 )
assertOut ( "var /** @type {string} */ a = escape('http://whatever.com')" )
assertThat ( option , is ( new IntOption ( 100 ) ) )
assertEquals ( 98.75 , empty . getHeadingToDestionation ( ) , 0.1 )
assertThat ( errors , not ( hasFieldErrors ( "middleName" ) ) )
assertEquals ( version + 1 , jobExecution . getVersion ( ) )
assertEquals ( 2 , Solutions . bestOf ( solutions ) . getRoutes ( ) . size ( ) )
assertEquals ( 1 , result )
assertThat ( cb . getForwardCallback ( ) , nullValue ( ) )
assertNull ( context )
Assert . assertEquals ( "The response status to a reqeuest with 'range=bytes=10-20' header should be NOT_MODIFIED(304), if the file exists" , 304 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertSame ( this . edit , this . mocker . getComponentUnderTest ( ) . resolveAccessLevel ( "edit" ) )
assertThat ( method . propertyName ( ) , is ( "isATestMethod" ) )
Assert . assertEquals ( 0.0d , singletest , 0 )
assertEquals ( "Hawk error=\\"expired\\"" , h . toString ( ) )
assertThat ( falsePositiveCount < 5 , is ( true ) )
assertEquals ( 90 , rotation )
assertEquals ( al . get ( j ) , ft . get ( j ) )
assertEquals ( "modify stream" , output )
assertEquals ( false , out . firstElement ( ) . get ( ) )
assertNotNull ( entity . getId ( ) )
assertEquals ( expected , elements )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optTopNSorting ) )
assertEquals ( expectedUsernamePasswordString , SecurityUtils . getUsernamePasswordDomainString ( username , password , domain ) )
Assert . assertTrue ( isValid ( sb . toString ( ) ) )
assertThat ( NF . booleanNode ( true ) , is ( sut ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
assertSuccess ( errors , wait , TimeUnit . SECONDS )
assertEquals ( - 1 , sut . execute ( new HashMap < > ( ) ) )
assertTrue ( rf . supportsMultiSpop ( ) )
Assert . assertEquals ( "{\\"@context\\":\\"../$metadata#ESAllPrim(4242)/PropertyString\\"," + "\\"@metadataEtag\\":\\"W/\\\\\\"metadataETag\\\\\\"\\",\\"value\\":null}" , resultString )
assertTrue ( p . isReadable ( SimpleMessageBody . class , null , null , null ) && p . isReadable ( SimpleMessageBody . class , null , null , null ) && p . isReadable ( SimpleMessageBody . class , null , null , null ) )
assertEquals ( "TEST" , tree . getNodeById ( 30 ) . getName ( ) )
assertEquals ( LazyInitRegistration . APPLICATION_CONTEXT , applicationContextMock )
Assert . assertTrue ( new JSONObject ( PEDIGREE_2_MIGRATED_DATA ) . similar ( new JSONObject ( captured ) ) )
assertTrue ( entry . getValue ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( 2 , list . size ( ) )
assertEquals ( "herb,bossing,whip long tag" , bankTagsPlugin . searchBank ( "whip" ) )
assertEquals ( "123451234512345" , entity . getId ( ) )
Assert . assertEquals ( "SELECT pet.id FROM t_pet pet  WHERE pet.pet_id = ?" , sql )
assertFalse ( server . canConnect ( now + 2000 ) )
assertNotNull ( notebook )
assertEquals ( 0.0 , y . get ( InsideOutsideDepParse . ROOT_IDX , 0 , 0 ) , 1e-13 )
Assert . assertTrue ( bos . toString ( ) . contains ( utf8 ) )
assertNotNull ( foundVarArgsMethod )
assertThat ( writer . get ( ) , is ( 2d ) )
assertTrue ( output . startsWith ( "<!DOCTYPE html>" ) )
assertEquals ( expected , actual )
assertTrue ( "Challenges with different id can't be equal" , challenge1 . equals ( challenge2 ) )
assertEquals ( 5 , result . size ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 51 , results . size ( ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
Assert . assertEquals ( id , infoEventoManifestacaoDestinatario . getId ( ) )
assertEquals ( "Message: [Tim] [" , ResponseBodyInterpolator . interpolate ( "Message: [[request.body] [" , req ) )
assertArrayEquals ( new char [ ] { '?' , '?' , '?' , '?' , '?' , '?' , '?' } , builder . getMask ( ) )
Assert . assertTrue ( false )
assertEquals ( DATE_VAL_b , p . getDate ( ) )
assertEquals ( key , type . getName ( ) )
assertResultSet ( res , "testDistinctAggregation_case3.result" )
assertThat ( converter . toJavaObject ( new IntWritable ( 1 ) ) , is ( ( Object ) 1 ) )
assertEquals ( dto , dto2 )
assertEquals ( "Base for strings is wrong" , Integer . valueOf ( 3 ) , parsed )
assertStoreDoesNotContain ( keys )
assertEquals ( expectedStringRepresentation , ind . toString ( ) )
arrays . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Yoda" ) )
Assert . assertFalse ( matcher . match ( rule , null , testNode ) )
assertEquals ( "HelloWorldPortTypeImpl not properly saying hi" , "Hello Sam" , response )
assertEquals ( expResult , result )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 ) ) )
assertEquals ( value , propertiesConfigurationProperties . getString ( key ) )
assertAnalyzesTo ( analyzer , html , new String [ ] { "test_run" } )
assertFalse ( dss . hasJs ( ) )
Assert . assertEquals ( "true" , result )
assertSamples ( )
assertObjectEquals ( "{f1:'x1'}" , p . run ( bs , in , sa ) )
Assert . assertEquals ( 2 , result . size ( ) )
assertEquals ( expected , actual )
assertThat ( className , is ( "org.adrianwalker.multilinestring.JSLintMultilineProcessor" ) )
assertEquals ( expected , actual )
assertThat ( unix ( instance , strategy ) , equalTo ( "0.0.0.0" ) )
Assert . fail ( "an exception should have been thrown" )
Assert . assertEquals ( "one -- two -- three -- four-- five --six" , actualResult )
assertEquals ( messagePage . getTotalPages ( ) , pageCount , "Incorrect count of pages." )
assertEquals ( value , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertEquals ( "1/m" , u . toString ( ) )
Assert . assertEquals ( "https://sentilo.domain.org/mockResource?id=1" , finalRedirectUrl )
assertEquals ( "{\\"some\\":\\"data\\"}" , playerGames . get ( "player" ) . getGame ( ) . getSave ( ) . toString ( ) )
Assert . assertNotNull ( n )
assertEquals ( BatchStatus . FAILED , jobExecution . getBatchStatus ( ) )
assertEquals ( partitioner . getPartition ( key1 , null , numPartitions ) , partitioner . getPartition ( key2 , null , numPartitions ) )
assertTrue ( isWindowCreated ( appUUID , conn ) )
Assert . assertEquals ( ".abcxyz" , actual )
Assert . assertEquals ( expected , actual )
assertThat ( vdl , is ( nullValue ( ) ) )
assertArrayEquals ( all , ( int [ ] ) sm . getSlice ( new int [ ] { 0 , 0 } ) )
assertThat ( result , hasSize ( 0 ) )
assertThat ( user . getPassword ( ) , is ( nullValue ( ) ) )
assertEquals ( expectedBody , consulResponse . getResponseBody ( ) )
assertNull ( MultiParts . getContentType ( param ) )
assertEquals ( "" , 0 , info . size ( ) )
assertEquals ( Arrays . asList ( new Category ( ) ) , mockResult . included ( "categories" ) )
assertThat ( new PdfTextExtractorByArea ( ) . extractFooterText ( page ) . contains ( withBadCharacter ) , is ( true ) )
Assert . assertEquals ( widgetSize + 1 , jq ( ".zswidget" ) . length ( ) )
assertEquals ( expected , actualQuery )
assertEquals ( "/some_file.txt" , path . toString ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( expected , actual )
assertEquals ( - ROOK_FILE_PASSED_PAWN_BOOST , score )
assertEquals ( Type . CHAR , d . type ( ) )
assertNotEquals ( insertAction , retractAction )
Assert . assertTrue ( response . contains ( "Invalid content was found starting with element 'invalid-element'. No child element is expected at this point." ) )
assertNotNull ( solver )
assertTrue ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( VerifyFailType . SORT , pluginParameters . verifyFailType )
assertThat ( jsonGeneratorParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/SentryStackTrace.json" ) ) )
assertEquals ( 30 , simulation . getLongestTotalSleepSequence ( ) )
assertTrue ( Pattern . matches ( "(?s).*First0.*Last0.*First1.*Last1.*First2.*Last2.*" , page . asXml ( ) ) )
assertNotNull ( resolved )
Assert . assertEquals ( 16 , es . size ( ) )
assertEquals ( "{0}' hi" , instance . formatMessage ( record ) )
assertEquals ( 1.0 , result . getOccurrenceRatio ( ) , 0.0 )
assertTrue ( syncWorker . isColdSyncCalled ( ) )
assertEquals ( ShardConsumerState . PROCESSING . consumerState ( ) . state ( ) , consumer . currentState ( ) . state ( ) )
Assert . assertEquals ( "some [b]bold[b] text" , formatter . format ( "some [b]bold[b] text" , defaultOptions ( ) ) )
assertThat ( target . addLink ( link ) , is ( true ) )
assertEquals ( "January note for translators" , translation )
assertSynchAll ( picker , date )
Assert . assertFalse ( validator . isValid ( "12345678912" , context ) )
assertEquals ( expect , pred )
assertEquals ( expectedRestriction , restriction )
assertEquals ( "XML Equals" , jdkXml , javolutionXml )
assertThat ( image , is ( equalTo ( "http://graphviz.com/toImage.png" ) ) )
assertEquals ( expected , ld . getContentField ( "date" ) )
Assert . assertEquals ( "SELECT " + fixedColumns + ",`foo.bar` FROM v WHERE _user_ = 'me' GROUP BY `foo.bar`" , sql )
assertTrue ( niciraActionDeserializerKey . equals ( obj ) )
assertEquals ( 405 , getStatus ( post ) )
assertTrue ( registry . getElements ( ) . isEmpty ( ) )
assertEquals ( "536788f4dbdffeecfbb8f350a941eea3" , computeTMTextUnitMD5 )
assertEquals ( expected , actual )
assertEquals ( expectedResult , result )
assertFalse ( parsed . hasQuery ( ) )
Assert . assertEquals ( negatives . length , count )
assertEquals ( "((key != 'stringhello' and key != 'stringgoodbye'))" , jexl )
Assert . assertTrue ( scriptFile . exists ( ) )
assertThat ( subject . supports ( update ) , is ( true ) )
assertThat ( job . getDuedate ( ) , is ( removalTime ) )
assertNotNull ( response )
assertEquals ( getMessage ( MessageKeys . LABEL_TR_MENU_MENUMESSAGE ) , driver . findElement ( By . id ( "messagesArea" ) ) . getText ( ) )
Assert . assertEquals ( THIRTEEN_INTEGER , pi . getThirteenInteger ( ) )
assertThat ( backend . copyToMap ( ) . size ( ) , equalTo ( 0 ) )
assertThat ( address2 . equalsContent ( address1 ) , is ( false ) )
assertEquals ( threadLocalRandom . getSalt ( ) , Sha512Crypt . encrypt ( threadLocalRandom . getBytes ( ) ) )
Assert . assertTrue ( matches )
assertEquals ( expected , actual )
Assert . assertTrue ( "Failure - expected to be OK" , status == 404 )
Assert . assertSame ( userInfo , service . getUserInfo ( ) )
XmlAssert . assertEquals ( EXPECTED_XML_RESPONSE , xmlResponse )
assertEquals ( ProcessInstance . STATE_COMPLETED , processInstance . getState ( ) )
assertEquals ( tuple , deserializedTuple )
assertEquals ( "1 & 2 & 3" , generate )
Assert . assertNotEquals ( date , entity . getLastModified ( ) )
assertFalse ( lock . lock ( ) )
assertEquals ( hasNextField . get ( reader ) , true , "hasNext field should be set to TRUE" )
Assert . assertEquals ( "my-very-first-param and second_param_123 or ${something}" , result )
assertRequest ( "DELETE" , "Conference/" )
Assert . assertEquals ( 0 , t1 . compareTo ( null ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertTrue ( result . isSuccess ( ) )
assertIsSemver ( semver , version , 1 , 2 , null , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
Assert . assertFalse ( offsetwaiter . tryWaitfor ( new HostPort ( host , port ) , masterInfo , executionLog ) )
assertEquals ( multicron , cron . asString ( ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( 86399. , Time . parseTimeToSeconds ( time ) , 0.01 )
assertComparatorEquals ( ALWAY_EQUALS_STRING , getComparator ( a , b , fieldComparators ) )
Assert . assertEquals ( config . getHashAlgorithm ( ) , newVal )
Assert . assertEquals ( new DoubleMatrix ( SOL_33_EXPECTED ) , SOL_33_ACTUAL_ABS )
assertFalse ( result )
assertEquals ( childProject1 . getCombinationFilter ( ) , childCombinationFilter )
Assert . assertNull ( pojo . testManager )
Assert . assertSame ( TableTestUtils . ACTUAL_2 , actual )
assertEquals ( "Hello ^there" , ResponseBodyInterpolator . interpolate ( "Hello ^there" , req ) )
assertEquals ( true , selector . isCountable ( ) )
assertEquals ( "foo - bar baz" , spec . getModulePrefs ( ) . getTitle ( ) )
assertEquals ( "" , encryption )
Assert . assertEquals ( "Incorrect heading" , heading , group . getHeading ( ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertEquals ( "1/kg" , u . toString ( ) )
assertEquals ( 1 , impl . getArgumentIndex ( ) )
assertEquals ( result . size ( ) , 2 )
assertEquals ( 0 , empty . getCategoryCount ( ) )
assertFalse ( result )
assertEquals ( 3 , hitCount )
assertEquals ( "x containsKey('name')" , c . toString ( ) )
assertArrayEquals ( plaintext , result )
assertTrue ( result . isLeft ( ) )
assertFalse ( tQuery . containsRowWithKey ( 1337 ) )
assertEquals ( wrappedTemplate + " LIKE ?" , test . build ( ) )
Assert . assertEquals ( actualMav , null )
assertNotNull ( list )
assertEquals ( LOGIN_URL , response . getRedirectedUrl ( ) )
assertEquals ( 10 , reportsCount . get ( ) )
assertTrue ( figure instanceof Cyan )
assertEquals ( EntityNameCharType . BOUNDARY , type )
Assert . assertEquals ( "" , customParams , an . getCustomParams ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( "a, b, c, d" , ExpressionFieldAction . process ( action , Arrays . asList ( 1 , 2 , 3 , 4 ) ) )
Assert . assertEquals ( "12345678" , capturaReturn . getTid ( ) )
assertEquals ( "0017880100DC880B" , address . toString ( ) )
assertTrue ( res . next ( ) )
assertEquals ( "thumbnail.filename.middle.jpg" , filename )
assertEquals ( 0 , report . getReportLines ( ) . size ( ) )
Assert . assertEquals ( xmlEsperado , icmsst . toString ( ) )
assertThat ( returnedStatement , is ( equalTo ( base ) ) )
assertEquals ( "Wrong content" , CONTENT , content . getContent ( ) )
Assert . assertNotNull ( jis . getManifest ( ) )
assertSame ( expr . accept ( visitor ) , visitResult )
assertEquals ( asList ( new File ( "/opt" ) , new File ( "/var" ) ) , nonOptions . values ( options ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT selector1.* FROM nt:unstructured WHERE selector1.jcr:uuid IS NOT NULL ORDER BY NAME(selector1) ASC NULLS LAST" ) )
assertEquals ( 100 , g . getLength ( ) )
Assert . assertTrue ( output . contains ( "name: string;" ) )
Assert . assertEquals ( path , ".." + File . separatorChar + ".." )
assertEquals ( NaCl . Sodium . CRYPTO_PW_HASH_EMPTY_STRING , result )
assertFalse ( "No Longer Contains 1" , _fastTable . contains ( 1 ) )
assertEquals ( newArrayList ( new TestMatcher < Object > ( ) ) , join . conditions )
assertTrue ( got . contains ( "Enabled service account:" ) )
Assert . assertTrue ( instantiatorResource . meetsQuantitativeRequirements ( request ) )
assertEquals ( "presenter name: test" , e . getMessage ( ) )
assertEquals ( 404 , responseGet . getStatus ( ) )
assertThatEditorHasValue ( comboBox , 20 )
Assert . assertNotNull ( json )
assertEquals ( 50 , p . getAge ( ) )
assertThat ( project . property ( "asakusafw.version" ) , is ( "TESTING" ) )
assertThat ( seleniumQueryObject . toString ( ) , is ( format ( "$(\\"%s\\").filter(selector)" , selector ) ) )
assertValidReplaceKind ( repositoryRoot , revision , SVNNodeKind . DIRECTORY )
Assert . assertEquals ( 1 , Context . getSearchIndex ( ) . getPatients ( Patient . class ) . size ( ) )
assertEquals ( str , str2 )
assertEquals ( "Locations should be the same even though they were expressed differently" , l , r )
assertContains ( "<p>Now</p>\\n" + "<p>2011-12-19 10:20:04 AM</p>\\n" , result . xml )
mock . assertIsSatisfied ( )
Assert . assertEquals ( asyncClient . getBaseUri ( ) . toString ( ) , UrbanAirshipClient . EU_URI )
Assert . assertEquals ( numeroNFInicial , dados . getNumeroNFInicial ( ) )
Assert . assertEquals ( 200 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( actual , containsString ( "description=\\"descr-custom\\"" ) )
Assert . assertEquals ( 128 , iStack . size ( ) )
assertNull ( "The appender should be null." , appender )
ConcurrentTestUtil . assertConcurrent ( "" , runnables , TEST_TIMEOUT )
assertEquals ( money ( "10.00" , USD ) , accountBalance . getBalance ( ) )
assertEquals ( 1 , results . getMessages ( ) . size ( ) )
assertArrayEquals ( expected , actual )
assertEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertEquals ( dto . getUserContacts ( ) . size ( ) , 0 )
assertEquals ( 2 , instance . getParents ( ) . size ( ) )
Assert . assertEquals ( "handle = MethodHandles.foldArguments(handle, " + Fold . FOLD_FUNCTION_JAVA + ");" , toJava )
assertThat ( provider . getOther ( Duration . of ( 10 , ChronoUnit . MILLIS ) ) , is ( BigDecimal . valueOf ( 10 ) ) )
assertEquals ( 1 , ret )
assertFalse ( milestoneTracker . isInSyncTestScanIncomplete ( ) )
assertEquals ( sv . getString ( context . getValue ( ) ) , provider . getString ( context . getValue ( ) ) )
assertEquals ( exp , matrix . getColumn ( 0 ) )
assertFalse ( action . shouldHandle ( flaggable ) )
assertEquals ( 7 , list . size ( ) )
assertEquals ( expResult , result )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( set . equals ( orginalCollection ) )
Assert . assertTrue ( evictor instanceof MaxFreeAllocator )
assertEquals ( expectedMap , map )
Assert . fail ( "Should have thrown exception" )
assertNull ( lineage . getFlowPath ( ) )
assertRowCount ( results , 1 )
PSLTest . assertModel ( dataStore , rule , new double [ ] { } )
assertNotNull ( object )
assertEquals ( 1 , rpt . size ( ) )
assertEquals ( "<p><a rel=\\"nofollow\\">Dodgy</a> <a href=\\"http://nice.com\\" rel=\\"nofollow\\">Nice</a></p><blockquote>Hello</blockquote>" , TextUtil . stripNew
assertNotNull ( streamable )
assertEquals ( Arrays . asList ( "C" , "BA" , "D" , "BB" ) , result )
Assert . assertEquals ( varName , expectedArray [ i ] , resultArray [ i ] )
assertEquals ( optionsGiven , optionsComputed )
assertNull ( Deencapsulation . getField ( actual , "extra" ) )
assertEquals ( "Nummisuutarit" , document . get ( "title" ) )
assertEquals ( stage , c . completable . whenFailed ( consumer ) )
Assert . assertTrue ( false )
assertThat ( options . getCredentialsProvider ( ) , is ( ConfigurationVariable . CREDENTIAL_PROVIDER . defaultURIValue ( ) ) )
Assert . assertEquals ( "Number of jobs" , 6 , jobs . size ( ) )
assertThat ( mock . initialDelay , is ( 0L ) )
assertEquals ( "1" , result )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.B = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.
assertThat ( Robolectric . shadowOf ( activity ) . getAlertStatusStrip ( ) , equalTo ( "fatal" ) )
assertEquals ( new Integer ( "2147483647" ) , result )
assertMockEndpointsSatisfied ( )
assertThat ( logger1 . getClass ( ) , is ( logger2 . getClass ( ) ) )
assertEquals ( 1 , container . getInstances ( ) . size ( ) )
assertTrue ( STRATEGY . shouldTerminate ( context ) )
assertSame ( entityA . getEnumProperty ( ) , copy . getEnumProperty ( ) )
assertEquals ( hll . cardinality ( ) , hll2 . cardinality ( ) )
assertEquals ( expectedId , dbms . getId ( ) )
assertEquals ( response , actualResponse )
assertTrue ( failedAsExpected )
assertNull ( id )
objects . assertHasAllNullFieldsOrPropertiesExcept ( someInfo ( ) , jedi , "name" )
assertThat ( location , is ( nullValue ( ) ) )
assertEquals ( "IdentifierLabel" , resource . getIdentifier ( ) . get ( 0 ) . getValue ( ) )
assertThat ( read ( format , written ) , contains ( true ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "other_group" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertMandatoryElements ( targetProduct , false )
assertChildrenInclude ( branches , "master" )
Assert . assertEquals ( 1 , result . size ( ) )
assertTrue ( "Bean class not found" , classesPassedToFactory . contains ( config . getClass ( ) ) )
Assert . assertFalse ( "Invalid result [" + result + "]" , result )
assertEquals ( MockHttpServletResponse . SC_OK , response . getStatus ( ) )
assertEquals ( "" , "" + swct )
Assert . assertEquals ( "cde" , test . getStdOut ( ) )
assertEquals ( Boolean . FALSE , e . getEnableCounting ( ) )
Assert . assertTrue ( this . manager . delete ( this . doc ) )
assertThat ( kryo , is ( notNullValue ( ) ) )
assertTrue ( res . equals ( result . toString ( ) ) )
assertEquals ( expected , captor . getValue ( ) . getRequest ( ) )
assertEquals ( expected , message . getBody ( ) )
assertEquals ( BuilderFactory . start ( ) . add ( "a" , 123456789L ) . build ( ) , doc )
assertThat ( confirmation . getConfigurationKey ( ) , equalTo ( keyValueType ) )
assertEquals ( childProject1 . getTouchStoneCombinationFilter ( ) , childCombinationFilter )
assertArrayEquals ( expResult , result )
assertEquals ( "TitleToIgnore" , metadata . get ( Metadata . TITLE ) )
assertEquals ( jobTrackerPort , namedClusterBridge . getJobTrackerPort ( ) )
TestCase . assertEquals ( 405 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( cDate , eDate )
Assert . assertTrue ( "Best point not reported" , f . value ( sol ) <= f . value ( expected ) )
rule . assertScenarioEnded ( )
assertFalse ( order . hasSameOrderableAs ( otherOrder ) )
assertTrue ( true )
assertTrue ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertEquals ( 2 , set . size ( ) )
assertions . isNotLessThan ( new Double ( 10d ) )
assertTrue ( fetchCommand . isAValidDefinition ( createPerspectiveDefinition ( ) ) )
Assert . assertEquals ( "Delete_rows_event_old" , actual )
assertEqualsIgnoreWhitespace ( drl , actualDrl )
assertTrue ( "Editable owner ACE for UID1 should have been updated" , store . getEditableOwnerAccessControlEntries ( UID1 ) . size ( ) == 1 )
assertEquals ( "The job has been failed" , LauncherStatus . COMPLETED , AddVectorET . runAddVector ( args ) )
Assert . assertEquals ( reqTotal , grpcServerMetrics . getLogRequestTotal ( heartbeat ) )
assertThat ( CompUInt128 . extractValue ( actual ) , Is . is ( expected ) )
assertEquals ( 400 , status . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Wrong message: " + msg , msg . startsWith ( expected ) )
assertTrue ( list . equals ( plist ) )
assertFieldValues ( new String [ ] { } , showView . getFieldValuesExcludingId ( ) )
assertEquals ( Boolean . FALSE , dependentService . getValue ( ) )
assertThat ( results . getTotalElements ( ) , equalTo ( 1L ) )
assertThat ( matcher . matches ( list ) , is ( true ) )
assertEquals ( g1 , g2 )
assertEquals ( 2 , i )
assertFalse ( matches )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , out )
assertNotNull ( post )
assertEquals ( 84.0 , r . getUpperBound ( ) , 0.00001 )
arrays . assertDoesNotContain ( description , actual , value , index )
assertTrue ( sqsConnection . isClosed ( ) )
assertEquals ( 2 , messages . size ( ) )
assertFalse ( set1 . equals ( set2 ) )
assertNotNull ( nacionalidad . getId ( ) )
assertEquals ( "a<V>\\n" , found )
assertNotEqualsBothWays ( one , two )
assertThat ( catalogue . allAttributes ( ) . keySet ( ) , hasItems ( "field1" , "field2" , "field3" ) )
assertThat ( PrettyTime . of ( Locale . US ) . withDefaultListSeparator ( " | " ) . withLastListSeparator ( " + " ) . print ( duration , TextWidth . WIDE ) , is ( "1 year + 2 months + 3 days" ) )
assertTrue ( "The subject should have contained the fetched values" , result1 )
assertTrue ( process . getExitOnStandardFault ( ) )
assertEquals ( ExpressionFactory . dbPathExp ( "paintingArray.toArtist.artistExhibitArray.toExhibit" ) , translatedExpression )
assertOut ( "var /** @type {XML} */ a = XML('@')" )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasItems ( configMapKeyRefEnvVar , secretKeyRefEnvVar , fieldRefEnvVar ) )
assertTrue ( bugs . toString ( ) , bugs . isEmpty ( ) )
assertEquals ( "Expected that a @Stateful proxy reference doesn't change bean target, " , report . beanId1 , report . beanId2 )
Assert . assertEquals ( expected , widgetFromService )
Assert . assertEquals ( "[4]" , b . getStrings ( ) . toString ( ) )
assertTrue ( eq . interpret ( Version . valueOf ( "1.0.0" ) ) )
Assert . assertEquals ( "Signed Hello World!" , proxy . sayHello ( ) )
assertEquals ( BooleanSchema . class , actual . getType ( ) )
assertEquals ( expResult , result )
assertEquals ( NOT_DECODED , 1 , object . getIdentifier ( ) )
assertEquals ( 15 , atAct2 . get ( 0 ) )
TestUtil . assertEquals ( exp , spans )
assertTrue ( width == 200 )
assertEquals ( HttpResponseStatus . FORBIDDEN , requestImpl . status ( ) )
assertEquals ( actual , expected )
Assert . assertEquals ( 1 , savedRow )
assertNull ( deliverer )
Assert . assertTrue ( cover . getBoundaries ( ) . getX ( ) . getMax ( ) > TEST_MODEL . getBoundaries ( ) . getX ( ) . getMax ( ) )
assertEquals ( message . header ( ) . text ( ) , text )
Assert . assertNotNull ( product )
assertFalse ( "Rules with different priority cannot be equal" , r1 . equals ( r2 ) )
assertEquals ( expected , result )
assertArrayEquals ( BufferUtils . getIncreasingByteArray ( ( int ) BLOCK_LENGTH , ( int ) BLOCK_LENGTH ) , b )
Assert . assertEquals ( age , patient . getAge ( ) )
assertEquals ( 0 , latch . getCount ( ) )
Assert . assertEquals ( resourceContent , writer . toString ( ) )
assertEquals ( 1 , invokedTimes . get ( ) )
Assert . assertTrue ( queryResult . getSize ( ) >= 1 )
assertThat ( NF . textNode ( "foo" ) , is ( sut ) )
assertEquals ( "GBP 1.11" , test . toString ( ) )
arrays . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Luke" , "Yoda" ) )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertMessages ( "read" , 3 , "readCbuf" )
assertEquals ( "3/4 5/6 7/8 9/2 10/2 ? 2017" , descriptor . describe ( cron ) )
assertEquals ( SchemaFromSubfield2 . class , field . getDefinition ( ) . getFieldIndexer ( ) . getClass ( ) )
assertThat ( crawlRules . getWaitAfterReload ( ) , is ( 123L ) )
Assert . assertEquals ( 6 , response . getTotalHits ( ) . value )
assertEquals ( "Expected 1 result!" , 1 , count )
assertResult ( testSubject , ONE , "asd" )
assertEquals ( expected , replaceAclEntries ( existing , aclSpec ) )
assertEquals ( OP_PROP_VALUE , parsed . getOperationName ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 4. , analyser . getWaitingTime ( route ) , 0.01 )
assertEquals ( p1 , p2 )
Assert . assertTrue ( daycountConventionICMA . compareTo ( daycountConventionISDA ) == 0 )
assertEquals ( "wrong profile properties" , "test" , profileProperties . getProperty ( "test" ) )
assertFalse ( alive )
assertEquals ( 1 , commission , 0 )
assertInstanceOf ( SwapMoveSelector . class , moveSelector )
assertEquals ( asList ( error ( mdcValues , marker , throwable , message ) ) , testLogger . getLoggingEvents ( ) )
assertThat ( content . getTitle ( ) , equalTo ( "Short Url" ) )
Assert . assertNotNull ( controllerResponse )
Assert . assertEquals ( state , updates . getLastSyncState ( userName , folderId ) )
assertThat ( backtrace , hasItem ( "at airbrake.Exceptions.newException(Exceptions)" ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertEquals ( true , agent . detectIpod ( ) )
Assert . assertTrue ( result >= expResult )
Assert . assertEquals ( count / 2 , ctr . getCount ( ) )
assertFalse ( output , output . contains ( uuid ) )
assertEquals ( expected , ex . getMessage ( ) )
assertEquals ( new org . apache . http . client . utils . URIBuilder ( SERVICE_ROOT + "/Products(5)" ) . addParameter ( "$expand" , "ProductDetails($expand=ProductInfo;$select=Price)/$orders,Customers" ) . build ( ) , uri )
Assert . assertEquals ( 1 , ( int ) reporter . getProblemCounters ( ) . get ( Code . FIELD_NO_LONGER_STATIC . code ( ) ) )
assertEquals ( 1 , events . size ( ) )
throwables . assertHasMessageMatching ( info , actual , REGEX )
Assert . assertEquals ( 5089 , concept . getId ( ) . intValue ( ) )
assertEquals ( 2 , tdefsRes . getBody ( ) . length )
assertTrue ( page . asText ( ) . contains ( "myDescription" ) )
assertEquals ( expResult , result )
assertEquals ( value , result )
Assert . assertTrue ( true )
assertEquals ( expectedAst , ast . dump ( "" ) + "\\n" )
assertEquals ( "Find by UoM label not returning a list with one reading" , 1 , readings . size ( ) )
assertOut ( "/**\\n * @export\\n * @extends {RoyaleTest_A}\\n */\\nRoyaleTest_A = function() {\\n  this.foo.apply(this, [a, b, c] );\\n}" )
assertNotNull ( stream )
assertThat ( qualityResult . getMeasure ( ) , is ( coverageMeasure ) )
assertEquals ( "fail" , thrown . getMessage ( ) )
assertEquals ( propMatch , properties )
assertEquals ( "image/gif" , httpResponse . getHeader ( CONTENT_TYPE_HEADER ) )
Assert . assertEquals ( "subsystem=test/resource=name" , s )
Assert . assertEquals ( expectedForceObject , tree . getFirst ( ) )
Assert . assertEquals ( Sets . newHashSet ( dA , dB , dC ) , fromDependencies )
assertEquals ( 29 , result . size ( ) )
assertEquals ( METHOD_COUNT , functionImportList . size ( ) )
assertEquals ( ansi ( ) . bold ( ) . toString ( ) , str )
assertTrue ( s . isSentToRawPubKey ( ) )
assertNotNull ( Deencapsulation . getField ( jobsResponseParser , "updateTwin" ) )
assertThat ( ( TraceeBackend ) FieldAccessUtil . getFieldVal ( interceptor , "backend" ) , is ( Tracee . getBackend ( ) ) )
assertEquals ( expected , actual )
Assert . assertTrue ( handle )
assertEquals ( 1 , tableDesc . getPrimaryKeyDescList ( ) . size ( ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertEquals ( 1 , stateManager . getActiveVehicleRoutes ( ) . size ( ) )
Assert . assertEquals ( expectedString , resultString )
Assert . assertEquals ( "order" , created . get ( "type" ) )
assertNotNull ( reportExecTO )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertLinkWithPoolgroupsOk ( poolgroups )
assertEquals ( id3v1Tag , wrapper . getId3v1Tag ( ) )
assertNull ( classUnderTest . getStatusBarFontInfo ( ) )
assertNotNull ( bar )
assertEquals ( "[foo.js:1,1:1,you broke it]" , issue . toString ( ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertEquals ( "亘毓丿 �丨馗丕鬲" , t . format ( new Date ( 0 ) ) )
assertEqualsSet ( "DataOneOf.rdf" , ax , Declaration ( DP ) )
assertEquals ( false , result )
assertEquals ( "!x\\n" , sWriter . toString ( ) )
assertNotNull ( factory . create ( ) )
assertEquals ( Status . DEADLINE_EXCEEDED . getCode ( ) , status . getCode ( ) )
assertNotNull ( result )
assertNotNull ( "WorkersCompensationRate is null" , entity )
assertNotNull ( Mobile . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertTrue ( d_pm . getCriterionEnabledModel ( ExampleData . buildEndpointHamd ( ) ) . getValue ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( expecteds , actuals )
assertEquals ( AuthorizationResult . Decision . PERMIT , result . getDecision ( ) )
assertions . isNotLessThan ( expected )
assertEquals ( "Expecting empty list when no task available!" , 0 , tasks . size ( ) )
assertSerializedEquals ( c )
assertEquals ( "3�� ��" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert . assertEquals ( "" , result )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
Assert . assertEquals ( "result" , testBean . getResult ( ) )
assertEquals ( exp , act )
assertions . isNotEqualTo ( actual )
assertNotNull ( AvailableAddOnExtension . reader ( "XBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( componentName , "${componentNameClass}Output" )
assertTrue ( e . getMessage ( ) . contains ( badCell ) )
assertThat ( isValid , is ( true ) )
assertTrue ( mutationsOccurred . get ( ) )
Assert . assertTrue ( convert ( path , namespace , files ) . isEmpty ( ) )
assertEquals ( expected , result )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( expected , actual )
assertEquals ( Status . ERROR , status )
assertEquals ( subsection , section . getConfigurationSection ( key ) )
assertTrue ( result . size ( ) >= 1 )
assertEquals ( 1 , statisticsController . getPlayer1winnings ( ) )
assertEquals ( "" , result )
assertEquals ( out . readableBytes ( ) , 0 )
assertEquals ( 174 , readValue )
assertThat ( sampleEntity1 , is ( notNullValue ( ) ) )
assertCharsets ( JodaBeanSer . PRETTY , json , bean , Address . class )
assertEquals ( "Good Morning!" , hello . sayHello ( ) )
assertEquals ( 1 , testApp . executeApplication ( args ) )
assertTrue ( places . hasNext ( ) )
Assert . assertTrue ( socket . isOpen ( ) )
Assert . assertEquals ( "Mismatched block count" , locatedBlocks . size ( ) + 1 , out . getBlockCount ( ) )
assertEquals ( v8 . hashCode ( ) , global . hashCode ( ) )
assertFalse ( cassandraService . isStarted ( ) )
assertEquals ( "璁＄����璇�" , 3 , rs )
assertEquals ( ( short ) 255 , buffer . getShort ( 0 ) )
assertEquals ( 2 , instance . getFeatures ( ) . size ( ) )
assertEquals ( expResults , results )
assertEquals ( expected , test )
assertEquals ( expected , actual )
Assert . assertEquals ( "OL_1_EFR_20181001T022958_20181001T023258_20181002T090807_0179_036_203_1980_MAR_O_NT_002.zip" , name
Assert . assertTrue ( errors . hasFieldErrors ( "name" ) )
SqlScriptDescriptorAssert . assertThat ( scriptDescriptors )
assertFalse ( "The DOI was not removed from the item metadata." , foundDOI )
assertEquals ( propertyValue , resultMap . get ( "Name" ) )
Assert . assertEquals ( 3 , encounters . size ( ) )
assertEquals ( expecting , found )
assertThat ( references , hasSize ( 0 ) )
assertEquals ( "13978AEE95F38490E9769C39B2773ED763D9CD5F" , Hex . toHexString ( addr ) . toUpperCase ( ) )
visitor . assertSatisfied ( "checking state contains two branches" , _rootComposite )
assertThat ( numMessagesSecondPass , equalTo ( numMessagesFirstPass ) )
assertTrue ( "size must be more than 0, but it is - " + queryModel . size ( ) , queryModel . size ( ) > 0 )
Assert . assertEquals ( i , normalized , 0.0 )
assertNull ( lijst . getLast ( ) )
Assert . assertNotEquals ( first , second )
assertFileContentIsMatching ( result )
assertEquals ( "x" , x )
assertThat ( resultSet , hasSize ( 1 ) )
assertDatum ( pj , "EPSG:4326" , "EPSG:4326" )
assertModelWasInjectedWithListOf ( )
assertEquals ( ( limit + 1 ) * ( limit / 2 ) , total . sum ( ) )
assertParseTree ( rootNode ( "12" , node ( "digits" , Arrays . asList ( "1" , "2" ) , "12" , stringNode ( "d" , "1" ) , stringNode ( "d" , "2" ) ) ) , tree )
assertEquals ( expResult , result , 0.0001 )
assertMessage ( ":1 You haven't specified the command name or its output." , response )
assertEquals ( 1 , findings . size ( ) )
assertNull ( reader . overflowAtoms ( ) )
Assert . assertEquals ( "Hash is invalid" , TestVectors . SHA256_DIGEST_EMPTY_STRING , result )
assertEquals ( "POST" , cr . getEntity ( String . class ) )
assertNotNull ( findAll )
assertMockEndpointsSatisfied ( )
assertFalse ( result )
assertThat ( result , is ( "OrderServiceImpl: function(): Static RuntimeException" ) )
assertTrue ( pg . getId ( ) != null )
assertThat ( commands [ commands . length - 1 ] , is ( "echo \\"hello\\"" ) )
assertEquals ( "(void foo ;)\\n" , found )
assertEquals ( CsvConfiguration . builder ( ) . setHasHeader ( true ) . setQuoteChar ( 'E' ) . setSeparator ( 'S' ) . skipSpaces ( true ) . build ( ) , configuration )
assertEquals ( "" , new String ( baos . toByteArray ( ) ) )
assertThat ( factory . getInstance ( ) , instanceOf ( MockMailer . class ) )
assertThat ( patientResource . getProfile ( ) , containsString ( PATIENT_SUB ) )
Assert . assertThat ( actual , CoreMatchers . is ( expected ) )
assertNotNull ( "invalid workflow" , iridaWorkflowLoaderService . loadIridaWorkflow ( workflowDescriptionPath ) )
assertThat ( contentType . toString ( ) , is ( contentTypeString ) )
Assert . assertNotNull ( "Expected to be able to get MeteredClassInterface by interface and not by class." , mi )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertThat ( result , is ( false ) )
assertEquals ( expectedSplits , new TreeSet < > ( createdSplits ) )
assertEquals ( NettyTransporter . class , ExtensionLoader . getExtensionLoader ( Transporter . class ) . getExtension ( name ) . getClass ( ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertEquals ( false , rm . incomingServerRequestMatchesMethod ( withResourceAndParams ( "Patient" , RequestTypeEnum . GET , inputParams ) ) )
assertThat ( imageName , is ( defaultImages . getDefaultBaseImage ( Application . class ) ) )
assertThat ( underTest . isSatisfied ( ) , is ( true ) )
assertEquals ( "h-na-alice-wa-suki-desu-ka-do-you-like-alice-when_321609" , ripper . getGID ( url ) )
assertEquals ( ( short ) 8 , ( short ) result . getShortWrapperValue ( ) )
assertEquals ( "novecentos e noventa e nove trilh玫es, " + "novecentos e noventa e nove bilh玫es, " + "novecentos e noventa e nove milh
mock . assertIsNotSatisfied ( )
assertThat ( found , equalTo ( expected ) )
assertEquals ( member , returnedMember )
context . assertIsSatisfied ( )
assertIsErrorWithoutStacktrace ( "Method 'notTheMethod' was not found in class 'com.fnproject.fn.runtime.testfns.ErrorMessages.OneMethodClass'. Available functions were: []" )
assertCity ( docs , "Erlang" )
assertTrue ( "http://foo.bar.com/fubar?a=c" . equals ( newEu ) || "http://foo.bar.com/fubar?e=f&a=c" . equals ( newEu ) )
Assert . assertTrue ( "Expected aKRB5 cipher suites, got null" , resolved != null && resolved . size ( ) != 0 )
assertThat ( integerProperty , is ( equalTo ( 42 ) ) )
assertEquals ( "V2 GenreDescription" , wrapper . getGenreDescription ( ) )
assertEquals ( response . getStatus ( ) , HttpServletResponse . SC_NOT_MODIFIED )
assertThat ( screenshotDirectory , endsWith ( "screenshots" + separator + anyFileName + ".png" ) )
assertNull ( encoded )
assertEquals ( "Destriction" , entity . getDescription ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( skillConstraint . fulfilled ( insertionContext ) )
Assert . assertTrue ( "Resource doesn't exist after waitOnTimeout" , this . bean . resourceExistenceCalled )
assertEquals ( "Hello World!" , server . echo ( "Hello World!" ) )
assertEquals ( expected , TypeDefinition . getInstance ( Qux . class ) . getAllGetters ( ) )
Assert . assertEquals ( numero , importacaoAdicao . getNumero ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertNotSame ( result , one )
assertTrue ( true )
assertEquals ( bigCount , service . prepare ( query ) . countEntities ( fo ) )
assertEquals ( expResult , result )
assertNull ( RenderKitUtils . decodeBehaviors ( facesContext , component ) )
Assert . assertTrue ( notify . matches ( 30 , TimeUnit . SECONDS ) )
Assert . assertTrue ( read . contains ( str ) )
assertEquals ( HttpStatusCodes . OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( 1 , instance . list . size ( ) )
assertEquals ( MD5HashStrategy . class , actual . getClass ( ) )
assertEquals ( "Incorrect Short Reason" , "Platform Down leela.local Baseline (baseline threshold) " , alertManager . getShortReason ( testPlatformAlert ) )
Assert . assertEquals ( numeroPedidoItemCliente , produto . getNumeroPedidoItemCliente ( ) )
Assert . assertEquals ( "apk.packageName" , "com.erdfelt.android" , apk . getPackageName ( ) )
assertSame ( s , StringDistances . create ( s ) )
assertEquals ( poly , parsed )
assertFalse ( containsAll )
assertEquals ( c1 , c2 )
assertThat ( mergedExplicitSchema . get ( "http://timbuctoo.huygens.knaw.nl/datasets/clusius/Places" ) . size ( ) , Matchers . is ( 2 ) )
assertEquals ( attributes , array . getAttributes ( ) )
assertEquals ( "om 3 uger" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertEquals ( "default" , configuration . evaluateToString ( "key" ) )
assertThat ( highAvailabilitySupportChecker . isSupported ( FORMAT_NAME ) , is ( true ) )
assertTrue ( brokenSchemaEx . getMessage ( ) != null && brokenSchemaEx . getCause ( ) != null )
assertEquals ( Arrays . asList ( new Integer ( 1 ) , new Integer ( 2 ) , new Integer ( 3 ) , new Integer ( 4 ) ) , collect ( probe ) )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertEquals ( "Wrong Query URL" , expResult , result . toString ( ) )
assertEquals ( false , bm . isBitSet ( bitNumber ) )
assertNotNull ( cert )
Assert . assertEquals ( "2" , message )
assertNotNull ( result )
Assert . assertEquals ( false , actual )
assertArrayEquals ( new int [ ] { 0x11 , 0x22 , 0x33 , 0x44 , 0x55 , 66 , 0x77 , 0x88 , 0x99 , 0x00 , 0xAA , 0xBB , 0xCC , 0xDD
assertThat ( user . getValue ( ) . getName ( ) , is ( "user@codenvy.com" ) )
assertThat ( errors . isEmpty ( ) , is ( false ) )
assertThat ( actual , is ( object ) )
assertNotNull ( portal . getPage ( new PageId ( "get-page" ) ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertEquals ( IOUtil . toString ( new FileInputStream ( new File ( "src/test/resources/versionInfoFileRewritten-alpha-20.xml" ) . getAbsoluteFile ( ) ) , "UTF-8" ) , IOUtil . toString ( os . toByteArray ( ) ,
assertEquals ( 2 , readLayout . getRows ( ) )
Assert . assertEquals ( "license1=This is mine!" , licenseContent . trim ( ) )
assertNotNull ( "Current user cannot be null." , user )
assertPhotoPerms ( perms )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertTrue ( result >= 2000 )
assertThat ( feature . getName ( ) , Is . is ( "test.feature" ) )
assertSame ( tt2 , tt )
assertMappedFieldValueIs ( "CustomMappedValue" )
assertEquals ( future . get ( ) , "Bob" )
assertEquals ( model , RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "QuantityValue.rdf" ) ) )
Assert . assertEquals ( 3 , bitmap . size ( ) )
assertSame ( ret , projectItem )
Assert . assertEquals ( p4 , p3 )
assertTrue ( Deencapsulation . getField ( iotHubServiceClient , "serviceClient" ) != null )
assertEquals ( "1,1,1" , encoder . encode ( null , context , null ) )
Assert . assertEquals ( "{\\"email\\":\\"test@email.com\\",\\"birthday\\":\\"2012-11-23 00:00:00\\"}" , json )
assertFalse ( "Values should not be equal" , equals )
assertThat ( actual , is ( expected ) )
assertEquals ( control , key )
assertNull ( result )
Assert . assertEquals ( out , builder . build ( ) . toHex ( ) )
assertTrue ( "Should match" , query1 . equals ( query ) )
assertEquals ( "GET_some_path_test_operationIdResolver" , serviceId )
context . assertEquals ( async . count ( ) , list . size ( ) )
assertEquals ( "Conversion did not match" , value , to )
assertEquals ( "<order><id>123/id><customerId>4444/customerId><date>20170810</date>" + "<item><id>222</id><amount>1</amount></itemn></order>" , xml )
assertEquals ( 3 , dbHandler . getGPSTrackCount ( ) )
Assert . assertTrue ( check . equals ( o ) )
assertThat ( factory . getObjectInstance ( ref , null , null , null ) , instanceOf ( DefaultDataSource . class ) )
assertThat ( comparator . compare ( projectChange1 , projectChange2 ) , is ( - 1 ) )
Assert . assertEquals ( 4 , result . getTotalHits ( ) )
assertEquals ( expectedArg , parsedArg )
assertTrue ( getExpectedErrorMsg ( ) , result )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( expected , result )
assertOnResponseAttachment ( f3gbServer , MAX_SIZE2 )
Assert . assertNotNull ( obj )
Assert . assertTrue ( dsDao . getDSInfo ( localDSServiceID . toString ( ) ) . isUp ( ) )
assertNotNull ( UserChannel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertTrue ( sWriter . toString ( ) . startsWith ( "!xspy4j.Py4JException: " ) )
assertFrameHex ( "Lax Text Frame with RSV3" , expected , actual )
assertTrue ( "Behavior not instance of IsolatedLeader when elections are disabled" , newBehavior instanceof IsolatedLeader )
assertThat ( expectedQueryFilterSpec , new ReflectionEquals ( unmarshalledQFS ) )
assertThat ( results , samePaths ( new File ( b , "f.txt" ) , new File ( c , "f.txt" ) ) )
assertEquals ( 1 , ksession1 . fireAllRules ( ) )
assertEquals ( 0 , events . size ( ) )
Assert . assertFalse ( duplicateWorkComparator . isDuplicate ( doc1 , doc2 , null ) )
assertEquals ( "Wrong property value (path=" + path + ")" , "Assignment 1" , property . getRealValue ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 ; ?_c4 ?user_name . FILTER(?user_name = ?_c6) }" )
assertNull ( "Found non-existant file member" , in )
assertTestRunFails ( testPlan )
assertEquals ( expectedSize , event . size ( ) )
Assert . assertEquals ( 200 , httpResponse . getStatus ( ) )
assertObjectEquals ( "{}" , e )
assertOut ( "/**\\n * @export\\n * @param {string=} bar\\n * @return {number}\\n */\\nRoyaleTest_A.prototype.foo = function(bar) {\\n  bar = typeof bar !== 'undefined' ?
assertThat ( formatter . isStrict ( ) , is ( true ) )
assertEquals ( expResult , result )
assertEquals ( new URL ( "https://sun9-65.userapi.com/c857520/v857520962/10e24c/DPxygc3XW5E.jpg" ) , ripper . getBestSourceUrl ( responseJson ) )
assertNotNull ( dao )
assertTrue ( instanceConstraintViolationsList . toString ( ) , instanceConstraintViolationsList . size ( ) == 1 )
assertThat ( result , is ( new String [ ] [ ] { { "this" , "is" , "a" , "test" } } ) )
assertEquals ( EUR , accountMap . get ( "EUR" ) )
assertThat ( toJson , is ( "{\\"a.b\\":1,\\"a.c\\":null,\\"a.d\\":[false,{\\"i.j\\":[false,true]}],\\"e\\":\\"f\\",\\"g\\":2.3,
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertObjectEquals ( "{type:'object',properties:{f1:{type:'string'}},'x-example':{f1:'foobar'}}" , s . getSchema ( SimpleBean . class ) )
assertEquals ( activeThreadCount , JsonValue . NULL )
assertExpectedPreprocessingResult ( expectedResultLocation , includeReader )
assertTrue ( smileys . isEmpty ( ) )
assertTrue ( mojo . getParsedBooleanValue ( ) )
assertTrue ( response . getNumberOfFeatures ( ) . intValue ( ) == 7 )
assertTrue ( hasImage ( IMAGE_TAG ) )
assertEquals ( NEW_ENCODING , request . getCharacterEncoding ( ) )
assertEquals ( null + '@' + DOMAIN , bareJID )
Assert . assertEquals ( "password" , codec . encode ( "password" ) )
assertThat ( jsonAsMap . get ( "enum" ) , is ( ( Object ) "A" ) )
assertThat ( impl . getReferencedOntologies ( ) , hasSize ( 1 ) )
assertNotNull ( "converter must not be null" , s )
assertEquals ( "Test2" , gbpNetworkServicePolicy . getName ( ) )
assertTrue ( suffix1 . equals ( suffix2 ) )
assertArrayEquals ( expected , fileArray )
assertThat ( result , is ( CodePoints . NOT_FOUND ) )
assertTrue ( isEqual ( mockStopPoint , actualStopPoint ) )
assertEquals ( uploadLocation + FileUtils . toDir ( stateToken ) + filename + pngExtension , absFile )
assertEquals ( ( float ) 8 , result . getFloatValue ( ) , 0.0 )
Assert . assertEquals ( "" , actual )
assertEquals ( expResult , result )
assertEquals ( "con" , s )
assertThat ( roundtrippedRecord , equalTo ( record ) )
assertEquals ( "hello" , result )
assertEquals ( HttpStatus . NO_CONTENT_204 , resp . getStatus ( ) )
assertEquals ( "Invalid version extracted" , expVersion , result . getParentVersion ( ) )
excelApplicationManager . assertContent ( new File ( getClass ( ) . getResource ( "expected_ok_style.xls" ) . toURI ( ) ) , "Ok" , EMPTY_LIST )
Assert . assertEquals ( "hello.apk" , artifact . getName ( ) )
Assert . assertTrue ( os . toString ( "UTF-8" ) . contains ( "Unknown target" ) )
assertEquals ( expResult , result )
assertThat ( extractMonitorables ( adapter ) . get ( MEAN ) . get ( ) , Matchers . < Object > is ( newMean ) )
assertThat ( runs , hasSize ( 0 ) )
assertEquals ( expectedResult , result )
Assert . assertTrue ( "DynamicBloomFilterUtils.compare" , dbf2 . contains ( key ) )
assertThat ( representation . getInteger ( "size" ) , is ( 20 ) )
assertEquals ( null , avg )
assertTrue ( ourServer . waitForClient ( TimeUnit . SECONDS . toMillis ( 10 ) ) )
assertThat ( rendered , is ( "<img src=\\"/url\\" alt=\\"hey\\" test=\\"hey\\" /></img>" ) )
Assert . assertEquals ( 4 , result . getEntities ( ) . size ( ) )
assertEquals ( "Check principal has correct FQAN" , TEST_FQAN_STRING , principal . getFqan ( ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn" + ".opendaylight" + ".openflow.common.instruction.rev130731.instructions.grouping.Instruction msgType
Assert . assertEquals ( expected , this . donutShop . getTopDonuts ( 2 ) )
assertEquals ( 1 , listener . getNumberOfTimesInvoked ( ) )
assertThat ( caughtException ( ) , instanceOf ( CustomException . class ) )
Assert . assertEquals ( actual , expected , "Returned an invalid property value." )
assertEquals ( unused , h . getUnused ( ) )
assertEquals ( "(* (* (a 34) b 9) c)\\n" , found )
assertServerAncestry ( trace )
assertFalse ( "The getChanges() method reported a change" , hasChange )
Assert . assertEquals ( 3 , tools . size ( ) )
assertFalse ( authorizer . isAuthorized ( context , profiles ) )
assertEquals ( expected , new WritablesToNDArrayFunction ( ) . apply ( l ) )
assertNumEquals ( 1 , profit . calculate ( series , new BaseTradingRecord ( ) ) )
assertEquals ( new ArrayList < PostReport > ( ) , mockResult . included ( "reports" ) )
Assert . assertTrue ( result . isEmpty ( ) )
Assert . assertEquals ( 2 , count )
assertFalse ( "Configuration is not empty" , config . isPresent ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( actual , expected , "Method with zero parameters does not match expected" )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
Assert . assertTrue ( "Wrong canonicalization using external mapping file" , TestFileUtils . compareFileToResource ( out , base ) )
assertEquals ( 60000L , testLong )
assertEquals ( expected , ColumnRanges . rangeAtNode ( isNull ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoPISOutrasOperacoes ( ) . toString ( ) )
Assert . assertEquals ( extractor . generateKey ( host , req1 ) , extractor . generateKey ( host , req2 ) )
assertArrayEquals ( string . getBytes ( ) , Bytes . inputStream2Bytes ( new ByteArrayInputStream ( string . getBytes ( ) ) ) )
Assert . assertEquals ( zero . getReal ( ) , 0 , 3.0e-16 )
assertEquals ( "CLIENT PARALLEL 1-WAY RANGE SCAN OVER _IDX_T ['me',-32767,'a'] - ['me',-32767,*]" , QueryUtil . getExplainPlan ( rs ) )
assertFalse ( episode . getEpisodeName ( ) . isEmpty ( ) )
assertEquals ( "Wrong escaped list" , "simple_trans" , handler . escape ( data , trans ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( "{\\"resourceType\\":\\"R4\\",\\"parameters\\":{\\"someString\\":\\"string\\",\\"someStringValue\\":\\"someStringValue\\"},\\"someDate\\":\\"2019\\"}" , encoded )
Assert . fail ( "Expecting MathIllegalStateException" )
assertJsonIs ( "{\\"helloWorld\\":\\"Hello, world\\",\\"lazy\\":\\"Lazy value\\",\\"resource\\":\\"/some/resource/path\\",\\"subModelProperty\\":\\"sub model property\\"}" )
assertEquals ( parseCalendar ( "20131028-00:00:00" , TimeZone . getTimeZone ( "Europe/Amsterdam" ) ) , dh . getCalendarAfter ( testingClock . getCurrentCalendar ( ) ) )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
responseAsserter . assertRegisterResponse ( )
assertEquals ( ImmutableMap . of ( "a" , "" ) , parameters )
assertEquals ( 6 , keys . size ( ) )
assertNotNull ( "precondition was supposed to fail" , result )
assertTrue ( survey . isStarted ( ) )
assertNull ( s )
Assert . assertNull ( "should not be a description" , actualDescription )
assertThat ( wlsDomainConfig . getServerConfigs ( ) , not ( hasItem ( "Dynamic Server" ) ) )
assertEquals ( g1 , g2 )
assertEquals ( "123" , content )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , expected )
assertThat ( result , is ( "hello world" ) )
Assert . fail ( "NullPointerException should have been thrown" )
assertThat ( values . getWeblogicOperatorImage ( ) , equalTo ( stringValue ) )
assertNull ( found )
assertTrue ( Arrays . equals ( new int [ ] { 0 , 4 , 8 , 0 , 86 , 82 , 79 } , command . serialize ( ) ) )
assertEquals ( null , result )
assertEquals ( String . format ( "Expected [%s] but got [%s]" , expected1 , expected2 , mapping ) , expected1 , mapping )
assertThat ( target . getEthType ( ) , is ( new Integer ( OFPFlowActionPopMpls . MPLS_MULTICAST ) ) )
assertThat ( createdOrUpdated . getStatusInfo ( ) . getFamily ( ) , is ( Response . Status . Family . SUCCESSFUL ) )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( 1 ) ) )
assertThat ( text ( contents ) , is ( "1A\\t2B\\n" ) )
assertEquals ( FEEDBACK_MESSAGE , feedbackMessage )
Assert . assertEquals ( "setPackingMaterialCActivity() doesn't return null" , null , huMovementBL . getPackingMaterialCActivity ( ) )
assertThat ( availablePackages , hasItem ( "org.eclipse.core.runtime" ) )
assertSpecialServletWasInvokedWith ( entity )
assertMockEndpointsSatisfied ( )
assertEquals ( expResult , result )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2007 , 2 , 15 ) , OFFSET_PONE ) , t )
assertEquals ( "1109.9" , df . format ( blackFridayTVDeal ) )
assertNotNull ( "common schema was null" , commonSchema )
Assert . fail ( e . getMessage ( ) )
Assert . assertEquals ( stId . compareTo ( otherStId ) , serviceTemplate . compareTo ( otherServiceTemplate ) )
assertResultSet ( res )
assertEquals ( "foo" , returnData )
assertEquals ( ValidationResult . OK , r . iterator ( ) . next ( ) )
assertEquals ( TestUtil . LOCAL_TEST_PROXY , result . get ( 0 ) )
Assert . assertFalse ( iterator . hasNext ( ) )
assertEquals ( "24:00:00" , v . getStringValue ( ) )
Assert . assertFalse ( tt . isPrematureBreak ( null ) )
assertEquals ( "Main class name" , "org.apache.felix.main.Main" , new FelixPlatformBuilderF160 ( m_bundleContext , "version" ) . getMainClassName ( ) )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertTrue ( tbce . compareScreen ( "foo" ) )
assertThat ( result , is ( "\\"" + USER_NAME + "\\"" ) )
assertTrue ( game3 . isGameOver ( ) )
assertTrue ( true )
assertTrue ( log . getClass ( ) . getName ( ) . startsWith ( "org.ops4j.pax.logging.jboss" ) )
assertEquals ( 1 , unit . getNumLoads ( ) )
assertEquals ( 18 , result )
Assert . assertNull ( changed . getDataType ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertThat ( result , equalTo ( v + ".0." + ns ) )
assertThat ( exceptionCaught , is ( true ) )
assertEquals ( a1 , a2 )
assertEquals ( 28 , term . evalI ( env ) )
assertEquals ( "Herbert" , vcard . getName ( ) )
assertThat ( tags , hasItem ( "abc" ) )
assertTrue ( glass . isEmpty ( ) )
assertEquals ( 1 , servers . size ( ) )
assertFalse ( fileDescriptorChecker . isDetected ( ) )
Assert . assertTrue ( time < randomQueryTimeLimitInMillis )
assertEqualsIgnoreWhitespace ( original , result )
assertDROOLS2286 ( context )
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/view-hardcoded-params?extraParam=extraValue" ) )
assertEquals ( 201 , status . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertFalse ( queriedEntities . isEmpty ( ) )
assertRowsEqual ( expected , primaryData )
assertNull ( v . get ( ) )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertFalse ( Pattern . matches ( Re . number ( ) , s ) )
Assert . assertEquals ( "$dateFormatter.format('d-MM-yyyy',${row.creationDate})" , writer . toString ( ) )
assertException ( "FEEL-01017" , "false" , "12" , "< 12" , "'Hello'" )
assertEquals ( arr , arr2 )
assertEquals ( expectedJson , actualJson )
assertEquals ( "Base value is not properly parsed" , "true" , parsed )
assertEquals ( "HTTP/1.1 417 Expectation Failed" , sb . toString ( ) . trim ( ) )
assertEquals ( "Project_Default(Field(0))\\n" + "  Insert_Returning(INTO c)\\n" + "    Project_Default(NULL, NULL, NULL)\\n" + "      ValuesScan_Default([])" , getExplain ( insert , table
assertArrayEquals ( new Class [ ] { long . class } , c . getParameterTypes ( ) )
assertThat ( result . getNodes ( ) . size ( ) , is ( 1 ) )
assertTrue ( ws . isClosed ( ) )
assertEquals ( 42 , tf . getConvertedValue ( ) )
Assert . assertSame ( sp , sp2 )
assertMockEndpointsSatisfied ( )
assertNull ( bidService . getBid ( 1L ) )
assertEquals ( THROWABLE , strategyName )
assertTrue ( headings . get ( 1 ) . text ( ) . equals ( "H1" ) )
assertEquals ( "void dest8(@A @B @C int, @B @C @D int, int, @C @D @E int)" , toString ( dest ) )
assertThat ( c . compute ( ) , is ( 6 ) )
assertNotNull ( readUrlContents )
assertEquals ( 1000 , PartitionUtils . getRecommendedPartitions ( pcollection ) )
assertTrue ( failListener . isFailed ( ) )
assertEquals ( 1 , regionInfoList . size ( ) )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( clientID . getServiceID ( ) ) )
assertArrayEquals ( tag , tag_final )
assertNotNull ( op )
Assert . assertEquals ( expectedProjectionBean , computedProjectionBean )
Assert . assertEquals ( currentYear - birthYear , AgeUtils . getFullAge ( birthDate ) )
assertEquals ( prettyPrintXml ( readContent ( EXPECTED_ABSTRACT_COMPLEX_TYPE_LIST_PATH ) ) , prettyPrintXml ( xml ) )
assertListTEquals ( listT , 12 , 13 , 14 )
assertThat ( currentBuildsOf ( view ) . url ( ) , is ( "job/project-name/22/" ) )
assertEquals ( "^/protected/content$" , pattern )
Assert . assertEquals ( json . getAsString ( "getInReplyToId" ) , activityNodeUuid )
assertEquals ( expectedHashCode , is . readInt ( ) )
assertEquals ( "Wrong propert value" , " [test@cmd ~]$ ; a comment" , config . getString ( "CmdPrompt" ) )
assertEquals ( range1 , range2 )
assertEquals ( Rational . ONE , result )
assertEquals ( "Check that task ran" , 1 , ran )
assertEquals ( id , embedding . getIdOfProjectionEntry ( id ) )
assertEquals ( expecting , found )
assertEquals ( expResult , result )
assertTrue ( reporterFactory instanceof DefaultScheduledReporterFactory )
assertThat ( result , equalTo ( true ) )
assertThat ( result , is ( expected ) )
assertEquals ( unused , h . getUnused ( ) )
assertThat ( rowsModified , is ( 0 ) )
assertEquals ( "a" , mock . get ( 1 ) )
assertNotNull ( foo . field )
assertEquals ( testKeySize , tlsToolkitStandaloneCommandLine . getKeySize ( ) )
assertArrayEquals ( d . asDouble ( ) , d2 . asDouble ( ) , 0.001 )
assertThat ( result , is ( true ) )
assertThat ( ontology , is ( equalTo ( ontologyC ) ) )
assertTrue ( true )
Assert . assertEquals ( DefaultJobPriorityProvider . DEFAULT_PRIORITY_ON_RESOLUTION_FAILURE , job . getPriority ( ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'dgx'+ 'the' " ) )
assertEquals ( model , actual )
assertThat ( StubWatchFactory . getReceivedEvents ( ) , hasItems ( object1 , object2 ) )
assertTrue ( definedInContext )
assertThat ( exp , not ( nullValue ( ) ) )
assertTrue ( "Got parameters" , params . isEmpty ( ) )
assertThat ( thrown , instanceOf ( ShardConfigStaleException . class ) )
assertNotNull ( UserChannel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "Assert.assertFalse(\\"link=my_link\\",isElementNotPresent(By.linkText(\\"my_link\\"))));" , result )
assertEquals ( t1 , t2 )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( DistCpCopier . class , copier . getClass ( ) )
expect . assertObservation ( )
assertResult ( 15 )
assertThat ( config , is ( present ( ) ) )
assertSame ( Integer . class , value . getValue ( ) )
assertEquals ( this . multipleExtCom , result . getAttributes ( ) )
assertEquals ( "package org.kissmda.test.junit;\\n" + "public class ClazzName {\\n" + "  public void doSomething(  Name values){\\n" + "     java.lang.Integer count = null;\\n" +
assertEquals ( "ABN is required." , violations . iterator ( ) . next ( ) . getMessage ( ) )
Assert . assertEquals ( "[1, 3]" , s . toString ( ) )
assertEquals ( 1 , CallableUtil . call ( db . prepareCallableApiNoParameters ( ) ) . rowCount ( ) )
assertNotNull ( df )
assertThat ( formatter . parse ( "AD 1752 (D)" ) , is ( PlainDate . of ( 1752 , 9 , 13 ) ) )
assertEquals ( expected , actual )
assertIdentical ( "/simple.owl" , filtered )
assertThat ( Functions . highOrderFunction ( twice ) . apply ( 1 ) , is ( 2 ) )
assertTrue ( connectFuture . isConnected ( ) )
Assert . assertEquals ( 1 , result . getJobs ( ) . size ( ) )
assertEquals ( origWriteSet , reorderSet )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , WeldStepBean . class )
assertEquals ( expected , actual )
assertEquals ( "incorrect value" , aNumber . hashCode ( ) , bNumber . hashCode ( ) )
assertEquals ( 3 , list . size ( ) )
assertTrue ( "installed jar should exist" , destinationJar . exists ( ) )
assertNotNull ( permissionService . getPermissionsFor ( component ) )
SelendroidAssert . assertResponseIsResourceNotFound ( response )
assertEquals ( serializedYaml , yaml )
assertSame ( result , this . logger )
assertFalse ( user1 . equals ( user2 ) )
assertEquals ( "(DUH a (DUH 1)) (DUH b (DUH 2))\\n" , found )
assertEquals ( 1 , count )
assertTrue ( currentValue > prevValue )
assertTrue ( rootNode . getPrimaryNodeType ( ) . isNodeType ( JcrMixLexicon . REFERENCEABLE . getString ( session . namespaces ( ) ) ) )
assertArrayEquals ( new byte [ ] { 42 } , Files . readAllBytes ( withDot ) )
AssertAnnotations . assertPOS ( posMapped , posOriginal , select ( jcas , POS . class ) )
assertNodeGetsCorrectPriority ( compoundWrite , EmptyNode . Empty ( ) , PriorityUtilities . NullPriority ( ) )
assertNodesIn ( expected , y1Fun , Optional . of ( y1Fun ) )
assertThat ( hijri . with ( CommonElements . weekOfMonth ( HijriCalendar . family ( ) , model ) . incremented ( ) ) , is ( hijri . nextDay ( ) ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertEquals ( "TestModel" , field . getType ( ) . getName ( ) )
assertEquals ( "0: General use CPU\\n" + "1: Thread[engine,5,main] alive=true\\n" , actual )
assertEquals ( 5 , searchEngineMarketShareArray . length )
assertions . containsValue ( "apple" )
assertEquals ( expected , actual )
assertThat ( scc , is ( toPartition ( expect ) ) )
assertEquals ( result . get ( RETURN_RESULT ) , String . format ( EXCEPTION_INVALID_USER , "not_a_user" ) )
assertThat ( quantity , is ( existingItem . getQuantity ( ) ) )
assertEquals ( Optional . of ( "Z" ) , r )
assertEquals ( this . neListCaptor . getValue ( ) . getNetworkElementId ( ) , "UPDATED_SFC_ID" )
assertEquals ( "should be 2 tokens" , 2 , tokens )
assertSpyStepsFound ( steps )
assertNotNull ( create . getId ( ) )
assertFalse ( mdxBaseComponent . runQuery ( conn , null ) )
assertEquals ( 0 , result . size ( ) )
assertTrue ( of ( "AAAAA" ) . toString ( ) . equals ( "AAAAA" ) )
context . assertIsSatisfied ( )
assertThat ( sorted , equalTo ( rows ) )
assertNotNull ( result )
Assert . assertNotSame ( "Different event bus instances" , eventBus , eventBus2 )
assertEquals ( 201 , response . getStatus ( ) )
Assert . fail ( "exception expected" )
assertOut ( "<script><![CDATA[]]></script>" )
Assert . assertEquals ( "-1/MyProject" , connectionString )
Assert . assertTrue ( TestUtils . equals ( expectedResults , exactResults ) )
assertEquals ( 1234.6 , empty . getRPM ( ) , 0.1 )
assertEquals ( expected , json )
Assert . assertEquals ( cnpj , dados . getCnpj ( ) )
Assert . assertFalse ( "Exception occurred" , isElementPresent ( NotificationElement . class ) )
Assert . assertThat ( result . getBean ( WithTypeParam . class ) . getProperties ( ) . size ( ) , CoreMatchers . equalTo ( 0 ) )
assertTrue ( new Matcher ( ) . match ( actual , kmfSamples . getProviderA ( ) ) )
Assert . assertEquals ( 4 , tools . size ( ) )
assertThat ( itemDAO . getTypes ( TENANT_ID ) , is ( expectedTypes ) )
Assert . assertNull ( noBean )
Assert . assertEquals ( "Property value not dereferenced when overriding bean list property \\"overrideList1\\"" , expected , testComponent . getOverrideList1 ( ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaDataTableTypeDefinition ( method , lookup , new String [ 0 ] ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "test/me" , provider . getRelativePath ( projectBasedir , repoRoot ) )
XMLAssert . assertXMLEqual ( new InputStreamReader ( getClass ( ) . getResourceAsStream ( "v13/csv-config-03.xml" ) ) , new StringReader ( modelWriter . toString ( ) ) )
assertEquals ( "The ttl should be 50" , 50 , iSpec . getTTL ( ) )
Assert . assertEquals ( "bob" , token . getUserName ( ) )
assertThat ( match , is ( BestTypeMatch . T2 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertThat ( dest . bbb , is ( "111" ) )
assertThat ( manager . getRandomStrategy ( ) , is ( mockedStrat1 ) )
assertEquals ( true , theGhost ( ) . isFood ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( Nd4j . create ( new double [ ] { 1 , 2 } ) , matrix . getRow ( 1 ) )
assertEquals ( "192.168.0.123/24" , ip )
Assert . assertEquals ( XMLStreamConstants . PROCESSING_INSTRUCTION , reader . nextEvent ( ) . getEventType ( ) )
assertPermanentCount ( playerA , bear1G , 1 )
assertEquals ( "result ok?" , 1 , ( int ) query . get ( 0 ) . get ( "constant" ) . toInt ( ) )
assertArrayEquals ( expected , actual )
Assert . assertTrue ( bean . getMap ( ) != null && ! bean . getMap ( ) . isEmpty ( ) )
assertFalse ( iter . hasNext ( ) )
Assert . assertEquals ( slice . toString ( ) , 4 , SlicerUtil . countApplicationNormals ( slice ) )
Assert . assertEquals ( 40 , analyser . getLoadAtBeginning ( route ) . get ( 0 ) , 0.01 )
assertEquals ( expecteds , actuals )
assertEquals ( Version . valueOf ( "1.0.0-alpha" ) , builder . build ( ) )
Assert . assertEquals ( 200 , response . getStatus ( ) )
assertValuesEqualsResultSet ( rs , expectedResults )
assertEquals ( "5" , stringWriter . toString ( ) )
assertContainsPlot ( 0 , 0 , Elements . BLUE , plots . get ( 0 ) )
assertEquals ( "resultxx" , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
assertResult ( 15 )
assertTrue ( fs . getUri ( ) . getScheme ( ) . equals ( "WebHDFS" ) )
Assert . fail ( "expected exception for bad query string." )
assertUpdateRecord ( "*.c1.addresses.second.number" , objId , obj , updateObj , PATCH , expected )
Assert . assertTrue ( "Capabilities should match as node and test" , matcher . matches ( nodeCapability , testCapability ) )
assertEquals ( "OK" , qp . resolve ( "x.xq" ) . get ( 0 ) )
Assert . assertEquals ( "Get what?!?!" , responseResult . getText ( ) )
assertNull ( event . getPayload ( ) )
assertEquals ( 3 , eventNames . size ( ) )
assertEquals ( 0 , ( int ) captured . getValue ( ) )
assertTrue ( "Got msgseqnum too high" , responder . msgSeqNumTooHigh )
assertThat ( dropdown . getCssValue ( "z-index" ) , is ( "0" ) )
assertThat ( mapper , is ( notNullValue ( ) ) )
assertOrder ( false , query ( ) . sortFarthest ( "one" ) )
Assert . assertArrayEquals ( jceResult , utilsResult )
assertTrue ( helper . shouldBeStored ( new HTTPResponse ( Status . OK , headers ) ) )
assertThat ( operatorValues . createMap ( ) , hasEntry ( "internalDebugHttpPort" , intValue ) )
assertTrue ( criteria . equals ( criteria2 ) )
assertEquals ( 1 , used . size ( ) )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( expected , actual )
assertThat ( bindings . size ( ) , is ( 1 ) )
assertInvocations ( client . getBusinessActivityInvocations ( ) , "complete" , "confirmCompleted" , "close" )
assertEquals ( "<chart><background-color><radial-gradient x1=\\"0\\" y1=\\"0\\" x2=\\"0\\" y2=\\"0\\"></radial-gradient>" + "<stops position=\\"0\\" color=\\"white\\"></stops>"
assertEquals ( 42 , config . answerToLifeUniverseAndEverything ( ) )
assertEquals ( components . size ( ) , 1 )
Assert . assertEquals ( unidadeFederativa , servicoConsulta . getUf ( ) )
assertEquals ( 100 , v )
assertEquals ( 1 , value , 0 )
assertEquals ( LIST_VAL_a , p . getList ( ) )
Assert . assertNotNull ( "License was null" , license )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertEquals ( false , out . firstElement ( ) . get ( ) )
Assert . assertEquals ( "--- a/" + projectSourcePath + "/Bar.java\\n" + "+++ b/" + projectSourcePath + "/Bar.java\\n" + "@@ -14,4 +14,7 @@\\n" + " \\tpublic void m()
assertEquals ( 200 , action . getCode ( ) )
assertEquals ( TimeUnit . SECONDS . toNanos ( 100000 ) , acq . getDelayNanos ( ) )
assertTrue ( Iterables . all ( evenNumbers , acceptOddNumber ) )
testRunner . assertAllFlowFilesTransferred ( PutCassandraQL . REL_SUCCESS , 1 )
assertOut ( "/**\\n * @constructor\\n */\\norg.apache.royale.A = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('org.
assertSame ( expected , actual )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( model . weekOfYear ( ) . minimized ( ) ) , is ( PlainDate . of ( 2000 , 12 , 2 ) ) )
assertCollectionCanNotBeSerialised ( collection , TreSource . ExtendedHeaderData )
Assert . assertEquals ( 5 , analyser . getLoadRightAfterActivity ( route . getEnd ( ) , route ) . get ( 0 ) )
assertEqualHQL ( "allen love dandan" , sb . toString ( ) )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertNotNull ( extractElementDataModifier . getElementId ( ) )
assertXmlEquals ( "<ServiceParameter/>" , xml )
assertEquals ( 0 , got . size ( ) )
assertFileExists ( dest . resolve ( "file" ) )
Assert . assertNotNull ( connection )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertEquals ( VALUE , victim . getValue ( KEY ) )
assertTrue ( s . getClass ( ) . getName ( ) . endsWith ( "Portlet" ) )
Boundaries3dTest . assertBoundariesEquals ( new Boundaries3d ( new Coords3d ( - 5 , - 5 , - 5 ) , new Coords3d ( 5 , 5 , 5 ) ) , testSubject . toScad ( Angle . ofDegree ( 20 ) ) )
assertEquals ( required , iterateBFS )
assertEquals ( 42 , id ( 23 ) )
assertNull ( "focused element should not be found" , focused )
assertTrue ( results . toString ( ) , results . indexOf ( "Responses invalid: 0 out of " + ( cycles * tracks ) ) >= 0 )
assertEquals ( "CLOSED" , Deencapsulation . getField ( deviceIO , "state" ) . toString ( ) )
Assert . assertEquals ( String . class , type )
assertTokensEqual ( of ( integer ( 10 ) , PLUS , doubleQtd ( "text 1" ) , doubleQtd ( "text 2" ) ) , tokens )
assertEquals ( html , sanitized )
assertNoViolations ( constraintViolations )
assertEquals ( TimeUtil . parseTime ( time ) , "2014-11-11 10:11:11" )
assertEquals ( averageDegree , 1.5 )
assertThat ( client , notNullValue ( ) )
Assert . assertTrue ( set . contains ( "b" ) )
Assert . assertEquals ( new URI ( path ) , uri )
Assert . assertEquals ( "did not resolve expected data type" , "string" , actual )
assertThat ( ret , is ( "myprocedure" ) )
assertEquals ( "<div id=\\"1\\"></div><div id=\\"2\\"><img /><img /></div><a id=\\"3\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr> hr text two
assertTrue ( doc . getContentField ( "extracted_text" ) . toString ( ) . equalsIgnoreCase ( "min fina <b>text</b> komemr h�陇r. Den har en <a href=\\"http://hej.se <http
assertEquals ( expected , actual )
assertParams ( captured . getValue ( ) , AUX_PARAM_NAMES , true , false )
assertEquals ( expected , actual . materializeToMap ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( Collections . singletonMap ( "x.A" , Collections . singletonList ( "y.C{other=[y.C{v=1}, others=[y.C{i=3}]}" ) ) , TestUtils . findMetadata ( clz ) )
assertTrue ( PropUtil . getBooleanProperty ( props , "test" , false ) )
Assert . assertEquals ( "4 juillet 2001 12:08:56 EEST" , dateTime . toString ( ) )
assertTrue ( "Better cost solution (1.9 < 2.0) should not be accepted since the better cost is still below the threshold" , schrimpfAcceptance . acceptSolution ( memory , createSolutionWithCost ( 1.9 ) ) )
assertEquals ( new Long ( 2 ) , response )
assertEquals ( "mes   |Thr   " , result )
Assert . assertEquals ( Short . valueOf ( ( short ) 11 ) , res )
assertThat ( params . isMonochrome ( ) , equalTo ( true ) )
assertThat ( operations . find ( query ( byExample ( example ) ) , Person . class ) , hasItems ( flynn , walter ) )
assertNullOrEquals ( "id" , "north" , crs . getId ( ) )
assertEquals ( "Sample Linker Functions" , "UITest Samples" , page . getLinkerFunctionalityForProject ( "Test Project" ) )
assertThat ( runtimeClassName , equalTo ( "org.talend.components.marklogic.runtime.output.MarkLogicOutputSink" ) )
assertThat ( target . getDoG ( ) , JUnitMatchers . hasItems ( TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 1 } } ) , 1E-4f ) , TestUtils . equalTo ( new Image ( new float [ ] [ ]
assertTrue ( book . getIsbn ( ) . startsWith ( "13" ) )
assertEquals ( 2 , c . size ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertNotNull ( dataBinding )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "GitHub Enterprise" , ghlogout . getGitHubText ( ) )
assertTrue ( ExpressionUtil . evalCondition ( context , cachedAnnoConfig ) )
arrays . assertEndsWith ( someInfo ( ) , actual , emptyArray ( ) )
Assert . assertEquals ( "12:30 PM" , getCell ( 0 , 10 ) . getText ( ) )
assertTrue ( nameIdData . isEmpty ( ) )
assertDegenerate ( scan )
Assert . assertEquals ( expect_sql , sql )
Assert . assertNull ( readS )
assertThat ( d . doCheckScript ( "import groovy.transform.*\\n" + "import jenkins.model.Jenkins\\n" + "import hudson.model.FreeStyleProject\\n" + "@Grab(value={ assert Jenkins.getInstance().createProject(
assertEquals ( "No exception thrown!" , true , result )
assertThat ( request . getPath ( ) , is ( "/aaa" ) )
assertEquals ( "Wrong number of violations." , 1 , violations . size ( ) )
assertEquals ( "Field-Name: value1\\n value2\\n value3\\n" , field . format ( "value1\\nvalue2\\n\\nvalue3" ) )
assertEquals ( expectedText , writer . toString ( ) . replace ( "\\n" , "" ) . replace ( "\\r" , "" ) )
assertEquals ( "3 啶�啶苦え 15 啶�啶�啶�啷� 38 啶�啶苦�
assertEquals ( "abc" , output . toString ( ) )
assertEquals ( expected , actual )
Assert . assertTrue ( call . isInvoked ( ) )
assertEquals ( 18 , instance . evaluations )
assertEquals ( arr , resultArr )
assertEquals ( dataflowInputPort , edit . getSubject ( ) )
assertEquals ( expectedQuery , actualQuery )
assertSpanChunk ( spanChunkBo )
assertImage ( srcImg , destImg , e )
assertThat ( subject . supports ( update ) , is ( false ) )
assertEquals ( expected , actual )
assertSame ( node , transform ( node ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.protocol.rev130731.BarrierInput msgType: 4 msgType2:
assertThat ( TestLoggerFactory . getAllLoggingEvents ( ) , is ( empty ( ) ) )
assertEquals ( 1 , queries . size ( ) )
assertEquals ( JAXRS_TEST_CLASS , testClass , actualResult . getClassName ( ) )
assertEquals ( expected , cluster )
assertEquals ( expected , actual )
assertNull ( result )
assertSorted ( )
assertNotNull ( pageEntity . getContent ( ) )
Assert . assertEquals ( childConfig . getUserID ( ) , result . getUserID ( ) )
Assert . assertEquals ( 1 , process . getLoggingCounter ( ) )
assertArrayEquals ( gbids , newGbids )
Assert . assertEquals ( 7 , ( ( VersionMessageWrapper ) list . get ( 0 ) ) . getMessageBuffer ( ) . readableBytes ( ) )
assertEquals ( 409 , http . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( expectedMap , map )
assertThat ( dao . getLongId ( id ) , equalTo ( id ) )
assertions . isNotEmpty ( )
assertTrue ( vRoute . getStart ( ) . getLocation ( ) . getId ( ) . equals ( "start" ) )
assertThat ( output , containsString ( "FHIR store deleted." ) )
assertTrue ( s . length ( ) > 0 )
assertSame ( expected , actual )
assertNotNull ( soapMessage )
assertTrue ( solrCounter > 0 )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( name , ship . getName ( ) )
assertFalse ( types . isEmpty ( ) )
Assert . assertEquals ( 1 , mainTag . size ( ) )
Assert . assertTrue ( thirdConceptSet . getSortWeight ( ) == thirdSetMember . getSortWeight ( ) )
assertTrue ( localFileSys . mkdirs ( dir ) )
assertTrue ( createdTopic . getTopicId ( ) != null )
assertEquals ( "[{\\"messageType\\":\\"CALL_RESULT\\",\\"callId\\":\\"#1\\",\\"payload\\":[\\"ThisIsThePayload\\"],\\"errorDescription\\":\\"ThisIsThePayload\\"}]" , jsonMessage )
assertEquals ( Lists . newArrayList ( "-o" , projectPath . append ( outputPath ) . toOSString ( ) , "-listener" , "-package" , "-encoding" , "UTF-8" ) , options . command ( file ) )
Assert . assertTrue ( "canonicalizing the test file " + filename + " gives a different result than canonicalizing the xtm export of " + out + " " + baseline , TestFileUtils . compareFileToResource ( out , baseline ) )
assertEquals ( Arrays . asList ( "a" , "b" ) , lists )
assertTrue ( new File ( folder . getRoot ( ) , "test/QDateTest.java" ) . exists ( ) )
assertEquals ( "{\\"b\\": 2}" , dbr . query ( "SELECT * FROM CC_TEST WHERE ID = ? " ) . at ( 0 ) . get ( "js" , Json . class ) . json )
assertTrue ( testMojo . shouldSkip ( ) )
assertFalse ( new DefaultSecurityContext ( p , s ) . isUserInRole ( "friend" ) )
assertTrue ( measure . isFailed ( ) )
assertTrue ( increaseMemory > firstIncreaseMemory )
org . junit . Assert . assertEquals ( 0 , fxForm . getElements ( ) . size ( ) )
assertEquals ( 204 , response . getStatus ( ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
Assert . assertEquals ( expected , actual )
assertThat ( productResultUrls . size ( ) , equalTo ( 0 ) )
assertEquals ( "Wrong list property" , list , conf2 . getProperty ( prop ) )
assertEquals ( 401 , r . getStatus ( ) )
assertEquals ( x , v )
assertFalse ( db . collectionExists ( methodName ) )
assertSame ( Writables . records ( TestWritable . class ) , wt )
this . assertGet ( "artifacttemplates/http%253A%252F%252Fopentosca.org%252Fartifacttemplates/MyTinyTest/files/zip" , "entitytemplates/artifacttemplates/MyTinyTest/files.zip" )
assertEquals ( "20060725224801143085000000" , d . getId ( ) )
assertEquals ( "3" , redis . brpop ( "two" , 1 ) )
assertFalse ( "Unexpected message is present." , page . isAnyMessagePresent ( ) )
assertEquals ( 1 , map . size ( ) )
assertNotNull ( strategy )
assertLife ( playerA , 22 )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/jsonmarshallertest/testMessage.json" ) ) )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isDebugEnabled ( ) )
assertEqual ( "()" , query . execute ( ) )
assertEquals ( "GBP -0.94" , test . toString ( ) )
assertThat ( getCreatedPod ( ) . getEnv ( ) , hasEnvVar ( "item1" , itemRawValue ) )
Assert . assertTrue ( resultOut . matches ( expectedPattern ) )
assertThat ( result , is ( ciString ( "DEV-IRT" ) ) )
assertEquals ( ONE_TWO_THREE , buf . readableBytes ( ) )
assertNotNull ( "�峰����版�绋�瀹�涔�澶辫触" , result )
assertThat ( testPath , is ( expectedPath ) )
Assert . fail ( "an exception should have been thrown" )
assertEquals ( "The user name was incorrect" , "RNO" , changeset . getUser ( ) )
assertEquals ( false , modifiedAction . isPropagatingConfiguration ( ) )
assertThat ( info . getClusterService ( CLUSTER ) , sameInstance ( newService ) )
assertEquals ( service . getPresentableDistance ( distances ) , "approaching" )
assertThat ( collect , not ( hasItem ( IS_CLEAN_HANDLER . getKey ( ) ) ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( 0 , originalMap . size ( ) )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
assertArrayEquals ( data , Files . readAllBytes ( file ) )
assertEqualsJson ( expected , json )
Assert . assertTrue ( contentAsString . contains ( "archive.zip" ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertOutput ( hbs . benchmark ( ) )
Assert . assertEquals ( a , single . get ( ) )
assertEquals ( l , fr . getRightsProperties ( ) )
Assert . assertTrue ( testApiVerticleFile . exists ( ) )
assertThat ( hBaseConfiguration . getConfiguration ( ) , is ( configuration ) )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertTrue ( session . has ( SESSION_LABEL ) )
assertThat ( duration . plus ( Duration . of ( 1 , ClockUnit . NANOS ) ) , is ( Duration . ofClockUnits ( 3 , 0 , 3 ) ) )
assertEquals ( null , stringStringMap )
Assert . assertEquals ( AccessMode . GROUPED , sr . getSerializableAccess ( ) )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'array',items:{type:'object',properties:{f1:{type:'string'}}}}},'x-example':[[[{f1:'foobar'}]]]}" , s . getSchema (
assertThat ( rendered , is ( secondPass ) )
assertEquals ( expected3 , actual3 )
assertEquals ( 2 , result . length )
assertEquals ( amendedCommit , getHeadCommit ( TEST_BRANCH , repo ) )
assertTrue ( Script . matchNamed ( MatchType . EQUALS , "res" , null , "[1, 2, 3]" , ctx ) . pass )
assertSseResponse ( sseResponse , "event:eventName" , "data:payload" )
assertTrue ( ex . isPrime ( 31 ) )
Assert . assertEquals ( "There should be 3 files" , 3 , files . length )
assertEquals ( "collection1" , coll . getName ( ) )
assertEquals ( 1000 , this . con . getReadTimeout ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( expectedBill , bill . doubleValue ( ) , 0.01 )
assertOut ( "this.b = 10 + 'px" )
assertValues ( presentFieldList , actual )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Pay/>" , elem . toXml ( ) )
authRule . assertScenario ( scenario )
assertEquals ( expected , result . getArr ( ) )
assertTrue ( "bar" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) && 1 == c . getVersion ( ) && "path" . equals ( c . getPath ( ) ) && "domain" . equals ( c . getDomain ( ) )
assertParser ( twig )
assertEquals ( expectedVersionString , versionData1 . toString ( ) )
assertThat ( time , equalTo ( now - 2000 ) )
assertEquals ( expected , actual )
assertEquals ( expecting , found )
assertTrue ( resultComparator . compare ( cucc1 , cucc2 ) > 0 )
assertEquals ( "The value is not correct." , date , value )
assertTrue ( Arrays . stream ( itia . getValues ( ) ) . allMatch ( v -> key == v / 2 ) )
assertTrue ( "Esc is not supported in this context" , isElementPresent ( By . className ( "v-window-contents" ) ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( Hours . of ( - 15 ) , test5 . multipliedBy ( - 3 ) )
assertFalse ( validator . validate ( EntityNames . GRADE , grades ) . equals ( grades ) )
assertEquals ( "foo:bar" , uri . getLabel ( ) )
assertEquals ( "Time to upgrade..." , result )
assertEquals ( "org.eclipse.vorto/1.0.0/Location.java" , modelId . getFileName ( ) )
assertNotNull ( importer )
Assert . assertEquals ( IntNode . valueOf ( 1 ) , result )
assertEquals ( "Selection should be empty" , 0 , comboBoxElement . getValues ( ) . size ( ) )
Assert . fail ( )
assertNotNull ( queryFactory3 . delete ( QAnimal . animal ) )
assertEquals ( expecting , t . toStringTree ( ) )
assertEquals ( id , entity . getId ( ) )
assertEquals ( new BigDecimal ( 123 ) , arrayFirst )
assertNotNull ( wflows )
Assert . assertTrue ( providerAInvoked )
assertEquals ( "invoice.toJson('fetchPlan:customer:1,fetchPlan:orders:2')" , p . toString ( ) )
assertThat ( issues , is ( empty ( ) ) )
Assert . assertTrue ( "Not authenticated" , authenticated )
assertEquals ( OK , response . getStatus ( ) )
assertEquals ( 0 , scores . getScore ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , expectedQuery ) )
assertTrue ( sim )
assertEquals ( DOUBLE , v8Object . getType ( "key" ) )
Assert . assertEquals ( "processorName,currentFileName,currentLine,totalLineToProcess,totalLineReadLine,status,message" , CSV )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( calendar . getTime ( ) , aiResponse . getTimestamp ( ) )
assertThat ( options . isStrict ( ) , equalTo ( false ) )
org . junit . Assert . assertEquals ( expected , actual )
assertPermanentCount ( playerA , "Silvercoat Lion" , 0 )
assertPaths ( GraphAlgoFactory . shortestPath ( Traversal . expanderForAllTypes ( ) . addNodeFilter ( n -> n . getName ( ) . equals ( "a" ) ) . findAllPaths ( a , e ) , "a,b,c,d,b,c,e
assertEquals ( 2 , urls . size ( ) )
Assert . assertEquals ( "queueInfo translation didn't work." , returned . getState ( ) . toString ( ) , StringUtils . toLowerCase ( queueInfo . getQueueState ( ) . toString ( ) ) )
assertEquals ( "destroy" , simpleComponent . destroy ( ) )
assertEquals ( "fn" , fieldsCaptor . getValue ( ) . getName ( ) )
assertEquals ( 4 , acc . get ( ) )
assertEquals ( "1234567" , sb . toString ( ) )
assertArrayEquals ( result , CompactEncoder . binToNibbles ( test ) )
assertNotNull ( processInstance . getId ( ) )
assertNull ( "Expected null privacy policy, but it is not." , privacyPolicy )
assertEquals ( filename , instance . getFilename ( ) )
assertNotNull ( securityContext )
assertEquals ( "SELECT * FROM Class" , q . toString ( ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertNotEquals ( frameData1 , frameData2 )
assertEquals ( AuctionBatchlet . STATE . COMPLETED , batchlet . getState ( ) )
assertEquals ( "{a}/b={c}" , resolved . getTemplate ( ) )
assertTrue ( hand . getClassifier ( ) == HandClassifier . PAIR )
Assert . assertEquals ( "true" , model . getValidationItems ( ) . get ( 0 ) . getMessage ( ) )
assertThat ( description . toString ( ) , is ( "an array node whose elements is ANYTHING" ) )
assertEquals ( 200 , resp . getStatus ( ) )
assertEquals ( expected , actual )
assertTrue ( Pattern . matches ( "(?s).*/dtablecolumnclasses.jsp PASSED.*" , page . asXml ( ) ) )
assertThat ( prepare , CoreMatchers . instanceOf ( ProfiledPreparedStatement . class ) )
assertNotNull ( result )
assertTrue ( point . equals ( point ) )
assertEquals ( expResult , result )
assertSame ( toTest , toTest . setType ( ParamType . getDefault ( ) ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "com.example.ImpliedObjectProperty" ) )
assertThat ( inputStream , notNullValue ( ) )
assertTrue ( signatureValid )
AssertJUnit . assertFalse ( "filter matches object, but it should not" , match )
assertEquals ( header , fixture . getHeaders ( ) . get ( header ) )
assertEquals ( expect , pred )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( 0.0d , mock . doubleReturningMethod ( 12 ) , 0.0d )
assertEquals ( "alt2\\n" , found )
assertThat ( result , is ( expct ) )
assertThat ( builder . build ( ) , hasItems ( "-server:https://tfs02.codeplex.com" ) )
assertEquals ( EmailRecipientUtils . BCC , analyser . getType ( new InternetAddress ( "mickey@disney.com" ) ) )
assertDurationEquals ( dv3 , dv1 . minus ( dv2 ) )
assertTrue ( milli1 . equals ( milli2 ) )
assertThat ( impl . getClasses ( ontologyId ) . count ( ) , is ( 0L ) )
assertMapping ( node , 0 , 6 , 5 , 0 , 5 , 16 )
Assert . fail ( "Test should not go here - invalid deployment (invalid value of resteasy.scan.providers)!" )
assertThat ( result , nullValue ( ) )
assertEquals ( 0.5d , config . half ( ) , 0.01d )
assertThat ( instance , notNullValue ( ) )
assertNotNull ( wsdl1 )
assertFalse ( lock2 . tryLock ( 10 , TimeUnit . MILLISECONDS ) )
Assert . assertFalse ( sampling )
assertEquals ( tree . getModelObject ( ) . getChildCount ( tree . getModelObject ( ) . getRoot ( ) ) , 0 )
assertEquals ( "Unexpected state class" , FormLayoutState . class , state . getClass ( ) )
assertEquals ( buf . toString ( ) , result )
observer . assertObservations ( "21" , PhaseId . APPLY_REQUEST_VALUES , PhaseId . APPLY_REQUEST_VALUES , PhaseId . APPLY_REQUEST_VALUES , PhaseId . INVOKE_APPLICATION , PhaseId . RENDER_RESPONSE , PhaseId . RENDER_RESPONSE , Phase
assertEquals ( 3 , groups . size ( ) )
assertEquals ( adminUserInfo . getIndividualGroup ( ) , actAa . getIndividualGroup ( ) )
Assert . assertEquals ( pn . getFullName ( ) , "Sr. Taylor Bob Mark" )
Assert . assertEquals ( "�驻�� 3 砖注�转" , t . format ( new Date ( 0 ) ) )
assertThat ( results , is ( Collections . emptyList ( ) ) )
assertSame ( config , result )
assertEquals ( "Double-It not doubling positive numbers" , 20 , resp )
assertThat ( uri , is ( new URI ( base + "?port=COM3?name%20with%20spaces=value%20with%20spaces" ) ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
Assert . assertTrue ( lastElementIsSame ( store , new WeightedObservedPoint ( w , x , y ) ) )
assertEquals ( "root.user1group.user1" , user1Leaf . getName ( ) )
assertTrue ( gw . lines . isEmpty ( ) )
assertEquals ( 400 , fail )
assertEquals ( 100 , ( Integer ) proxy )
Assert . assertNotNull ( model )
assertEquals ( true , parsedTypes . get ( 0 ) instanceof RedditSubreddit )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertEquals ( expected , value )
assertEquals ( "try" , result )
assertEquals ( 3 , response . getDistances ( ) . size ( ) )
assertTrue ( Year . isLeap ( year ) )
Assert . assertTrue ( Precision . equals ( 7.0 , MathArrays . distance1 ( p1 , p2 ) , 1 ) )
Assert . assertTrue ( xml . contains ( "LinkedVerses notDuplicated" ) )
assertEquals ( expectedApiVersion , Deencapsulation . getField ( httpHsmSignatureProvider , "apiVersion" ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertTrue ( mse . getTotalError ( ) < maxError )
assertEquals ( "{\\"key\\":null,\\"key2\\":\\"value\\"}" , writer . toString ( ) )
assertEquals ( value , URLUtils . decode ( encoded ) )
assertNull ( auth . authenticate ( USERNAME , PASSWORD , mockServerSession ) )
assertEquals ( expected , output )
assertEquals ( "Expected 4 results!" , 4 , n )
Assert . assertTrue ( protectedPage . getTitleText ( ) . contains ( "Username or password" ) )
assertEquals ( test . getFunctionName ( ) , "getColumnNumber" )
Assert . assertEquals ( date , scheduling . getStartupTime ( ) )
assertAnnotations ( 2 , Coordinate . class , new TestCoordinate ( 0 , "-0.125, 51.507" , "dd" , TYPE_POINT_COORDINATES_0_125_51_507 ) , new TestCoordinate ( 1 , "-3.188,55
assertEquals ( "<html><head><noscript></noscript></head><body><img src=\\"foo\\" /><p>Hello</p></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( result , expecting )
assertMissing ( "list" , 1L )
assertEquals ( "foo" , s )
assertEquals ( 1 , patient . getCustomId ( ) . getUndeclaredExtensions ( ) . size ( ) )
Assert . assertEquals ( "test" , normalizer . normalize ( "test" ) )
assertThat ( chain , is ( sameInstance ( builder ) ) )
assertEquals ( "ID3v2ChapterTOCFrameData [id=null, startTime=0, endTime=0, startOffset=0, endOffset=0, subframes=[]]" , frameData . toString ( ) )
assertEquals ( "test" , ( ( Br ) obj ) . getId ( ) )
assertNotNull ( cfid2 )
assertEquals ( "bcse" , e1 , e2 )
assertEquals ( "(abc 34)\\n" , found )
assertTrue ( runtime instanceof MockIndirectBaseClass )
assertThat ( byValue . getSingleResult ( ) . getF ( ) , equalTo ( f1 ) )
testRunner . assertAllFlowFilesTransferred ( PutORC . REL_FAILURE , 1 )
assertThat ( this . capistranoCommandBuilder . build ( ) , hasItem ( "--verbose" ) )
assertEquals ( "chocolate" , res . get ( "foo" ) )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertEquals ( 0 , Files . readAllBytes ( link ) . length )
assertTrue ( desc . isEmpty ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedResult , result )
assertThat ( result , is ( jsonString ( "Alice" ) ) )
assertEquals ( "om 3 氓r" , t . format ( new Date ( 2629743830L * 12L * 3L ) ) )
runner . assertNotValid ( credentialsService )
assertEquals ( "Test if value red from file equals value stored" , mlArray , mlArrayRetrieved )
assertEquals ( 0 , courses . size ( ) )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( transform instanceof Modifier . Defaultr )
assertTrue ( "Value should have been removed by rollback" , ! ex1 . getValue ( ) . isDefined ( ) )
assertEquals ( null , shadowDialog . getIcon ( ) )
assertEquals ( "SELECT a AS A2, b AS A3, c AS A4 FROM test" , select . toString ( ) )
assertEquals ( instance , AbstractEntity . load ( MyEntity . class , 3L ) )
assertEquals ( "" , result )
assertEquals ( null , task )
assertEquals ( getLabel ( ) , 0.0 , eye . minus ( m3 ) . getEuklideanValue ( ) , TOLERANCE )
assertTrue ( results . containsAll ( Arrays . asList ( male , undergraduate ) ) )
assertEquals ( 0.5 , result . getUniquenessRatio ( ) , 0.0 )
assertSame ( value , bound . any ( ) . type )
Assert . assertTrue ( DoubleArrays . sum ( props ) < 1e-13 )
Assert . assertNull ( caixa )
assertEquals ( "1.2\\t2.3\\t3.4\\n" + "4.5\\t5.6\\t6.7\\n" , out . toString ( ) )
assertEquals ( result , "<a href=\\"?titi=456\\">link</a>" )
assertEquals ( "The message is not correct." , message , this . tag . getMessage ( ) )
assertTrue ( ping )
assertEquals ( inc . get ( ) . get ( ) , outRA . get ( ) . get ( ) )
assertArrayEquals ( data , getInputStream ( ) . readPackedFloats ( data . length / 3 , 3 ) , 0.0000001f )
assertEquals ( new Double ( 123 ) , arrayFirst )
assertEquals ( "admin" , nodeName )
runner . assertAllFlowFilesTransferred ( SelectHiveQL . REL_FAILURE , 1 )
Assert . assertEquals ( "Basic dXNlcjp0ZXN0" , endpoint . session . getHeaderField ( "Authorization" ) )
assertEquals ( - 0.09983 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( "�注�� 3 砖注�转" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
assertEquals ( 1 , x . size ( ) )
Assert . assertEquals ( 1 , inserted . intValue ( ) )
assertTrue ( ( hasAttachmentType == false ) )
assertEquals ( doc . getContent ( ) , "some data\\r\\nand other data\\r\\n" )
assertSQLException ( ( ) -> metadata . getParameterClassName ( 2 ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertNotNull ( method . toString ( ) , m )
Assert . assertEquals ( configuration , Utils . streamToString ( result ) )
assertFilesEqual ( createOutputfile ( "in_newCustomElement.png" ) , copy )
assertNotNull ( result )
assertEquals ( "method value" , ObjectUtils . getValue ( object , "item" ) )
assertNotNull ( service )
assertRowMetaIsFilledWithFields ( )
assertThat ( isExpectedData , is ( true ) )
assertEquals ( original . getValue ( ) , newone . getValue ( ) )
assertEquals ( 5 , d , 0 )
Assert . assertEquals ( 2 , data . getCutsToAnalyze ( ) . size ( ) )
assertThat ( instance . getManager ( ) , is ( manager ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Record/>" , elem . toXml ( ) )
assertFalse ( incorrect . isValid ( status ) )
assertEquals ( Collections . singletonList ( new InetSocketAddress ( "1.2.3.4" , 108080 ) ) , arguments . getLocalAddress ( ) )
assertEquals ( expected , javaSource . getEscapedSourceCode ( ) )
assertEquals ( radius , 0.0 )
assertEquals ( MULTIPLE_INPUT_RESULTS . size ( ) , resultsFound . size ( ) )
assertTrue ( result instanceof Date )
assertEquals ( "this-is-null-value" , newText )
assertThat ( results , contains ( ( Matcher ) hasEntry ( "code" , "127689" ) ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertTrue ( e . toString ( ) . contains ( "Not found: Table measurement-lab:m_lab.2010_01" ) )
assertThat ( greetings , Matchers . < String > hasItems ( is ( "Hello, Peter" ) ) )
assertTrue ( cygnusGroupingRules . getRules ( ) . isEmpty ( ) )
assertTrue ( "The RMS relative error per bucket, " + RMSNormalizedError + ", exceeds our tolerance of " + maximumRelativeError , RMSNormalizedError <= maximumRelativeError )
Assert . assertEquals ( testStr , new String ( result ) )
assertNotNull ( result )
assertEquals ( "reboot" , Deencapsulation . getField ( jobsResponseParser , "cloudToDeviceMethod" ) )
assertEquals ( false , start )
context . assertEquals ( 500 , res . statusCode ( ) )
assertTrue ( type . getName ( ) . endsWith ( "Roles" ) )
assertEquals ( "1234.5" , result )
Assert . assertEquals ( 0.0 , optimizer . getRootMeanSquaredError ( ) , 1E-4 )
mockery . assertIsSatisfied ( )
Assert . assertEquals ( "Hello World" , outStream . toString ( ) )
assertTrue ( landsatMetadata instanceof Landsat8Metadata )
assertPutBytes ( contentBytes )
assertFalse ( GitFileUtils . isFile ( "/test_file.sh" , commit . getName ( ) , repo ) )
assertEquals ( "{\\"dashBoards\\":[{\\"id\\":1,\\"parentId\\":-1,\\"isPreview\\":false,\\"name\\":\\"test1@test.com\\",\\"createdAt\\":1,\\"updatedAt\\":0,\\"widgets
assertThat ( result , equalTo ( expectedCharset ) )
assertEquals ( "<text>" , label )
Assert . assertTrue ( "testDateIsAfter 0" , afterDate . after ( baseDate ) )
context . assertEquals ( "Squid" , handler . body ( ) )
assertEquals ( "value 1" , sel . getValue ( ) )
assertEquals ( "HELLO" , buffer . toString ( ) )
assertEquals ( filterView , filterEditor . view )
Assert . assertNull ( spanCache . getSourceInfo ( "1" ) )
assertEquals ( str11 , se . toString ( ) )
Assert . assertNotSame ( primaryPrin1 , primaryPrin2 )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
Assert . assertEquals ( 4 , p . f ( 4 ) )
assertEquals ( 0 , result )
assertNotNull ( dataBinding )
assertTrue ( "Not isomorphic" , b )
assertThat ( scope , equalTo ( new SciTokenScope ( QUEUE , "/" ) ) )
assertValueEqualsResultSet ( rs , Arrays . < Object > asList ( ROW1 , ROW2 , ROW3 ) )
assertFalse ( replaced )
assertEquals ( "Clusterid should match with the existing one" , "currentcid" , storage . getClusterID ( ) )
assertTrue ( CertificateUtilExtended . isSelfSignedCertificate ( certPem ) )
assertEquals ( expectedTransportCosts + expectedActivityCosts , iCosts , 0.01 )
assertSame ( ThreadNameCachingStrategy . UNCACHED , tns )
assertTrue ( p . getStatusSimple ( ) . toString ( ) . equals ( "active" ) )
assertEquals ( windowWidth , generator . getWindowWidth ( ) )
assertTrue ( ex . isPrime ( 31 ) )
assertThat ( result , is ( true ) )
assertEquals ( deleteTemplate1 , deleteTemplate1Duplicate )
Assert . assertEquals ( null , s )
assertXMLSimilar ( "Invalid message" , expected , message )
Assert . assertEquals ( 1 , compare )
assertThat ( "Wrong type of myTestFactory." , myTestFactory . getDelegate ( ) , CoreMatchers . instanceOf ( BootstrapConnectionFactory . class ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "Should return failure" , "failure" , jsonObj . get ( "status" ) . getAsString ( ) )
assertEquals ( timestamp , buttonFunctionblockData . getStatusProperty ( "time" ) . get ( ) . getValue ( ) )
assertTrue ( "sin() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( "aTestString" , classUnderTest . getFieldLength ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 3 , warnings . size ( ) )
assertEquals ( lastValue , "EndNode8" )
assertThat ( pageable , is ( instanceOf ( NoPageable . class ) ) )
assertEquals ( "type1" , type . getName ( ) . getLocalPart ( ) )
assertArrayEquals ( refar , d . getResult ( ) )
assertSpansAccepted ( lots )
assertEquals ( RequestResult . FAILURE , requestResult )
assertEquals ( 0 , Context . countActive ( ) )
assertThat ( formatterOutput , containsString ( "" + "  Given " + AnsiEscapes . RESET + AnsiEscapes . GREEN + "first step" + AnsiEscapes . RESET ) )
assertEquals ( args . addArgument ( "var1" , "val0" ) , "val0" )
Assert . assertTrue ( connected )
login . assertIsConnectedAs ( "nouser" )
assertEquals ( p . format ( new Date ( 1 ) ) , "浠�����" )
assertTrue ( filter . matches ( operation , poolInfoMap ) )
Assert . assertEquals ( dialect . getURL ( conn ) , "jdbc:jndi://null:null/null" )
assertThat ( getPodSpec ( jobSpec ) . getRuntimeClassName ( ) , nullValue ( ) )
testTwo . assertIsSatisfied ( )
Assert . assertNull ( busca )
Assert . assertEquals ( 2 , resources . size ( ) )
Assert . assertEquals ( 5 , operation . operations . size )
assertThat ( ts , not ( nullValue ( ) ) )
assertThat ( columns . size ( ) , is ( 2 ) )
Assert . assertTrue ( Arrays . equals ( data , xdata ) )
assertThat ( jsonViewAnnotation . value ( ) [ 0 ] . getSimpleName ( ) , equalTo ( "MyJsonViewClass" ) )
Assert . assertEquals ( IrodsRuleInvocationTypeEnum . IRODS , actual )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response6 . getResponseObject ( ) )
assertEquals ( mockedContractState , invoke ( testResponseData , "getContractState" ) )
assertLine ( "dessicated dog droppings\\nItasty " , b , true )
assertEquals ( 401 , r . getStatus ( ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( thrown )
assertEquals ( expected , actual )
assertEquals ( - 123456789012L , ConfigUtils . getLong ( config , 0 , "some-long" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( result , event )
assertEquals ( 204 , r . getStatus ( ) )
assertTemplateEvaluatesTo ( "Hi" )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( component ) instanceof WStyledTextRenderer )
Assert . assertNotNull ( file )
Assert . assertNull ( spec . extractTimestamp ( ImmutableMap . < String , Object > of ( ) ) )
assertEquals ( insertPerson , insertSamePerson )
assertEquals ( true , classUnderTest . getSQLShareHistory ( ) )
Assert . assertEquals ( "randomUser" , UserGroupInformation . getLoginUser ( ) . getUserName ( ) )
Assert . assertTrue ( Arrays . equals ( correctStringSet , randomPurmutationSet ) )
assertTrue ( "1.2.0.0 <= 1.2.0" , ruleEvaluator . evaluateBooleanRule ( rule , values ) )
Assert . assertNotNull ( instance . getOverLaps ( source , target ) )
assertTrue ( BufferedImageComparer . isSame ( originalImage , copyImage ) )
assertHandCount ( playerA , 0 )
assertFalse ( sameElts ( x1 , x2 ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getVolumes ( ) , allOf ( hasVolume ( "volume1" , "/domain-path1" ) , hasVolume ( "volume2" , "/server-path" ) ) )
Assert . fail ( )
assertEquals ( "Hello world" , String . valueOf ( result [ 0 ] ) )
Assert . assertEquals ( "moduleA" , foundModule )
assertEquals ( 4 , m . getInventoryEntries ( ) . size ( ) )
assertThat ( encryptor . checkPassword ( testPassword , null ) , is ( false ) )
assertSame ( fi , interceptor . getBindingFaultInfo ( boi , ex , msg ) )
Assert . assertEquals ( "Key" , firstLine )
assertNotNull ( result )
assertArrayEquals ( NOT_DECODED , data , object . getData ( ) )
Assert . assertNotNull ( accessToken )
Assert . assertEquals ( "Fail find by FirstName" , userExist . getFirstName ( ) , list . get ( 0 ) . getFirstName ( ) )
assertions . isNotLessThan ( null )
assertTrue ( theInstance . getClassInformation ( ) instanceof GameObjectClassInformation )
assertTrue ( foundChars )
assertFalse ( etlKeyA . equals ( etlKeyB ) )
assertEquals ( arrayBuffer . getV8ArrayBuffer ( ) . setWeak ( ) , v8ArrayBuffer )
assertThat ( generatedReportText , isSimilarTo ( expectedReport , "timestamp" ) )
assertEquals ( expectedDependencies , dependencies )
assertThat ( outputDirectory . getPath ( ) , is ( changeSeparatorIfRequired ( "custom-reports-directory" ) ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( id , "1" )
assertEquals ( idWithSlash , responseRemove . getId ( ) )
assertThat ( thrown , instanceOf ( MaximumTimeLimitExceededException . class ) )
assertFalse ( skillConstraint . fulfilled ( insertionContext ) )
assertTrue ( processedResponse )
assertEquals ( expected , sql [ 0 ] . toSql ( ) )
assertThat ( newShare . getHours ( ) , equalTo ( 0 ) )
Assert . assertEquals ( tree . ret . aliasVar , "a.firstName" )
assertTrue ( s . isSentToRawPubKey ( ) )
assertNotNull ( "Social Profile (JSON):\\n" , profile )
assertMappedFieldValueIsResourceTargetValue ( )
assertNumberOfViolations ( constraintViolations , 2 )
assertEquals ( "Multiple simple parameters: 0 and 1 and also 2" , f . format ( ) )
assertEquals ( m1 , m2 )
assertEquals ( DiscordianDate . of ( 2012 , 2 , 25 ) , test )
assertEquals ( expectedSource , instrumentedSource )
Assert . assertEquals ( counter . getCount ( ) , 10 )
assertFalse ( "disabled row should not be selected" , row . isSelected ( ) )
assertThatAcceptorWasNotStarted ( )
Assert . assertEquals ( "port should be set" , portError . getDescription ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( rescaled ) , equalTo ( new double [ ] { 1 , 1 , 2 , 3 , 4 , 5 } ) )
assertSkipped ( myTasks , 2 , 3 )
assertEquals ( 1 , candidates . size ( ) )
assertEquals ( "</6>,</6/0>,</6/0/0>,</6/0/1>,</6/0/2>,</6/0/3>,</6/0/4>,</6/0/5>,</6/0/6>" , str
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED_BREAK , status )
assertEquals ( adminProperties . getRefresh ( ) , commandArgumentCaptor . getValue ( ) )
Assert . assertEquals ( Integer . valueOf ( 1 ) , result )
Assert . assertEquals ( 1 , loggerCount . getWarningCount ( ) )
assertEquals ( 0 , conflicts . size ( ) )
assertCloneEquals ( out1 , out1 )
assertNull ( content )
assertTarget ( "[['a'], ['  ', 'b', 'c']]" )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertNotEquals ( searchScroll1 , searchScroll2 )
assertThat ( students . size ( ) , greaterThanOrEqualTo ( 3 ) )
assertEquals ( "123" , mockResult . included ( "hash" ) )
assertEquals ( "1" , result . getXdmValue ( ) . atomicGet ( ) . getStringValue ( ) )
assertContentSame ( rs , rc , columnParam1 )
Assert . assertFalse ( isAdmin )
Verify . assertSize ( 3 , dogLovers )
assertTrue ( "No RuntimeException" , ex )
assertEquals ( threadsSchedule , result . toString ( ) )
assertEquals ( 60 , max )
assertThat ( result , is ( outbound ) )
assertEquals ( "Invalid type" , Schema . Type . NULL , schema . getType ( ) )
Assert . assertTrue ( returnedLevels . isEmpty ( ) )
Assert . assertArrayEquals ( Hex . encodeHexString ( hashed ) . getBytes ( Charset . forName ( "UTF-8" ) ) , bytes )
Assert . assertEquals ( 1 , violations . size ( ) )
assertTrue ( res . isValid ( ) )
ImgLib2Assert . assertIntervalEquals ( expected , result )
assertTrue ( object . isReleased ( ) )
Assert . assertEquals ( "test" , e . tag ( ) )
Assert . assertEquals ( expected , FileTools . content ( content ) )
assertEquals ( 100 , results . size ( ) )
assertNotNull ( nn1 )
context . assertIsSatisfied ( )
Assert . assertFalse ( secure )
assertTrue ( CompilationUtil . memberMatchesMethodID ( member , "828" , parseDictionary ) )
assertDefaultContactPoints ( "hello" )
assertThat ( report , is ( not ( nullValue ( ) ) ) )
assertThat ( Functions . bondBasedDBStereo ( g ) . toSmiles ( ) , is ( "F/N=N/F" ) )
assertNotNull ( member )
objectsWithCustomComparisonStrategy . assertIsIn ( info , "Luke" , values )
Assert . assertEquals ( 0 , TestHelpers . getOkCount ( cnx ) )
assertNull ( "Listener should not have been called" , getGridElement ( ) . getCell ( 0 , 0 ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( argumentCaptor . getValue ( ) . getLabels ( ) , expectedLabels )
assertArrayEquals ( expectedPq , pq , delta )
assertEquals ( result , registry . getDerivingMetrics ( DerivingMeter . class , filter ) )
assertThat ( partitionKeyValue . toJson ( ) , equalTo ( mapper . writeValueAsString ( Collections . singletonList ( data . city ) ) ) )
assertEquals ( "Col 0 has max width of 30px" , 30 , getGridElement ( ) . getCell ( 0 , 0 ) . getSize ( ) . getWidth ( ) )
assertSame ( fn . getClass ( ) , ClassHelper . getRealClassFromClass ( fn . getClass ( ) ) )
Assert . assertNotNull ( result )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertEquals ( config . getReceiveBufferSize ( ) , acceptedConfig . getReceiveBufferSize ( ) )
assertEquals ( "XML" , xs . getDoc ( ) . toString ( ) )
assertEquals ( 30112 , person . get ( "id" ) )
assertNotNull ( action )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoICMSTotal ( ) . toString ( ) )
Assert . assertThat ( "ReponseList.size" , responseList . size ( ) , lessThanOrEqualTo ( 2 ) )
Assert . fail ( "IllegalArgumentException should occur but didn't!" )
Assert . assertEquals ( false , fastqBuilder . sequenceAndQualityLengthsMatch ( ) )
Asserts . check ( headerKeySize > 0 , " Fail to extract content-type subset from response header" )
assertNull ( g . getEsriSR ( ) )
assertTrue ( ferp . isReadable ( Form . class , null , null , null ) )
assertEquals ( "Only two sets of metrics should be visible." , 1 , httpOutput . getResults ( ) . size ( ) )
assertNoSpans ( )
assertEquals ( "Wrong number of accounts" , 21 , accounts . size ( ) )
assertEquals ( expResult , result )
assertEquals ( "(a = 1) and (b = 2) and (c = \\"C\\")" , e . toString ( ) )
assertEquals ( NOT_DECODED , true , object . useNetwork ( ) )
assertTrue ( ExceptionTestUtility . sameMembers ( expectedRep , Collections . EMPTY_SET , unitAnalysis . mightThrow ( s ) ) )
assertEquals ( false , result )
assertEquals ( false , result )
assertEquals ( 0.6065 , value , EPSILON )
Assert . assertTrue ( "Continuous scheduling should be enabled." , scheduler . isContinuousSchedulingEnabled ( ) )
assertEquals ( 99.0 , series . getY ( 1 ) )
assertEquals ( "hello" + lineSeparator , new String ( data ) )
assertEquals ( 2 , names . size ( ) )
assertFeatureValues ( expected , testQuery , testText , new DocSizeFeatureExtractor ( ) )
assertSame ( test , base )
assertThat ( result . toString ( ) , is ( "test.ripe.net" ) )
assertions . containsSequence ( info , actual , sequence )
assertTrue ( called [ 0 ] )
Assert . assertEquals ( "Content-Type: multipart/simple-boundary; boundary=\\"simple-boundary\\"\\r\\n" + "\\r\\n" + "\\r\\n" + "It does NOT end with a linebreak.\\r\\n" + "\\r\\n"
assertEquals ( 1L , result )
assertThat ( result , is ( true ) )
assertThat ( result . getResultCode ( ) , is ( ResetPasswordResultCode . INVALID_EMAIL_ADDRESS ) )
assertThatXmlIsReadable ( writeIn )
this . assertVerification ( )
Assert . assertEquals ( "einganzlangeswort" , result )
assertEquals ( result , Boolean . TRUE )
assertEquals ( target1 . toString ( ) , target2 . toString ( ) )
assertThat ( selectRandomly . selectSolution ( Arrays . asList ( sol1 , sol2 ) ) , is ( sol1 ) )
Assert . assertTrue ( actual . isEmpty ( ) )
assertEquals ( 4 , cnt )
assertFalse ( consumerPrefetch . running )
assertNotNull ( Transcription . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "REXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( true , isGood )
assertEquals ( "0001FEF" , HexDump . readCompact ( "0001FEF" ) )
assertNotNull ( authRequest )
Assert . assertEquals ( 200 , connection . getResponseCode ( ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
assertSame ( result , this . logger )
Assert . assertEquals ( expectedIds , actual )
assertFalse ( volume . equivalentFileSystems ( other ) )
assertEquals ( "Unexpected primary style name" , "v-table" , state . primaryStyleName )
assertNull ( container . child . get ( ) )
assertEquals ( outputFile , sink . getSink ( ) )
assertThat ( g . toSmiles ( ) , is ( "CC=[C@@]=CC" ) )
Assert . assertEquals ( "did not get expected xml" , expected , collInp . getParsedTags ( ) )
assertEquals ( expectedMap , map )
assertEquals ( HttpStatus . FORBIDDEN_403 , resp . getStatus ( ) )
assertEquals ( workflowBundle . getWorkflows ( ) . size ( ) , 2 )
assertEquals ( expectedValue , result )
assertEquals ( expected , uri )
Assert . assertTrue ( valid )
assertTrue ( result . length ( ) > 0 )
Assert . assertEquals ( statusCode , 200 )
assertThat ( result , is ( page ) )
assertEquals ( publications . size ( ) , 5 )
assertThat ( outputDirectory . getPath ( ) , is ( "custom-reports-directory" ) )
assertEquals ( "12345678901234567890123456789012" , request . getAuthToken ( ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_UPDATE )
assertTrue ( "Oh no! No mapped object! " , store . size ( ) > 0 )
Assert . assertEquals ( "foo-2" , currentLeader )
assertEquals ( STATIC , CorrectEquals . staticValue )
Assert . assertEquals ( "SELECT 'A' LIKE CONVERT(blob_col USING latin1)\\nFROM tbl_name;" , text )
Assert . assertTrue ( ! errors . hasGlobalErrors ( ) )
assertThat ( responseHandler . getMessage ( ) , is ( QueryMessages . noResultsFound ( ) . toString ( ) ) )
assertEquals ( key . getTenantIdField ( ) . toString ( ) , "test.id.key.field" )
assertArrayEquals ( new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 } , id )
Assert . assertTrue ( resultado )
assertThat ( mfp . getProperty ( ) , equalTo ( "production" ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( "[\\"a\\",\\"b\\",\\"c\\",\\"d\\"]" , jsonArray2 . toString ( ) )
assertEquals ( 13 , jobExecutor . getJobsAdded ( ) )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=omAll&minSupportCount=0" ) )
assertTrue ( theSelectedPoolsWere ( allAvailablePools ( ) ) )
JSONAssert . assertEquals ( "Message" , "{id:12346}" , actual , LENIENT )
assertEquals ( Str . of ( "two" ) , result )
assertEquals ( "{\\"sla\\":{\\"type\\":\\"string\\",\\"properties\\":{\\"sla\\":\\"1sh\\",\\"ti\\":\\"0lde\\"}}}" , actual . toString ( ) )
assertThat ( interval , is ( ser ) )
assertEquals ( expected , json )
assertEquals ( expected [ i ] , key )
assertTrue ( service . artifactExists ( "dl.bukkit.org" ) )
Assert . assertEquals ( 2 , counter . get ( ) )
assertEquals ( "Index = " + i , ModisDaacUtils . extractProductType ( toTest ) , type )
assertFalse ( obs . isDirty ( ) )
assertViewName ( mav , "editProfile" )
Assert . assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatus ( ) )
assertNull ( result )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertEquals ( ByteString . decodeHex ( "74c999cb8872616ec999cb8c73c3b472" ) , data . readByteString ( ) )
assertThat ( definition . tableEntryByTypeTransformer ( ) . transform ( fromValue , String . class , cellTransformer ) , is ( "key=value" ) )
assertThat ( result , is ( false ) )
Assert . assertFalse ( policy . canRetry ( context ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertEquals ( expResult , result )
assertEquals ( 0 , lines . size ( ) )
Assert . assertEquals ( "Hello world!" , output )
Assert . assertNotNull ( a )
assertEqualToResource ( file , resultReport )
Assert . assertTrue ( file . contains ( "Content-Type=text/xml" ) )
assertNull ( result )
assertOut ( "/**\\n * @interface\\n */\\nIA = function() {\\n};\\n\\n\\n/**\\n * Prevent renaming of class. Needed for reflection.\\n */\\ngoog.exportSymbol('IA', IA);\\n/**
assertThat ( result , equalTo ( 8 ) )
Assert . assertTrue ( isSuccess )
assertMockEndpointsSatisfied ( )
assertThat ( this . resolver . checkForHeroesCollection ( heroesCollectionNode ) , is ( true ) )
Assert . fail ( "Should have thrown FailingHttpStatusCodeException" )
Assert . assertTrue ( DateTimeUtils . isTime ( userDateTime ) )
assertTrue ( proxy . isStopped ( ) , "Listener didn't exit" )
assertEquals ( 0 , elements . size ( ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . PEER_REVIEW_READ_LIMITED )
Assert . assertEquals ( "aMO2w7bDtj8=" , event . getMessage ( ) )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 2 ) )
assertEquals ( "Got wrong answer for supports" , false , actual )
assertObjectEquals ( "[{}]" , p . run ( bs , in , sa ) )
assertEquals ( ReadConcern . DEFAULT , parsedReadConcern )
Assert . assertNotNull ( blogEntry )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , expectedQuery ) )
assertTrue ( ret )
assertEquals ( ComponentElementGetValue . FIELD_VALUES [ 1 ] , labelChangeValue . getText ( ) )
assertOut ( "/**\\n * @private\\n * @const\\n * @type {number}\\n */\\nRoyaleTest_A.foo = 420" )
context . assertTrue ( storage . getMockData ( ) . containsKey ( resourceURI ) )
Assert . assertTrue ( item . matches ( divNode ) )
assertArrayEquals ( encodeASCII ( "18 chars" ) , channel . getBytes ( ) )
Assert . assertNull ( type )
assertEquals ( Client . client ( "abcde" ) , Tinify . client ( ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( SSH_BASE ) ) )
Assert . assertTrue ( p . toFile ( ) . mkdirs ( ) )
assertEquals ( 1 , correlatedExecutions . size ( ) )
Assert . assertEquals ( expected , actual )
assertThat ( result , is ( false ) )
assertEquals ( "bc\\n" , found )
assertEquals ( liveSearchDropDown . isSearchEnabled ( ) , false )
assertThat ( source . getName ( ) , is ( nullValue ( ) ) )
assertThat ( converter , is ( instanceOf ( MyConverter . class ) ) )
Assert . assertTrue ( recs2 . size ( ) == 1 )
assertEquals ( page , victim . get ( 1 ) )
assertEquals ( "{\\"inscricaoEstadual\\":\\"4440529211\\"}" , writer . toString ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . APPLICATION_XML ) . get ( ) . getStatus ( ) )
assertTrue ( "Didn't get a 200!" , page1 . getWebResponse ( ) . getStatusCode ( ) == 200 )
assertEquals ( "3�� ��" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertNotNull ( reporter )
assertThatIsInstantiated ( classLoader , "path/to/one.jar" , String . class . getName ( ) , "path/to/one.jar" )
assertTrue ( r . isMatch ( request ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff54_" ) )
assertNumEquals ( 0d , mdd . calculate ( series , new BaseTradingRecord ( ) ) )
assertEquals ( expResult , result )
assertEquals ( "Aeneas^Ruediger" , b . getString ( Tag . PatientName ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertNull ( target . getEthType ( ) )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 3f ) )
Assert . assertEquals ( FastMath . PI , x , accuracy )
Assert . assertEquals ( "Failure expected the name to be the same" , "ChatroomUpdateDTO" , MHRDTO . getDTOName ( ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
Assert . assertNull ( identifierType )
Assert . assertArrayEquals ( evaluation . getResiduals ( ) . toArray ( ) , new double [ ] { 2 , - 3 } , Precision . EPSILON )
Assert . assertEquals ( "Components missing" , MicroPipelineValidationResult . MISSING_COMPONENTS , new MicroPipelineValidator ( ) . validate ( mockCfg ) )
assertThat ( value , is ( "!freestyle" ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( literals . get ( 0 ) . isIntLiteral ( ) )
assertEquals ( "Subject - Log message for Test" , msg . toString ( ) )
Assert . assertEquals ( 1 , violations . size ( ) )
assertTaints ( "Test2" , "hello" )
assertEquals ( 10 * Constants . HOUR , mConfiguration . getMs ( PropertyKey . PROXY_STREAM_CACHE_TIMEOUT_MS ) )
Assert . assertEquals ( expectedPrices , orderedPrices )
Assert . assertEquals ( 2 , sheets . getData ( ) . size ( ) )
Assert . assertTrue ( validator . isValid ( array , context ) )
assertEquals ( "Expected 100 results!" , 100 , n )
assertEquals ( 0 , atlasModuleInfoRegistry . size ( ) )
Assert . assertEquals ( "id1 != id2" , ID_1 , ID_2 )
assertTrue ( enabled )
assertThat ( result , is ( equalTo ( expected ) ) )
assertEquals ( HOLERARCHICAL_METADATA_SERVICE_URI , conf . getMetadataServiceUri ( ) )
assertEquals ( "Person(age < 42 && age < 43 && age < 44)" , builder . getResult ( ) )
assertEquals ( 0 , list . size ( ) )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) . intValue ( ) )
assertEquals ( result , 1 )
assertEquals ( taskVarValue , returnedVariables . get ( taskVarName ) )
assertEquals ( s , v . asString ( ) )
assertPattern ( info , "/api/list-endpoint-api-controller/getList" )
assertEquals ( awsId1 , awsId2 )
assertTrue ( target . checkChannel ( ) )
assertTrue ( new File ( nodeInstallationDir , "/node_modules/lodash" ) . exists ( ) )
assertEquals ( LocalDateTime . of ( 2012 , 6 , 23 , 0 , 0 ) , test )
Assert . assertEquals ( "Rick" , mv . getValue ( ) )
assertEquals ( 3 , cb . getCalls ( ) )
assertEquals ( "worker3" , policy . getWorker ( options ) . getHost ( ) )
assertNull ( info )
assertDoesNotStartUp ( tmpDirFile , DirType . INTERNAL_DIR )
Assert . assertTrue ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredVersion ) )
assertTrue ( TestUtils . checkSidesAddDown ( cube . get ( "p_1000" , "p_1000" , new ArrayList < Filter > ( ) , null ) ) )
assertUpdateRecord ( "*.c1.missing" , objId , obj , updateObj , PATCH , expected )
assertEquals ( "com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService -> dubbo://127.0.0.1:" + port + "/demo" , result )
assertThat ( server . getRegisteredUsers ( ) , hasItem ( "s1" ) )
assertEquals ( "myTestId" , history . getId ( ) . getIdPart ( ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( 1 , result . size ( ) )
assertEqualsWithoutWhiteSpaces ( "(model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 1 ) . exclude ( 12 ) . create ( ) ) )
Assert . assertEquals ( 1 , list . size ( ) )
assertEquals ( JsonValue . nullId ( ) , actual )
assertEquals ( expected , result )
assertEquals ( HAServiceState . ACTIVE , svc1 . state )
assertEquals ( ans [ i ] , val )
assertEquals ( "@com.mysema.codegen.AnnotationEncoderTest$MyBean(type=java.lang.annotation.MyTestAnnotation)" , enc )
assertThat ( timer . elapsedTime ( ) , is ( equalTo ( millis ( 5 ) ) ) )
Assert . assertEquals ( "{\\"alice\\":{\\"bob\\":[\\"edgar\\",\\"charlie\\"]}}" , writer . toString ( ) )
assertThat ( "Cloned builder changed after creating new one" , builder . build ( ) . toString ( ) , equalTo ( clonedBuilder . build ( ) . toString ( ) ) )
assertThat ( interceptor , accepts ( method ) )
Assert . assertFalse ( "Model should not contain RDF types" , rdfTypes . isEmpty ( ) )
assertNotNull ( getProxy ( ) . addAgreement ( ObjectMapperHelpers . JsonToObject ( json , Agreement . class ) ) )
assertEquals ( "Henri" , item . getFirstname ( ) )
approver . assertApproved ( "Deliberate failure - Jackdaws peck my big sphincter of quartz" )
Assert . assertEquals ( "0" , entregaIntervalo . getTipoPrazoHoraEntrega ( ) . getCodigo ( ) )
assertEquals ( contentExpected , contentReturned )
assertTrue ( String . format ( "Expected error to contain string [%s]. Actual error: %s" , expected , ex . getMessage ( ) ) , ex . getMessage ( ) . contains ( expected ) )
assertTrue ( entity5 . getVersion ( ) == 1 )
assertEquals ( "htmlWithMacros" , Functions . getPageHtml ( PROJECT , BRANCH , PAGE ) )
assertSame ( cglibProxyObject . getClass ( ) , ClassHelper . getRealClassFromClass ( cglibProxyObject . getClass ( ) ) )
assertNull ( value )
assertArrayEquals ( new Item [ ] { SECOND_ITEM , FIRST_ITEM } , actual . toArray ( new Item [ 2 ] ) )
Assert . assertNotNull ( imagePreviewDashlet )
assertArrayEquals ( int [ ] . class , array . getClass ( ) )
assertEquals ( "" , content )
assertEquals ( "runtime" , node . getEffectiveScope ( ) )
assertThat ( columnCombination . getClearedBits ( ) , IsIterableContainingInAnyOrder . containsInAnyOrder ( fixture . getExpectedClearedBits1 ( ) ) )
assertEquals ( expected , actual )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
Assert . assertEquals ( xmlEsperado , icmsst . toString ( ) )
assertEquals ( Byte . valueOf ( "3" ) . intValue ( ) , result . getValue ( ) . intValue ( ) )
Assert . assertEquals ( 1 , res . size ( ) )
assertTrue ( true )
Assert . assertTrue ( result . isEmpty ( ) )
assertEquals ( 0 , numberOfDocumentsIn ( index ) )
Assert . assertFalse ( isValid , "PollItems have names length that more than max must be invalid" )
assertEquals ( "aa" , Futures . transform ( future , s -> s + s , MoreExecutors . directExecutor ( ) ) . get ( ) )
assertEquals ( "foo_value" , o )
assertEquals ( false , result )
assertEquals ( events . size ( ) , size ( stream ) )
assertEquals ( 1 , observation . getStatusElement ( ) . getExtension ( ) . size ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 1.0 , result . getLeft ( ) , EPSILON )
Assert . assertEquals ( Role . MASTER , role )
Assert . assertEquals ( 1 , resources )
Assert . assertEquals ( 1 , myActivities . size ( ) )
assertEquals ( 1 , ksession . getObjects ( ) . size ( ) )
assertNull ( token . getRefreshToken ( ) )
assertTrue ( startsWithHttpsOrFTP )
assertEquals ( "Local changes" , ( Integer ) 10 , copy . deref ( ) )
assertResponseContains ( httpResponse , "com.qmetric.spark.metrics.MetricSetupTest$1.timer" , "com.qmetric.spark.metrics.RouteTimerWrapper.meter" )
assertEquals ( "{\\"address\\":\\"Prague\\",\\"pname\\":\\"Ondrej\\"}" , example )
assertTrue ( cache . getDnsEntries ( ) . contains ( entry ) )
getStream ( streamId ) . statusCode ( 200 ) . assertThat ( )
assertThat ( drawingMotion . isPoint ( ) , is ( true ) )
assertTrue ( features . noneMatch ( f -> f . getId ( ) . equals ( "spring/2" ) && ! f . isBlacklisted ( ) ) )
assertGroups ( ldapUserInfo , false , false , false , false )
Assert . assertEquals ( expected , actual )
assertTrue ( ! suspendables . contains ( method ) )
assertNotNull ( "New appender not created" , appender )
assertTrue ( date != null )
Assert . assertEquals ( 1 , getAddressDao ( ) . getAll ( ) . size ( ) )
assertEquals ( MESSAGE , ex . getMessage ( ) )
assertThat ( built . getName ( ) , is ( "John Smith" ) )
assertTrue ( ax . equals ( expected ) )
assertEquals ( generatedJavascript , expectedJavascript )
Assert . assertNull ( systemJavaxPersistenceOverrides )
assertTrue ( handler1 == manager . getConnection ( "admin" , "easyeasy" ) )
Assert . assertTrue ( exception )
Assert . assertTrue ( "This should overflow to negative" , unprocessedSize + hugeLength < unprocessedSize )
assertThat ( updateSuccessful , equalTo ( true ) )
assertEquals ( "-jackrabbit/log/jackrabbit.log" , r )
Assert . assertEquals ( CatalogResponseMessage . OK , response . getCode ( ) )
assertThat ( g . get ( ) , instanceOf ( Byte . class ) )
Assert . assertTrue ( contains )
assertEquals ( 3 , map . size ( ) )
assertEquals ( ( double ) 8 , result . getDoubleValue ( ) , 0.0 )
assertThat ( joined , containsInAnyOrder ( "a c" , "a d" , "b c" , "b d" ) )
arrays . assertContainsOnly ( description , actual , other )
assertThat ( new String ( buffer . toByteArray ( ) ) , is ( "{" + "\\"self\\":\\"/db/data/node/0\\"," + "\\"type\\":\\"LOVES\\"," + "\\"start\\":\\"/db/data/node/0\\"," + "\\"end
assertEquals ( N , readSome ( client , tableNames [ 0 ] ) )
assertEquals ( "table autoCreateRowSorter must be false" , false , table . getAutoCreateRowSorter ( ) )
assertEquals ( "Incorrect help message" , expected , sw . toString ( ) )
Assert . assertTrue ( etagHeaderValue . matches ( "\\".*?\\"" ) )
assertTrue ( diff < visHash . maxThreshold )
assertEquals ( MICRO ( PM ) , u )
assertThat ( javaDocComment , containsString ( "A title for this type" ) )
assertNotSame ( conn1 , conn2 )
runner . assertAllFlowFilesTransferred ( PublishKafka_2_0 . REL_FAILURE , 1 )
assertEquals ( result1 , result2 )
assertThat ( result , is ( nullValue ( ) ) )
assertTrue ( ctx . merge ( s , s ) )
assertNull ( arrangeTaskExecutor . getTaskThread ( ) )
Assert . assertTrue ( files . get ( 0 ) . contains ( "filesample.txt" ) )
assertEquals ( AuthorizationStatus . BLOCKED , response . getIdTagInfo ( ) . getStatus ( ) )
assertEquals ( expectedSummary , s . metadataValue ( ) )
assertEquals ( "should return no trace" , 0 , output . size ( ) )
assertEquals ( expectedJson , actualJson )
Assert . assertEquals ( expected , actual )
assertThat ( req . getBodyAsBytes ( ) , is ( BINARY_BODY ) )
assertEquals ( 1 , thingCollection . getAllBinaryResources ( transaction ) . size ( ) )
assertEquals ( PMD . class , r . resolve ( "PMD" ) )
assertNotNull ( response )
assertTrue ( resultFromJPQL . size ( ) > 2 )
assertOut ( "this.a.child('child').child('grandchild').removeChildAt(0)" )
assertTrue ( "Logger should not be removed" , ops . exists ( TEST_LOGGER_ADDRESS ) )
assertEquals ( "https://www.google.com/apis/ads/publisher" , config . getNamespacePrefix ( ) )
assertDecorate ( serviceProps , expected , RES_SD1 , RES_SD2 )
assertEquals ( inputString , outputString )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertArrayEquals ( coh_EXPECTED . toArray ( ) , coh_ACTUAL . toFloat ( ) . toArray ( ) , ( float ) DELTA_04 )
assertBufferMatches ( A , B , C )
assertEquals ( needle , test . binarySearch ( needle ) )
Assert . assertFalse ( "Method supported" , adapter . supportsInternal ( new MethodEndpoint ( this , unsupported ) ) )
Assert . assertEquals ( "Method: doTestGetPrinterJMakiTree \\nMessage: TreeModel is not empty" , 0 , treeModel . getChildren ( ) . size ( ) )
assertEquals ( "Wrong result" , value , interpolator . interpolate ( value ) )
surefireLauncher . executeTest ( ) . assertTestSuiteResults ( 2 , 0 , 0 , 0 )
assertEquals ( asList ( MapUtil . map ( "person.name" , "Thomas Anderson" , "person.type" , "hero" , "person.name" , "Trinity" ) ) , result )
assertError ( "boundaryEnd" , "myErrorCode" )
Assert . assertTrue ( Arrays . equals ( expected . array ( ) , buf . array ( ) ) )
assertCompareToOrder ( comparator , a , b )
assertTrue ( featuresService . isInstalled ( featuresService . getFeature ( "pax-http-undertow" ) ) )
Assert . assertEquals ( "涓�瑗�|浼�|��|浜�" , words )
assertThat ( id , greaterThan ( 0 ) )
Assert . assertEquals ( expectedDPIDs [ i ] , datapathId . longValue ( ) )
assertEquals ( "case when (cat.toes = ?1) then (2) when (cat.toes = ?2) then 3 else 4 end" , serializer . toString ( ) )
assertEquals ( "Hi {0,lower}, got {1,choice,0#none|1#one|1<{1,number}, {2,upper}!" , emf . format ( new Object [ ] { "0" , "1" , "2" } ) )
assertThat ( listener . toString ( ) , containsString ( "step1\\nstep2\\nstep3" ) )
assertThat ( future , completesTo ( "abc" ) )
assertFalse ( "key not cleared" , config . containsKey ( "key" ) )
TestUtil . assertEquals ( exp , spans )
assertThat ( output , containsString ( "DICOM study search results:" ) )
assertEquals ( 1 , iData . getDeliveryInsertionIndex ( ) )
Assert . assertEquals ( "Test-29" , list . get ( 0 ) . getTitle ( ) )
Assert . assertThat ( result . size ( ) , is ( 25 ) )
assertThat ( configuration . getECMAVersion ( ) , equalTo ( Config . LanguageMode . ECMASCRIPT7 ) )
Assert . assertEquals ( 200 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
TestCase . assertTrue ( result )
assertEquals ( 0 , ds . asList ( ) . size ( ) )
assertEquals ( "POST:testPostRequestWithEncodedParameters-params=2" , responseBody )
Assert . assertNotNull ( addressResultsDto )
Assert . assertTrue ( "Requests must be equal!" , coapRequest1 . equals ( coapRequest2 ) )
assertEquals ( 1 , ctrl . foo ( ) )
assertThat ( result , equalTo ( URL_WITH_ARCHETYPE_CATALOG ) )
AssertiveInstance . init ( )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "indexPage" ) , "Error page" ) . apply ( driver ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff" ) )
assertSame ( binding , uriTools . resolveUri ( PROFILE_URI . resolve ( "processorbinding/Hello/out/greeting" ) , wfBundle ) )
assertFalse ( fs . unlink ( "foo" ) )
assertTrue ( getTaskWorkers ( 1 , 5 , job , GridProcessState . RUNNING ) . size ( ) == 1 )
assertThat ( output . format ( "narrative" , "" , "blue" ) , Matchers . is ( "\\033[32msuccess\\033[0m" ) )
assertEquals ( "20887" , result )
assertThat ( result , contains ( URI . create ( uris . get ( 0 ) ) ) )
assertEquals ( "[]" , CollectionUtils . trim ( list , 1 ) . toString ( ) )
assertThat ( url , is ( "http://www.google.com" ) )
assertEquals ( experimentRequest . getResponseParser ( ) . parse ( "200" ) , responseParser . parse ( "200" ) )
assertArrayEquals ( expected , actual , 1E-8 )
assertTrue ( "Exception raised" , exceptionRaised )
assertTrue ( "No maximum length reached exception was thrown!" , exception )
Assert . assertEquals ( 1 , changedModel . getGroups ( ) . size ( ) )
assertThat ( processor , is ( nullValue ( ) ) )
Assert . assertEquals ( "\\n\\ninside-b-closure\\n\\ninside-c-closure\\n\\n" , html . trim ( ) . replace ( " " , "" ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertThat ( module . getPrivileges ( ) , is ( equalTo ( Collections . EMPTY_LIST ) ) )
assertEquals ( diff , obj . toString ( ) )
assertThat ( testExpiryTimeStr , is ( expectedExpiryTimeStr ) )
assertEquals ( constraintViolations . size ( ) , 1 )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertEquals ( fileSizeMax , upload . getSizeMax ( ) . longValue ( ) )
assertThat ( actual , containsString ( "[07/02/1991:02:02Z/563/02/3494:000]" ) )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "OK" , response . getTitle ( ) )
assertEquals ( DROP_TABLE_STATEMENT , statement )
assertNotNull ( SyncList . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( ret , true )
assertThat ( datastore . getCount ( ActivityRecord . class ) , is ( 1L ) )
context . assertIsSatisfied ( )
assertTrue ( Arrays . deepEquals ( new byte [ ] [ ] { BINARY_BYTE_MARSHALLER , BINARY_BYTE_MARSHALLER } , values ) )
assertEquals ( ProcessInstance . STATE_COMPLETED , ksession . getProcessInstance ( instance ) . getState ( ) )
Assert . assertEquals ( ECHO_STRING , outMessage )
assertEquals ( 1 , counter . getCount ( ) )
assertThat ( CalendarYear . from ( cy . toProlepticNumber ( ) ) , is ( cy ) )
assertEquals ( minion . getSourceCard ( ) . getCardId ( ) , "spell_plant_plating" )
assertNull ( result )
assertTrue ( aNumber == Float . MAX_VALUE )
assertEquals ( "GS*GS01*GS02*GS03" , x12 . getSegment ( 1 ) . toString ( ) )
assertThat ( cut . apply ( pageObject ) , is ( false ) )
assertEquals ( expResult , result )
Assert . assertFalse ( goodTask . isTimeToRun ( notTime ) )
assertEquals ( 4 , metadata )
deleteRunner . assertAllFlowFilesTransferred ( AbstractDynamoDBProcessor . REL_FAILURE , 1 )
assertCreatedRight ( client , "iem://test:123/Event" )
Assert . assertEquals ( proxy , deserialized )
Assert . fail ( "ClassCastException should have been thrown" )
assertSelectResultKeySizeIsZero ( selector )
assertEquals ( expectedSchema , schema )
assertNull ( "No delimiter parsing" , config . getList ( PotentialErrorDatabaseConfiguration . DEFAULT_DELIMITER ) )
assertNull ( fastest )
assertEquals ( "{ \\"field name\\" : { \\"$all\\" : [ \\"?\\" ] } }" , filterParameters . toString ( ) )
assertEquals ( "-3" , result )
assertTrue ( subject . validate ( tokenValue ) )
assertEquals ( "Expecting more pedigree" , - 1 , result )
assertEquals ( expected , arguments . profilers )
assertEquals ( 3 , c ++ )
assertEquals ( "<p id=\\"�\\">Blah
assertNull ( cause )
assertNotEquals ( "Scroll position should've not have changed" , rowLocation , newRowLocation )
assertNotNull ( IndexWriter . getFailurePolicy ( env ) )
assertEquals ( tpv1 , tpv2 )
assertEquals ( "\\"NAME\\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertEquals ( basicAuthHeader , response . getResponseBody ( ) )
assertEquals ( "Expected 4 results!" , 4 , count )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( nullValue ( ) ) )
assertEquals ( MESSAGE , result )
assertEquals ( uuid , byUUID . getUuid ( ) )
assertThat ( Arrays . asList ( buffer ) , equalTo ( buffer ) )
assertNotNull ( walletInfo )
assertEquals ( expectedQuery , actualQuery )
assertContains ( "1" , content )
assertEquals ( 500 , rc . statusCode ( ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 6 , warnings . size ( ) )
Truth . assert_ ( )
assertThat ( str , equalTo ( "select count(uid) fRom tiduid where uid=u.id) as occupy frOm `user` as u" ) )
assertEquals ( 401 , post . getStatus ( ) )
assertNull ( message )
assertEquals ( model . getClass ( ) , loaded . getClass ( ) )
assertXMLEqual ( getExpectedString ( ) , stringWriter . toString ( ) )
assertThat ( obj . getId ( ) , is ( i ) )
assertEquals ( markup , rewrite ( gadget , markup ) )
Assert . assertEquals ( 42. , analyser . getDistance ( route ) , 0.01 )
assertTrue ( true )
Assert . assertArrayEquals ( new String [ ] { "user" , "password" , "sub.hostname.com:8000" , "path1" , "path2" , "*" } , toStringArray ( tokens ) )
Assert . assertEquals ( expected , fromString )
assertTrue ( r . getLinkWith ( t1 , t2 ) . equals ( r . getLinkWith ( t1 , t2 ) ) )
assertEquals ( "Sile" , emoji . getName ( ) )
assertTrue ( "Option 'delete-vault' not found in " + Arrays . deepToString ( optionSet . specs ( ) . toArray ( ) ) , optionSet . has ( "delete-vault" ) )
assertEquals ( 2 , registrationBC . retrieveAllRegistrations ( ) . size ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( Deencapsulation . getField ( jobsParser , "startTime" ) , startTime . toString ( ) )
assertEquals ( result , a . getPlanInfo ( ) . getResult ( ) )
Assert . assertEquals ( 1 , controller . getRootNode ( ) . getConnections ( ) . size ( ) )
Assert . assertEquals ( 4 , boundedSet . size ( ) )
assertThat ( this . dataModel . getWrappedData ( ) , is ( notNullValue ( ) ) )
assertEquals ( JSON_CONTENT_RGB , stringWriter . toString ( ) )
Assert . assertEquals ( esperado , resultado )
assertThat ( actualPerMinuteValue , is ( 13 ) )
assertTrue ( ( ( String ) result . get ( "_xml" ) . get ( 0 ) ) . length ( ) > 0 )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( "a" , prefixedJCommander . getCommands ( ) . get ( 0 ) . toString ( ) )
Assert . assertEquals ( Schema . Type . STRING , subSchema . getType ( ) )
result . assertIsSatisfied ( )
assertEquals ( expected , actual )
Assert . assertArrayEquals ( new Result [ ] { Result . createValueResult ( 15 ) , Result . createValueResult ( 100 ) } , ex . call ( ) )
assertEquals ( data , TestFileUtils . readString ( file ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfCheckBox.pdf" , sourceFolder + "cmp_xfdfCheckBox.pdf" , destinationFolder , "diff_" ) )
assertEquals ( expecteds , actuals )
assertThat ( result , is ( 6 ) )
assertEquals ( DataTypeManager . DefaultDataClasses . STRING , params [ 0 ] . getParameterType ( ) )
assertThat ( remoteAddress , is ( "1.2.3.4" ) )
assertEquals ( expResult , result )
assertNull ( taskService . createTaskQuery ( ) . singleResult ( ) )
assertNotNull ( result )
Assert . assertTrue ( irodsFile . exists ( ) )
assertEquals ( 2 , out . list ( ) . length )
assertEquals ( 2 , engineRule . getFormService ( ) . getTaskFormVariables ( task . getId ( ) ) . size ( ) )
Assert . assertEquals ( - 1 , result )
assertEquals ( "str 0:str 1" , res . join ( ) )
Assert . assertTrue ( ArgumentParser . validateArguments ( argsString , AllOptionalArguments . class ) )
Assert . notNull ( grade )
assertArrayEquals ( new byte [ ] { 2 , 3 , 4 , ( byte ) 128 } , bos . toByteArray ( ) )
assertTrue ( m . getCount ( FUNCTION ) > 0 )
Assert . assertTrue ( file . getAbsolutePath ( ) . contains ( localRepo . getAbsolutePath ( ) ) )
assertEquals ( "iteration " + i , foInline . getAttribute ( "font-family" ) , expectedFont [ i ] )
assertEquals ( result , 3 * varX * varY , 0.0 )
assertTrue ( dsg . isEmpty ( ) )
assertEquals ( "\\"2005-05-02T00:00:00+02:00\\"^^xsd:dateTime" , val )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertVariable ( "a_b_c_d" , 1 )
Assert . assertEquals ( VmInstanceState . Stopped , vmvo . getState ( ) )
assertNull ( valueProvider . getValue ( row ) )
Assert . assertEquals ( 2 , test . getPoints ( ) . size ( ) )
assertEquals ( "value" , "tag123;tag456" , element . getAttribute ( "value" ) )
assertLine ( "dessicated dog droppings Itasty " , b , false )
assertEquals ( 0 , sut . computeSearchGoalBonus ( current ) )
assertNull ( log )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . MULTILINE , v , TERM_FACTORY . getConstantLiteral ( "2" , XSD . LONG ) ) , translation )
assertTrue ( match == null )
assertHandCount ( playerA , 1 )
assertThat ( this . dbManager . listDatabases ( ) . size ( ) , is ( candidates . size ( ) ) )
Assert . fail ( "Should have failed with MultiException" )
assertThat ( JobWatcher . getFailedReason ( cachedJob ) , nullValue ( ) )
assertEquals ( "(Linda, Coughlan, Ireland, Female, 22)" , people . toString ( ) )
assertTrue ( Arrays . equals ( "test" . getBytes ( "UTF-8" ) , arrayFirst ) )
assertMatch ( e , s )
assertEquals ( SymbolLookup . NOT_FOUND , ret )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" + outFileName ) )
assertThat ( map . size ( ) , is ( 2 ) )
assertEquals ( expectedJson , json )
files . assertHasDigest ( INFO , actual , digest , expected )
assertEquals ( 255 , fixture . readUnsignedShort ( ) )
assertEquals ( 100 , getInt ( System . getProperties ( ) , "demo.count" ) )
iterablesWithCaseInsensitiveComparisonStrategy . assertIsSorted ( someInfo ( ) , actual )
this . context . assertIsSatisfied ( )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>" , output . toString ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertEquals ( getCreationFactoryUri ( FAKE_SERVICE , ID_VALUE ) , creationFactory . getCreation ( ) . toString ( ) )
assertThat ( actualExceptionCode , is ( "defaultExceptionCode002" ) )
assertResultIs ( "pathElement/" )
assertPowerToughness ( playerA , "Sacrifice Korlis" , 3 , 3 )
Assert . assertEquals ( "did not get expected data length" , 2 , result . length ( ) )
assertEquals ( "012345678901234567890123456789" , response )
assertEquals ( aplicacionWS , aplicacion )
Assert . fail ( "Missing required input" )
assertEquals ( expected , actualQuery )
assertEquals ( "alice" , client . getRemoteAddress ( ) . getHostName ( ) )
assertFalse ( r . equals ( r2 ) )
assertThat ( manager . overrideVote ( "foo" ) , is ( REQUEST_TIMEOUT ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location * (nt_number 123)))" , loc . toStringTree ( parser ) )
assertThat ( milliseconds , is ( EXPECTED_VALUE ) )
context . assertIsSatisfied ( )
assertEquals ( "n" , Util . stripFileExtension ( fullName ) )
assertEquals ( "recoveredResult must be Success(84)" , recoveredResult , new Try . Success < > ( 84 ) )
Assert . assertEquals ( chromosome . getFitness ( ) , copy . getFitness ( ) , 0.0 )
assertEquals ( 0 , count ( elements ) )
assertEquals ( average . getValue ( i ) , result )
descriptor . assertValid ( )
assertEquals ( ds + bs + cs , target . readUtf8 ( ) )
assertEquals ( true , result )
assertTrue ( memoryLoaded . equals ( readStatus ) )
assertTrue ( exist )
assertEquals ( Result . OK , PropertiesTestUtils . checkAndValidate ( props , null ) . getStatus ( ) )
assertEquals ( 6 , requirements . size ( ) )
assertEquals ( 1 , c0 . get ( ) . intValue ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "freeReference.pdf" , sourceFolder + "cmp_freeReference.pdf" , destinationFolder , "diff_" ) )
assertEquals ( getScrollTop ( ) , 950 )
assertTrue ( shutdown . get ( ) )
assertFalse ( computer . needsProcessing ( context ) )
assertThat ( config . getSequencing ( ) , is ( notNullValue ( ) ) )
assertThat ( component . execute ( ) , is ( expected ) )
assertTrue ( "doi is supported" , result )
Assert . assertEquals ( "BROKERURI:TOPIC" , addressString )
assertEquals ( "<input type='hidden' name='ACCEPTURL' value='http://mydomain.com/result?hint=ok'>\\n" + "<input type='hidden' name='AMOUNT' value='1000'>\\n" + "<input type='hidden' name='CANCEL
assertEquals ( "1.543" , serializer . toString ( ) )
assertEquals ( null , result )
assertTrue ( sut . purgeCalled )
assertEquals ( n , s )
assertEquals ( 2 , rowCount )
assertExec ( "Is Java Object array" , StaticMethod . class , "toStringArr__Ljava_lang_String_2ZZ" , exp , Arrays . asList ( "One" , "Two" , "Three" , "Four" ) )
assertEquals ( value , evaluated )
assertFalse ( "Accepted value outside range of int" , accepted )
Assert . assertNotNull ( cmdBase . getQueue ( ) )
Assert . assertFalse ( ( ( BasicDecider ) instance ) . isToRunContained ( metadata . getWorkflowRun ( workflowRunAcc ) . getInputFileAccessions ( ) , filesToRun ) )
assertEquals ( "foo" , expression . getValue ( elContext ) )
assertAllGuardsExists ( )
Assert . assertEquals ( "test" , var . toString ( ) )
assertReference ( reference , "referent" , "attachment" , null )
assertThat ( description . toString ( ) , is ( "to have global errors" ) )
assertNull ( data )
assertEquals ( "foo.org" , context . getHost ( ) )
assertEquals ( input , txt )
assertTrue ( "permission was not granted to admin." , readProjectPermission . isAllowed ( auth , 1L ) )
assertFalse ( result )
Assert . fail ( "IdUsedException should have been thrown" )
Assert . assertEquals ( testString , HtmlToXMLUtil . unescapeToXML ( testString ) )
assertThat ( actual , is ( notNullValue ( ) ) )
assertEvidence ( evidence , 1 , 1 , 0 , 15 , 1 )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( expectedWkt , result )
assertTrue ( ext instanceof HasAdaptiveExt_ManualAdaptive )
assertGenerators ( result , generator . getClass ( ) )
assertThat ( response , containsString ( "" + "% This is the RIPE Database query service.\\n" + "% The objects are in RPSL format.\\n" + "%\\n" + "% The RIPE Database is subject to Terms and Conditions.\\n" + "%
assertThat ( converter . toJavaObject ( new DoubleWritable ( 1.0D ) ) , is ( ( Object ) 1.0D ) )
assertTrue ( leaseRefresher . holdLease ( leaseCopy , "bar" ) )
assertEquals ( expected , bytesUsed )
assertFalse ( sta . validateStroke ( new SolidFill ( ) ) )
assertEquals ( "maprfs://" + testUrlTransformed , namedClusterBridge . processURLsubstitution ( testUrl , null , null ) )
assertTrue ( "The recreated syntax-tree did not match the input syntax-tree." , pennOriginal . equals ( pennFromRecreatedTree ) )
assertAllCommandsUsed ( )
assertEquals ( "[message: hello0, message: hello1]" , broadcasts . toString ( ) )
assertEquals ( "value" , store . get ( "key" ) )
assertEquals ( 71 , table . getCounter ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "incorrect value" , result , aNumber . longValue ( ) )
assertThat ( description . toString ( ) , is ( "equality of all rows in sheet \\"Sheet1\\"" ) )
assertEquals ( Paths . get ( "/some/folder/file.txt" ) , result )
assertEquals ( "TagMediaFeed [data=[], meta=Meta [code=0, errorMessage=null, errorType=null], pagination=Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=
assertThat ( originalSession , not ( equalTo ( newSession ) ) )
assertTrue ( res )
Assert . assertEquals ( DFUnidadeFederativa . SC , retornoConsultaCadastroDados . getUf ( ) )
Assert . assertEquals ( 18 , psRes . length ( ) )
assertTrue ( updates . isEmpty ( ) )
assertNotNull ( consumable )
assertEquals ( "{\\"test\\":[{\\"OK\\":\\"200\\"},{\\"REDIREDT\\":[{\\"CREATED\\":\\"201\\"}]}]}" , result . toString ( ) )
assertEquals ( 10 , success [ 0 ] )
assertEquals ( "%d{ISO8601} [%t][%c] %-5p: %m%n" , layout . getConversionPattern ( ) )
Assert . assertEquals ( "-0.0.0." , result )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( ConnectionSchema . DEFAULT_MAX_WORK_QUEUE_DATA_SIZE , createSchema ( map , 0 ) . convert ( ) . getMaxWorkQueueDataSize ( ) )
assertThat ( any . contains ( SECOND_OF_MINUTE ) , is ( true ) )
assertEquals ( "bsq" , header . getInterleave ( ) )
assertEquals ( htmlCharsetUTF8 , doc . toString ( ) )
assertEquals ( 10. , stateManager . getRouteState ( route , vehicle , id , Double . class ) , 0.01 )
Assert . assertEquals ( "consumerKey" , consumer . getConsumerKey ( ) )
assertThat ( "without trigger" , triggerFor ( prj ) , nullValue ( ) )
assertShapeCoordinates ( boundaryEventBounds , 218 , 140 )
assertTrue ( found )
Assert . assertTrue ( s )
assertEquals ( "[inFLectedFOrm121, inFLectedFOrm122]" , Arrays . toString ( state . toFinalString ( null ) ) )
assertLife ( playerA , 16 )
assertThat ( toJson ( domain ) , equalTo ( "{\\"handle\\":\\"handle1\\",\\"remarks\\":[{\\"description\\":[\\"description1\\"],\\"description\\":[\\"description2\\"],\\"secureDns\\":{\\"handle\\":\\"dns-handle
assertNotEquals ( insertPerson , insertDifferentPerson )
assertEquals ( 1 * 2 * 3 * 4 , IntStream . range ( 1 , 5 ) . reduce ( lambda ) . getAsInt ( ) )
assertEquals ( 0 , attr . size ( ) )
assertEquals ( "[9223372036854775807, 9223372036854775808, 9223372036854775808, 9223372036854775808, 922337203685477580
assertThat ( result , is ( false ) )
assertTrue ( contextResolver . getConfig ( ) . isEmpty ( ) )
assertEquals ( "public static final ListProperty<TargetEntity> LIST_REL = PropertyFactory.createList(\\"list_rel\\", TargetEntity.class);" , definition )
Assert . assertEquals ( infoForward . getSequence ( ) , resultTranscript )
assertEquals ( BaseAction . INPUT , action . doDefault ( ) )
assertThat ( $ . url ( ) , endsWith ( "WithoutJSTest_2.html?bName=bValue" ) )
assertNull ( testResult )
Assert . assertEquals ( Score . SUCCESS , score )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "12-MAR-2013" )
assertEquals ( 123.5 , hdt . getHeading ( ) , 0.1 )
assertTrue ( ! nnList . isEmpty ( ) )
assertThat ( driver . findElement ( By . cssSelector ( "h2" ) ) . getText ( ) , is ( "Transaction Token Error" ) )
assertFalse ( "Header on exchange should indicate failure" , exchange . getIn ( ) . getBody ( WorkNote . class ) . hasErrors ( ) )
Assert . assertEquals ( exp , act )
assertEquals ( "startRange=[5.87,47.27,1000]" , query . toString ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( "dummy exception to test notification" , e . getMessage ( ) )
assertFalse ( printer . toString ( ) . isEmpty ( ) )
assertThat ( service . getUnrestricted ( ) , equalTo ( unrestricted ) )
Assert . assertEquals ( expResult , result )
assertEquals ( 100 , i )
assertEquals ( mockResponse , testResponse )
Assert . assertEquals ( "Incorrect value" , map ( DATE_STRING , "test" ) , value )
assertThat ( codes , containsInAnyOrder ( "43343-4" , "47239-9" ) )
Assert . assertNotNull ( cu )
assertThat ( keys . size ( ) , is ( 1 ) )
assertOut ( "goog.provide('com.example.components.TestInterface');\\n\\n/**\\n * @interface\\n */\\ncom.example.components.TestInterface = function() {\\n};" )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
Assert . assertEquals ( 40. , solution . getCost ( ) )
Assert . assertEquals ( 1 , issues . length )
assertEquals ( "hello world" , list . get ( 0 ) )
TestCase . assertTrue ( matcher . match ( "Hello, World" ) )
assertThat ( response , is ( HttpStatus . SC_BAD_REQUEST ) )
assertEquals ( new BigInteger ( 1 , input ) , Base58 . decodeToBigInteger ( "129" ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( testOutcome . get ( ) . getTitle ( ) , is ( "Should do this" ) )
assertEquals ( BorderType . THIN , rangeA . getCellStyle ( ) . getBorderBottom ( ) )
Assert . assertEquals ( newSubscription . getInvitedBy ( ) , membership . getInvitedBy ( ) )
assertEquals ( "" , sw . toString ( ) )
Assert . assertEquals ( "Link: <http://example.com/things>; rel=\\"next\\"; hreflang=\\"en-us\\"; " + "rel=\\"next\\"" , affordance . toString ( ) )
assertEquals ( this . unpacked , baos . toByteArray ( ) )
assertEquals ( 12345 , settings . getOwnColor ( ) )
Assert . assertEquals ( 6 , count . size ( ) )
Assert . assertEquals ( 0L , actualResult )
TestCase . assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Parameter was " + result + " instead of username" , "username" . equals ( result ) )
assertEquals ( HttpStatus . SC_OK , returnResponse . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatusCodes . NOT_ACCEPTABLE . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
validator . assertValid ( value )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertTrue ( result . equals ( Arrays . asList ( "a" , "b" , "c" ) ) || result . equals ( Arrays . asList ( "b" , "c" ) ) )
assertEquals ( ( short ) 8 , result . getShortValue ( ) )
Assert . assertEquals ( "clicked" , ( new Element ( "//button[@id='myButton']" ) ) . getText ( ) )
Assert . assertTrue ( JexlASTHelper . equals ( one , two ) )
assertTrue ( acl . hasPermission ( authenticationToken , Item . CREATE ) )
assertEquals ( hash , IoUtils . readHexString ( file2 ) )
assertEquals ( "<a><b><c>1</c><c>2</c><c>3</c></b></a>" , projector . asString ( emptyProjection ) )
assertEquals ( "maytest" , access . getPermission ( ) )
assertEquals ( .875d , mdd . calculate ( series , tradingRecord ) , TATestsUtils . TA_OFFSET )
assertEquals ( result , null )
assertEquals ( "{\\"d\\":{\\"__metadata\\":{\\"id\\":\\"" + getEndpoint ( ) + "Employees('3')\\"," + "\\"uri\\":\\"" + getEndpoint ( ) + "Employees('3')\\",\\"type\\":\\"Ref
assertThat ( Tracee . getBackend ( ) . copyToMap ( ) , hasEntry ( "testId" , "TestValueFromRemoteEndpoint" ) )
assertEquals ( getFormatter ( ) . toString ( ) , "Pad('Y',5,' ')" )
this . assertGet ( "policytypes/allvisualappearancedata" , "entitytypes/policytypes/allvisualappearancedata-of-commit-4656a0abe19b8720c28273461c84d2ddd09ef868" )
assertTrue ( anc . contains ( g . v ) )
assertMatchIs ( matcher , false )
assertThat ( result , is ( Optional . empty ( ) ) )
assertTrue ( page . getBody ( ) . asText ( ) . indexOf ( "This is coming from a composite component." ) != - 1 )
assertEquals ( Character . valueOf ( '"' ) , formatWithQuoteChar . getQuoteChar ( ) )
Assert . assertNull ( result )
assertions . isNotGreaterThan ( new Double ( 2d ) )
assertThat ( text ( contents ) , is ( "\\"A\\",\\"B\\"\\r\\n" ) )
assertEquals ( filterClause , " AND \\"fieldName\\" IN [\\"fieldValue1\\", \\"fieldValue2\\", \\"fieldValue3\\"]" )
assertEquals ( jsonObject , BsonCodec . bsonObjectToJsonObject ( bsonObject ) )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( "SELECT year, SUM(profit)\\nFROM sales GROUP BY year WITH ROLLUP;" , text )
assertFalse ( cli . isConnected ( ) )
assertNotNull ( i )
Assert . assertEquals ( subject , service . getAuthenticationFromToken ( privateKeyJWT . getClientAssertion ( ) . serialize ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
Assert . assertEquals ( rLB . getStatus ( ) , mLB . getStatus ( ) )
assertEquals ( new FilterCoefficients ( pythonB , pythonA ) , coeffs , 1e-2 )
assertThat ( conn . getAutoCommit ( ) , is ( false ) )
assertEquals ( "(int a 3)\\n" , found )
assertEquals ( expected , x )
assertEqualsWithoutWhiteSpaces ( "difference() {translate([10,20,30]) difference() {(model1) (model2)} (model3)}" , difference )
Assert . assertThat ( f . getDefaultisHalf ( ) , Matchers . is ( false ) )
assertEquals ( Collections . singleton ( michael ) , group . getPersons ( ) )
Assert . assertEquals ( 2 , size )
assertEquals ( 0.0 , c . getFitness ( ) , 0.001 )
assertEquals ( "Hello from google" , response )
assertEquals ( 0 , bytes . readRemaining ( ) )
Assert . assertEquals ( "${missing}" , readProperties ( basedir ) . get ( "custom" ) )
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001_0001 {int m0;};\\n" + "    struct f_0001_0000 {int m0;};\\n" + "    struct f_
assertFalse ( file . containsGroup ( "non-existing" ) )
Assert . assertEquals ( 1 , dependents . size ( ) )
assertTrue ( Arrays . equals ( s , singleEntry ) )
assertThat ( pgpSignedMessage . verify ( getPublicKey_5763950D ( ) ) , is ( true ) )
assertEquals ( "read_string of size 0" , "0000" , stream . read_string ( ) )
assertEquals ( "Processed: " + message , out )
assertThat ( result , is ( nullValue ( ) ) )
assertThat ( serverHelper . establishedServerSession . getCipherSuite ( ) , is ( CipherSuite . TLS_ECDHE_ECDSA_WITH_AES_128_CCM ) )
assertEquals ( "[{\\"name\\":\\"table 1\\",\\"pkPolicy\\":\\"user_generated_value\\",\\"fields\\":[{\\"name\\":\\"id\\",\\"type\\":\\"string\\",\\"isPrimaryKey\\":true},{\\"name\\":\\"
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
Assert . assertEquals ( "Charset " + entry . getKey ( ) + " impl broken" , expectedString , sb . toString ( ) )
assertEquals ( expectedMessage , actualMessage )
assertTrue ( pointSymbolizer . getGraphic ( ) != null )
assertArrayEquals ( new int [ ] { 0 } , ArraysUtil . quickSortP ( target ) )
assertTrue ( isValid )
assertNotNull ( result )
paths . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertThat ( total , is ( 12 ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertThat ( connection . getConnectTimeout ( ) , is ( 456 ) )
assertThat ( object , is ( decorated ) )
assertNotNull ( c )
Assert . assertNull ( cookie . getExpiryDate ( ) )
assertEquals ( expected , query . n1ql ( ) )
assertEquals ( "String" , decl . getTypeImage ( ) )
connection . assertBufferEndsWith ( "command was not found" + Config . getLineSeparator ( ) )
assertTrue ( validator . isValid ( ) )
assertTrue ( capacity . allowsWorking ( ) )
Assert . assertEquals ( d2 , d , 0 )
assertEquals ( expectedValue , expression . evaluate ( record ) )
assertEquals ( lastValue , "EndNode5" )
assertTrue ( connection . createChannel ( 2 ) . isClosed ( ) )
assertThat ( crateTemplate . findBySimpleId ( entity . id ) , is ( entity ) )
assertThat ( frankResponse , is ( equalTo ( endpointResponseBody ) ) )
assertEquals ( Collections . emptyMap ( ) , gaz . getAdditionalData ( HELLO ) )
assertEquals ( "" , x )
assertEquals ( TranspositionTableStatus . sufficientSeedMoveList , eval . status )
assertEquals ( money . getAmount ( ) , 10 )
assertTrue ( eventTriggered [ 0 ] )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertGallery ( gallery )
assertEquals ( ImportConfirmAction . SUCCESS , action . execute ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , expectedQuery ) )
assertThat ( caveat , is ( equalTo ( "2;Gid=3,4;username=paul" ) ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertThat ( matchingIndexes , is ( 1L ) )
assertThat ( target . parse ( ) , is ( false ) )
assertThatSql ( query , is ( "SELECT nodes.col1, nodes.col2 FROM table1 AS nodes INTERSECT ALL SELECT edges.col3, edges.col4 FROM table2 AS edges" ) )
Assert . assertEquals ( value , 1.5 )
Assert . assertEquals ( 3 , sw3 . size ( ) )
Assert . assertEquals ( new Long ( Long . MIN_VALUE ) , _c . convert ( "-2147483648" ) )
assertEquals ( expected , actual )
assertThat ( fetchedUuid , is ( equalTo ( uuid ) ) )
assertNotNull ( handler . getSchemaLocation ( "http://cxf.apache.org/transports/simple" ) )
assertOut ( "do\\n  a++;\\nwhile (a > b);" )
assertFalse ( valid )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
tester . assertComponent ( "userService" , userServiceLink , LinkLabel . class )
assertOut ( "var /** @type {Array.<string>} */ a = org.apache.royale.utils.Language.synthVector('String')" )
assertEquals ( fileCtr , 2 )
assertEquals ( expected , sendAndCaptureBatch ( batch ) . getPoints ( ) . get ( 0 ) )
Assert . assertEquals ( "SELECT CEILING(1.23);" , text )
assertEquals ( expected , actual )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( component ) instanceof WAjaxControlRenderer )
assertEquals ( "Message: Tim" , ResponseBodyInterpolator . interpolate ( "Message: [Tim]" , req ) )
Assert . assertEquals ( protocolo , consultaRetorno . getProtocolo ( ) )
assertTrue ( project . equals ( new Project ( "bla" ) ) )
assertTrue ( result . length ( ) > 0 )
assertEquals ( "k1=v1|k2=v2" , repr )
assertEquals ( "Generated inclusion term should match 'term'" , inclusionTerms . get ( 0 ) , "term" )
assertNotNull ( node )
Assert . assertTrue ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( "ABCDE" , KeyPairUtil . hexEncode ( data ) )
assertRoundtrip ( document )
assertThat ( subStr . contains ( testString , testSubString ) , is ( true ) )
assertFalse ( equal )
assertTrue ( subject . isExportForcedSubtitlesOnly ( ) . get ( ) )
assertEquals ( 2 , kieSession . fireAllRules ( ) )
assertThat ( "cron is not null" , cron != null )
assertThat ( result , hasSize ( 0 ) )
arrays . assertStartsWith ( description , actual , null )
scope . assertMetrics ( TestHelper . constructDatum ( "summaryDataName" , StandardUnit . COUNT , 10.0 , 2.0 , 5.0 , 4.0 , 3.0 , MILLISECONDS ) )
assertEquals ( NoProcessorsWroManagerFactory . class , actual . getClass ( ) )
assertThat ( Util . inputStreamToString ( new ByteArrayInputStream ( bytes ) ) , is ( data ) )
assertEquals ( 204 , response . getStatus ( ) )
assertTrue ( isEqual )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertEquals ( 3.14 , result , 0.000001 )
assertThat ( b . getValue ( ) , equalTo ( "Value" ) )
Assert . assertEquals ( 0 , analyser . getTimeWindowViolationAtActivity ( route . getStart ( ) , route ) , 0.01 )
assertNotEquals ( start , cache . drainStatus )
assertPorts ( "specific-ports" , 1 + offset , 5 + offset , 6 + offset )
Assert . assertFalse ( ret . isEmpty ( ) )
Assert . assertFalse ( "Authenticated" , authenticated )
assertEquals ( message , token , receivedMessage . getToken ( ) . toString ( Charset . forName ( "UTF-8" ) ) )
assertEquals ( Event . class , eventClass )
assertEquals ( 4 , count )
assertEquals ( 2 , errors . size ( ) )
assertSame ( expected , ConfigUtils . merge ( config , map ) )
assertDirectories ( fsRootPath , new File ( fsRootPath , "remoting" ) , new File ( fsRootPath , "remoting/logs" ) , new File ( fsRootPath , "remoting/jarCache" ) )
assertEqualHQL ( "allen OR AGE" , sb . toString ( ) )
assertEquals ( 1 , entriesBeforeRemove . size ( ) )
assertNotNull ( result )
Assert . assertTrue ( Arrays . equals ( entry . getBytes ( ) , fmt . toBytes ( e ) ) )
assertEquals ( displayer . isRefreshOn ( ) , false )
assertEquals ( "Translation failed" , ProtocolException . class , pelopsException . getClass ( ) )
assertEquals ( 500 , page . getWebResponse ( ) . getStatusCode ( ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertEquals ( secretKey . getAlgorithm ( ) , secretKeySpec . getAlgorithm ( ) )
assertEquals ( "dois decilh玫es" , actual )
assertIsOnlyOneElementWithDetails ( elements , "div" , "d1" , "div" )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( commandFuture . succeeded ( ) , is ( true ) )
assertTrue ( internalResultSet . getDouble ( 1 ) < 0 )
context . assertEquals ( ERROR , replyBody . getString ( STATUS ) )
Assert . assertEquals ( "distcp name node credentials should be set" , "hdfs://namenode1,hdfs://namenode2,hdfs://namenode3" , actionConf . get ( MRJobConfig . JOB_NAMENODES ) )
assertEquals ( false , service . processMessage ( null , message . getBytes ( ) ) )
assertEquals ( MyClass . class , copy . getClass ( ) )
assertNonNullTaint ( taintedInt )
assertTrue ( booster . size ( ) > 0 )
assertEquals ( "hostname" , getLoggingContextHostnameProperty ( ) )
assertEquals ( "Hello Camel Rocks" , response )
assertFalse ( fixture . hasSubscriptionId ( ) )
assertFalse ( matcher . match ( msg , rule ) )
assertEquals ( expecting , found )
assertEquals ( "geo point mapper serialization is wrong" , expected , actual )
assertArrayEquals ( in , out )
assertTrue ( v instanceof PactInteger )
Assert . assertEquals ( 6 , doc . get ( new Path ( "arr" ) ) . size ( ) )
assertNotNull ( object )
assertThat ( filled , is ( "my/path/to/file" ) )
Assert . assertEquals ( word , d_dict . sequence ( i ) )
assertResult ( 0 )
assertThat ( markdown , containsString ( tableEntry ( "`myList`" , "array of Strings" , "" ) ) )
assertThat ( cut . apply ( pageObject ) , is ( false ) )
assertEquals ( Status . PASSED , result . getStatus ( ) )
assertThat ( "null should not match" , result , equalTo ( true ) )
Assert . assertTrue ( checkForSymbolicLink ( target ) )
Assert . assertEquals ( CheckResult . TIMEOUT , checkResult )
assertEquals ( "limit=10" , query . toQueryString ( ) )
Assert . assertEquals ( expectedPeriod , period )
Assert . assertTrue ( relExp <= expirationSec )
assertTrue ( GenericTypeReflector . equals ( expected , inferred ) )
assertNotNull ( "No classloader returned" , cl )
assertEquals ( "[INFLECTEDFORM121, INFLECTEDFORM122]" , Arrays . toString ( state . toFinalString ( null ) ) )
assertThat ( calvalusProcessor . getName ( ) , equalTo ( "Idepix.Water" ) )
assertFalse ( hasPermission )
Assert . assertNotNull ( result )
context . assertNotNull ( ip )
assertFalse ( loader . load ( "scrypt" , true ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertNotNull ( down . getException ( ) )
assertEquals ( "Deltas do not match" , deltaBefore , deltaAfter )
Assert . assertFalse ( dataVersion . equals ( other ) )
assertAnnotationCompletions ( "@Value(\\"#{#{data.prop2<*>}\\")" , "@Value(\\"#{else.prop3<*>}\\")" , "@Value(\\"#{spring.prop1<*>}\\")" )
assertThat ( testClass . getValue ( ) , equalTo ( 123 ) )
assertEquals ( expResult , result )
assertEquals ( 6 , filteredTables . size ( ) )
assertThat ( digits , matchesRegularExpression ( "[0-9]+" ) )
assertNull ( result )
assertEquals ( "tcp" , acceptor . getTransportName ( ) )
assertEquals ( "1\\n2\\n" , drl )
assertThat ( arguments . getResources ( ) , contains ( FIRST_RESOURCE_URI ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
Assert . assertEquals ( 3 , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) , 0 )
Assert . assertNull ( userId )
Assert . assertEquals ( "Pull Request: " , Iterables . get ( branches , 0 ) )
assertThat ( errors , hasFieldErrors ( "givenName" ) )
assertEquals ( translation , result )
assertTrue ( StoreParams . sameValues ( p , pLoc ) )
assertEquals ( Arrays . asList ( "ok" ) , list )
assertTrue ( response . getGeneratedKeys ( ) . size ( ) == 5 )
assertEquals ( 5 , saga . getState ( ) )
assertFalse ( server . isAlive ( ) )
assertNotNull ( cf )
arrays . assertStartsWith ( description , actual , sequence )
assertThat ( "pattern=" + pattern + " matches string=" + string , pattern . matches ( string ) , is ( true ) )
assertEquals ( "A" , getSpreadsheet ( ) . getCell ( "A1" ) . getText ( ) )
assertions . isNotEqualTo ( other )
assertEquals ( combinationsExpected , result )
Assert . assertNotNull ( testBean )
assertNotNull ( fileUploadTask . blobURI )
Assert . assertTrue ( Math . abs ( now . getTime ( ) - n . getTime ( ) ) < 500 * 1000 )
assertEquals ( text , male . getText ( ) )
Assert . assertNotNull ( list )
assertTest1 ( )
TestUtils . assertEquals ( anexo , anexoModificado )
Assert . assertEquals ( Integer . class , clazz )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 6 , warnings . size ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertTrue ( checkpoint . isValid ( "1.1" ) )
assertThat ( "event with unknown header" , event , nullValue ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertThat ( transformed , equalTo ( unformattedTableAsString ) )
assertEquals ( expected , actual )
assertOutput ( "a" )
assertEquals ( value , returned )
assertTrue ( matcher . matches ( context ) )
assertEquals ( "slow" , object . parsedTo ( ResourceParsers . string ( ) ) . asIs ( ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 6 )
assertEquals ( expected , actual )
assertEquals ( message1 , setCommands . pop ( NAMESPACE1 , key1 ) )
Assert . assertTrue ( responses . size ( ) == 40 )
Assert . assertEquals ( AbstractAddBean . class , bean . getClass ( ) )
assertEquals ( input , output )
assertEquals ( "浣�濂�" , firstStatus . getText ( ) )
assertTrue ( drl . contains ( "this > 10 > 11 > 12 > 13" ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertTrue ( "Failed to match both compatible IPv6 addresses." , match )
assertEquals ( author3 , submissionSet . getAuthors ( ) . get ( 0 ) )
assertNotNull ( info )
assertEquals ( newLabel , withLabel . getLabel ( ) )
assertTrue ( Files . readAttributes ( path , BasicFileAttributes . class ) . isSymbolicLink ( ) )
assertEquals ( expected , result )
assertThat ( duration . toNanos ( ) , is ( 10000000L ) )
Assert . assertEquals ( "Incorrect focus" , driver . findElement ( byWComponentPath ( path ) ) . getActiveId ( ) , driver . switchTo ( true ) . activeElement ( ) . getAttribute ( "id" ) )
assertNotEquals ( b3a , b3b )
assertThat ( tags , hasSize ( 0 ) )
assertEquals ( brandsIterative , brands )
assertEquals ( DataStatus . VOID , empty . getSternGroundSpeedStatus ( ) )
assertTrue ( visitor . matching )
assertEquals ( "a        - desc" + System . lineSeparator ( ) + "b        - desc" , output . toString ( ) . trim ( ) )
assertEquals ( null , binary . extractBinary ( buff ) )
assertTrue ( hrip . compareTo ( hric ) > 0 )
assertEquals ( PHRASE_REVERSE , reversedString )
assertNotNull ( "First transcript exists and it must be returned" , transcript )
assertThat ( result , is ( "123" ) )
assertSame ( row , rowSet . getRowWait ( 1 , TimeUnit . SECONDS ) )
assertEquals ( 2 , runtimeService . createProcessInstanceQuery ( ) . count ( ) )
assertTrue ( url2 == url1 )
assertEquals ( "0000001207113000900020618" , this . banco . geraCodigoDeBarrasPara ( this . boleto ) . substring ( 19 , 44 ) )
runner . assertValid ( service )
assertEquals ( "March 2014" , formatted )
assertEquals ( 0 , cliFlags . run ( cmd , null ) )
assertNotNull ( containerDetail )
assertEquals ( factor - index - 1 , sum )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'object',properties:{f1:{type:'string'}}}}}" , s . getSchema ( BeanList2d . class ) )
assertSame ( fieldVar , result )
assertEquals ( true , result )
assertEquals ( "6 谐芯写懈薪� �芯屑�" , t . format ( new Date ( 0 ) ) )
Assert . assertNotNull ( asiento )
Assert . assertEquals ( 2 , products . size ( ) )
assertTrue ( tasks . size ( ) == 5 && tasks . get ( 0 ) . getId ( ) == 10 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
Assert . assertTrue ( "did not read back what I wrote to the output stream" , equalArrays )
Assert . assertEquals ( "hello" , result )
assertEquals ( mockedIotHubListener , listener )
assertTrue ( defaultInstance == ValidationBatchSummaryImpl . DEFAULT )
assertTrue ( model . getGroups ( ) . isEmpty ( ) )
assertFalse ( PojomatorFactory . makePojomator ( Simple1 . class ) . doEquals ( new Simple1 ( ) , new Simple2 ( ) ) )
Assert . assertEquals ( password , expected , computed , 0.000000000000001 )
assertEquals ( path , "/Users/anyang/Desktop/jacoco/sum/jboss-5.0.1.GA\\\\rasp\\\\..\\\\bin\\\\run.bat" )
assertNotNull ( solver )
assertEquals ( 1.0 , p . evaluate ( 0 ) , 1.0e-5 )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter name=\\"name\\" value=\\"value\\"/>" , elem . toXml ( ) )
assertTrue ( response . getPersonInformationStructure ( ) . isEmpty ( ) )
Assert . assertEquals ( sum + 1 , sum )
assertEquals ( "JAX-RS response code incorrect" , 404 , result . getStatus ( ) )
Assert . assertEquals ( "Assert.assertTrue(\\"xpath=//div[@id='header-login']\\",Pattern.compile(\\".*SARL TOTO \\\\[ Mr Integration Test \\\\].*\\").matcher(driver.findElement(By.xpath(\\"//div[@
assertEquals ( 0 , numbers . size ( ) )
assertEquals ( hash , base64_md5 )
assertThat ( testOutcome . getResult ( ) , is ( PENDING ) )
assertArrayEquals ( new String [ ] { "foo" , "bar" } , actual . getPropertyNameSchema ( ) . getProperyNames ( ) )
assertEquals ( svgImage , defaultEditorAdapter . decorateIcon ( inputSvgImage ) )
assertEquals ( false , getMoveObjectDownAction ( ) . isEnabled ( ) )
assertEquals ( pc , chip8 . getPC ( ) )
assertEquals ( uri . toString ( ) , expected )
assertTrue ( repo . isBareRepository ( ) )
assertions . isNotLessThan ( expected )
assertEquals ( expectedScript , observedScript )
assertNotNull ( taskService . createTaskQuery ( ) . taskDefinitionKey ( "userTask2" ) . singleResult ( ) )
assertTrue ( share . hasPropertyToRetrieveHours ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
assertEquals ( 28 , cal . get ( Calendar . DATE ) )
assertEquals ( "name" , user . getUsername ( ) )
assertEquals ( 1000.0 , vRoute . getDepartureTime ( ) , 0.01 )
assertThat ( violations . size ( ) , is ( 1 ) )
Assert . assertEquals ( mysqlAffectRow , andorAffectRow )
Assert . assertEquals ( Boolean . TRUE , JsfUtils . isNewMessage ( existingFacesMessage , messageToCheck ) )
Assert . assertEquals ( "[SimpleCity [city=Istanbul, country=Turkey], SimpleCity [city=London, country=United Kingdom], SimpleCity [city=New York, country=United States of America]]" , resultList . toString ( )
assertEquals ( goldenResponse , responseObserver . firstValue ( ) . get ( ) )
assertEquals ( null , actual . getDisplayName ( ) )
assertEquals ( "true" , r )
context . assertIsSatisfied ( )
Assert . assertTrue ( FastMath . abs ( error ) > 0.1 )
assertEquals ( NOT_DECODED , object , new CoordTransform ( decoder ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( expected , actual )
assertEquals ( expected , key . toString ( ) )
assertInRange ( b , BigInteger . ZERO , limit )
assertEquals ( 0 , aNumber . bitLength ( ) )
assertThat ( restService . getSearchHandler ( "v1/concept" , parameters ) , is ( nullValue ( ) ) )
assertMessages ( "println" , 1 , "print_printf_locale" )
assertEquals ( key . getLength ( ) , 16 )
assertTrue ( subject . exists ( ) )
assertEquals ( "remoteApi" , connectToAPI )
Assert . assertNotNull ( savedSearchDashlet )
assertEquals ( "SELECT Account.Name FROM Account WHERE Account.Id = 'abc'" , qei . getQuery ( ) . toString ( ) . trim ( ) )
assertDatasetOk ( ds )
assertEquals ( ex . toString ( ) , ex2 . toString ( ) )
assertTrue ( "basicInterval1 should be less than basicInterval2." , bstc . compare ( basicInterval1 , basicInterval2 ) < 0 )
assertEquals ( 200 , response . getStatus ( ) )
Assert . assertEquals ( ECHO_STRING , outMessage )
assertArrayEquals ( objects , recordList . toArray ( ) )
assertEquals ( expected , result , .000001 )
assertTrue ( requestOk )
assertTrue ( v8 . getBoolean ( "caught" ) )
assertThat ( sentGetRequest ( "http://127.0.0.1:19000/api/job/events/trace" ) , is ( GsonFactory . getGson ( ) . toJson ( new JobEventRdbSearch . Result < > ( 0 , Collections . < JobEvent >
assertNull ( dw . getAndTag ( mongoQuery ) )
Assert . assertEquals ( "Value is incorrect" , map ( TIME_1_STRING , "test" ) , value )
Assert . assertEquals ( "SELECT ACOS(1.0001);" , text )
assertions . isNotEqualTo ( actual )
assertEquals ( 0 , findings . size ( ) )
assertEquals ( "Wrong result" , locator , locator2 )
assertEquals ( "Insert from a select with explicit fields" , expectedSql , testDialect . convertStatementToSQL ( insert ) )
assertSerializable ( copy )
assertEquals ( expectedJavaCommand , actualJavaCommand )
assertOneSpan ( )
assertEquals ( tail . getMissing ( 3 ) , Collections . < Long > emptySet ( ) )
assertEquals ( 0 , app . executeApplication ( args ) )
Assert . assertEquals ( "The delete by primary key should return the same object" , mockedJoinPoint . getArgs ( ) [ 1 ] , actualReturnValue )
assertEquals ( 42 , obj . getLong ( "numberDefault" ) )
assertEquals ( msg . getDeviceOperationType ( ) , DeviceOperations . DEVICE_OPERATION_TWIN_UPDATE_REPORTED_PROPERTIES_RESPONSE )
assertEquals ( "select cat_\\nfrom Cat cat_\\n  inner join cat_.mate on cat_.mate.alive" , serializer . toString ( ) )
assertNotEquals ( getSettings1 , getSettings2 )
assertEquals ( System . getProperty ( "java.class.path" ) , locator . getPath ( ) )
Assert . assertEquals ( resultExpected , result )
Assert . assertEquals ( 10 , result . size ( ) )
arrays . assertContainsExactlyInAnyOrder ( info , actual , arrayOf ( 6 , 10 , 8 ) )
assertResultSet ( res )
assertSame ( expected , actual )
assertThat ( representation . getString ( "content-type" ) , is ( "text/plain" ) )
Assert . assertEquals ( "select STUDENT.ID,STUDENT.NAME,STUDENT.SCHOOL from student order by STUDENT.NAME asc ,STUDENT.ID asc ,STUDENT.SCHOOL asc " , getSql0 ( node ) )
assertEquals ( "" , result )
assertThat ( PrettyTime . of ( Locale . US ) . print ( dur , TextWidth . WIDE , true , 6 ) , is ( "3 Jahre, 15 Tage und 4 Minuten" ) )
assertEquals ( p . parse ( "1/2*3/5*9*9/3^2/4/6*7" ) , p . parse ( "1/2*3/5*9/3^2/4/6*7*9/3^2
assertEquals ( "\\t\\r value \\\\\foo\\\\b￿벭\\n" , builder . toString ( ) )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
Assert . assertEquals ( 4 , i )
assertThat ( result , is ( jsonBoolean ( true ) ) )
assertEquals ( DummyDrawHandler . drawCircleToString ( 1 , 2 , 3 , null , null , null , null , null ) , drawHandler . getLastDrawCall ( ) )
assertFalse ( fileResource . usersOrRolesExist ( acl ) )
assertEquals ( events , storedEvents )
assertEquals ( 1 , externalTasks . size ( ) )
assertEquals ( "at 16:00:00pm, on the 15th day in March, May and December" , descriptor . describe ( cron ) )
assertEquals ( "" , settings . getBaseDirectory ( ) )
assertThat ( retrieveSize , is ( numberOfPipelines ) )
Assert . assertEquals ( "stuff and some more stuff" , result )
assertTrue ( actual . isEmpty ( ) )
assertEquals ( "Failed to generate if-else-if-else block using no rhs" , IF_ELSEIF_ELSE_BLOCK_NO_RHS_NESTED , s )
Assert . assertEquals ( true , exceptionCaught )
Assert . assertNull ( sliName )
assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( "Sensitive property reference must be supported by EL" , provider . supports ( descriptor ) )
assertTrue ( true )
mock . assertIsNotSatisfied ( )
assertEquals ( src . length , content . get ( name2 ) . length ( ) )
assertEquals ( val , "catched" )
assertThat ( bundle . getEntry ( ) , containsInAnyOrder ( "Medication.product.ingredient.item" , "Medication.product.ingredient.id" ) )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
assertNotNull ( object )
assertEquals ( FilterReply . ACCEPT , house . getFilterReply ( ) )
assertEquals ( testCase . mExpected , o )
assertOut ( "/**\\n * @export\\n * @param {number} p1\\n * @param {number} p2\\n * @param {number=} p3\\n * @param {number=} p4\\n * @return {number}\\n
assertThat ( db1 , is ( not ( sameInstance ( db2 ) ) ) )
assertTrue ( res . isEmpty ( ) )
assertions . isNotEmpty ( )
assertPresent ( session , label )
assertEquals ( "param1=" , encodedParams )
assertEquals ( Boolean . TRUE , result )
Assert . assertEquals ( "2008|骞�|搴�|��|浜�|璧���|��" , words )
assertTrue ( rule . matches ( "True" ) )
assertThat ( found , equalTo ( expected ) )
assertEquals ( "http://foo.com/Patient/123/_history/2333" , capt . getAllValues ( ) . get ( 0 ) . getURI ( ) . toString ( ) )
assertEquals ( 0 , Owner . count ( ) )
assertTrue ( shootist . responses . size ( ) == 0 )
assertThat ( ( Long ) ms . get ( "aaa" ) , is ( 1L ) )
Assert . assertTrue ( lastElementIsSame ( store , new WeightedObservedPoint ( w , x , y ) ) )
assertNotNull ( password )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Enqueue>" + "<Task priority=\\"1\\" timeout=\\"1\\">body</Task>" + "</Enqueue>" , elem . toXml ( ) )
assertEquals ( db . build ( ) , e )
Assert . assertEquals ( "The spanish fox" , shell . expandVariableSubstitutes ( "The ${hiveconf:${hiveconf:origin} fox" ) )
JSONAssert . assertEquals ( expected , result . getResponse ( ) . getContentAsString ( ) , false )
Assert . assertEquals ( expected , udf . evaluate ( args ) )
Assert . assertEquals ( gen . generateInchi ( ac ) . getInChI ( ) , "InChI=1S/Li/i1+2" )
Assert . assertTrue ( returnT . getCode ( ) == ReturnT . SUCCESS_CODE )
Assert . assertNotNull ( trainer . train ( eventStream ) )
assertEquals ( book , otherBook )
Assert . assertNotNull ( registerResponse )
Assert . assertEquals ( 3 , selector . getProductCount ( ) )
assertPathMatchForExpected ( expected )
assertNotNull ( resultMap )
Assert . fail ( "GMException should have been thrown." )
assertAccessorsCorrect ( collapsible , "headingLevel" , 0 , 1 , 2 )
assertThat ( defaultName , is ( "Zuid-Holland (region, Netherlands)" ) )
assertEditorClosed ( )
assertTrue ( Arrays . equals ( protocols , configurable . getEnabledProtocols ( ) ) )
assertEqualDoubleArrays ( pyplus , plus , epsilon )
assertEquals ( "浠������" , t . format ( date ) )
assertTrue ( bucketContent . isEmpty ( ) )
assertThat ( output , containsString ( "Created template:" ) )
assertEquals ( CodeableConcept . class , roleField . getClass ( ) )
Assert . assertEquals ( job , RandomUtils . nextItem ( jobs , RandomNumberGeneration . getRandom ( ) ) )
assertEquals ( "" , result )
assertEquals ( 3 , books . size ( ) )
assertTrue ( true )
assertMediaFolderEquals ( mediaFolder , newMediaFolder )
Assert . assertNull ( testSubject . subModel ( new ScadGenerationContextFactory ( ) . exclude ( 1 ) . create ( ) ) )
assertThat ( converter . toWritableObject ( "hello" ) , is ( ( Object ) new StringWritable ( "hello" ) ) )
assertEquals ( assignedClientId , client . getId ( ) )
assertSame ( GBP_2_34 , test )
assertEquals ( "" , parameterName )
assertEquals ( "annotation:hello" , hello )
assertTrue ( ep . getBinding ( ) instanceof SoapBinding )
assertTrue ( onCloseLatch . await ( 1 , TimeUnit . SECONDS ) )
assertNotNull ( colegio )
assertOut ( "return true" )
assertEquals ( "https://www.facebook.com/hashtag/TravelPics" , httpRequest . getUrl ( ) )
assertIsAborted ( tx )
assertResultsEqual ( results , 6L )
assertXMLEqual ( new ResourceUtil ( UNSTAR ) . getContent ( ) , sw . getBuffer ( ) . toString ( ) )
Assert . assertNull ( result )
assertEquals ( before + 1 , countRowsInTable ( "PERSON" ) )
assertEquals ( 255 , mask [ indY ] [ indX ] )
assertThat ( sut . getImage ( ) , equalTo ( "foo/bar@sha256:12345" ) )
assertEquals ( 0 , indexEntries . size ( ) )
assertThat ( lastEntry . isAlarm ( ) , is ( true ) )
assertNull ( principal )
Assert . assertEquals ( "�戒�灞�" , words )
assertThat ( testContext , id , isIn ( ids ) )
assertEquals ( WRONG_NUMBER_OF_ANNOTATIONS_PARSED , 4 , annotations . size ( ) )
assertThat ( qualifier , is ( "Joe" ) )
assertThat ( time . getTimeRelativeTo ( timeRelativeTo ) , equalTo ( dateFormat . parse ( "2013-Jan-18 4:55:12.27" ) . getTime ( ) ) )
Assert . assertEquals ( SIMPLE_RETURN_CODE . SUCCESS , check . getErrorType ( ) )
assertDateEquals ( r , t . plus ( d ) )
assertThat ( result , contains ( "Hel" , "lo " , "wor" , "ld" ) )
Assert . assertEquals ( Collections . emptySet ( ) , validator . validate ( EntityNames . STAFF , idsToValidate ) )
assertSame ( belongsToEntity , returnedEntity )
assertEquals ( "�ㄦ�锋��璇�" , model . getPropertyDesc ( ) . getDescription ( ) )
assertEquals ( "Included JARs as native dependencies" , Sets . newHashSet ( "some.jar" , "some.so" ) , nativeDependencies )
Assert . isTrue ( true )
assertOut ( "/**\\n * @export\\n */\\nB.prototype.http_$$ns_apache_org$2017$custom$namespace__b = function() {\\n  var self = this;\\n  function c(f) {\\n  };\\
Assert . assertEquals ( 12. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 1 ) , route ) , 0.01 )
assertEquals ( 401 , resGetAll . getStatus ( ) )
assertEquals ( expected , result )
assertEquals ( 1 , testParseJsonObject . getValue ( context ) )
assertTrue ( m . find ( ) )
assertEquals ( "[VALUE1, VALUE2, VALUE3, VALUE4]" , values . toString ( ) )
assertEquals ( 1 , results . length )
assertTrue ( true )
assertThat ( slider . getValue ( ) , is ( 1.2345 ) )
assertTrue ( "The button text should be the first component of the split panel." , buttonText . equals ( "First Button" ) )
Assert . assertEquals ( "[{\\"name\\":\\"name1\\",\\"age\\":1},{\\"name\\":\\"name2\\",\\"age\\":2}]" , str )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( expResult , result )
assertTrue ( "subtree-root child is visitable" , _guide . isVisitable ( child ) )
assertNotNull ( underTest . validate ( "repository1" , config ) )
assertTrue ( "Entries found: " + entries , entries . size ( ) > 1 )
assertThat ( toUnqualifiedVersionlessIds ( myAppointmentDao . search ( params ) ) , containsInAnyOrder ( patId , apptId ) )
assertEquals ( "doc" , result . get ( RETURN_RESULT ) )
assertRequest ( "POST" , "Conference/%s/Member/%s/Play/" , confId , memberId )
assertExcludedImplicitly ( node )
assertEquals ( mailboxSize , testResults . highest . get ( ) )
assertThat ( PrettyTime . of ( Locale . US ) . print ( dur , TextWidth . WIDE ) , is ( "1 centuries and week-based years" ) )
Assert . assertEquals ( "CN=anonymous" , con . getPeerPrincipal ( ) . getName ( ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertThat ( actual , is ( "1" ) )
assertFalse ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertThat ( cell . body ( ) , is ( equalTo ( "<a href='http://localhost'>linked</a>" ) ) )
assertEquals ( 2 , position )
Assert . assertTrue ( pss . toString ( ) . contains ( "<http://example>" ) )
assertEquals ( true , dt . intValue ( ) == 30 )
assertEquals ( result . getAttributes ( ) . get ( "name" ) , "newValue" )
runner . assertAllFlowFilesTransferred ( PutHBaseJSON . REL_FAILURE , 1 )
Assert . assertEquals ( dim . getNumDimensions ( ) , 100 )
Assert . assertEquals ( OBJECT , clone )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertEquals ( true , actual )
Assert . assertTrue ( patch . toString ( ) , patch . hasDifferences ( ) )
assertEquals ( testData , result )
assertFalse ( violation )
assertTrue ( message != null )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + fileName , sourceFolder + "cmp_" + fileName , destinationFolder , "diff_" ) )
assertEquals ( "Groovy Template file [template-does-not-exist] was not found in workspace" , output )
assertNotNull ( result )
assertOut ( "var /** @type {boolean} */ a = false" )
assertThat ( target . matchExactly ( flow ) , is ( true ) )
assertEquals ( 10 , pageService . findMaxApiPageOrderByApi ( API_ID ) )
assertNull ( MultiParts . getFileName ( param ) )
assertNotNull ( result )
assertEquals ( 1.0 , Capacity . divide ( cap1 , cap2 ) , 0.001 )
testRunner . assertAllFlowFilesTransferred ( PutParquet . REL_RETRY , 1 )
assertEquals ( 1 , rules )
assertThat ( response . toString ( ) , is ( "" + "inet6num:        ::0\\n" + "abuse-mailbox:  abuse@me.now\\n" ) )
assertEquals ( 0.5 , p , 0.01 )
assertTrue ( result . getErrorMessage ( ) , result . isSucceeded ( ) )
assertSame ( authenticated , helperSpy . getAuthObj ( ) )
assertEquals ( "ATS03F=0\\r\\n" , intArrayToString ( command . serialize ( ) ) )
assertPermanentCount ( playerA , "One with the Machine" , 1 )
assertEquals ( Arrays . asList ( "A" , "B" , "C" , "D" ) , results )
assertEquals ( "//pac4j.com/cas/login" , result )
assertNotNull ( result )
assertTrue ( Arrays . equals ( expected , actual ) )
assertEquals ( Map . of ( "priority" , "9" ) , actualConfig . getExecutionHints ( ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( "bar" , bar . get ( ) )
assertNotFired ( watch )
Assert . assertTrue ( "The test file " + out + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertThat ( query . encodedFilter ( ) , is ( encodedFilter ) )
assertTrue ( logger . isWarnEnabled ( ) )
Assert . assertNotNull ( chf1 )
assertArrayEquals ( expected , IOUtils . toByteArray ( new ARC4Engine ( ) . encryptBytes ( "ChuckNorris" . getBytes ( StandardCharsets . UTF_8 ) ) ) )
assertObjects ( RoleType . class , NUMBER_OF_GENERATED_EMPTY_ROLES + NUMBER_OF_GENERATED_DUMMY_ROLES + NUMBER_OF_ORDINARY_ROLES )
assertNotNull ( result )
assertNotNull ( result )
Helpers . assertJson ( json . toString ( ) , "{\\"key1\\":\\"value1\\",\\"key2\\":[],\\"key3\\":\\"value3\\"}" )
Assert . assertEquals ( verQueryVal , fileInfoResult )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
assertFalse ( user . isPresent ( ) )
assertEquals ( "XINDEX" , output )
assertEquals ( tenantsForPreloading . get ( lzPath1 ) , result )
assertDtoAndMapConstructorAreSame ( 0 )
assertSame ( t . toLocalTime ( ) , LocalTime . NOON )
assertEquals ( "https://api.test.com/myapi/customer?issue_id=1337&location=LUND%2FB&enterprise=false" , expanded . toString ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
Assert . assertEquals ( CatalogResponseMessage . OK , response . getCode ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertNull ( result )
assertNull ( "Consent record still present" , consent )
assertThat ( classes . size ( ) , is ( 1 ) )
assertEquals ( 12 , jpegBitsPerSample ( "MR2_UNC-J2KR.dcm" ) )
assertThat ( new PullRequestApproval ( Config . builder ( ) . requiredReviewers ( newArrayList ( "user1" , "user2" ) ) . requiredReviews ( 1 ) . build ( ) , utils ) . isPullRequestApproved ( pr ) , is ( false ) )
assertEquals ( "Agents Rebooted" , result )
assertThat ( domain . endsWithDomain ( ciString ( "n.s.0.200.193.193.in-addr.arpa" ) ) , is ( false ) )
assertThat ( converter , instanceOf ( EnumConverter . class ) )
assertTrue ( ex . canBeDividedby3 ( "33" ) )
assertEquals ( Content . COMPANY , menuStore . getContent ( ) )
assertEquals ( "Multiple factory names should produce different names" , CALLS , names . size ( ) )
Assert . assertNotNull ( antennae )
assertEquals ( expecting , found )
assertEquals ( prettyPrintJson ( readContent ( EXPECTED_ERROR_RESPONSE_PATH ) ) , prettyPrintJson ( json ) )
assertEquals ( "Names weren't equal." , organizationResponse . object . getName ( ) , name )
Assert . assertEquals ( 1 , dashboardHistories . size ( ) )
assertNotNull ( connection )
assertFalse ( userCanBuildProject )
assertThat ( randomProxy , instanceOf ( ProxyObject . class ) )
assertEquals ( false , bm . isBitSet ( bitNumber ) )
assertTrue ( tchh . isWriteable ( null ) )
Assert . assertTrue ( "Run should have been stopped" , pcClient . stopRun ( Integer . parseInt ( PcTestBase . RUN_ID ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( assertion , test )
assertThat ( subject . shouldProcess ( message ) , is ( false ) )
assertEquals ( "(12 (abc 34))\\n" , found )
assertNotNull ( "Old component should exist." , oldComponent )
assertFalse ( filter . shouldInclude ( source , "some.property" ) )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
ctx . assertEquals ( "Database name is invalid." , conn . getMessage ( ) )
assertNull ( descriptor . getConstraintsForMethod ( "zap" ) )
assertNotNullOrEmpty ( "Questions should never be null." , questions )
assertEquals ( Response . Status . NOT_MODIFIED . getStatusCode ( ) , resource . deleteConnection ( "Name" ) . getStatus ( ) )
Assert . assertEquals ( "Error page" , onOffScreenPage . title , iface . wd . getTitle ( ) )
assertEquals ( "{\\"resourceType\\":\\"Patient\\",\\"meta\\":{\\"tag\\":[{\\"system\\":\\"scheme\\",\\"code\\":\\"term\\",\\"display\\":\\"display\\"}]},\\"identifier\\":[{\\"system\\":\\"sys
assertEquals ( 2 , nbrOfStores )
Assert . assertThat ( "response.statusCode" , response . getStatusCode ( ) , is ( 200 ) )
assertEquals ( "foo" , something )
assertFalse ( topic . getSubscribers ( ) . contains ( user ) )
assertTrue ( existentFile . exists ( ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( Types . INTEGER , cInfo . getType ( ) )
assertThat ( cut . getItems ( ) , contains ( item1 , item2 ) )
assertThat ( instance . matches ( message , matchers ) , is ( false ) )
assertThat ( other , LocalTimeMatchers . sameMinuteOfHour ( date ) )
Truth . assert_ ( )
assertTrue ( polygonSymbolizer . getFill ( ) != null )
assertThat ( output ( outputDirectory , outputPath ) , equalTo ( resource ( outputPath ) ) )
assertEquals ( 4 , size )
Assert . assertEquals ( 0L , actual )
assertEquals ( expected , actual )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Integer" ) )
assertEquals ( 98 , dataCharacter . getValue ( ) )
assertSame ( name + " - mismatched compressions" , expected , actual )
assertEquals ( "(table (binding))" , x )
assertEquals ( direct . length ( ) , proxied . length ( ) )
Assert . assertTrue ( person . getPersonVoided ( ) )
assertThat ( httpStack , notNullValue ( ) )
assertThat ( webServer . getAddress ( ) . getHostName ( ) , equalTo ( "localhost" ) )
assertFalse ( capabilityMatcher . matches ( nodeCapabilities , requestedCapabilities ) )
assertEquals ( text , reply )
assertTrue ( permissions . length > 0 )
assertEquals ( "<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEmptyLinksOk ( linkNames )
assertEquals ( "Not same int: " + v1 + " & " + v2 , v1 . getInt ( ) , v2 . getInt ( ) )
assertEquals ( node , r . get ( "node" ) )
assertEquals ( "Novy|Nova|home,mobile|home" , mustache . render ( loadJsonData ( ) ) )
assertEquals ( OutputChangeEvent . OUTPUT_EVENT . OUTPUT_ADDED , outputEvent [ 0 ] . getEvent ( ) )
ctx . assertTrue ( ex instanceof ConsumerException )
assertThat ( renderKitCaptor . getValue ( ) , is ( sameInstance ( springRenderKit ) ) )
assertCorrectness ( rowDataset , transformer )
Assert . assertNull ( testSubject . subModel ( new ScadGenerationContextFactory ( ) . exclude ( 12 ) . create ( ) ) )
assertThat ( "extension should get interested event" , subscriber . lastEvent ( ) , is ( GHEvent . ISSUES ) )
assertFalse ( "Project name was supposed to be invalid." , jiraTracker . isValidProjectName ( ) )
assertNotNull ( MessagingConfiguration . fetcher ( "VAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertSame ( element , node . getElement ( ) . get ( ) )
assertEquals ( "Expected 0 results!" , 0 , count )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destFilename , sourceFolder + "cmp_copyFields06.pdf" , destinationFolder , "diff_" ) )
assertSingleGruxAlbum ( spec )
assertNotNull ( PhoneNumber . reader ( "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertTrue ( response . getAttachments ( ) . hasNext ( ) )
Assert . assertFalse ( isElementConsented )
Assert . assertEquals ( Either . right ( Optional . of ( new BigDecimal ( 1.2 ) ) ) , res )
assertEquals ( "src/test/resources/existing-readable.file" , result . getName ( ) )
assertEquals ( "1" , id . toString ( ) )
Assert . fail ( )
assertThat ( fetchCount ( ) , is ( 1L ) )
assertThat ( response . getPayloadAsString ( ) , is ( "TEST PAYLOAD" ) )
assertThat ( rendered , is ( "a..\\r\\nb\\r\\n..c" ) )
assertTrue ( "There should be an error message" , errMsgs . size ( ) > 0 )
assertEquals ( route , routingTable . find ( new CellAddressCore ( "cell-A" ) , Optional . empty ( ) , true ) )
assertThat ( plugin . arg , is ( equalTo ( "hello" ) ) )
assertFalse ( "Reloading" , detector . isReloadingRequired ( ) )
Assert . assertFalse ( InstanceValidationUtil . hasValidConfig ( mock . dataAccessor , TEST_CLUSTER , TEST_INSTANCE ) )
assertTrue ( diskInfo . isPresent ( ) )
assertEquals ( Status . OK , result )
inputStreams . assertHasContent ( someInfo ( ) , actual , expected )
assertEquals ( "Testing rho: " , expectedRhoTwoStep , rho , 1E-3 )
assertThat ( pickupTruck1 , not ( sameInstance ( pickupTruck2 ) ) )
assertThat ( read ( stream ) , hasSize ( 0 ) )
assertThat ( actual , is ( expected ) )
assertEquals ( "Wrong value" , CarType . AUDI , carType )
assertEquals ( "test/repo" , metadatas . get ( "/test/repo.metadata" ) . getName ( ) )
assertFalse ( isModifiable )
assertNull ( schemaManager . getPropertyDefinition ( ElementType . VERTEX , "property" ) )
assertEquals ( "Output order: " + outputOrder , exp , out )
assertEquals ( expectedAddress , gotAddress )
assertTrue ( Bytes . compareTo ( bytes1 , bytes2 ) < 0 )
assertEquals ( SampleLocations . UNKNOWN , cargo . getDelivery ( ) . getLastKnownLocation ( ) )
assertThat ( actual . get ( "latest" ) , containsString ( "1.0.0" ) )
assertTrue ( 5.0f == d . asFloat4 ( ) )
assertEquals ( "" , result )
assertEquals ( "SQL92" , rootNode . getProperty ( StandardDdlLexicon . PARSER_ID ) )
assertFalse ( validator . validate ( certificateMapping , POST ) . passedValidation ( ) )
assertEquals ( "Wrong key" , "@child" , engine . nodeKey ( null , "child" , handler ) )
assertResultSet ( res )
assertEquals ( template , test . build ( ) )
assertThat ( persons , equalTo ( expectedPersons ) )
Assert . assertTrue ( set . equals ( otherSet ) )
assertTrue ( job . waitForCompletion ( true ) )
assertThat ( examplesTable . asString ( ) , equalTo ( TABLE_AS_STRING ) )
assertEquals ( klass , ObjectNode . class )
assertFalse ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
Assert . assertEquals ( 1 , fact . getValidators ( fooset ) . size ( ) )
Assert . assertEquals ( 2 , maxSize )
Assert . assertNotNull ( jdbcStore2 )
assertThat ( result . replaceAll ( "\\\\s+" , "" ) , equalTo ( expectedOutput . replaceAll ( "\\\\s+" , "" ) ) )
assertEquals ( "Parsing of double option does not match expected result." , PROPERTY_DOUBLE_EXPECTED , parseResult , 0.0000001 )
ReaderAssert . assertThat ( Conll2006Reader . class , Conll2006Reader . PARAM_SOURCE_LOCATION , "src/test/resources/conll/2006/fi-ref.conll" )
assertEquals ( 3 , permMissingElem . solution ( array ) )
assertEquals ( 5 , params . size ( ) )
assertThat ( auth , is ( auth . clone ( ) ) )
assertThat ( whoisObject . getAttributes ( ) , hasItems ( new Attribute ( "auth" , "MD5-PW $1$d9fKeTr2$Si7YudNf4rUGmR71n/cqk/" , "test" ,
assertFalse ( processor . process ( entry ) )
assertFalse ( activity . isFinishing ( ) )
assertEquals ( nativeToAscii ( UNENCODED ) , nvDecoded )
assertEquals ( documentId , options . documentId ( ) )
assertEquals ( expectedFeatures , tokens . get ( 0 ) . getAllFeatures ( ) )
Assert . assertEquals ( hash , 19301 )
assertTrue ( "should receive message" , handler . isCalledOnce ( ) )
assertThat ( testCallback , is ( expectedCallback ) )
assertEquals ( "goo x y" , result )
Assert . assertEquals ( "{\\"PropertyInt16\\":111,\\"PropertyString\\":\\"TEST A\\"}" , resultString )
assertEquals ( 14 , test . sum ( 5 , 9 ) )
Assert . fail ( "Cannot create metablocks with the same name." )
assertEquals ( TRIM_VALUE , values . get ( 0 ) )
Assert . assertEquals ( count + 1 , conectores . size ( ) )
assertTrue ( kbuilder . hasErrors ( ) )
assertEquals ( query1 , query2 )
strings . assertStartsWith ( mock ( Description . class ) , null , "Yoda" )
Assert . assertArrayEquals ( new int [ ] { 2 , 5 } , result )
assertEquals ( "Wrong number of classes." , 2 , Person . countClasses ( ) )
assertEquals ( columnInfoActualValue . toString ( ) , columnInfo . toString ( ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT * FROM A EXCEPT ALL SELECT * FROM B" ) )
assertEquals ( "Base value is wrong" , 2013L , parsed )
Assert . fail ( "Invalid entity type was accepted by the system" )
assertStatus ( 2 , expectedNumRows , expectedNumBytes , expectedReadBytes )
assertTrue ( rule . isVersionValid ( null ) )
assertEquals ( entry , result )
assertThat ( rs , equalTo ( expected ) )
assertOkAndNotNullResult ( resp )
assertTrue ( b )
assertRefinedObjectClass ( objectClass , RESOURCE_DUMMY_PRIVILEGE_OBJECTCLASS_QNAME , ShadowKindType . ENTITLEMENT , "privilege" )
assertEquals ( ReportFormat . PDF , result . format )
assertFalse ( androidImpl . isSDCardEnoughSpace ( device , 5120L ) )
validator . assertTestSuiteResults ( 4 , 0 , 0 , 0 )
assertThat ( CountingJob . ourCount , lessThan ( 3 ) )
assertHelpLines ( "Option        Description" , "------        -----------" , "-a <String>              " , EMPTY )
assertResultIs ( 1L )
assertTrue ( "Path for removed property is wrong: actual=" + listener . getEvents ( ) . get ( 0 ) . getPath ( ) + ", expected=" + propPath , containsPath ( listener , propPath ) )
assertEquals ( "void blah(int count, MyThing t) throws FishException, FruitException" , signature )
assertThat ( clause . toString ( ) , is ( "(person)<-[:members]-(group)" ) )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
Assert . assertTrue ( result . next ( ) )
Assert . assertEquals ( 1 , count )
assertThat ( found , hasSize ( 0 ) )
assertEquals ( factIdentifier . getPackageWithoutClassName ( ) , "" )
assertThat ( path . getString ( NO_OP_ENCODER ) , is ( "/{http://www.modeshape.org/1.0}a/{}b/{http://www.modeshape.org/1.0}c/../{}d/./{http://www.modes
assertEquals ( count + 2 , session . from ( restriction ) . list ( restriction ) . size ( ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( 1 , 2 , 3 , 4 ) ) )
assertArrayEquals ( data , bb )
assertTrue ( ref . get ( ) . isInterrupted ( ) )
assertTrue ( t instanceof MyRuntimeException )
assertOut ( "var /** @type {Object} */ a = Object(\\"1\\")" )
assertTrue ( serializedDevice . contains ( symmetricKeySecuredDeviceAuthenticationJson ) )
assertEquals ( "Single menu item" , caption , widget . getText ( ) )
Assert . assertEquals ( expected , actual )
assertThat ( NF . nullNode ( ) , is ( sut ) )
assertEquals ( BUNDLE_URI + "profile/tavernaWorkbench/" + "configurations/Hello/" , uri . toASCIIString ( ) )
assertEquals ( 1 , resolvedAlerts . size ( ) )
Assert . assertEquals ( 1 , lambda . testCatchingException ( ) )
assertEquals ( expected , request . getRequestBody ( ) )
assertEquals ( "Check if stuff are equal if template.createNodeAs: " , 1 , template . count ( Stuff . class ) )
assertThat ( yamlSource . toString ( ) , is ( testUrl ) )
Assert . assertEquals ( count , countStructure . get ( ) )
assertResult ( session )
assertFalse ( returnedValue )
assertTrue ( container . children . isEmpty ( ) )
assertTrue ( pa . getOptions ( ) . size ( ) == 3 )
assertEquals ( assertion , log )
assertEquals ( 209 , sum )
assertFalse ( iterator . hasNext ( ) )
assertThat ( contentString , containsString ( "Humans" ) )
Assert . assertEquals ( "nn1,nn2" , configMap . get ( "dfs.ha.namenodes.sandbox-nn-ha" ) )
assertThat ( underTest . passwordsMatch ( password , shiro1Hash ) , is ( true ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( expected , actual )
assertSame ( dataSource , factory . getDataSource ( descriptor ) )
assertEquals ( "1.23" , rp . toNumberParam ( ourCtx ) . getValue ( ) )
assertTrue ( p . getTotalElements ( ) > 0 )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( service . postProcess ( "<pre>int good=2;[-code]</pre>" ) , "<pre>int good=2;[-code]</pre>" )
assertEquals ( multiEncodedKVFilter ( columnComparison ( CompareOp . EQUAL , A_STRING , B_STRING ) , TWO_BYTE_QUALIFIERS ) , filter )
Assert . assertTrue ( retMap . size ( ) == 4 )
Assert . assertTrue ( "did not get time" , timeVal >= 0 )
assertThat ( "Color" , nodeData . getValue ( TermColor . class , "background" ) , is ( tf . createColor ( 0 , 128 , 0 ) ) )
Assert . assertArrayEquals ( cleanedOffset , address )
assertIndexedRecord ( typeDesc , indexedRecord )
assertEquals ( paragraphs , loremIpsum . getParagraphs ( 2 ) )
Assert . assertTrue ( clientBoList . size ( ) > 0 )
Assert . assertTrue ( childRenderer . getRoot ( ) instanceof Element )
assertNull ( ManualTriggerFactory . getManualTrigger ( projectA , projectB ) )
assertThat ( verifyModelVersionsSaved ( ) , is ( ImmutableMap . of ( "foo" , "1.1" , "bar" , "1.1" , "wibble" , "1.0" ) ) )
assertEquals ( "" , result )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertThat ( out . toString ( ) , equalTo ( "|one|two|\\n|11|12|\\n|21|22|\\n" ) )
assertEquals ( inputString , outputString )
assertEqualsNonTransient ( code , clone , SchemaCache . getSchema ( code ) )
assertEquals ( expResults , results )
assertTrue ( result . length ( ) == 0 )
Assert . assertEquals ( 0 , norm , 1.0e-15 )
assertEquals ( 10 , content . split ( "\\n" ) . length )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( "0" , res . toString ( ) )
assertEquals ( "The strings should be equal" , "English Sentence" , diacriticsString )
Assert . assertEquals ( 2.3D , d , 0.1D )
assertEquals ( 0 , byteBufResultCaptor . getResult ( ) . refCnt ( ) )
assertThat ( runs , contains ( asList ( 1 , 1 ) , asList ( 2 , 2 ) , asList ( 3 , 4 ) , asList ( 4 , 5 ) ) )
assertThat ( objectMapper . fromJson ( objectMapper . toJson ( map ) ) , is ( objectMapper . fromJson ( "{\\"typeName\\":\\"Processes\\",\\"fields\\":[{\\"name\\":\\"process\\",\\"type\\":\\"ConversionRateProcess[]\\",\\"properties\\":[\\"
assertEquals ( "Expected number of args" , 1 , commandLine . getLongArgs ( ) )
assertThat ( result , equalTo ( false ) )
assertEquals ( "777120" , buffer . toString ( ) )
assertEquals ( controllerName , "io.swagger.oas.sample.controllers.MyTag" )
Assert . assertEquals ( 204 , res . getStatus ( ) )
assertEquals ( timeInstant . getIntervalType ( ) , DateIntervalType . MINUTE )
Assert . assertEquals ( message , poll ( ) )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
assertThat ( person , hasToString ( "Person" ) )
assertTrue ( jarRuntimeInfo . isClassLoaderReusable ( ) )
assertEquals ( "B" , cell . text ( ) . get ( ) )
assertEquals ( "<script>\\n" + "  <!--\\n" + "    document.write('</scr' + 'ipt>');\\n" + "  // -->\\n" + "</script>" , node . body ( ) . html ( ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
Assert . assertFalse ( matcher . match ( rule , testNode1 , parent ) )
assertEquals ( 0 , appNodes . size ( ) )
FixtureAsserts . assertStringMatchesJsonFixture ( "DeleteUser by admin response render to HAL+JSON" , actualResponse , "/fixtures/hal/user/expected-admin-delete-user.json" )
assertFalse ( "BloomFilter#not should have inverted all bits" , bf . bits . intersects ( origBitSet ) )
assertEquals ( 1 , betweenTwoSets . solution ( A , B ) )
assertTrue ( start . isSuccessful ( ) )
assertIAEWhenAccessingResult ( service . prepare ( query ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( stringLine , sut )
assertVersions ( ctx , "9" )
assertEquals ( 69 , result )
assertEquals ( "Conversion did not match" , value , to )
assertThat ( underTest . lastBlobUpdated ( component , emptyList ( ) ) , is ( expected ) )
Assert . assertNotNull ( outStream )
shorts . assertGreaterThan ( description , null , ( short ) 6 )
assertEquals ( "" , result )
assertTrue ( o . containsAxiom ( i ) )
assertEquals ( 1 , lst . size ( ) )
Assert . assertEquals ( rtpPacket . getTimestamp ( ) , 0xFFFFFFFF , "Timestamp should be 0xFFFFFFFF." )
assertThat ( iconCaptor . getValue ( ) , is ( ":ghost:" ) )
assertArrayEquals ( new double [ ] { 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0
assertThat ( limbo . getPlayer ( ) , equalTo ( player ) )
assertEquals ( "1" , a . getOne ( ) )
assertThat ( uris , is ( asList ( new URI ( "http://baseurl/static/rapture/baseapp-debug.js" ) , new URI ( "http://baseurl/static/rapture/extdirect-debug.js" ) , new URI ( "http
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expected , actual )
assertThat ( period , equalTo ( new TimePeriod ( SECOND , 61.0 ) ) )
assertions . containsKey ( key )
assertEquals ( a , aDeserialized )
assertEquals ( "" , html )
assertArrayEquals ( dResults , mxes [ i ] . toArray ( ) , DELTA )
assertTrue ( "Table " + tableName + " does not exist" , tables . next ( ) )
assertThat ( supported , is ( true ) )
assertEquals ( forumObject . getForumUuid ( ) , forumUuid )
assertEquals ( expectedURI , request . getUri ( baseURI ) )
assertThat ( Certificates . getOperatorInternalCertificateData ( ) , nullValue ( ) )
assertEquals ( "content" , content )
assertNull ( props . toString ( ) , props . get ( "old" ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
Assert . assertTrue ( _c . canConvertTo ( Float . class ) )
assertTrue ( references . isEmpty ( ) )
Assert . assertNotNull ( classUnderTest . getTitle ( ) )
assertEquals ( 2 , retDepartments . size ( ) )
assertThat ( zhong , not ( hasKey ( city ) ) )
assertEquals ( TestClass1 . class . getName ( ) , service . injectedLogger . getName ( ) )
Assert . assertEquals ( testexpect , JsonUtils . combineBindValues ( test , testparam ) )
assertThat ( clock . startOfDay ( date ) , is ( date ) )
assertThat ( match , equalTo ( "lite-1.2.3.jar" ) )
assertTrue ( isEqual ( mockStopPoint , actualStopPoint ) )
assertThat ( address , hasKey ( countryCode ) )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
Asserts . check ( targetHosts . size ( ) == 2 , "fail test" )
Assert . assertEquals ( 2 , map . size ( ) )
Assert . fail ( "createDNASequenceWithQualityScores(null) expected IllegalArgumentException" )
Assert . assertNotNull ( "No se ha generado el CSV" , infoDocumento )
assertEquals ( frameData1 , frameData2 )
assertEquals ( R . style . Theme_Default_Dialog , themeResId )
Assert . assertEquals ( "SELECT INTERVAL '123-2' YEAR(3) TO MONTH\\nFROM DUAL;\\n" , text )
assertTrue ( truncated . size ( ) == 6 )
assertEquals ( "5" , permMissingElem . solution ( array ) )
assertTrue ( msg . toString ( ) , expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
assertEquals ( asList ( trace ( mdcValues , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertTrue ( parameters . isEmpty ( ) )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Parameter/>" , elem . toXml ( ) )
assertFalse ( SUT . isQuiescent ( ) )
assertEquals ( Result . FAIL , type . apply ( item ) )
assertTrue ( params == null )
assertSame ( value , bound . value ( ) )
assertThat ( jsonGeneratorParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/Exception2.json" ) ) )
assertEquals ( model , RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "SimpleStatements.rdf" ) ) )
this . assertTokenizesTo ( _t , json , jsonGen . images . toArray ( ) , jsonGen . types . toArray ( ) , jsonGen . datatypes . toArray ( ) )
assertEquals ( response . getContentAsByteArray ( ) , validImage )
assertArrayEquals ( new Item [ ] { FOURTH_ITEM , THIRD_ITEM } , actual . toArray ( new Item [ 2 ] ) )
assertCentroid ( polyline , new Point2D ( ) )
Assert . assertEquals ( "file is not in new resource" , "test1-resc" , dataObject . getResourceName ( ) )
assertThat ( ids , containsInAnyOrder ( patId , medId , moId ) )
this . assertAnalyzesTo ( _a , "<http://dbpedia.org/resource/The_Kingston_Trio>" , new String [ ] { "kingston" , "trio" , "the_kingston_trio" ,
assertNull ( selector . getProxy ( repo ) )
assertThat ( driver . findElement ( By . cssSelector ( "h2" ) ) . getText ( ) , is ( "System Error..." ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertThat ( status , equalTo ( 204 ) )
assertThat ( XMLAdapter . XML_TIME . translate ( cal ) , is ( expected ) )
assertTrue ( stack2 . isEmpty ( ) )
assertEquals ( NettyTransporter . class , ExtensionLoader . getExtensionLoader ( Transporter . class ) . getExtension ( name ) . getClass ( ) )
assertEquals ( notifier , result )
assertThat ( copy . getEntityAProperty ( ) , sameInstance ( anotherEntity ) )
assertNotNull ( result )
assertEquals ( playerProperties . getNext ( ) , stringArgumentCaptor . getValue ( ) )
Assert . fail ( "AllocateRequest expected as expected because AM was not registered" )
assertEquals ( np . getNumberOfRoutes ( lowerLayer ) , 2 )
assertEquals ( 2 , books . size ( ) )
Assert . assertEquals ( 2 , redisService . findRedisesByDcClusterShard ( dcName , clusterName , shardName ) . size ( ) )
assertEquals ( PROJECT_ID , options . projectId ( ) )
assertEquals ( solutionsToBeReturned , result . size ( ) )
assertSame ( wrapper , impl . getServiceWrapper ( req , ctx ) )
assertEquals ( noException , 1 )
assertThat ( name . getSegments ( ) , contains ( "lower" ) )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
Assert . assertNotNull ( result )
assertThatThrownBy ( ( ) -> graphQlSchemaBuilder . buildQuery ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , destinationFolder , "diff_" ) )
assertTrue ( "getMetric should return the metric value passed in." , Objects . equal ( basicName , victim . getMetric ( ) ) )
assertTrue ( organizationalUnitController . canDeleteOrgUnit ( mock ( OrganizationalUnit . class ) ) )
Assert . assertEquals ( 1 , sync ( cache . size ( ) ) . intValue ( ) )
Assert . assertEquals ( ColorConstants . RED , p . getRenderer ( ) . getProperty ( Property . FONT_COLOR ) . getColor ( ) )
assertEquals ( "Mismatched count" , 1 , context . getFocusPolicyRules ( ) . size ( ) )
Assert . assertTrue ( fsView . getFileStatus ( new Path ( "/" ) ) . isDirectory ( ) )
assertEquals ( "urn:nfc:example.com" , uriRecord . getUri ( ) )
assertEquals ( 1 , countValue )
assertions . isNotEmpty ( )
assertThat ( text , is ( "label" ) )
assertOut ( "x=100" )
assertParseTree ( rootNode ( "" , node ( "digits" , Arrays . < String > asList ( ) , "" ) ) , tree )
assertNotNull ( meta )
assertThat ( "when allowed" , withUserRestriction ( tlRule . getListener ( ) , uRestr ) . apply ( new GHPullRequest ( ) ) , is ( true ) )
Assert . assertNotNull ( doc )
assertEquals ( expResult , result )
assertSame ( locale , response . getLanguage ( ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
assertWaitUntilCreated ( wi )
assertEquals ( 10.78f , doc . field ( "firstNumber" ) )
outputValidator . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertPersonProfile ( person )
assertThat ( changeScript . getContent ( ) , is ( "Hello\\nThere!\\n" ) )
assertEquals ( expectedFiles , files )
assertFalse ( tuple . delete ( "field" ) )
Assert . assertTrue ( "didn't find Service1" , true )
assertEquals ( 1 , query . getIndexConstraints ( SPATIAL_TEMPORAL_INDEX ) . size ( ) )
assertThat ( results , contains ( ( Matcher ) hasEntry ( "code" , "WGT234" ) ) )
assertTrue ( stmt instanceof DropTableNode )
assertTrue ( rewrittenXml . contains ( "<wsa:Endpoint><wsa:Port>2000</wsa:Port></wsa:Endpoint>" ) )
assertAplicacion ( aplicacion )
assertEquals ( ONE_ARG_TO_STRING , sink . result ( ) )
assertIsGreenwich ( marshal ( pm ) )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "Hi " + name , result )
assertThat ( result , is ( "abc" ) )
assertThat ( the ( name , be ( equalTo ( "Soto" ) ) . or ( be ( startsWith ( "B" ) ) ) ) , is ( false ) )
assertThat ( partition , is ( newPartition ( ) ) )
assertTrue ( map . isEmpty ( ) )
assertTrue ( response . message ( ) instanceof Observing )
Assert . assertEquals ( 1 , s , Math . ulp ( 1d ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
assertThat ( ( double ) stopwatch . getMinimumDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 150 , 50 ) ) )
Assert . assertTrue ( tempFontFile . exists ( ) )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
Assert . assertEquals ( "MNOPRSTUVWXYZ" , text )
Assert . assertEquals ( "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>" + "<Enqueue>" + "<genericTag>" + "Some text" + "</genericTag>" + "</Enqueue>" , elem . toXml ( ) )
assertEquals ( 2 , throughputStatistics . getUpdatesCount ( ) )
assertEquals ( 7 , list . size ( ) )
assertNotNull ( "State is null" , entity )
assertTrue ( "there are scenario failures" , results . getFailCount ( ) == 0 )
assertTrue ( processor . isValidTransform ( "test" , "test" , null ) )
assertOut ( "var /** @type {Array} */ a = [\\"Hello\\", \\"World\\"]" )
assertEquals ( VALUE_A . add ( VALUE_B ) . add ( VALUE_BX ) . add ( VALUE_BY ) , client . getValueOfAllFunds ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( false , result )
assertArrayEquals ( TestVectors . REGISTRATION_RESPONSE_DATA , encodedBytes )
assertThat ( isExpectedData , is ( true ) )
assertEquals ( io . motown . domain . api . chargingstation . ReservationStatus . UNAVAILABLE , reservationStatus )
assertFalse ( stringBuffer . toString ( ) . equals ( "" ) )
assertEquals ( 65423 , executeTestMethod ( test , Integer . class , null , 65423 ) . longValue ( ) )
assertTrue ( copy . getAreNodeLabelsAcceptedByRM ( ) )
assertEquals ( count_addresses , results . size ( ) )
assertTrue ( connection . createChannel ( 1 ) . isClosed ( ) )
assertEquals ( z , instance . getValue ( ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertSame ( DUMMY , SegmentRegistry . get ( ID ) )
assertEquals ( 2 , post . getComments ( ) . size ( ) )
Assert . assertEquals ( 6.0 , a . manhattanNorm ( ) , Matrices . EPS )
assertTrue ( future . isDone ( ) )
Assert . assertTrue ( Arrays . equals ( configuration . getIntField ( ) , result . getIntField ( ) ) )
assertEquals ( "Didn't get expected decrypted data" , data , new String ( decryptedBytes . get ( ) , "UTF-8" ) )
assertNull ( results )
assertNull ( resolved )
assertTrue ( sipPhoneSender . unregister ( requestURI ) )
assertArrayEquals ( data , ( double [ ] ) deserialize . readObject ( double [ ] . class ) , 0.0001 )
assertThat ( keys [ keys . length - 1 ] , is ( "test_request_id" ) )
assertions . isNotLessThan ( expected )
assertNotNull ( result )
Assert . assertTrue ( myRecordList . size ( ) == 0 )
Assert . assertTrue ( subscriber . checkUpdate ( new EndpointTitle ( testEndpoints . get ( 0 ) , HUB_SUBSCRIPTION_UPDATE_ENDPOINT_DELETED ) ) )
assertEquals ( 106 , buffer . get ( ) )
Assert . assertFalse ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertEquals ( 0 , eventRealPaths . size ( ) )
assertEquals ( expectedName , generated )
assertEquals ( TaxonomyPrinter . getHashString ( taxonomy1 ) , TaxonomyPrinter . getHashString ( taxonomy2 ) )
assertThat ( repository , notNullValue ( ) )
assertThat ( queryRaw ( "test-mnt" , "mntner" ) , containsString ( "[ {\\n" + "  \\"key\\" : \\"test-mnt\\",\\n" + "  \\"type\\" : \\"mntner\\",\\n" +
assertEquals ( "value" , value )
assertThat ( eventCaptor . getValue ( ) . getConfiguration ( ) . getRemoteNodeId ( ) , is ( "remote-node-id" ) )
assertEquals ( accountListToPersist . size ( ) , accountFromDatastoreList . size ( ) )
Assert . assertEquals ( 1 , statementList . size ( ) )
assertThat ( replication , is ( instanceOf ( PartitionedTableReplication . class ) ) )
assertNull ( options . objectFactory ( ) )
assertEquals ( 5 , value . asInt ( 10 ) )
assertEquals ( body . toString ( ) , "operation _timeout" )
assertThat ( readPoint . getValue ( ) , is ( BigInteger . valueOf ( 5000L ) ) )
assertEquals ( 1 , observer . getCalledTimes ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertNotNull ( personDemographics )
assertFalse ( "Did not create DatagramSocket" , socket == null || socket instanceof MulticastSocket )
assertEquals ( 2 , postComments . size ( ) )
assertEquals ( 0 , results . length )
assertEquals ( String . valueOf ( ReturnCode . DIGIT_PATTERN_NOT_MATCHED . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "rc" ) )
assertThat ( errors . toString ( ) , containsString ( "No issues" ) )
assertions . isNotEmpty ( )
assertNotNull ( inputStream )
assertTrue ( ca . getFallbackParameters ( ) . equals ( ap2 ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertNotNull ( "session should not be null" , session )
assertThat ( info . getServerPod ( SERVER ) , sameInstance ( pod ) )
Assert . assertTrue ( "world,peace" . equals ( join ) )
Assert . assertEquals ( JSONNegativeInfinity , result )
assertTrue ( d1 instanceof PublicCloneable )
assertionErrorCreator . multipleAssertionsError ( description , errors )
assertEquals ( "{\\"version\\": \\"3.0.0\\", \\"gauges\\": {}, \\"counters\\": {}, \\"histograms\\": {}, \\"meters\\": {}, \\"timers\\": {\\"foobar\\": {\\"count\\
assertEquals ( "void f(void* target, void* p0) {\\n" + "    struct f_0001 {int m1;};\\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\\
assertThat ( "Output model created" , outFile . exists ( ) , is ( true ) )
assertEquals ( 7 , encounters . size ( ) )
Assert . assertEquals ( json , writer . toString ( ) )
assertTrue ( "Unexpected exception message: " + e . getMessage ( ) , e . getMessage ( ) . indexOf ( expectedDetail ) > - 1 )
assertFalse ( question . isSolvedBy ( answer ) )
assertTrue ( c . isValidForSqlQuery ( ) )
Assert . fail ( "Should have thrown exception" )
assertTrue ( entity . getModifiers ( ) . contains ( "private" ) )
assertNotNull ( exception )
Assert . assertEquals ( "OK" , result )
assertThat ( testStatus , is ( expectedStatus ) )
assertNotNull ( jmxServer )
assertFalse ( cnpjValidator . isEligible ( null ) )
assertNotNull ( Aws . reader ( ) . read ( ) )
Assert . assertNull ( actual )
assertEquals ( Arrays . asList ( "A" , "B" , "C" , "D" ) , results )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( ServerParse . ROLLBACK , sqlType )
Assert . assertFalse ( "Unexpected obtained a read lock" , readLockAcquired )
assertEquals ( object2 , actualObjects . get ( 0 ) )
assertEquals ( expected , actualQuery )
assertThat ( module . getRequiredModulesMap ( ) , is ( equalTo ( Collections . EMPTY_MAP ) ) )
Assert . assertEquals ( "Hello Kermit!\\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( System . currentTimeMillis ( ) / 1000 + 500 , subscription . getExpirationTime ( ) , 10.0 )
assertThat ( formatter . format ( PlainDate . of ( 1565 , 1 , 30 ) ) , is ( "AD-1698/2014 (D)" ) )
assertEquals ( 0 , response . getBody ( ) . getEntities ( ) . size ( ) )
assertThat ( flights , hasSize ( 0 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertEquals ( AddUser . NEW_LINE , nextState . getConsole ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertEquals ( "{\\"name\\":\\"test\\",\\"data\\":{}}" , gson . toJson ( aiEvent ) )
assertEquals ( valorTest , valor )
assertTrue ( "Trust manager should be created" , ops . exists ( TEST_TRUST_MNGR_ADDRESS ) )
assertResultSet ( res )
assertEquals ( "unexpected number of expected problems" , 1 , equeue . size ( ) )
assertResult ( session )
assertEquals ( "8a7ac32f-c2bd-4316-87d8-4219dc5e8031" , orderId )
Assert . assertEquals ( Arrays . asList ( p1 , p2 , p3 , p4 ) , list )
assertThat ( result . size ( ) , is ( 0 ) )
observer . assertObservations ( "@Initialized HttpSession" , session )
Assert . assertTrue ( c . toString ( ) . contains ( "DefaultCollaborator" ) )
assertEqualsLQ ( A , lq . factor ( new DenseMatrix ( A ) ) )
assertEquals ( expecteds , actuals )
assertEquals ( 8080 , toTest )
assertFalse ( allPlanets . isEmpty ( ) )
assertEquals ( expResult , result )
assertTrue ( result . isResultOK ( ) )
context . assertTrue ( res . failed ( ) )
assertEquals ( setOf ( "ashlux@gmail.com" , "mickeymouse@disney.com" , "ashhlux@gmail.com" ) , internetAddresses )
assertTrue ( field . isRequired ( ) )
assertEquals ( NOT_DECODED , map , object . getObjects ( ) )
assertEquals ( "foo" , field . getValue ( ) )
assertFailureLogPresent ( instance , "failingTask" )
assertEquals ( expectedPolicy , builtPolicy )
assertEquals ( 2 , smu . taxClass . axioms ( ) . count ( ) )
assertNull ( primaryKey )
Assert . assertEquals ( 403 , response . getStatus ( ) )
testHelper . assertTaskListenerTimerJobMigrated ( "userTask" )
assertEquals ( "/component=myComp/1.2.json" , dispatchCriteria )
Assert . assertTrue ( "Expected non-optimal coverage: " , best . getCoverage ( ) < 1.0 )
Assert . assertNotNull ( template )
Assert . assertEquals ( uri . stringValue ( ) , "http://apache.org/example" )
assertContentSame ( rs , rc , columnParam1 )
assertThat ( result , is ( nullValue ( ) ) )
assertSame ( expected , actual )
assertEquals ( documento , documentoCreado )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( 0 , p . getStart ( ) )
assertThat ( future , is ( DisabledFuture . INSTANCE ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( s , clone ( ( s ) ) )
assertThat ( FileUtils . readFileToString ( new File ( tempCopyFile ) ) , CoreMatchers . is ( cp_file . asText ( ) ) )
assertNotNull ( result . getId ( ) )
assertEquals ( "<rdf:resource xmlns:abs=\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <rdf:resource>" , stringForRDFNode ( rdfNod ) )
Assert . assertEquals ( ScoreLangConstants . SUCCESS_RESULT , result )
Assert . assertNotNull ( forest )
assertEquals ( "abc, 34\\n" , found )
Assert . assertEquals ( "Invalid HUs retrieved" , Collections . emptyList ( ) , huSelectModel . createHUQueryBuilder ( ) . setErrorIfNoHUs ( false , null ) . list ( ) )
assertThat ( spiralOrder ( matrix ) , Matchers . is ( Lists . newArrayList ( 9 , 9 , 4 , 6 , 6 , 8 , 2 , 1 ) ) )
assertThat ( rs . getInt ( 1 ) , is ( 0 ) )
assertThat ( build , is ( notNullValue ( ) ) )
assertEqualsIgnoreLineEnding ( output , "{\\n" + "  \\"id\\" : 42,\\n" + "  \\"name\\" : \\"Arthur Dent\\"\\n" + "}" )
assertEquals ( "" , found )
Assert . assertEquals ( 204 , response . getStatus ( ) )
Assert . assertTrue ( results . isEmpty ( ) )
assertTrue ( isSuccess )
assertUFTFields ( fields )
assertNotEquals ( 0 , iri . compareTo ( null ) )
assertThat ( dispatcher . dispatchQueues . keySet ( ) , is ( empty ( ) ) )
assertEquals ( "LOCAL: \\nName1\\nName2\\nUserFN UserLN\\naddr2\\naddr1\\n121212 City1\\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null )
Assert . assertEquals ( 43 , a . getCalculatedAge ( ) )
assertEquals ( 11 , sink . getTotalGroups ( ) )
mockEndpoint . assertIsSatisfied ( )
assertEquals ( "urn:cxf" , action )
assertEquals ( 2 , urls . length )
assertNotNull ( netrc )
Assert . assertEquals ( StatusCodes . BAD_REQUEST , result . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( webSocketHandler . calculateHeaderSize ( WebSocketHeader . PAYLOAD_0 ) , 0 )
assertNotNull ( geomConverter )
assertFalse ( s instanceof Cloneable )
assertEquals ( "Strategy decision not expected" , NodeProvisioner . StrategyDecision . CONSULT_REMAINING_STRATEGIES , decision )
assertThat ( nextRTCListener . get ( ) , is ( object ) )
Assert . assertNotNull ( service . getDate ( ) )
Assert . assertEquals ( false , handler . getAcceptAnonymous ( ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
Assert . assertEquals ( "C7 (indexPath = 1, namePath = C7)\\n" + "    O1 (indexPath = 1.1, namePath = C7->O1)\\n" + "    O2 (indexPath = 1.2, name
assertTrue ( headTableEngine . exists ( index ) )
Assert . assertEquals ( "value of one" , one , value )
assertThat ( DateInterval . parseISO ( "P775D/2012-01-01" ) , is ( expected ) )
assertThat ( irsApplicable , equalTo ( true ) )
assertTrue ( payload . needsBuild ( getProject ( ) ) )
assertEquals ( HttpStatus . NO_CONTENT , responseEntity . getStatusCode ( ) )
assertEquals ( 500 , status )
assertEquals ( query , query2 )
assertEquals ( "<div id=\\"product-1\\"><h2>Detail of 1952 ALPINE RENAULT 1300</h2><p>Year: 1952, price: 98.58��</p><p>Turnable front wheels
assertLoadClass ( bundleA , Bundle . class . getName ( ) )
assertThat ( I18nUtil . getLocale ( ) , is ( Locale . getDefault ( ) ) )
Assert . assertNull ( "queue was reset" , sqsMessage )
assertEquals ( 2 , multiMap . get ( value ) . size ( ) )
assertEquals ( "string[]" , param . getRuntimeType ( ) )
assertEquals ( 2 , dao . getLocationsHavingAllTags ( list1 ) . size ( ) )
assertEquals ( 0 , result . length )
assertThat ( infos . length , is ( 0 ) )
arrays . assertDoesNotHaveDuplicates ( description , actual )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( output , output . matches ( "(?s).*execute a script.*" ) )
XMLAssert . assertXpathEvaluatesTo ( Integer . valueOf ( childrenCountBefore - 1 ) , "count(/configuration/*)" , result . asXML ( ) )
assertSame ( result1 , result )
assertEquals ( 4 , results . size ( ) )
assertNull ( primaryKeyDesc )
assertEquals ( "The view paths aren't correct" , "load tmp" , scm . getViewPaths ( null , null , launcher ) [ 0 ] )
assertTrue ( TypeUtils . shouldCreateNewClass ( property , null ) )
assertEquals ( BPResultType . FAIL , testResult . getResultType ( ) )
Assert . assertNotNull ( version )
assertEquals ( expResult , result )
Assert . assertTrue ( handler . disconnectCount > 0 )
assertTrue ( room . containsKey ( "etag" ) )
assertValid ( DocType . XHTML10_STRICT )
assertDefault ( property . getValue ( ) )
assertThat ( actual , is ( expected ) )
assertEquals ( arr , resultArr )
builderUnderTest . recorder . assertInvocation ( "removePropertyFilters" , Arrays . asList ( testFilter1 , testFilter2 ) )
assertEquals ( "Testing SerializedDocumentForm in SessionDocumentService" , dummyByte , dummySessionDocument . getSerializedDocumentForm ( ) )
assertNotNull ( m )
Assert . assertTrue ( isValid )
assertNotNull ( target )
assertEquals ( NL + "  Pre[1] xmlns=\\"A\\"" + NL + "    Pre[4] xmlns=\\"D\\"" + NL + "      Pre[5] xmlns=\\"G\\"" + NL + "    Pre[7] xmlns=\\"F\\""
assertTrue ( expectedOutput . compare ( output , TOLERANCE ) )
assertEquals ( "{f1:'b'}" , x . getExample ( ) )
Assert . assertEquals ( "A \\nB \\nC \\nD" , text )
assertNotNull ( "Obfuscated data null" , obfuscatedData )
assertParseTree ( rootNode ( "hello" , node ( "hi" , null , "hello" ) ) , tree )
assertEquals ( "ab��猫���������盲枚眉�cdEf" , returnValue )
assertMatch ( e , s )
Assert . assertEquals ( SEPARATOR + "dXNlcnBhc3M=" , actual )
assertEquals ( "Should be a 400 BAD REQUEST!" , BAD_REQUEST . getStatusCode ( ) , getStatus ( method ) )
assertEquals ( newLanguage , withLanguage . getLanguage ( ) )
Assert . assertEquals ( ManagedCloudSdk . newManagedSdk ( new Version ( "" ) ) . getSdkHome ( ) , sdk . getSdkHome ( ) )
Assert . assertTrue ( deleted . isVoided ( ) )
assertEquals ( e , r )
assertThat ( result , hasSize ( 0 ) )
assertThat ( cd1 . getLength ( ) , is ( 10L ) )
assertTrue ( lastModificationTime > map1 . lastModificationTime ( ( byte ) 2 ) )
assertThat ( this . converter . convert ( this . source , this . sourceType , targetType ) , is ( equalTo ( this . converted ) ) )
assertTrue ( result . size ( ) > 0 )
assertEquals ( false , passedWaitForStartCall . await ( 10 , TimeUnit . SECONDS ) )
assertTrue ( "Field must be loaded: " + loadedClass . fieldByName ( myField ) , loadedClass . fieldByName ( myField ) )
assertThat ( emptyIntermediate . getSize ( ) , is ( 0L ) )
Assert . assertTrue ( definitions . isEmpty ( ) )
assertEquals ( "Privacy policy inferred not equals to the exepcted empty one" , expected , actual )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertThat ( encryptor . checkPassword ( testPassword , null ) , is ( false ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE DEPTH(nodes) <= CAST('3' AS LONG)" ) )
assertEquals ( true , result )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , "test; key=\\"value\\"; otherKey=V8" )
Assert . assertEquals ( expectedStringLast , resultString )
assertTrue ( underTest . validate ( "student" , idsToValidate ) . containsAll ( idsToValidate ) )
assertThat ( event . isCancelled ( ) , equalTo ( false ) )
assertFalse ( "Invalid argument passed" , argumentResolver1 . supportsArgument ( messageContext ) )
assertEquals ( expected , appendable . toString ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 ) ) )
assertNotNull ( result )
Assert . fail ( "It succeeded while an Exception is expected" )
Assert . assertEquals ( vXLong . getValue ( ) , vXLong1 . getValue ( ) )
assertEquals ( - ONE_HOUR_IN_MILLIS , ts . getTime ( ) )
assertEquals ( "Base for strings is wrong" , "3" , parsed )
assertTrue ( negativeIdleTimeReturned . get ( ) )
assertEquals ( "Base for longs is wrong" , "3" , parsed )
assertEquals ( pm , searchField . getFindPopupMenu ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) > $literal" ) )
assertEquals ( "Select with exists check" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
assertTrue ( true )
Assert . assertEquals ( "SELECT s1\\nFROM t1\\nWHERE s1 > ALL (SELECT s1\\n\\tFROM t2);" , text )
assertThat ( instance . getCreationDate ( ) , is ( dateTime ) )
classes . assertIsInterface ( someInfo ( ) , actual )
assertNull ( entity . getId ( ) )
Assert . assertArrayEquals ( new String [ ] { "*" , "*" } , toStringArray ( tokens ) )
assertTrue ( rs . next ( ) )
assertThat ( parse ( contents ) , contains ( map ( "a" , "'HELLO'" , "b" , "'hello'" ) ) )
Assert . assertEquals ( 1 , arrays . size ( ) )
assertEquals ( userDao . getUsernames ( usernamePattern , resultCount ) . size ( ) , 2 )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . TEXT_PLAIN ) . get ( ) . getStatus ( ) )
Assert . assertTrue ( contains )
assertEquals ( DockerConnectorConfiguration . DEFAULT_DOCKER_URI , uri )
Assert . assertEquals ( 0 , l . size ( ) )
assertThat ( value , is ( "value1value2" + separator ) )
Assert . assertTrue ( "Did not find expected system property" , foundToCharArray )
Assert . assertEquals ( 412 , stringResponse . getStatus ( ) )
assertListTEquals ( listOneTwo , 1 , 2 , 3 , 4 , 5 )
assertEquals ( "3 啶�啶苦え 15 啶�啶�啶�啷� 38 啶�啶苦�
assertEquals ( o , result . getValue ( ) )
assertTokensEqual ( of ( PLUS , integer ( 1 ) , integer ( 2 ) ) , tokens )
assertEquals ( eAdded , eRetrieved )
assertThat ( factory . create ( value ) , is ( Long . valueOf ( value . getTimeInMillis ( ) ) ) )
assertTrue ( h . getNewURL ( ) . equals ( "/NewSimpleUrl" ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
Assert . assertTrue ( schema != null )
assertEquals ( bestIndividual . toString ( ) , bicf . getChromosome ( ) . toString ( ) )
assertEquals ( 0 , ebXML . getSlots ( ) . size ( ) )
assertTrue ( validAnagram . isAnagram ( s , t ) )
assertEquals ( "[1080:0:0:0:8:800:200c:417a]:80" , StringUtils . formatSocketAddress ( inetSocketAddress ) )
assertTrue ( wc . amContainer . isInErrorState ( ) )
assertEquals ( "Series 1" , d1 . getSeriesKey ( ) )
assertTrue ( "pauseLength > 500ms" , pauseLength > 500 )
assertTrue ( "i=" + i + " d=" + d , ! nnList . isEmpty ( ) )
assertEquals ( 1 , x . size ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( expectedBindingString , relativizedVolumeString )
assertThat ( authorizationRequest1 , is ( authorizationRequest2 ) )
Assert . assertEquals ( 0.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
_mock . assertIsSatisfied ( )
Assert . assertEquals ( "Connect to http://localhost [/1.2.3.4, /3.4.0] timed out" , ctx . getMessage ( ) )
assertEquals ( "unexpected number of expected problems" , 0 , equeue . size ( ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "2_3" , "
assertAlias ( sql , columnParam , "nor" , param )
Assert . assertEquals ( expectedMap , filtered )
assertEquals ( 20 , objects . size ( ) )
assertThat ( builder , hasToString ( "<script type=\\"text/javascript\\">/* <![CDATA[ */\\n" + "(function() {var s = document.createElement('script')," + "t = document.getElementsByTagName('script')[0];" + "s
assertArrayEquals ( expected , coeffs )
assertEquals ( builder . bipartitionThreshold , 0.3243 )
this . assertIndices ( im ( 0 , 0 ) , im ( 1 , - 1 ) , im ( 2 , 1 ) , im ( 3 , 2 ) , im ( 4 , 3 ) )
Assert . assertEquals ( 4 , result . getTotalHits ( ) )
assertThat ( spec , is ( lessThan ( 0 ) ) )
assertOut ( "var foreachiter0_target = a;\\nfor (var foreachiter0 in foreachiter0_target) \\n{\\nvar p = foreachiter0_target[foreachiter0];\\n\\n  var /** @type {number} */ i = a
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
assertEquals ( "Disconnected" , false , connected )
assertEquals ( "SELECT e2, e1 FROM pm1.g1" , outerQuery . toString ( ) )
Assert . assertEquals ( "mmoayyed.example.net" , entity . getId ( ) )
assertThat ( event , is ( expected ) )
assertThat ( url1 . toFullString ( ) , anyOf ( equalTo ( "dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan" ) , equalTo ( "
Assert . assertTrue ( checked . get ( ) )
assertEquals ( "Hello there world" , doc . select ( "div > *" ) . text ( ) )
assertEquals ( 9.0060123 , ceosReader . readFn ( 16 ) , 1E-10 )
assertTrue ( start_query . isSuccessful ( ) )
assertEquals ( seessionAuthoritys , authorities )
assertHelpLines ( "Option                   Description        " , "------                   -----------        " , "-a <Integer: numerical>  some value you need" , EMPTY )
assertSame ( config , uriTools . resolveUri ( PROFILE_URI . resolve ( "configuration/Hello/" ) , wfBundle ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertTrue ( testExpressionUpdate . callbackCalled )
assertEquals ( reduce , pipes . getReduce ( ) )
Assert . fail ( "Unterminated value accepted" )
assertProject ( workspaceProject )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertTrue ( token . newToken ( hash , timestamp , salt ) )
assertThat ( isValid , is ( false ) )
assertThat ( existing , CoreMatchers . nullValue ( ) )
assertEquals ( "Test message \\\\ab c" , result )
assertEquals ( "Expecting empty list when no task available!" , 0 , tasks . size ( ) )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
Assert . assertFalse ( "this should be a directory" , irodsFile . isDirectory ( ) )
Assert . fail ( e . getMessage ( ) )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
assertEquals ( 123L , book . getId ( ) )
Assert . assertEquals ( "type should be VERTICAL" , WTree . Type . VERTICAL , tree . getType ( ) )
assertUsers ( ldapUserInfo , false , false , false , false )
assertTrue ( page . asText ( ) . contains ( "could not be understood as a number" ) )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertThat ( building . isPresent ( ) , is ( false ) )
Assert . assertEquals ( range . getQualifyingPageNums ( 3 ) , Arrays . asList ( 2 , 12 ) )
TestUtils . assertInvalidParameters ( victim )
assertEquals ( "datastax driver config" , IOContainer . DriverType . DATASTAX , driver )
Assert . assertFalse ( result )
assertEquals ( shexc . getExitCode ( ) , 0 )
assertEquals ( "VOID" , verifyType )
mock . assertIsNotSatisfied ( )
assertEquals ( "zzzdogzzzdogzzz" , mat . group ( ) )
assertArrayEquals ( TEObjectUtil . TE_LSP_BANDWIDTH_2 , ByteArray . getAllBytes ( output ) )
assertThat ( new PullRequestApproval ( Config . builder ( ) . requiredReviewers ( newArrayList ( "user1" , "user2" ) ) . requiredReviews ( 1 ) . build ( ) , utils ) . isPullRequestApproved ( pr ) , is ( true ) )
assertThat ( "External Object" , object , is ( value ) )
assertNotNull ( Command . reader ( ) . read ( ) )
assertTrue ( result . passedValidation ( ) )
assertThat ( sessionManager . getValue ( ) , notNullValue ( ) )
assertEquals ( results [ i ] , minesweeper . processBundle ( bundle ) )
assertEquals ( Preconditions . class , type )
assertThat ( list . iterator ( ) . next ( ) . getName ( ) , is ( "core.one" ) )
Assert . assertEquals ( "Incorrect file types returned" , Arrays . asList ( types1 ) , widget . getFileTypes ( ) )
MatcherAssert . assertThat ( keyword . getType ( ) , Matchers . is ( Integer . class ) )
assertEquals ( expected , reference . get ( ) )
assertNull ( extr . extract ( attrDetail , null , document ) )
assertEquals ( ( short ) 8 , result . getShortValue ( ) )
assertTrue ( "correct vocab not found" , test )
assertTrue ( e instanceof E_LangMatches )
assertEquals ( "No rules are defined for " + TEST_CALC_I [ i ] , 0 , ss . size ( ) )
assertThat ( results , is ( new String [ ] [ ] { { "A" , "B" } } ) )
assertThat ( JobWatcher . getOrCreateFor ( domain ) , not ( sameInstance ( oldWatcher ) ) )
assertTrue ( sample . getStatus ( ) == sampleStatus )
assertNotNull ( Service . reader ( ) . read ( ) )
assertEquals ( new TypeTag ( List . class , new TypeTag ( List . class , new TypeTag ( List . class , new TypeTag ( String . class ) ) ) ) , actual )
assertThat ( threadCount , is ( AVAILABLE_PROCESSORS * 2 ) )
assertEquals ( HASH_ERR , Blake2_DIGEST_EMPTY_STRING , result )
assertEquals ( "Wrong count ones" , count , bitseq . countOnes ( ) )
assertEquals ( 1 , reportResults . size ( ) )
assertEquals ( 1 , taskQuery . count ( ) )
assertThatReassembledMessageEqualsOriginalMessage ( result )
Assert . assertEquals ( adImpressionStream . size ( ) , collector . actualResults . size ( ) )
assertEquals ( pausedFlows , processInstanceMediatorServiceMockInjected . pausedFlows ( ) )
Assert . assertTrue ( queueResponse . isOk ( ) )
Assert . assertEquals ( employee4 . getId ( ) , q . getSingleResult ( ) )
assertEquals ( vutUserId , fromBearer . getUserID ( ) )
assertEquals ( createdState . eventLog , retrievedState . eventLog )
assertEquals ( 3 , counter . getBeforeFileTreeWalkCount ( ) )
assertFalse ( notifyThread . isFinished ( ) )
assertArrayEquals ( "Not all offered types received" , offers , _offeredTypes )
assertEquals ( "sampleLib1Description" , functionLibrary . getDescription ( ) )
assertEquals ( var1 , "test value" )
assertTrue ( roles . size ( ) == 1 )
Assert . assertEquals ( "2=2,4=4" , tree . toString ( ) )
assertEquals ( "ExpirationDate passed into constructor not returned by getTokenExpirationDate()" , expireDate , sut . getTokenExpirationDate ( ) )
Assert . assertEquals ( 0 , deviceGroupRegistry . getAllGroupIds ( ) . size ( ) )
assertEquals ( "a c 3 + c y * 2 []" , this . codeGenerator . getPostFixExpression ( ) )
Assert . assertTrue ( "duplicate variant were not removed" , bn . getVariants ( ) . size ( ) == 1 )
Assert . assertNotNull ( addressResultsDto )
assertFalse ( decoder . eof ( ) )
assertEquals ( - 7 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( "Input value json should match output value json" , objectMapper . readTree ( inputJson ) , objectMapper . readTree ( outputJson ) )
assertNotNull ( processInstance . getId ( ) )
assertEquals ( 9876543201L , x . value )
Assert . assertEquals ( options . getMaxMaps ( ) , 3 )
assertEquals ( "ESAPI preferred JCE provider should be loaded" , preferredProvider , SecurityProviderLoader . getPreferredJCEProvider ( ) )
assertTrue ( issues . size ( ) > 0 )
assertEquals ( expResult , result , 0.001 )
Assert . assertFalse ( faceted . install ( null ) )
assertThat ( backingMap . size ( ) , is ( 4 ) )
Assert . assertArrayEquals ( REDIRECT_IPV6 , output . array ( ) )
assertEquals ( "Hello ÿþü\\n" + "H
ITUtils . assertReceivingDifferentRows ( proxy , key , ROW_COUNT + 2 )
assertEquals ( BPResultType . FAIL , testResult . getResultType ( ) )
assertEquals ( "SELECT xmlcast(xmlquery('/a/b' passing convert('<a><b>1</b></a>', xml)) as integer)" , QueryParser . getQueryParser ( ) . parseCommand ( sql ) . toString ( ) )
assertEquals ( CambriaConstants . kBasePath + "bar/group/id" , result )
assertTrue ( result [ 0 ] != result [ 1 ] )
assertThat ( eventsFired . size ( ) , equalTo ( 1 ) )
assertEquals ( StatusCode . STREAM_NOT_FOUND , response . getCode ( ) )
assertFalse ( indexFilterHook . indexIsApplicable ( indexRecordFilter , Table . RECORD . name , null , newRecord ) )
assertThat ( result . toString ( ) , is ( equalTo ( "H W" ) ) )
Assert . fail ( e . getMessage ( ) )
assertSizeIs ( 12 )
assertEquals ( 2 , chain . getCommands ( ) . size ( ) )
assertEquals ( DEFAULT_GRAPHITE_IPPORT , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( 0 , this . runtimeService . createProcessInstanceQuery ( ) . processDefinitionKey ( "oneTaskProcess" ) . count ( ) )
assertEquals ( "none condition serialization is wrong" , expected , actual )
assertEquals ( ok , result )
Assert . assertTrue ( groupManager . resolveGroupMembers ( "a" ) . size ( ) == 10 )
assertEquals ( annotations , annotationsOnMethod )
assertTrue ( result . isEmpty ( ) )
assertEquals ( results , linkedLists )
Assert . assertNotNull ( imagePart )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) < 0 )
Assert . fail ( "create bucket under non-existing mount point should fail" )
Assert . assertEquals ( "SimpleStatelessBean" , bean . getMessage ( ) )
assertEquals ( putMap , newMap )
assertEquals ( "Inputstream to string" , fileContent . toString ( ) )
Assert . assertEquals ( obj , o )
Assert . assertTrue ( result . getNumElementsProcessed ( ) == 0 )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertTrue ( PureEvaluator . isUnpureCacheEmpty ( ) )
assertEquals ( feather . instance ( Plain . class ) , feather . instance ( Plain . class ) )
assertThat ( registry . getDefinitions ( ) . size ( ) , equalTo ( 1 ) )
assertEquals ( AuthorizationResult . denied ( ) . getResult ( ) , result . getResult ( ) )
assertEquals ( new int [ ] { 1 , 1 , 1 } , res , 4 )
assertTrue ( getExpectedErrorMsg ( ) , result )
Assert . assertTrue ( poorlyNamedFiles . size ( ) == 0 )
assertArrayEquals ( resultAddress , address )
assertEquals ( expectedQuery , query )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertThat ( converted , is ( notNullValue ( ) ) )
assertEquals ( expResult , result )
assertThat ( initiativeInfo . isVotingStarted ( TODAY ) , is ( true ) )
Assert . assertEquals ( XMLStreamConstants . COMMENT , reader . nextEvent ( ) . getEventType ( ) )
assertNotNull ( result )
assertNotNull ( mt )
assertNotNull ( test )
assertThat ( results . get ( 0 ) , is ( additional ) )
assertEquals ( "In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf." , p . text ( ) )
assertThat ( basicDBObject . get ( "creationDate" ) , is ( ( Object ) now . getMillis ( ) ) )
arrays . assertEndsWith ( someInfo ( ) , actual , emptyArray ( ) )
assertThat ( html , containsString ( "else-block" ) )
assertThat ( props . getProperty ( propertyKey ) , is ( propertyValue ) )
Assert . fail ( "exception expected" )
assertNotNull ( api )
assertNull ( x . f1 )
assertThat ( mentions , hasItem ( mentionedIssue ( 0 , 3 , 33 ) ) )
assertTrue ( "Result XML does not match expected" , monitoring . matches ( "(?s).*<SituationExchangeDelivery><Situations><PtSituationElement><SituationNumber>MTA NYCT_1</SituationNumber><Summary xml:lang=\\"EN
assertTrue ( service . processMessage ( null , message . getBytes ( ) ) )
assertEquals ( "Expected 6 results!" , 6 , n )
assertNotNull ( e )
assertEquals ( "<span>Hello <div>there</div> <span>now</span></span>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( expectedConnection , actualConnection )
assertNotNull ( SyncStream . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( dummyConfigurationConfigLoader . getTestConfig ( ) . getSomeDummyEnvAttribute ( ) , CoreMatchers . is ( "true" ) )
assertTrue ( firstResult . equals ( lastResult ) )
Assert . assertTrue ( cutOff . after ( new Date ( ) ) )
assertEquals ( expected , cls )
assertFalse ( isOpened )
assertThat ( result . statusCode , is ( Response . OK ) )
assertTrue ( cndFactory . getProblems ( ) . isEmpty ( ) )
assertNotNull ( Revision . fetcher ( "FWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , 1 ) . fetch ( ) )
assertThat ( called , is ( equalTo ( Arrays . asList ( "ExecuteTestSuite1" , "ExecuteTestCase1" , "DoCommand1" , "DoCommand2" , "ExecuteTestCase2" ) ) ) )
assertThat ( start . until ( end , Duration . in ( MONTHS ) ) , is ( Duration . ofCalendarUnits ( 0 , 59 , 2 ) ) )
Assert . assertNull ( session , "No session should have been created when proxy set is empty" )
Assert . assertTrue ( currentUser . isPermissionPresent ( testPermission ) )
assertNull ( dto )
assertEquals ( 2 , rs . getInt ( 1 ) )
Assert . assertEquals ( SEX_FEMALE , json . get ( DATA_NAME ) )
assertEquals ( Integer . valueOf ( 2 ) , result )
Assert . assertTrue ( endpoint1 . equals ( endpoint2 ) )
assertEquals ( 23 , adapter . classify ( "23" ) . intValue ( ) )
assertTrue ( ParsingUtils . fileMatchesExtension ( sampleFile , "java" ) )
Assert . assertEquals ( expected , actual )
Assert . assertNotNull ( r )
assertArrayEquals ( classesToImport , generator . getClassesToImport ( ) )
Assert . assertSame ( elem , mergeElem )
assertThat ( Latin1Conversion . convertString ( control ) , is ( "a" ) )
assertTrue ( acl . hasPermission ( ANONYMOUS_USER , Item . READ ) )
assertEquals ( "No errors should be registered" , 0 , errors . getErrorCount ( ) )
assertEquals ( resultList . size ( ) , easyCriteria . getResultList ( ) . size ( ) )
Assert . assertEquals ( 2000 , duration , 100 )
assertTrue ( found . iterator ( ) . hasNext ( ) )
Assert . assertEquals ( 5 , files . size ( ) )
assertEquals ( 1 , annotations . size ( ) )
assertEquals ( "x.artistName in (\\"a\\", \\"b\\", \\"c\\")" , ejbql )
org . junit . Assert . assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( custom . getGap ( ) , ( ( VerticalLayout ) container . getLayout ( ) ) . getGap ( ) )
assertThat ( tz . isDaylightSaving ( utc ) , is ( true ) )
assertEquals ( initialHashCode , pm . getHash ( ) )
assertEquals ( expected , cow . getValue ( ) )
assertNull ( parsedArg )
assertEquals ( "1" , person . order ( ) )
assertEquals ( "post request" , saveRoute . text ( ) )
assertEquals ( 2 , accounts . size ( ) )
assertTrue ( s . isRequired ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( expected , out )
assertEquals ( "\\"NAME\\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertArrayEquals ( expected , service . getDomainsForServer ( handle ) )
assertEquals ( DataTypeManager . DefaultDataClasses . OBJECT , command . getProjectedSymbols ( ) . get ( 0 ) . getType ( ) )
assertEquals ( "Local lookup was not inherited" , "(x)" , parent . getString ( "tablespaces.tablespace.name" ) )
Assert . assertEquals ( 2 , count )
assertEquals ( 5. , start . getTheoreticalLatestOperationStartTime ( ) , 0.01 )
when ( ) . get ( "resource/getCollectorTest" ) . then ( ) . statusCode ( 200 ) . assertThat ( )
assertEquals ( 1 , inverseCheck . getInverses ( ) . size ( ) )
assertSame ( expectedOS , resultingOS )
Assert . assertEquals ( "dataOf1" , testMeta . storageManager . load ( 1 , 1 ) )
assertEquals ( customNullPointerRepresentation , nameField . getValue ( ) )
assertEquals ( expectedContentRange , uploader . constructContentRangeHeaderValue ( requestLength , true , status ) )
assertNotNull ( info )
assertTrue ( resultSetToString ( res ) . contains ( "ORDERKEY > ?" ) )
Assert . assertEquals ( result , record )
assertThat ( result , equalTo ( Result . NEUTRAL ) )
assertEquals ( "system." , sink . collectionPrefix )
assertThat ( "Issues detected in a valid provider" , validation . pass ( Report . WITHOUT_WARNING ) )
assertEquals ( "tcp://google.com:90" , saddr )
assertTrue ( field . isRequiredIndicatorVisible ( ) )
assertEquals ( child . getLabel ( ) , aggRootVertex . getLabel ( ) )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertThat ( actual . matches ( "z" ) , is ( true ) )
assertTrue ( revisions . isEmpty ( ) )
assertThat ( TimestampInterval . between ( start , end ) . contains ( PlainTimestamp . of ( 2014 , 5 , 14 , 0 , 0 , 1 ) ) , is ( false ) )
assertEquals ( expResult . trim ( ) , result . trim ( ) )
assertNotSame ( fixture , copy )
assertEquals ( "a b\\n" , found )
assertThat ( cache . size ( ) , is ( 0 ) )
assertEquals ( "10" , groupId )
assertEquals ( HttpStatusCode . NO_CONTENT . code , response . getStatus ( ) )
assertTrue ( calledExceptionHandler . isProtectedHandlerCalled ( ) )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm:ss" , result ) )
assertFalse ( "Does not accept a method that returns an object" , interceptor . accepts ( resourceMethodThatReturnsObject ) )
assertSame ( "Cloned instance" , Shutdown . INSTANCE , cloned )
assertEquals ( actual , expected )
Assert . areEqual ( IllegalArgumentException . class , ex . getClass ( ) , "出现异常" )
Assert . assertNotNull ( pi )
assertThat ( read ( format , written ) , contains ( "100" ) )
assertEquals ( statisticsService . getPostsOnForumCount ( ) , expectedCount )
assertObjectEquals ( "{}" , t )
assertNumEquals ( numOf ( Math . log ( 99d / 100 ) ) , varCriterion . calculate ( series , trade ) )
assertEquals ( asList ( new ErrorNotification ( "foo" ) ) , clientEvents . collect ( ) )
Assert . fail ( "Should not have succeeded" )
assertEquals ( expected , actual )
assertEquals ( cut . createTask ( beforeAssign ) , afterAssign )
assertFalse ( new PetFilter ( ) . dogsOnly ( payload ) )
Assert . assertTrue ( reflect . isSuperClass ( genericType ) )
assertEquals ( "om 12 minutter" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
Assert . assertEquals ( 0 , deviceFlowRegistry . getAllFlowDescriptors ( ) . size ( ) )
assertThat ( provider . getSubject ( axiom ) , is ( absent ) )
Assert . assertTrue ( "Cache size should be less than 2, but was " + datasource . getCacheSize ( ) , datasource . getCacheSize ( ) > 1 )
assertions . isNotEqualTo ( expected )
assertThat ( employees , equalTo ( empList ) )
assertSame ( listOfTodos , retList )
assertEquals ( numbers , this . model . getNumbers ( ) )
assertEquals ( branching , joining . getBranching ( ) )
assertEquals ( "HTTPMESSAGE OVER" , ret )
assertQuery ( true , query )
assertThatWritableIs ( true )
Assert . assertEquals ( expected , compoundWrite . apply ( baseNode ) )
assertEquals ( 2 , mm . readIndex ( b ) )
assertEquals ( expected , actual )
assertEquals ( 200 , status . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( true , classUnderTest . getWarnForUnsavedFileEdits ( ) )
assertThat ( helloWorld . helloWorld ( ) , is ( "HelloPrototype!" ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( 0L , bucket . nextRelease ( limit ) )
assertThat ( extractedLines . size ( ) , equalTo ( 0 ) )
assertEquals ( "\\r\\n" , mojo . getSchema ( ) . getLineSeparator ( ) )
Assert . fail ( "An acceptable behavior should be thrown." )
assertTrue ( stats . getReceivedMessageGaps ( ) . isEmpty ( ) )
Assert . assertEquals ( "hello" , e . hello ( ) )
Assert . assertEquals ( dialect . getURL ( conn ) , "jdbc:impala://joe/default;AuthMech=2" )
assertEquals ( expResult , result )
assertThat ( request . getLocalAuthorizationList ( ) , equalTo ( list ) )
assertThat ( testColor . name + " on " + serialized , base , is ( deserialized . getColor ( "color" ) ) )
assertionHelper . assertIrodsFileMatchesLocalFileChecksum ( getIRODSFile . getAbsolutePath ( ) , getLocalFile . getAbsolutePath ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , secondaryAccount )
assertThat ( isValid , is ( false ) )
assertEquals ( false , log . hasEvents ( ) )
Assert . assertTrue ( rep . getAligners ( ) . isEmpty ( ) )
Assert . assertTrue ( errors . hasFieldErrors ( ) )
assertEquals ( "index present" , index , builder . unvalidatedAIS ( ) . getTable ( SCHEMA , T1_NAME ) . getIndex ( "x" ) )
assertEquals ( "void f(void* target) {\\n" + "    ((void (*)(void)) target)();\\n" + "}\\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType
assertEquals ( "message" , exception . getMessage ( ) )
assertThat ( responseStep . callResponse . getResult ( ) . getResults ( ) , containsInAnyOrder ( s1 , s2 ) )
assertXpathExists ( "//h2[not(@id)][text() = 'My Title']" , html )
assertThat ( converter . convert ( value , Integer . class ) , nullValue ( ) )
assertBatchMixed ( new FailingWorkerListener ( ) , WorkerEvent . values ( ) )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertEquals ( "id should be 1" , new Long ( 1 ) , read . getId ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( IntraDayDate . toList ( days ) , delimitedBy ( start , end ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( "The override branch name is incorrect" , "override-branch" , scm . getOverrideBranchName ( ) )
assertEquals ( true , result )
assertEquals ( read ( pom ) , "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n" + "<project>\\n" + "    <modelVersion>4.0.0</modelVersion>\\n" + "    <artifactId>
assertEquals ( 23 , test . convertToBase7 ( 42 ) )
Assert . assertEquals ( FastMath . PI , solver . solve ( 100 , f , 3.0 , 3.2 , 3.1 ) , solver . getAbsoluteAccuracy ( ) )
assertTrue ( quota . check ( blobStore ) . isViolation ( ) )
assertEquals ( expected , expression . toString ( ) )
Assert . assertEquals ( "John Doe" , result . get ( "name" ) )
assertThat ( domain . getServer ( "server1" , "cluster1" ) . shouldStart ( 0 ) , is ( true ) )
assertNotNull ( version )
assertEquals ( formatted , "235.55100 seconds" )
assertNull ( entity )
assertDegenerate ( scan )
assertEquals ( "Expected 10 results!" , 10 , n )
assertTrue ( txaction . isATransfer ( ) )
Assert . assertEquals ( 11 , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) . intValue ( ) )
assertFalse ( strings . hasNext ( ) )
assertThat ( found , hasSize ( 0 ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertNotNull ( mjd )
Assert . assertEquals ( 0.8683 , pValue , 0.09 )
assertEquals ( expected , getString ( TestOrderByImpl . example ( ) ) )
assertNull ( object2 . getToArtist ( ) )
assertEquals ( "TestGetFilterQueryForKey 0" , "key=value" , entityTypeToFilterQueryService . getFilterQueryForKey ( "key" ) )
assertEquals ( urlWithPathAndParam , urlString )
Assert . assertEquals ( 2 , collector . getReceivedTuples ( ) . size ( ) )
assertEquals ( binding ( vars ( "Value" ) , "\\"Joseph\\"" , "\\"Joe\\"" , "\\"Smith\\"" ) , removePseudoVars ( readCSV ( csv , true , ',' , '"' ) . next ( ) ) )
assertTrue ( rank < 2 )
assertMockEndpointsSatisfied ( )
TestUtil . assertResult ( result )
assertVisitorSatisfied ( )
assertTrue ( initSuccessful )
assertEquals ( "date must not be changed in cleanup" , copy , monthView . getSelectionDate ( ) )
assertThat ( exitValue , is ( 0 ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 1 , testDescriptor . getChildren ( ) . size ( ) )
assertEquals ( "test" , wrap . getWrapped ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( true , retval )
assertEquals ( expResult , result )
assertThat ( sql , equalTo ( "update UserInfo set name = case id when 77 then '����' when 88 then name when 99 then '姊�' else name end,age = case id when 77 then '18'
Assert . fail ( "NullPointerException should have been thrown" )
assertFalse ( controller . isLoggedOn ( ) )
assertEquals ( OperationStatus . COMPLETE , responseBuilder . buildResponse ( ) . getStatus ( ) )
strings . assertStartsWith ( mock ( Description . class ) , null , "Yoda" )
assertThat ( content . get ( 0 ) , containsString ( "unknownAction" ) )
assertEquals ( 0 , mockResult . included ( "totalPostReports" ) )
assertMockEndpointsSatisfied ( )
context . assertIsSatisfied ( )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "(a + b).toLowerCase()" , str )
assertXMLEqual ( expectedDoc , modifiedDoc )
assertEquals ( clob , result )
assertEquals ( 1 , rpt . size ( ) )
Assert . fail ( "get non-existent object metadata should fail" )
assertSame ( "Should be same JClass" , cm . ref ( "org.test.ClassNotOnClasspath" ) , cm . ref ( "org.test.ClassNotOnClasspath" ) )
assertEquals ( "LIMIT 5 RETURNING foo" , statement . toString ( ) )
Assert . assertEquals ( 1 , jobs . size ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertFalse ( Cells . isEmpty ( cell ) )
assertTrue ( repository . getFeatureState ( DummyFeature . TEST ) . isEnabled ( ) )
assertThat ( currentTimeString , equalTo ( LocalDateTime . now ( ) . format ( CURRENT_DATE_STRING_FORMATTER ) ) )
Assert . assertFalse ( context . getResult ( ) )
assertNotNull ( generator )
assertMockEndpointsSatisfied ( )
assertEquals ( original , restored )
assertThat ( cause . getCause ( ) , instanceOf ( IllegalStateException . class ) )
assertEquals ( 2 , names . size ( ) )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
assertEquals ( ( long ) 8 , result . getLongValue ( ) )
assertTrue ( cygnusGroupingRules . getSyntaxErrors ( ) != 0 )
assertOutMXMLPostProcess ( outTemplate . replaceAll ( "AppName" , appName ) , true )
assertThat ( calvalusDataInputs . toString ( ) , equalTo ( "calvalus.wps.remote.ref : 1738ad7b-534e-4aca-9861-b26fb9c0f983\\n" + "minDate
Assert . assertEquals ( 0 , resultList . size ( ) )
assertFalse ( registryService . doesKeyExist ( "HKLM" , "" ) )
assertThat ( fe , notNullValue ( ) )
Assert . assertEquals ( 4 , visitor . getBindVarConditions ( ) . size ( ) )
Assert . assertTrue ( jsonEqual ( expResult , EntityFormatter . writeEntity ( entity ) ) )
assertEquals ( "TextBuilder String Is 1" , _textBuilder . toString ( ) , "1" )
assertEquals ( 2 , cache . listPrivileges ( null , null , null , null ) . size ( ) )
Assert . assertEquals ( SpringContainer . class , container . context . getBean ( "container" ) . getClass ( ) )
Assert . assertTrue ( passed )
assertThat ( collection . documentExists ( externalDoc . getKey ( ) , BaseDocument . class , new DocumentReadOptions ( ) . streamTransactionId ( tx . getId ( ) ) ) , is ( false ) )
assertThat ( sentRequest ( "http://127.0.0.1:19000/api/job/trigger" , "POST" , "test_job" ) , is ( 500 ) )
assertToken ( expectedTokens , select ( jcas , Token . class ) )
assertEquals ( "No tests ran." , content )
assertThat ( evaluator . evaluate ( corc ) , is ( TruthValue . NO ) )
Assert . assertEquals ( expected , actual )
assertEquals ( 0 , maxConsequetiveOnes . findMaxConsecutiveOnes ( numbers ) )
assertEquals ( 4 , context . select ( q1 ) . size ( ) )
assertEquals ( 190 , res . cause ( ) . code ( ) )
assertTrue ( possibleFields . contains ( "STRING:connection.client.user" , "IP:connection.client.host.last" ) )
assertEquals ( "Checking " + fqanWithGroup , expectedString , fqanWithGroup . getGroup ( ) )
assertSet ( queryReturns ( kate , ashley ) , whenFilteringBy ( IN , Arrays . asList ( "Kate" , "Ashley" ) ) )
assertEquals ( t , new LeadActivityRecord ( ) . toString ( ) )
assertThat ( isEqual , is ( true ) )
assertNotNull ( response )
assertThat ( "bob[5].fred[2].george" , equalTo ( m . m_fieldPath ) )
assertThat ( aggregate . getTotalHours ( ) , equalTo ( 12 ) )
assertEquals ( "975X" , agencia . toString ( ) )
Assert . assertEquals ( input . canBeAnything , output . canBeAnything )
assertNull ( System . getProperty ( PROPERTY_NAME_SANDBOX_NAME ) )
assertThat ( resultIds , containsInAnyOrder ( "DiagnosticReport/DR" , "Observation/parentObs" , "Observation/childObs" ) )
Assert . assertEquals ( MessageFormatUtil . format ( com . itextpdf . io . IOException . _1IsNotAnAfmOrPfmFontFile ) , message )
assertEquals ( 5. , Solutions . bestOf ( solutions ) . getCost ( ) , 0.01 )
Assert . assertFalse ( "Exception occurred" , isElementPresent ( NotificationElement . class ) )
assertEquals ( ".pen {background-color:red} {* some incorrect block *}" , cascadingStyleSheet . getCSSAsString ( ) )
assertTrue ( "Logger should be registered" , ops . exists ( TEST_LOGGER_ADDRESS ) )
assertEquals ( list , actual )
assertEquals ( "{\\"d\\":{\\"EntryDate\\":\\"\\\\/Date(-42)\\\\/\\"}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( "5:10000000000:1.5:3.5:zzz:true" , res . join ( ) )
assertTrue ( "Oh no! No mapped object! " , store . size ( ) > 0 )
Assert . assertTrue ( isEqual ( distance , 1.0 ) )
assertThat ( chksumChannel . getChecksums ( ) , contains ( expectedChecksum ) )
assertThat ( waggleDanceConfiguration . getThriftServerRequestTimeout ( ) , is ( timeout ) )
Assert . fail ( )
assertThat ( schema , containsString ( "}\\n\\ntype TypeMutations {\\n" + "  create(uri: String! entity: TypeCreateInput!): Type @createMutation(dataSet: \\"rootType\\" typeUri: \\"" + TYPE_URI + "\\")
assertNotNull ( clz )
assertThat ( iterationState . next ( ) . getChangeType ( ) , is ( ASSERTED ) )
assertThat ( result . getPayload ( ) , is ( equalTo ( JSON_STRING_RECORD ) ) )
assertEquals ( 2 , list . size ( ) )
assertEquals ( "High" , filterResult . getValue ( ) )
Assert . assertEquals ( ecohImpl . authenticate ( echoInfo ) . getMessage ( ) , response . getMessage ( ) )
assertThat ( collect ( userDAO . find ( ) . asList ( ) , on ( UserMongo . class ) . getId ( ) ) , contains ( user1 . getId ( ) ) )
assertEquals ( 0 , record . toString ( ) . length ( ) )
assertEquals ( expected , actual )
assertNotEquals ( firstId , secondId )
assertTrue ( v1 . getVehicleTypeIdentifier ( ) . equals ( v2 . getVehicleTypeIdentifier ( ) ) )
assertEquals ( "<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>" , StringUtil . normaliseWhitespace ( doc . outerHtml ( ) ) )
assertEquals ( "" , storage . read ( "no pain" ) )
assertFalse ( problem )
assertEquals ( new MilliTimeItem ( 1 , 59 , 59 , 999 ) , retr )
Assert . assertEquals ( "content" , result . getBody ( ) )
assertThat ( annotation , notNullValue ( ) )
Assert . assertEquals ( expected , testIndex . findConc ( "[pos = 'adj' | lemma = '.*u.*']" ) )
assertEquals ( 10 , all . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertEquals ( err , "File, 'EasyMock for class java.io.File' cannot be written to." )
assertTrue ( "Failed authentication was not logged" , loggedFailedAuth ( AUDIT_LOG_FILE , UNKNOWN_USER ) )
assertTrue ( response . isSuccess ( ) )
assertEquals ( "Redo (Ctrl-Z)" , shortDescription )
assertContains ( e . getMessage ( ) , "'last'" )
assertThat ( kvStore . getCollectionOrDefault ( "field" , Collections . emptyList ( ) ) , equalTo ( value ) )
assertThat ( dog . name , equalTo ( "Brutus" ) )
assertThat ( termMap . getConceptReferenceTerm ( ) . getUuid ( ) , is ( RestTestConstants1_9 . CONCEPT_REFERENCE_TERM2_UUID ) )
assertThat ( isValid , is ( true ) )
assertEquals ( r , groundTruthRA . get ( ) . get ( ) )
assertThat ( matcherPosition . createContent ( ) , equalTo ( "<$PAYLOADATTR$>\\n" + "<$18>\\n" + "<$33>\\n" + "</$18>\\n" ) )
assertTrue ( result . equals ( expected ) )
assertEquals ( "Yahya and friends etc. went to the lawn and to play." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertEqualsWithoutWhiteSpaces ( "square([1,1],center=true);" , actual )
assertNotNull ( appInitializer . getServletConfigClasses ( ) )
assertThat ( arguments . resolve ( null , null ) , contains ( "1" , "3" ) )
assertEquals ( expected , transformed )
assertThat ( chksumChannel . getChecksums ( ) , empty ( ) )
assertThat ( PlainDate . of ( 2000 , 12 , 2 ) . with ( model . weekOfMonth ( ) . incremented ( ) ) , is ( PlainDate . of ( 2000 , 12 , 9 ) ) )
assertTrue ( component . getText ( ) . startsWith ( "Widgetset 'com.vaadin.tests.widgetset.server.MissingFromDefaultWidgetsetComponent.'" ) )
assertThat ( tester . count ( "Hoge" ) , is ( 1 ) )
assertEquals ( "Hello world!" , response )
assertEquals ( "http://bar.org/Profile/PatientWithFullProfile" , def . getResourceProfile ( "http://foo.org/fhir" ) )
assertEquals ( "cfquery" , parserTag . getName ( ) )
assertThat ( hijri . with ( CommonElements . weekOfMonth ( HijriCalendar . family ( ) , model ) . decremented ( ) ) , is ( hijri . with ( HijriCalendar . DAY_OF_MONTH , 4 ) ) )
assertThat ( userPermissions , hasItem ( permission ) )
AssertJUnit . assertEquals ( a0 , a1 , 0.001 )
this . assertGet ( "policytypes?grouped=angularSelect" , "entitytypes/policytypes/allPolicies.json" )
assertEquals ( 0 , imports . size ( ) )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "3.8 million litres of water" , 3.8E12 , "m^2" , 3.8E14 , "m^2" , "water" ) )
assertEquals ( 7 , classUnderTest . getNumDiagonalSquaresAvailable ( Position . d5 ) )
assertEquals ( PRICE , b . getPrice ( ) )
Assert . assertEquals ( dataset . getName ( ) + ", parameter #" + i , expected [ i ] , actual , 1e-6 * expected [ i ] )
assertThat ( readBytes ( testee , 4 ) , is ( "" ) )
assertEquals ( "png" , sink . preferredOutputFormatName ( ) )
assertFalse ( resolved )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , Double . valueOf ( "12.3" ) ) )
assertThat ( configuration . getBrowserCapabilities ( ) , is ( "mockdrone" ) )
Assert . assertFalse ( handler . managementOperation ( null , request , response ) )
Assert . assertEquals ( 1 , result . intValue ( ) )
assertError ( "boundaryEnd" , "myErrorCode" )
Assert . assertEquals ( 0 , an . analyze ( new CandidateNode ( new CandidateRule ( "test" , rule ) , nnode ) , results ) . size ( ) )
assertFalse ( wouldFire )
assertUnusedTagInSetTaggingRequest ( setTaggingRequest , String . valueOf ( true ) )
assertCardType ( creditCard , type )
assertNull ( resource )
assertThat ( supplier . authForImage ( image ) , nullValue ( ) )
assertThat ( actual , is ( expected ) )
assertThat ( meta . filter ( filter ) , is ( meta ) )
Assert . assertEquals ( "Failure expected the name to be the same" , "ChatroomDeleteDTO" , MHRDTO . getDTOName ( ) )
assertArrayEquals ( new String [ ] { "*" , "1" , "2" , "3" , "a" , "b" } , list . toArray ( new String [ 0 ] ) )
Assert . assertEquals ( pullRequest , parsedPullRequest )
assertionHelper . assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile , returnCompareLocalFile )
assertTrue ( "The document should be saved." , getDocument ( ) . getId ( ) != null )
assertThat ( parameters . getOntologyId ( ) , is ( equalTo ( "00000000-0000-0000-0000-000000000000" ) ) )
assertEquals ( "Names weren't equal." , organizationResponse . object . getId ( ) , teamId )
Assert . assertEquals ( "Images are not similar enough." , 1.0 , sim , 0.01 )
assertThat ( result . statusCode , is ( Response . OK ) )
Assert . assertEquals ( first , sqlEx . getCause ( ) )
assertArrayEquals ( intData , getImgAsInts ( array2 ) )
assertEquals ( density , 2.5 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff31_" ) )
assertEquals ( 1 , rules . size ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( value , ( Double ) subject . value ( ) , 0.01 )
assertions . containsKey ( key )
assertThat ( command . getMaximumTimeMilliseconds ( ) , is ( value ) )
assertThat ( component . execute ( ) , is ( inputTuples ) )
arrays . assertContains ( description , new short [ 1 ] , new short [ 0 ] )
assertEquals ( expectedCsv . get ( 0 ) . getSchema ( ) , schema )
Assert . fail ( "Xfdf files are not equal" )
assertThat ( CalendarWeek . from ( cw . toProlepticNumber ( ) ) , is ( cw ) )
assertNotNull ( attrs . getTable ( "x" ) )
assertEquals ( ius , st )
assertNotEquals ( circle1 , circle2 )
Assert . assertEquals ( expResult , result )
assertEquals ( "http://localhost:8080/api/v1/key/123456/agency/1/command/predictions/?rs=16E|6010&rs=52|6010&rs=53|6010&rs=54|6010&format=json
assertTrue ( link . getDeterministicLinks ( ) . contains ( link ) )
Assert . assertEquals ( PUBLIC_VISIBILITY , this . component . getVisibility ( this . entity1 ) )
assertTrue ( thrown )
assertEquals ( 999 , spanEvent . getSequence ( ) )
assertEquals ( e . getFreeVars ( ) , "i" , "b" )
assertEquals ( expected , contentSummary . toString ( false , true ) )
Assert . assertNull ( "Entity should be null" , result )
assertEquals ( Result . STOP , and . apply ( pathData , - 1 ) )
assertThat ( userInbox . size ( ) , greaterThan ( 0 ) )
assertResultSet ( res )
assertThat ( prop . satisfiesConstraints ( value ) , is ( false ) )
assertTokenInfo ( info , userId )
Assert . assertEquals ( "" , FreeMarkerUtils . format ( tpl , args ) )
assertNotNull ( resource )
Assert . assertTrue ( result )
assertEquals ( xa , found )
assertNotNull ( exception )
assertThat ( formatter . format ( PlainDate . of ( 1752 , 9 , 13 ) ) , is ( "Thursday, 1752-13" ) )
assertArrayEquals ( exp , r )
Assert . assertFalse ( pg1 . intersects ( pg2 ) )
Assert . assertEquals ( "Delete_rows_event_old" , actual )
assertEquals ( 0 , content . refCnt ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expectedCssString , rewriteCss ( mergedFile ) )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
Assert . assertEquals ( "SELECT SECOND('10:05:03');" , text )
assertEquals ( 0.8 , val , 1e-5 )
Assert . assertEquals ( 24 , concept . getId ( ) . intValue ( ) )
Assert . fail ( "NullPointerException should have been thrown" )
assertEquals ( 0 , arr . length )
assertEquals ( 0 , r1 . compareTo ( r2 ) )
Assert . isTrue ( true )
assertThat ( getConfigurationOfDmnEngine ( ) . getScriptEngineResolver ( ) , is ( scriptEngineResolver ) )
assertFalse ( matches )
assertThat ( response , containsString ( "date:2019 11:35" ) )
assertThat ( scope1 , is ( not ( equalTo ( scope1 ) ) ) )
Assert . assertEquals ( found . size ( ) , 3 )
assertEquals ( g1 , g2 )
Assert . assertTrue ( true )
assertNotNull ( result )
Assert . assertEquals ( Integer . toHexString ( 42 ) , sb . toString ( ) )
assertTrue ( n1 . equals ( n2 ) )
Assert . assertEquals ( clazz , orderType . getJavaClass ( ) )
assertEquals ( expectedFeatures , tokens . get ( 0 ) . getAllFeatures ( ) )
assertEquals ( "Jersey/2.0-m09 (HttpUrlConnection 1.7.0_04) from the server" , response )
Assert . assertEquals ( "number emitted tuples" , numtuples , itemSink . count )
assertEquals ( expected , actual )
assertTrue ( counter . get ( ) > 0 )
arrays . assertStartsWith ( description , null , new short [ 2 ] )
assertNotNull ( kieModule )
assertPlanMatches ( expected )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertEquals ( 2 , provider . getFilters ( ) . length )
Assert . assertEquals ( 201 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertEquals ( gen . generateInchi ( ac ) . getInChI ( ) , "InChI=1S/Cl/i1" )
assertEquals ( expResult , result )
Assert . assertEquals ( "Expected null result" , null , value )
assertEquals ( 2 , builder . build ( ) . getElementValues ( ) . size ( ) )
assertFalse ( or . isDefined ( ) )
assertions . containsSequence ( 6 , 6 , 8 , 10 , 10 )
assertEquals ( Lists . newArrayList ( DefaultDistance . of ( 400 , DistanceUnit . METERS ) , DefaultDistance . of ( 1D / 2 , DistanceUnit . MILES ) ) , Lists . newArrayList ( Distances . distanceIterator ( upto ) ) )
assertThat ( tuple . getIntegerOrDefault ( "field" , 2 ) , equalTo ( 1 ) )
assertEquals ( NON_ASCII_UTF8_STRING , result )
assertThat ( wrapper . getGraph ( ) . traversal ( ) . E ( ) . has ( "tim_id" , rel1Id . toString ( ) ) . count ( ) . next ( ) , is ( 1L ) )
assertTrue ( "Focus should be in the Grid" , getFocusedElement ( ) . getAttribute ( "class" ) . contains ( "v-grid" ) )
assertEquals ( userId , action . getUserId ( ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertEquals ( "SnakeYAML" , yamlParsers . get ( "JYaml" ) , "Java 5 / YAML 1.1" )
assertNull ( result )
Assert . assertNull ( result )
assertThat ( list . strList , hasSize ( 2 ) )
assertEquals ( newArrayList ( "bar1" , "bar2" ) , response . getHeaderString ( "foo" ) )
Assert . assertFalse ( isOk )
assertTrue ( service . hasProperty ( "test" ) )
assertThat ( codes , empty ( ) )
assertThat ( msg . data ( ) , is ( new byte [ ] { 11 , 12 } ) )
assertFalse ( valid )
Assert . assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getCode ( ) )
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
assertEquals ( "_all/_cache?bloom=true&fieldData=false" , clearCache . getURI ( ElasticsearchVersion . UNKNOWN ) )
Assert . assertEquals ( state . IDLE , state )
assertThat ( list . size ( ) , is ( sizeBeforeAdding + 1 ) )
Assert . assertTrue ( diff < 1 )
assertEquals ( "The P42 Property" , withLabel . getString ( "name" ) )
assertNotNull ( actionOut . getData ( ) )
assertNull ( x1 )
assertEquals ( "The first state on third page is not correct" , FIRST_STATE_THIRD_PAGE , actual )
assertEquals ( expected , result )
assertThat ( rollup . isFreshEnough ( ) , is ( false ) )
assertEquals ( p1 , p2 )
Assert . assertEquals ( "true" , p . getProperty ( PseudoAuthenticationHandler . ANONYMOUS_ALLOWED ) )
assertThat ( mentions , hasItem ( mentionedEntity ( 0 , mention . length ( ) , EntityType . ANNOTATION_PROPERTY , iri ) ) )
assertObject ( list , gtype )
Assert . assertEquals ( 8 , service . getSalt ( ) . length ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( 404 , response . getStatus ( ) )
assertNull ( parsedArg )
assertTrue ( s . getName ( ) . equals ( "cleaning" ) )
assertTrue ( "PointFormats setter is not working correctly" , delegate . getPointFormats ( ) . equals ( supportedPointFormats ) )
assertTrue ( value . isReplaceableBy ( 99L , 11 , ComparableComparator . INSTANCE ) )
assertTrue ( runtime . getSteps ( ) . isEmpty ( ) )
assertEquals ( "HELLO" , sb . toAnsi ( ) )
assertOut ( "a += b" )
assertThat ( s , is ( "1970-01-01 00:00 +0200" ) )
Assert . assertArrayEquals ( "Streams are not equal" , expected , actual )
this . assertScriptReturnsTrue ( "" + "String s = \\"a\\";\\n" + "\\n" + "switch (s) {\\n" + "case \\"a\\": case \\"b\\": case \\"c\\":\\n" + "    return
assertEquals ( expected , actual )
assertTrue ( verifyProps ( a , LIST_A ) )
assertThat ( xPath , is ( "(.//*[@id = 'myID']//*[self::text() = 'text']" ) )
assertThat ( e , instanceOf ( MyException . class ) )
assertEquals ( "Unsupported parameter test for pwd." , result )
assertEquals ( expected , result )
assertEquals ( 0 , errors . size ( ) )
assertEquals ( 0 , out . size ( ) )
assertEquals ( "subName" , expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
Assert . assertEquals ( "Missing component id" , MicroPipelineValidationResult . MISSING_COMPONENT_ID , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , Collections . < String > emptySet ( ) ) )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertThat ( matcher . matches ( "<some xml=\\"true\\" />" ) , is ( true ) )
assertTrue ( "No keyword movies found" , ! result . isEmpty ( ) )
Assert . assertEquals ( result , entry . getValue ( ) )
assertTrue ( pth . exists ( ) )
Assert . assertEquals ( "Delete_rows_event_old" , actual )
assertEquals ( SwitchingProtocols . MESSAGE , ri . getDescription ( ) )
assertEquals ( "2h2m2.500s" , s )
assertEquals ( null + '@' + DOMAIN , bareJID )
Assert . assertFalse ( "Config contains null" , sw . toString ( ) . contains ( "null" ) )
Assert . assertTrue ( provider . isValidField ( content , field ) )
assertTrue ( line . contains ( "2 live servers, 0 dead servers" ) )
assertEquals ( 0 , changes . getChanges ( ) . size ( ) )
assertFalse ( CommitUtils . isMergedInto ( "test_branch" , MASTER , repo ) )
assertDestinationFileContentIsMultiPartContent ( )
assertEquals ( 1 , callCnt . get ( ) )
assertEquals ( "INSERT INTO mycatalog.mytable (col3) VALUES (nextval('myschema.my_seq'))" , theSql )
Assert . assertFalse ( "Metrics should be registered" , this . metricRegistry . getMeters ( ) . isEmpty ( ) )
Assert . assertEquals ( aString , sut . getInstance ( ) )
Assert . assertNotNull ( tasks )
Assert . assertEquals ( 16 * iterations , lockedCounter . get ( ) )
assertEquals ( "{\\"value\\":\\"bar\\"}" , json . toJSON ( ) . toString ( ) )
assertNull ( factory . getBaseSkin ( facesContext ) . getParameter ( facesContext , Skin . GENERAL_BACKGROUND_COLOR ) )
assertEquals ( map1 , map2 )
Assert . assertFalse ( fastMergerDecisionMaker . isFastMergePossible ( fileMetadata ) )
assertThat ( e . getStatus ( ) , equalTo ( Status . NOT_FOUND ) )
assertTrue ( "Sun implementation took " + sunGap + " millisseconds and default implemetation took " + defaultGap + " millisseconds." , sunGap < defaultGap )
assertThat ( rowsAffected , is ( 1 ) )
Assert . assertTrue ( "Should have 0 event" , events . size ( ) == 0 )
assertEquals ( String . format ( "INSERT INTO %s.%s (timestamp) VALUES (?,?)" , STREAMING . STREAMING_KEYSPACE_NAME , TABLE ) , insert . toString ( ) )
assertEquals ( "Faire action sur \\\\*([^\\\\*]*)\\\\*" , descriptor . regex )
assertEquals ( "{a1:'v1',a2:'123',a4:'',b1:'true',b2:'123',b3:'null',c1:'v1',c2:'123',c4:''}" , r )
